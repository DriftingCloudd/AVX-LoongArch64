
target/kernel:     file format elf64-loongarch


Disassembly of section .text:

9000000008000000 <_entry>:
9000000008000000:	0320000c 	lu52i.d	$r12,$r0,-2048(0x800)
9000000008000004:	0406002c 	csrwr	$r12,0x180
9000000008000008:	0380440c 	ori	$r12,$r0,0x11
900000000800000c:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000010:	0406042c 	csrwr	$r12,0x181
9000000008000014:	0402202c 	csrwr	$r12,0x88
9000000008000018:	0382c00c 	ori	$r12,$r0,0xb0
900000000800001c:	0400002c 	csrwr	$r12,0x0
9000000008000020:	0015000c 	move	$r12,$r0
9000000008000024:	0400042c 	csrwr	$r12,0x1
9000000008000028:	0015000c 	move	$r12,$r0
900000000800002c:	0400082c 	csrwr	$r12,0x2
9000000008000030:	1c000043 	pcaddu12i	$r3,2(0x2)
9000000008000034:	28ff8063 	ld.d	$r3,$r3,-32(0xfe0)
9000000008000038:	14000024 	lu12i.w	$r4,1(0x1)
900000000800003c:	04008005 	csrrd	$r5,0x20
9000000008000040:	02c000a2 	addi.d	$r2,$r5,0
9000000008000044:	02c004a5 	addi.d	$r5,$r5,1(0x1)
9000000008000048:	001d9484 	mul.d	$r4,$r4,$r5
900000000800004c:	00109063 	add.d	$r3,$r3,$r4
9000000008000050:	540c1400 	bl	3092(0xc14) # 9000000008000c64 <main>

9000000008000054 <spin>:
9000000008000054:	50000000 	b	0 # 9000000008000054 <spin>

9000000008000058 <printstring>:
static struct {
  struct spinlock lock;
  int locking;
} pr;

void printstring(const char *s) {
9000000008000058:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800005c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000060:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000064:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000068:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800006c:	00150097 	move	$r23,$r4
  while (*s) {
9000000008000070:	28000084 	ld.b	$r4,$r4,0
9000000008000074:	40001480 	beqz	$r4,20(0x14) # 9000000008000088 <printstring+0x30>
    consputc(*s++);
9000000008000078:	02c006f7 	addi.d	$r23,$r23,1(0x1)
900000000800007c:	540cb800 	bl	3256(0xcb8) # 9000000008000d34 <consputc>
  while (*s) {
9000000008000080:	280002e4 	ld.b	$r4,$r23,0
9000000008000084:	47fff49f 	bnez	$r4,-12(0x7ffff4) # 9000000008000078 <printstring+0x20>
  }
}
9000000008000088:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800008c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000090:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000094:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000098:	4c000020 	jirl	$r0,$r1,0

900000000800009c <printint>:

void printint(int xx, int base, int sign) {
900000000800009c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080000a0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080000a4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080000a8:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080000ac:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080000b0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  char buf[16];
  int i;
  uint x;

  if (sign && (sign = xx < 0))
90000000080000b4:	400008c0 	beqz	$r6,8(0x8) # 90000000080000bc <printint+0x20>
90000000080000b8:	60001c80 	blt	$r4,$r0,28(0x1c) # 90000000080000d4 <printint+0x38>
    x = -xx;
  else
    x = xx;
90000000080000bc:	00150011 	move	$r17,$r0
90000000080000c0:	02ff42cd 	addi.d	$r13,$r22,-48(0xfd0)

  i = 0;
90000000080000c4:	0015000f 	move	$r15,$r0
  do {
    buf[i++] = digits[x % base];
90000000080000c8:	1c000030 	pcaddu12i	$r16,1(0x1)
90000000080000cc:	02fe6210 	addi.d	$r16,$r16,-104(0xf98)
90000000080000d0:	50001800 	b	24(0x18) # 90000000080000e8 <printint+0x4c>
    x = -xx;
90000000080000d4:	00111004 	sub.w	$r4,$r0,$r4
  if (sign && (sign = xx < 0))
90000000080000d8:	02800411 	addi.w	$r17,$r0,1(0x1)
    x = -xx;
90000000080000dc:	53ffe7ff 	b	-28(0xfffffe4) # 90000000080000c0 <printint+0x24>
  } while ((x /= base) != 0);
90000000080000e0:	00150184 	move	$r4,$r12
    buf[i++] = digits[x % base];
90000000080000e4:	001501cf 	move	$r15,$r14
90000000080000e8:	028005ee 	addi.w	$r14,$r15,1(0x1)
90000000080000ec:	0021948c 	mod.wu	$r12,$r4,$r5
90000000080000f0:	5c0008a0 	bne	$r5,$r0,8(0x8) # 90000000080000f8 <printint+0x5c>
90000000080000f4:	002a0007 	break	0x7
90000000080000f8:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000080000fc:	0010b20c 	add.d	$r12,$r16,$r12
9000000008000100:	2a00018c 	ld.bu	$r12,$r12,0
9000000008000104:	290001ac 	st.b	$r12,$r13,0
  } while ((x /= base) != 0);
9000000008000108:	0021148c 	div.wu	$r12,$r4,$r5
900000000800010c:	5c0008a0 	bne	$r5,$r0,8(0x8) # 9000000008000114 <printint+0x78>
9000000008000110:	002a0007 	break	0x7
9000000008000114:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008000118:	6fffc885 	bgeu	$r4,$r5,-56(0x3ffc8) # 90000000080000e0 <printint+0x44>

  if (sign)
900000000800011c:	40001a20 	beqz	$r17,24(0x18) # 9000000008000134 <printint+0x98>
    buf[i++] = '-';
9000000008000120:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000008000124:	0010b98e 	add.d	$r14,$r12,$r14
9000000008000128:	0280b40c 	addi.w	$r12,$r0,45(0x2d)
900000000800012c:	293fc1cc 	st.b	$r12,$r14,-16(0xff0)
9000000008000130:	028009ee 	addi.w	$r14,$r15,2(0x2)

  while (--i >= 0)
9000000008000134:	6400340e 	bge	$r0,$r14,52(0x34) # 9000000008000168 <printint+0xcc>
9000000008000138:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
900000000800013c:	0010b997 	add.d	$r23,$r12,$r14
9000000008000140:	02ffbef7 	addi.d	$r23,$r23,-17(0xfef)
9000000008000144:	02ff3ad8 	addi.d	$r24,$r22,-50(0xfce)
9000000008000148:	0010bb18 	add.d	$r24,$r24,$r14
900000000800014c:	02bffdce 	addi.w	$r14,$r14,-1(0xfff)
9000000008000150:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
9000000008000154:	0011bb18 	sub.d	$r24,$r24,$r14
    consputc(buf[i]);
9000000008000158:	280002e4 	ld.b	$r4,$r23,0
900000000800015c:	540bd800 	bl	3032(0xbd8) # 9000000008000d34 <consputc>
9000000008000160:	02fffef7 	addi.d	$r23,$r23,-1(0xfff)
  while (--i >= 0)
9000000008000164:	5ffff6f8 	bne	$r23,$r24,-12(0x3fff4) # 9000000008000158 <printint+0xbc>
}
9000000008000168:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800016c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008000170:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008000174:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008000178:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800017c:	4c000020 	jirl	$r0,$r1,0

9000000008000180 <backtrace>:
  panicked = 1; // freeze uart output from other CPUs
  for (;;)
    ;
}

void backtrace() {
9000000008000180:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008000184:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008000188:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800018c:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008000190:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008000194:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008000198:	02c0c076 	addi.d	$r22,$r3,48(0x30)

static inline uint64
r_fp()
{
  uint64 x;
  asm volatile("addi.d %0, $fp, 0" : "=r" (x) );
900000000800019c:	02c002d8 	addi.d	$r24,$r22,0
  uint64 *fp = (uint64 *)r_fp();
90000000080001a0:	00150317 	move	$r23,$r24
  uint64 *bottom = (uint64 *)PGROUNDUP((uint64)fp);
90000000080001a4:	03bffc0c 	ori	$r12,$r0,0xfff
90000000080001a8:	0010b318 	add.d	$r24,$r24,$r12
90000000080001ac:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
90000000080001b0:	0014b318 	and	$r24,$r24,$r12
  printf("backtrace:\n");   //这个地方原本使用的是serious_print()
90000000080001b4:	1c000024 	pcaddu12i	$r4,1(0x1)
90000000080001b8:	02f93084 	addi.d	$r4,$r4,-436(0xe4c)
90000000080001bc:	5400b400 	bl	180(0xb4) # 9000000008000270 <printf>
  while (fp < bottom) {
90000000080001c0:	6c0026f8 	bgeu	$r23,$r24,36(0x24) # 90000000080001e4 <backtrace+0x64>
    uint64 ra = *(fp - 1);
    printf("%p\n", ra - 4);     //同上
90000000080001c4:	1c000039 	pcaddu12i	$r25,1(0x1)
90000000080001c8:	02f93339 	addi.d	$r25,$r25,-436(0xe4c)
90000000080001cc:	28ffe2e5 	ld.d	$r5,$r23,-8(0xff8)
90000000080001d0:	02fff0a5 	addi.d	$r5,$r5,-4(0xffc)
90000000080001d4:	00150324 	move	$r4,$r25
90000000080001d8:	54009800 	bl	152(0x98) # 9000000008000270 <printf>
    fp = (uint64 *)*(fp - 2);
90000000080001dc:	28ffc2f7 	ld.d	$r23,$r23,-16(0xff0)
  while (fp < bottom) {
90000000080001e0:	6bffeef8 	bltu	$r23,$r24,-20(0x3ffec) # 90000000080001cc <backtrace+0x4c>
  }
}
90000000080001e4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080001e8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080001ec:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080001f0:	28c04078 	ld.d	$r24,$r3,16(0x10)
90000000080001f4:	28c02079 	ld.d	$r25,$r3,8(0x8)
90000000080001f8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080001fc:	4c000020 	jirl	$r0,$r1,0

9000000008000200 <panic>:
void panic(char *s) {
9000000008000200:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000204:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000208:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800020c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000210:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000214:	00150097 	move	$r23,$r4
  if (strncmp(s, "No futex Resource!", 18) == 0) {
9000000008000218:	02804806 	addi.w	$r6,$r0,18(0x12)
900000000800021c:	1c000025 	pcaddu12i	$r5,1(0x1)
9000000008000220:	02f7f0a5 	addi.d	$r5,$r5,-516(0xdfc)
9000000008000224:	54073c00 	bl	1852(0x73c) # 9000000008000960 <strncmp>
  printf("%p\n", s);  // 这个地方原本使用的是serious_print
9000000008000228:	001502e5 	move	$r5,$r23
900000000800022c:	1c000024 	pcaddu12i	$r4,1(0x1)
9000000008000230:	02f79084 	addi.d	$r4,$r4,-540(0xde4)
9000000008000234:	54003c00 	bl	60(0x3c) # 9000000008000270 <printf>
  printf("panic: ");
9000000008000238:	1c000024 	pcaddu12i	$r4,1(0x1)
900000000800023c:	02f7e084 	addi.d	$r4,$r4,-520(0xdf8)
9000000008000240:	54003000 	bl	48(0x30) # 9000000008000270 <printf>
  printf(s);
9000000008000244:	001502e4 	move	$r4,$r23
9000000008000248:	54002800 	bl	40(0x28) # 9000000008000270 <printf>
  printf("\n");
900000000800024c:	1c000024 	pcaddu12i	$r4,1(0x1)
9000000008000250:	02f7b084 	addi.d	$r4,$r4,-532(0xdec)
9000000008000254:	54001c00 	bl	28(0x1c) # 9000000008000270 <printf>
  backtrace();
9000000008000258:	57ff2bff 	bl	-216(0xfffff28) # 9000000008000180 <backtrace>
  panicked = 1; // freeze uart output from other CPUs
900000000800025c:	1c00026c 	pcaddu12i	$r12,19(0x13)
9000000008000260:	02f6a18c 	addi.d	$r12,$r12,-600(0xda8)
9000000008000264:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008000268:	2980018d 	st.w	$r13,$r12,0
    ;
900000000800026c:	50000000 	b	0 # 900000000800026c <panic+0x6c>

9000000008000270 <printf>:
void printf(char *fmt, ...) {
9000000008000270:	02fd4063 	addi.d	$r3,$r3,-176(0xf50)
9000000008000274:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000008000278:	29c18076 	st.d	$r22,$r3,96(0x60)
900000000800027c:	29c16077 	st.d	$r23,$r3,88(0x58)
9000000008000280:	29c14078 	st.d	$r24,$r3,80(0x50)
9000000008000284:	29c12079 	st.d	$r25,$r3,72(0x48)
9000000008000288:	29c1007a 	st.d	$r26,$r3,64(0x40)
900000000800028c:	29c0e07b 	st.d	$r27,$r3,56(0x38)
9000000008000290:	29c0c07c 	st.d	$r28,$r3,48(0x30)
9000000008000294:	29c0a07d 	st.d	$r29,$r3,40(0x28)
9000000008000298:	29c0807e 	st.d	$r30,$r3,32(0x20)
900000000800029c:	29c0607f 	st.d	$r31,$r3,24(0x18)
90000000080002a0:	02c1c076 	addi.d	$r22,$r3,112(0x70)
90000000080002a4:	0015009b 	move	$r27,$r4
90000000080002a8:	29c022c5 	st.d	$r5,$r22,8(0x8)
90000000080002ac:	29c042c6 	st.d	$r6,$r22,16(0x10)
90000000080002b0:	29c062c7 	st.d	$r7,$r22,24(0x18)
90000000080002b4:	29c082c8 	st.d	$r8,$r22,32(0x20)
90000000080002b8:	29c0a2c9 	st.d	$r9,$r22,40(0x28)
90000000080002bc:	29c0c2ca 	st.d	$r10,$r22,48(0x30)
90000000080002c0:	29c0e2cb 	st.d	$r11,$r22,56(0x38)
  locking = pr.locking;
90000000080002c4:	1c00026c 	pcaddu12i	$r12,19(0x13)
90000000080002c8:	02f5118c 	addi.d	$r12,$r12,-700(0xd44)
90000000080002cc:	2880619f 	ld.w	$r31,$r12,24(0x18)
  if (locking)
90000000080002d0:	440037e0 	bnez	$r31,52(0x34) # 9000000008000304 <printf+0x94>
  if (fmt == 0) {
90000000080002d4:	40003f60 	beqz	$r27,60(0x3c) # 9000000008000310 <printf+0xa0>
  va_start(ap, fmt);
90000000080002d8:	02c022cc 	addi.d	$r12,$r22,8(0x8)
90000000080002dc:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
  for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
90000000080002e0:	2a000364 	ld.bu	$r4,$r27,0
90000000080002e4:	40016c80 	beqz	$r4,364(0x16c) # 9000000008000450 <printf+0x1e0>
90000000080002e8:	00150017 	move	$r23,$r0
    if (c != '%') {
90000000080002ec:	0280941a 	addi.w	$r26,$r0,37(0x25)
    switch (c) {
90000000080002f0:	0281c01c 	addi.w	$r28,$r0,112(0x70)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
90000000080002f4:	1c00003d 	pcaddu12i	$r29,1(0x1)
90000000080002f8:	02f5b3bd 	addi.d	$r29,$r29,-660(0xd6c)
    switch (c) {
90000000080002fc:	0281cc1e 	addi.w	$r30,$r0,115(0x73)
9000000008000300:	50003800 	b	56(0x38) # 9000000008000338 <printf+0xc8>
    acquire(&pr.lock);
9000000008000304:	00150184 	move	$r4,$r12
9000000008000308:	54045400 	bl	1108(0x454) # 900000000800075c <acquire>
900000000800030c:	53ffcbff 	b	-56(0xfffffc8) # 90000000080002d4 <printf+0x64>
    consputc('A');
9000000008000310:	02810404 	addi.w	$r4,$r0,65(0x41)
9000000008000314:	540a2000 	bl	2592(0xa20) # 9000000008000d34 <consputc>
    panic("null fmt");
9000000008000318:	1c000024 	pcaddu12i	$r4,1(0x1)
900000000800031c:	02f4c084 	addi.d	$r4,$r4,-720(0xd30)
9000000008000320:	57fee3ff 	bl	-288(0xffffee0) # 9000000008000200 <panic>
      consputc(c);
9000000008000324:	540a1000 	bl	2576(0xa10) # 9000000008000d34 <consputc>
  for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
9000000008000328:	028006f7 	addi.w	$r23,$r23,1(0x1)
900000000800032c:	0010df6c 	add.d	$r12,$r27,$r23
9000000008000330:	2a000184 	ld.bu	$r4,$r12,0
9000000008000334:	40011c80 	beqz	$r4,284(0x11c) # 9000000008000450 <printf+0x1e0>
    if (c != '%') {
9000000008000338:	5fffec9a 	bne	$r4,$r26,-20(0x3ffec) # 9000000008000324 <printf+0xb4>
    c = fmt[++i] & 0xff;
900000000800033c:	028006f7 	addi.w	$r23,$r23,1(0x1)
9000000008000340:	0010df6c 	add.d	$r12,$r27,$r23
9000000008000344:	2a000198 	ld.bu	$r24,$r12,0
    if (c == 0)
9000000008000348:	40010b00 	beqz	$r24,264(0x108) # 9000000008000450 <printf+0x1e0>
    switch (c) {
900000000800034c:	5800631c 	beq	$r24,$r28,96(0x60) # 90000000080003ac <printf+0x13c>
9000000008000350:	64003398 	bge	$r28,$r24,48(0x30) # 9000000008000380 <printf+0x110>
9000000008000354:	58009f1e 	beq	$r24,$r30,156(0x9c) # 90000000080003f0 <printf+0x180>
9000000008000358:	0281e00c 	addi.w	$r12,$r0,120(0x78)
900000000800035c:	5c00e30c 	bne	$r24,$r12,224(0xe0) # 900000000800043c <printf+0x1cc>
      printint(va_arg(ap, int), 16, 1);
9000000008000360:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008000364:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000008000368:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
900000000800036c:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000008000370:	02804005 	addi.w	$r5,$r0,16(0x10)
9000000008000374:	28800184 	ld.w	$r4,$r12,0
9000000008000378:	57fd27ff 	bl	-732(0xffffd24) # 900000000800009c <printint>
      break;
900000000800037c:	53ffafff 	b	-84(0xfffffac) # 9000000008000328 <printf+0xb8>
    switch (c) {
9000000008000380:	5800b31a 	beq	$r24,$r26,176(0xb0) # 9000000008000430 <printf+0x1c0>
9000000008000384:	0281900c 	addi.w	$r12,$r0,100(0x64)
9000000008000388:	5c00b70c 	bne	$r24,$r12,180(0xb4) # 900000000800043c <printf+0x1cc>
      printint(va_arg(ap, int), 10, 1);
900000000800038c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008000390:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000008000394:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000008000398:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800039c:	02802805 	addi.w	$r5,$r0,10(0xa)
90000000080003a0:	28800184 	ld.w	$r4,$r12,0
90000000080003a4:	57fcfbff 	bl	-776(0xffffcf8) # 900000000800009c <printint>
      break;
90000000080003a8:	53ff83ff 	b	-128(0xfffff80) # 9000000008000328 <printf+0xb8>
      printptr(va_arg(ap, uint64));
90000000080003ac:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000080003b0:	02c0218d 	addi.d	$r13,$r12,8(0x8)
90000000080003b4:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
90000000080003b8:	28c00199 	ld.d	$r25,$r12,0
  consputc('0');
90000000080003bc:	0280c004 	addi.w	$r4,$r0,48(0x30)
90000000080003c0:	54097400 	bl	2420(0x974) # 9000000008000d34 <consputc>
  consputc('x');
90000000080003c4:	0281e004 	addi.w	$r4,$r0,120(0x78)
90000000080003c8:	54096c00 	bl	2412(0x96c) # 9000000008000d34 <consputc>
90000000080003cc:	02804018 	addi.w	$r24,$r0,16(0x10)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
90000000080003d0:	0045f32c 	srli.d	$r12,$r25,0x3c
90000000080003d4:	0010b3ac 	add.d	$r12,$r29,$r12
90000000080003d8:	28000184 	ld.b	$r4,$r12,0
90000000080003dc:	54095800 	bl	2392(0x958) # 9000000008000d34 <consputc>
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
90000000080003e0:	00411339 	slli.d	$r25,$r25,0x4
90000000080003e4:	02bfff18 	addi.w	$r24,$r24,-1(0xfff)
90000000080003e8:	47ffeb1f 	bnez	$r24,-24(0x7fffe8) # 90000000080003d0 <printf+0x160>
90000000080003ec:	53ff3fff 	b	-196(0xfffff3c) # 9000000008000328 <printf+0xb8>
      if ((s = va_arg(ap, char *)) == 0)
90000000080003f0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000080003f4:	02c0218d 	addi.d	$r13,$r12,8(0x8)
90000000080003f8:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
90000000080003fc:	28c00198 	ld.d	$r24,$r12,0
9000000008000400:	40002300 	beqz	$r24,32(0x20) # 9000000008000420 <printf+0x1b0>
      for (; *s; s++)
9000000008000404:	28000304 	ld.b	$r4,$r24,0
9000000008000408:	43ff209f 	beqz	$r4,-224(0x7fff20) # 9000000008000328 <printf+0xb8>
        consputc(*s);
900000000800040c:	54092800 	bl	2344(0x928) # 9000000008000d34 <consputc>
      for (; *s; s++)
9000000008000410:	02c00718 	addi.d	$r24,$r24,1(0x1)
9000000008000414:	28000304 	ld.b	$r4,$r24,0
9000000008000418:	47fff49f 	bnez	$r4,-12(0x7ffff4) # 900000000800040c <printf+0x19c>
900000000800041c:	53ff0fff 	b	-244(0xfffff0c) # 9000000008000328 <printf+0xb8>
        s = "(null)";
9000000008000420:	1c000038 	pcaddu12i	$r24,1(0x1)
9000000008000424:	02f08318 	addi.d	$r24,$r24,-992(0xc20)
      for (; *s; s++)
9000000008000428:	0280a004 	addi.w	$r4,$r0,40(0x28)
900000000800042c:	53ffe3ff 	b	-32(0xfffffe0) # 900000000800040c <printf+0x19c>
      consputc('%');
9000000008000430:	00150344 	move	$r4,$r26
9000000008000434:	54090000 	bl	2304(0x900) # 9000000008000d34 <consputc>
      break;
9000000008000438:	53fef3ff 	b	-272(0xffffef0) # 9000000008000328 <printf+0xb8>
      consputc('%');
900000000800043c:	00150344 	move	$r4,$r26
9000000008000440:	5408f400 	bl	2292(0x8f4) # 9000000008000d34 <consputc>
      consputc(c);
9000000008000444:	00150304 	move	$r4,$r24
9000000008000448:	5408ec00 	bl	2284(0x8ec) # 9000000008000d34 <consputc>
      break;
900000000800044c:	53fedfff 	b	-292(0xffffedc) # 9000000008000328 <printf+0xb8>
  if (locking)
9000000008000450:	44003be0 	bnez	$r31,56(0x38) # 9000000008000488 <printf+0x218>
}
9000000008000454:	28c1a061 	ld.d	$r1,$r3,104(0x68)
9000000008000458:	28c18076 	ld.d	$r22,$r3,96(0x60)
900000000800045c:	28c16077 	ld.d	$r23,$r3,88(0x58)
9000000008000460:	28c14078 	ld.d	$r24,$r3,80(0x50)
9000000008000464:	28c12079 	ld.d	$r25,$r3,72(0x48)
9000000008000468:	28c1007a 	ld.d	$r26,$r3,64(0x40)
900000000800046c:	28c0e07b 	ld.d	$r27,$r3,56(0x38)
9000000008000470:	28c0c07c 	ld.d	$r28,$r3,48(0x30)
9000000008000474:	28c0a07d 	ld.d	$r29,$r3,40(0x28)
9000000008000478:	28c0807e 	ld.d	$r30,$r3,32(0x20)
900000000800047c:	28c0607f 	ld.d	$r31,$r3,24(0x18)
9000000008000480:	02c2c063 	addi.d	$r3,$r3,176(0xb0)
9000000008000484:	4c000020 	jirl	$r0,$r1,0
    release(&pr.lock);
9000000008000488:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000800048c:	02ee0084 	addi.d	$r4,$r4,-1152(0xb80)
9000000008000490:	54032c00 	bl	812(0x32c) # 90000000080007bc <release>
}
9000000008000494:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008000454 <printf+0x1e4>

9000000008000498 <printfinit>:

void printfinit(void) {
9000000008000498:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800049c:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080004a0:	29c00076 	st.d	$r22,$r3,0
90000000080004a4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&pr.lock, "pr");
90000000080004a8:	1c000025 	pcaddu12i	$r5,1(0x1)
90000000080004ac:	02eec0a5 	addi.d	$r5,$r5,-1104(0xbb0)
90000000080004b0:	1c000264 	pcaddu12i	$r4,19(0x13)
90000000080004b4:	02ed6084 	addi.d	$r4,$r4,-1192(0xb58)
90000000080004b8:	54023800 	bl	568(0x238) # 90000000080006f0 <initlock>
  pr.locking = 1; // changed, used to be 1
90000000080004bc:	1c00026c 	pcaddu12i	$r12,19(0x13)
90000000080004c0:	02ed318c 	addi.d	$r12,$r12,-1204(0xb4c)
90000000080004c4:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000080004c8:	2980618d 	st.w	$r13,$r12,24(0x18)
}
90000000080004cc:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080004d0:	28c00076 	ld.d	$r22,$r3,0
90000000080004d4:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080004d8:	4c000020 	jirl	$r0,$r1,0

90000000080004dc <uartinit>:

extern volatile int panicked; // from printf.c

void
uartinit(void)
{
90000000080004dc:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080004e0:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080004e4:	29c00076 	st.d	$r22,$r3,0
90000000080004e8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // disable interrupts.
  WriteReg(IER, 0x00);
90000000080004ec:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
90000000080004f0:	0380058d 	ori	$r13,$r12,0x1
90000000080004f4:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
90000000080004f8:	290001a0 	st.b	$r0,$r13,0

  // special mode to set baud rate.
  WriteReg(LCR, LCR_BAUD_LATCH);
90000000080004fc:	03800d8e 	ori	$r14,$r12,0x3
9000000008000500:	032401ce 	lu52i.d	$r14,$r14,-1792(0x900)
9000000008000504:	02be000f 	addi.w	$r15,$r0,-128(0xf80)
9000000008000508:	290001cf 	st.b	$r15,$r14,0

  // LSB for baud rate of 38.4K.
  WriteReg(0, 0x03);
900000000800050c:	03240190 	lu52i.d	$r16,$r12,-1792(0x900)
9000000008000510:	02800c0f 	addi.w	$r15,$r0,3(0x3)
9000000008000514:	2900020f 	st.b	$r15,$r16,0

  // MSB for baud rate of 38.4K.
  WriteReg(1, 0x00);
9000000008000518:	290001a0 	st.b	$r0,$r13,0

  // leave set-baud mode,
  // and set word length to 8 bits, no parity.
  WriteReg(LCR, LCR_EIGHT_BITS);
900000000800051c:	290001cf 	st.b	$r15,$r14,0

  // reset and enable FIFOs.
  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
9000000008000520:	0380098c 	ori	$r12,$r12,0x2
9000000008000524:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000528:	02801c0e 	addi.w	$r14,$r0,7(0x7)
900000000800052c:	2900018e 	st.b	$r14,$r12,0

  // enable transmit and receive interrupts.
  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
9000000008000530:	290001af 	st.b	$r15,$r13,0

  initlock(&uart_tx_lock, "uart");
9000000008000534:	1c000025 	pcaddu12i	$r5,1(0x1)
9000000008000538:	02ed10a5 	addi.d	$r5,$r5,-1212(0xb44)
900000000800053c:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008000540:	02ec7084 	addi.d	$r4,$r4,-1252(0xb1c)
9000000008000544:	5401ac00 	bl	428(0x1ac) # 90000000080006f0 <initlock>
}
9000000008000548:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800054c:	28c00076 	ld.d	$r22,$r3,0
9000000008000550:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000554:	4c000020 	jirl	$r0,$r1,0

9000000008000558 <uartputc_sync>:
// use interrupts, for use by kernel printf() and
// to echo characters. it spins waiting for the uart's
// output register to be empty.
void
uartputc_sync(int c)
{
9000000008000558:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800055c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000560:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000564:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000568:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800056c:	00150097 	move	$r23,$r4
  push_off();
9000000008000570:	5400a000 	bl	160(0xa0) # 9000000008000610 <push_off>

  if(panicked){
9000000008000574:	1c00004c 	pcaddu12i	$r12,2(0x2)
9000000008000578:	28ea518c 	ld.d	$r12,$r12,-1388(0xa94)
900000000800057c:	2880018c 	ld.w	$r12,$r12,0
    for(;;)
      ;
  }

  // wait for Transmit Holding Empty to be set in LSR.
  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
9000000008000580:	143fc40d 	lu12i.w	$r13,130592(0x1fe20)
  if(panicked){
9000000008000584:	40000980 	beqz	$r12,8(0x8) # 900000000800058c <uartputc_sync+0x34>
      ;
9000000008000588:	50000000 	b	0 # 9000000008000588 <uartputc_sync+0x30>
  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
900000000800058c:	038015ac 	ori	$r12,$r13,0x5
9000000008000590:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000594:	2a00018c 	ld.bu	$r12,$r12,0
9000000008000598:	00c5158c 	bstrpick.d	$r12,$r12,0x5,0x5
900000000800059c:	43fff19f 	beqz	$r12,-16(0x7ffff0) # 900000000800058c <uartputc_sync+0x34>
    ;
  WriteReg(THR, c);
90000000080005a0:	006782ed 	bstrpick.w	$r13,$r23,0x7,0x0
90000000080005a4:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
90000000080005a8:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
90000000080005ac:	2900018d 	st.b	$r13,$r12,0

  pop_off();
90000000080005b0:	5400d000 	bl	208(0xd0) # 9000000008000680 <pop_off>
}
90000000080005b4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080005b8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080005bc:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080005c0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080005c4:	4c000020 	jirl	$r0,$r1,0

90000000080005c8 <uartgetc>:

// read one input character from the UART.
// return -1 if none is waiting.
int
uartgetc(void)
{
90000000080005c8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080005cc:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080005d0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  if(ReadReg(LSR) & 0x01){
90000000080005d4:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
90000000080005d8:	0380158c 	ori	$r12,$r12,0x5
90000000080005dc:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
90000000080005e0:	2a00018c 	ld.bu	$r12,$r12,0
90000000080005e4:	0340058c 	andi	$r12,$r12,0x1
90000000080005e8:	40002180 	beqz	$r12,32(0x20) # 9000000008000608 <uartgetc+0x40>
    // input data is ready.
    return ReadReg(RHR);
90000000080005ec:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
90000000080005f0:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
90000000080005f4:	2a000184 	ld.bu	$r4,$r12,0
90000000080005f8:	00678084 	bstrpick.w	$r4,$r4,0x7,0x0
  } else {
    return -1;
  }
}
90000000080005fc:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000600:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000604:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008000608:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800060c:	53fff3ff 	b	-16(0xffffff0) # 90000000080005fc <uartgetc+0x34>

9000000008000610 <push_off>:

// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
// are initially off, then push_off, pop_off leaves them off.

void push_off(void) {
9000000008000610:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000614:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000618:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800061c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000620:	02c08076 	addi.d	$r22,$r3,32(0x20)

static inline uint32
r_csr_crmd()
{
  uint32 x;
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008000624:	0400000c 	csrrd	$r12,0x0
9000000008000628:	00150197 	move	$r23,$r12
900000000800062c:	0400000c 	csrrd	$r12,0x0

// disable device interrupts
static inline void
intr_off()
{
  w_csr_crmd(r_csr_crmd() & ~CSR_CRMD_IE);
9000000008000630:	02bfec0d 	addi.w	$r13,$r0,-5(0xffb)
9000000008000634:	0014b58c 	and	$r12,$r12,$r13
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008000638:	0400002c 	csrwr	$r12,0x0
  int old = intr_get();

  intr_off();
  // printf("\e[32mpush_off()\e[0m: cpuid(): %d\n", cpuid());
  if (mycpu()->noff == 0)
900000000800063c:	5406c800 	bl	1736(0x6c8) # 9000000008000d04 <mycpu>
9000000008000640:	2881e08c 	ld.w	$r12,$r4,120(0x78)
9000000008000644:	40002980 	beqz	$r12,40(0x28) # 900000000800066c <push_off+0x5c>
    mycpu()->intena = old;
  // printstring("push_off noff++ noff:\n");
  // printint(mycpu()->noff, 10, 1);
  // consputc('\n');
  mycpu()->noff += 1;
9000000008000648:	5406bc00 	bl	1724(0x6bc) # 9000000008000d04 <mycpu>
900000000800064c:	2881e08c 	ld.w	$r12,$r4,120(0x78)
9000000008000650:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000008000654:	2981e08c 	st.w	$r12,$r4,120(0x78)
}
9000000008000658:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800065c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000660:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000664:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000668:	4c000020 	jirl	$r0,$r1,0
    mycpu()->intena = old;
900000000800066c:	54069800 	bl	1688(0x698) # 9000000008000d04 <mycpu>
  return (x & CSR_CRMD_IE) != 0;
9000000008000670:	00488aec 	srai.w	$r12,$r23,0x2
9000000008000674:	0340058c 	andi	$r12,$r12,0x1
9000000008000678:	2981f08c 	st.w	$r12,$r4,124(0x7c)
900000000800067c:	53ffcfff 	b	-52(0xfffffcc) # 9000000008000648 <push_off+0x38>

9000000008000680 <pop_off>:

void pop_off(void) {
9000000008000680:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000684:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000688:	29c00076 	st.d	$r22,$r3,0
900000000800068c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  struct cpu *c = mycpu();
9000000008000690:	54067400 	bl	1652(0x674) # 9000000008000d04 <mycpu>
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008000694:	0400000c 	csrrd	$r12,0x0

  // printf("\e[31mpop_off()\e[0m: cpuid(): %d\n", cpuid());
  if (intr_get())
9000000008000698:	00c2098c 	bstrpick.d	$r12,$r12,0x2,0x2
900000000800069c:	44003d80 	bnez	$r12,60(0x3c) # 90000000080006d8 <pop_off+0x58>
    panic("pop_off - interruptible");
  if (c->noff < 1) {
90000000080006a0:	2881e08c 	ld.w	$r12,$r4,120(0x78)
90000000080006a4:	6400400c 	bge	$r0,$r12,64(0x40) # 90000000080006e4 <pop_off+0x64>
  // printf("c: %x\n", c);
  // printstring("pop_off noff--\n");
  // printstring("pop_off noff-- noff:\n");
  // printint(mycpu()->noff, 10, 1);
  // consputc('\n');
  c->noff -= 1;
90000000080006a8:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
90000000080006ac:	2981e08c 	st.w	$r12,$r4,120(0x78)
  if (c->noff == 0 && c->intena)
90000000080006b0:	44001980 	bnez	$r12,24(0x18) # 90000000080006c8 <pop_off+0x48>
90000000080006b4:	2881f08c 	ld.w	$r12,$r4,124(0x7c)
90000000080006b8:	40001180 	beqz	$r12,16(0x10) # 90000000080006c8 <pop_off+0x48>
90000000080006bc:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() | CSR_CRMD_IE);
90000000080006c0:	0380118c 	ori	$r12,$r12,0x4
  asm volatile("csrwr %0, 0x0" : : "r" (x));
90000000080006c4:	0400002c 	csrwr	$r12,0x0
    intr_on();
}
90000000080006c8:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080006cc:	28c00076 	ld.d	$r22,$r3,0
90000000080006d0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080006d4:	4c000020 	jirl	$r0,$r1,0
    panic("pop_off - interruptible");
90000000080006d8:	1c000024 	pcaddu12i	$r4,1(0x1)
90000000080006dc:	02e6a084 	addi.d	$r4,$r4,-1624(0x9a8)
90000000080006e0:	57fb23ff 	bl	-1248(0xffffb20) # 9000000008000200 <panic>
    panic("pop_off");
90000000080006e4:	1c000024 	pcaddu12i	$r4,1(0x1)
90000000080006e8:	02e6d084 	addi.d	$r4,$r4,-1612(0x9b4)
90000000080006ec:	57fb17ff 	bl	-1260(0xffffb14) # 9000000008000200 <panic>

90000000080006f0 <initlock>:
#include "include/printf.h"
// #include "include/proc.h"
// #include "include/loongarch.h"
// #include "include/types.h"

void initlock(struct spinlock *lk, char *name) {
90000000080006f0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080006f4:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080006f8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  lk->name = name;
90000000080006fc:	29c02085 	st.d	$r5,$r4,8(0x8)
  lk->locked = 0;
9000000008000700:	29800080 	st.w	$r0,$r4,0
  lk->cpu = 0;
9000000008000704:	29c04080 	st.d	$r0,$r4,16(0x10)
}
9000000008000708:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800070c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000710:	4c000020 	jirl	$r0,$r1,0

9000000008000714 <holding>:

// Check whether this cpu is holding the lock.
// Interrupts must be off.
int holding(struct spinlock *lk) {
  int r;
  r = (lk->locked && lk->cpu == mycpu());
9000000008000714:	2880008c 	ld.w	$r12,$r4,0
9000000008000718:	44000d80 	bnez	$r12,12(0xc) # 9000000008000724 <holding+0x10>
900000000800071c:	00150004 	move	$r4,$r0
  return r;
}
9000000008000720:	4c000020 	jirl	$r0,$r1,0
int holding(struct spinlock *lk) {
9000000008000724:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000728:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800072c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000730:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000734:	02c08076 	addi.d	$r22,$r3,32(0x20)
  r = (lk->locked && lk->cpu == mycpu());
9000000008000738:	28c04097 	ld.d	$r23,$r4,16(0x10)
900000000800073c:	5405c800 	bl	1480(0x5c8) # 9000000008000d04 <mycpu>
9000000008000740:	001592e4 	xor	$r4,$r23,$r4
9000000008000744:	02400484 	sltui	$r4,$r4,1(0x1)
}
9000000008000748:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800074c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000750:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000754:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000758:	4c000020 	jirl	$r0,$r1,0

900000000800075c <acquire>:
void acquire(struct spinlock *lk) {
900000000800075c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000760:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000764:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000768:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800076c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000770:	00150097 	move	$r23,$r4
  push_off(); // disable interrupts to avoid deadlock.
9000000008000774:	57fe9fff 	bl	-356(0xffffe9c) # 9000000008000610 <push_off>
  if (holding(lk))
9000000008000778:	001502e4 	move	$r4,$r23
900000000800077c:	57ff9bff 	bl	-104(0xfffff98) # 9000000008000714 <holding>
  while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
9000000008000780:	0280040d 	addi.w	$r13,$r0,1(0x1)
  if (holding(lk))
9000000008000784:	44002c80 	bnez	$r4,44(0x2c) # 90000000080007b0 <acquire+0x54>
  while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
9000000008000788:	386936ec 	amswap_db.w	$r12,$r13,$r23
900000000800078c:	47fffd9f 	bnez	$r12,-4(0x7ffffc) # 9000000008000788 <acquire+0x2c>
  __sync_synchronize();
9000000008000790:	38720000 	dbar	0x0
  lk->cpu = mycpu();
9000000008000794:	54057000 	bl	1392(0x570) # 9000000008000d04 <mycpu>
9000000008000798:	29c042e4 	st.d	$r4,$r23,16(0x10)
}
900000000800079c:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080007a0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080007a4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080007a8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080007ac:	4c000020 	jirl	$r0,$r1,0
    panic("acquire");
90000000080007b0:	1c000024 	pcaddu12i	$r4,1(0x1)
90000000080007b4:	02e3c084 	addi.d	$r4,$r4,-1808(0x8f0)
90000000080007b8:	57fa4bff 	bl	-1464(0xffffa48) # 9000000008000200 <panic>

90000000080007bc <release>:
void release(struct spinlock *lk) {
90000000080007bc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080007c0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080007c4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080007c8:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080007cc:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080007d0:	00150097 	move	$r23,$r4
  if (!holding(lk))
90000000080007d4:	57ff43ff 	bl	-192(0xfffff40) # 9000000008000714 <holding>
90000000080007d8:	40002c80 	beqz	$r4,44(0x2c) # 9000000008000804 <release+0x48>
  lk->cpu = 0;
90000000080007dc:	29c042e0 	st.d	$r0,$r23,16(0x10)
  __sync_synchronize();
90000000080007e0:	38720000 	dbar	0x0
  __sync_lock_release(&lk->locked);
90000000080007e4:	38720001 	dbar	0x1
90000000080007e8:	298002e0 	st.w	$r0,$r23,0
  pop_off();
90000000080007ec:	57fe97ff 	bl	-364(0xffffe94) # 9000000008000680 <pop_off>
}
90000000080007f0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080007f4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080007f8:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080007fc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000800:	4c000020 	jirl	$r0,$r1,0
    panic("release");
9000000008000804:	1c000024 	pcaddu12i	$r4,1(0x1)
9000000008000808:	02e29084 	addi.d	$r4,$r4,-1884(0x8a4)
900000000800080c:	57f9f7ff 	bl	-1548(0xffff9f4) # 9000000008000200 <panic>

9000000008000810 <memset>:
#include "include/types.h"

void *memset(void *dst, int c, uint n) {
9000000008000810:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000814:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000818:	02c04076 	addi.d	$r22,$r3,16(0x10)
  char *cdst = (char *)dst;
  int i;
  for (i = 0; i < n; i++) {
900000000800081c:	400024c0 	beqz	$r6,36(0x24) # 9000000008000840 <memset+0x30>
9000000008000820:	0015008c 	move	$r12,$r4
9000000008000824:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
9000000008000828:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
900000000800082c:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008000830:	001091ad 	add.d	$r13,$r13,$r4
    cdst[i] = c;
9000000008000834:	29000185 	st.b	$r5,$r12,0
9000000008000838:	02c0058c 	addi.d	$r12,$r12,1(0x1)
  for (i = 0; i < n; i++) {
900000000800083c:	5ffff98d 	bne	$r12,$r13,-8(0x3fff8) # 9000000008000834 <memset+0x24>
  }
  return dst;
}
9000000008000840:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000844:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000848:	4c000020 	jirl	$r0,$r1,0

900000000800084c <memcmp>:

int memcmp(const void *v1, const void *v2, uint n) {
900000000800084c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000850:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000854:	02c04076 	addi.d	$r22,$r3,16(0x10)
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while (n-- > 0) {
9000000008000858:	400058c0 	beqz	$r6,88(0x58) # 90000000080008b0 <memcmp+0x64>
900000000800085c:	02bffccf 	addi.w	$r15,$r6,-1(0xfff)
    if (*s1 != *s2)
9000000008000860:	2a00008c 	ld.bu	$r12,$r4,0
9000000008000864:	2a0000ad 	ld.bu	$r13,$r5,0
9000000008000868:	0015018e 	move	$r14,$r12
900000000800086c:	00df01ef 	bstrpick.d	$r15,$r15,0x1f,0x0
9000000008000870:	02c005ef 	addi.d	$r15,$r15,1(0x1)
9000000008000874:	0010bc8f 	add.d	$r15,$r4,$r15
9000000008000878:	5c0021cd 	bne	$r14,$r13,32(0x20) # 9000000008000898 <memcmp+0x4c>
      return *s1 - *s2;
    s1++, s2++;
900000000800087c:	02c00484 	addi.d	$r4,$r4,1(0x1)
9000000008000880:	02c004a5 	addi.d	$r5,$r5,1(0x1)
  while (n-- > 0) {
9000000008000884:	5800248f 	beq	$r4,$r15,36(0x24) # 90000000080008a8 <memcmp+0x5c>
    if (*s1 != *s2)
9000000008000888:	2a00008c 	ld.bu	$r12,$r4,0
900000000800088c:	2a0000ad 	ld.bu	$r13,$r5,0
9000000008000890:	0015018e 	move	$r14,$r12
9000000008000894:	5bffe9cd 	beq	$r14,$r13,-24(0x3ffe8) # 900000000800087c <memcmp+0x30>
      return *s1 - *s2;
9000000008000898:	00113584 	sub.w	$r4,$r12,$r13
  }

  return 0;
}
900000000800089c:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080008a0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080008a4:	4c000020 	jirl	$r0,$r1,0
  return 0;
90000000080008a8:	00150004 	move	$r4,$r0
90000000080008ac:	53fff3ff 	b	-16(0xffffff0) # 900000000800089c <memcmp+0x50>
90000000080008b0:	00150004 	move	$r4,$r0
90000000080008b4:	53ffebff 	b	-24(0xfffffe8) # 900000000800089c <memcmp+0x50>

90000000080008b8 <memmove>:

void *memmove(void *dst, const void *src, uint n) {
90000000080008b8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080008bc:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080008c0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  const char *s;
  char *d;

  s = src;
  d = dst;
  if (s < d && s + n > d) {
90000000080008c4:	68003ca4 	bltu	$r5,$r4,60(0x3c) # 9000000008000900 <memmove+0x48>
    s += n;
    d += n;
    while (n-- > 0)
      *--d = *--s;
  } else
    while (n-- > 0)
90000000080008c8:	02bffcce 	addi.w	$r14,$r6,-1(0xfff)
90000000080008cc:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
90000000080008d0:	02c005ce 	addi.d	$r14,$r14,1(0x1)
90000000080008d4:	0010b8ae 	add.d	$r14,$r5,$r14
90000000080008d8:	0015008c 	move	$r12,$r4
90000000080008dc:	400018c0 	beqz	$r6,24(0x18) # 90000000080008f4 <memmove+0x3c>
      *d++ = *s++;
90000000080008e0:	02c004a5 	addi.d	$r5,$r5,1(0x1)
90000000080008e4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000080008e8:	283ffcad 	ld.b	$r13,$r5,-1(0xfff)
90000000080008ec:	293ffd8d 	st.b	$r13,$r12,-1(0xfff)
    while (n-- > 0)
90000000080008f0:	5ffff0ae 	bne	$r5,$r14,-16(0x3fff0) # 90000000080008e0 <memmove+0x28>

  return dst;
}
90000000080008f4:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080008f8:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080008fc:	4c000020 	jirl	$r0,$r1,0
  if (s < d && s + n > d) {
9000000008000900:	00df00cd 	bstrpick.d	$r13,$r6,0x1f,0x0
9000000008000904:	0010b4ac 	add.d	$r12,$r5,$r13
9000000008000908:	6fffc08c 	bgeu	$r4,$r12,-64(0x3ffc0) # 90000000080008c8 <memmove+0x10>
    d += n;
900000000800090c:	0010b48d 	add.d	$r13,$r4,$r13
    while (n-- > 0)
9000000008000910:	02bffcce 	addi.w	$r14,$r6,-1(0xfff)
9000000008000914:	43ffe0df 	beqz	$r6,-32(0x7fffe0) # 90000000080008f4 <memmove+0x3c>
9000000008000918:	00df01cf 	bstrpick.d	$r15,$r14,0x1f,0x0
900000000800091c:	00143c0f 	nor	$r15,$r0,$r15
9000000008000920:	0010bd8f 	add.d	$r15,$r12,$r15
      *--d = *--s;
9000000008000924:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000008000928:	02fffdad 	addi.d	$r13,$r13,-1(0xfff)
900000000800092c:	2800018e 	ld.b	$r14,$r12,0
9000000008000930:	290001ae 	st.b	$r14,$r13,0
    while (n-- > 0)
9000000008000934:	5ffff1ec 	bne	$r15,$r12,-16(0x3fff0) # 9000000008000924 <memmove+0x6c>
9000000008000938:	53ffbfff 	b	-68(0xfffffbc) # 90000000080008f4 <memmove+0x3c>

900000000800093c <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void *memcpy(void *dst, const void *src, uint n) {
900000000800093c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000940:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000944:	29c00076 	st.d	$r22,$r3,0
9000000008000948:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return memmove(dst, src, n);
900000000800094c:	57ff6fff 	bl	-148(0xfffff6c) # 90000000080008b8 <memmove>
}
9000000008000950:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008000954:	28c00076 	ld.d	$r22,$r3,0
9000000008000958:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800095c:	4c000020 	jirl	$r0,$r1,0

9000000008000960 <strncmp>:

int strncmp(const char *p, const char *q, uint n) {
9000000008000960:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000964:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000968:	02c04076 	addi.d	$r22,$r3,16(0x10)
  while (n > 0 && *p && *p == *q)
900000000800096c:	400058c0 	beqz	$r6,88(0x58) # 90000000080009c4 <strncmp+0x64>
9000000008000970:	2800008c 	ld.b	$r12,$r4,0
9000000008000974:	40003980 	beqz	$r12,56(0x38) # 90000000080009ac <strncmp+0x4c>
9000000008000978:	280000ad 	ld.b	$r13,$r5,0
900000000800097c:	5c0031ac 	bne	$r13,$r12,48(0x30) # 90000000080009ac <strncmp+0x4c>
9000000008000980:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
9000000008000984:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
9000000008000988:	02c005ad 	addi.d	$r13,$r13,1(0x1)
900000000800098c:	0010b48d 	add.d	$r13,$r4,$r13
    n--, p++, q++;
9000000008000990:	02c00484 	addi.d	$r4,$r4,1(0x1)
9000000008000994:	02c004a5 	addi.d	$r5,$r5,1(0x1)
  while (n > 0 && *p && *p == *q)
9000000008000998:	5800348d 	beq	$r4,$r13,52(0x34) # 90000000080009cc <strncmp+0x6c>
900000000800099c:	2800008c 	ld.b	$r12,$r4,0
90000000080009a0:	40000d80 	beqz	$r12,12(0xc) # 90000000080009ac <strncmp+0x4c>
90000000080009a4:	280000ae 	ld.b	$r14,$r5,0
90000000080009a8:	5bffe9cc 	beq	$r14,$r12,-24(0x3ffe8) # 9000000008000990 <strncmp+0x30>
  if (n == 0)
    return 0;
  return (uchar)*p - (uchar)*q;
90000000080009ac:	2a000084 	ld.bu	$r4,$r4,0
90000000080009b0:	2a0000ac 	ld.bu	$r12,$r5,0
90000000080009b4:	00113084 	sub.w	$r4,$r4,$r12
}
90000000080009b8:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080009bc:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080009c0:	4c000020 	jirl	$r0,$r1,0
    return 0;
90000000080009c4:	00150004 	move	$r4,$r0
90000000080009c8:	53fff3ff 	b	-16(0xffffff0) # 90000000080009b8 <strncmp+0x58>
90000000080009cc:	00150004 	move	$r4,$r0
90000000080009d0:	53ffebff 	b	-24(0xfffffe8) # 90000000080009b8 <strncmp+0x58>

90000000080009d4 <strncpy>:

char *strncpy(char *s, const char *t, int n) {
90000000080009d4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080009d8:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080009dc:	02c04076 	addi.d	$r22,$r3,16(0x10)
  char *os;

  os = s;
  while (n-- > 0 && (*s++ = *t++) != 0)
90000000080009e0:	0015008c 	move	$r12,$r4
90000000080009e4:	50000800 	b	8(0x8) # 90000000080009ec <strncpy+0x18>
90000000080009e8:	001501e6 	move	$r6,$r15
90000000080009ec:	02bffccf 	addi.w	$r15,$r6,-1(0xfff)
90000000080009f0:	64001806 	bge	$r0,$r6,24(0x18) # 9000000008000a08 <strncpy+0x34>
90000000080009f4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000080009f8:	280000ad 	ld.b	$r13,$r5,0
90000000080009fc:	293ffd8d 	st.b	$r13,$r12,-1(0xfff)
9000000008000a00:	02c004a5 	addi.d	$r5,$r5,1(0x1)
9000000008000a04:	47ffe5bf 	bnez	$r13,-28(0x7fffe4) # 90000000080009e8 <strncpy+0x14>
    ;
  while (n-- > 0)
9000000008000a08:	0015018e 	move	$r14,$r12
9000000008000a0c:	0040818d 	slli.w	$r13,$r12,0x0
9000000008000a10:	6400200f 	bge	$r0,$r15,32(0x20) # 9000000008000a30 <strncpy+0x5c>
    *s++ = 0;
9000000008000a14:	02c005ce 	addi.d	$r14,$r14,1(0x1)
9000000008000a18:	293ffdc0 	st.b	$r0,$r14,-1(0xfff)
9000000008000a1c:	004081cc 	slli.w	$r12,$r14,0x0
9000000008000a20:	0014300c 	nor	$r12,$r0,$r12
9000000008000a24:	0010358c 	add.w	$r12,$r12,$r13
  while (n-- > 0)
9000000008000a28:	0010198c 	add.w	$r12,$r12,$r6
9000000008000a2c:	63ffe80c 	blt	$r0,$r12,-24(0x3ffe8) # 9000000008000a14 <strncpy+0x40>
  return os;
}
9000000008000a30:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000a34:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000a38:	4c000020 	jirl	$r0,$r1,0

9000000008000a3c <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char *safestrcpy(char *s, const char *t, int n) {
9000000008000a3c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000a40:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000a44:	02c04076 	addi.d	$r22,$r3,16(0x10)
  char *os;

  os = s;
  if (n <= 0)
9000000008000a48:	64003006 	bge	$r0,$r6,48(0x30) # 9000000008000a78 <safestrcpy+0x3c>
9000000008000a4c:	02bffcce 	addi.w	$r14,$r6,-1(0xfff)
9000000008000a50:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
9000000008000a54:	0010b8ae 	add.d	$r14,$r5,$r14
9000000008000a58:	0015008c 	move	$r12,$r4
    return os;
  while (--n > 0 && (*s++ = *t++) != 0)
9000000008000a5c:	580018ae 	beq	$r5,$r14,24(0x18) # 9000000008000a74 <safestrcpy+0x38>
9000000008000a60:	02c004a5 	addi.d	$r5,$r5,1(0x1)
9000000008000a64:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000008000a68:	283ffcad 	ld.b	$r13,$r5,-1(0xfff)
9000000008000a6c:	293ffd8d 	st.b	$r13,$r12,-1(0xfff)
9000000008000a70:	47ffedbf 	bnez	$r13,-20(0x7fffec) # 9000000008000a5c <safestrcpy+0x20>
    ;
  *s = 0;
9000000008000a74:	29000180 	st.b	$r0,$r12,0
  return os;
}
9000000008000a78:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000a7c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000a80:	4c000020 	jirl	$r0,$r1,0

9000000008000a84 <strlen>:

int strlen(const char *s) {
9000000008000a84:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000a88:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000a8c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  int n;

  for (n = 0; s[n]; n++)
9000000008000a90:	2800008c 	ld.b	$r12,$r4,0
9000000008000a94:	40003980 	beqz	$r12,56(0x38) # 9000000008000acc <strlen+0x48>
9000000008000a98:	02c00484 	addi.d	$r4,$r4,1(0x1)
9000000008000a9c:	0015008c 	move	$r12,$r4
9000000008000aa0:	00408084 	slli.w	$r4,$r4,0x0
9000000008000aa4:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000008000aa8:	001111ce 	sub.w	$r14,$r14,$r4
    ;
9000000008000aac:	00408184 	slli.w	$r4,$r12,0x0
9000000008000ab0:	001011c4 	add.w	$r4,$r14,$r4
9000000008000ab4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
  for (n = 0; s[n]; n++)
9000000008000ab8:	283ffd8d 	ld.b	$r13,$r12,-1(0xfff)
9000000008000abc:	47fff1bf 	bnez	$r13,-16(0x7ffff0) # 9000000008000aac <strlen+0x28>
  return n;
}
9000000008000ac0:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000ac4:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000ac8:	4c000020 	jirl	$r0,$r1,0
  for (n = 0; s[n]; n++)
9000000008000acc:	00150004 	move	$r4,$r0
9000000008000ad0:	53fff3ff 	b	-16(0xffffff0) # 9000000008000ac0 <strlen+0x3c>

9000000008000ad4 <wnstr>:

// convert uchar string into wide char string
void wnstr(wchar *dst, char const *src, int len) {
9000000008000ad4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000ad8:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000adc:	02c04076 	addi.d	$r22,$r3,16(0x10)
  while (len-- && *src) {
9000000008000ae0:	0015008d 	move	$r13,$r4
9000000008000ae4:	40003cc0 	beqz	$r6,60(0x3c) # 9000000008000b20 <wnstr+0x4c>
9000000008000ae8:	280000ac 	ld.b	$r12,$r5,0
9000000008000aec:	40003580 	beqz	$r12,52(0x34) # 9000000008000b20 <wnstr+0x4c>
9000000008000af0:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
9000000008000af4:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
9000000008000af8:	002c01ad 	alsl.d	$r13,$r13,$r0,0x1
9000000008000afc:	02c009ad 	addi.d	$r13,$r13,2(0x2)
9000000008000b00:	0010b48d 	add.d	$r13,$r4,$r13
    *(uchar *)dst = *src++;
9000000008000b04:	02c004a5 	addi.d	$r5,$r5,1(0x1)
9000000008000b08:	2900008c 	st.b	$r12,$r4,0
    dst++;
9000000008000b0c:	02c00884 	addi.d	$r4,$r4,2(0x2)
  while (len-- && *src) {
9000000008000b10:	5800108d 	beq	$r4,$r13,16(0x10) # 9000000008000b20 <wnstr+0x4c>
9000000008000b14:	280000ac 	ld.b	$r12,$r5,0
9000000008000b18:	47ffed9f 	bnez	$r12,-20(0x7fffec) # 9000000008000b04 <wnstr+0x30>
    dst++;
9000000008000b1c:	0015008d 	move	$r13,$r4
  }

  *dst = 0;
9000000008000b20:	294001a0 	st.h	$r0,$r13,0
}
9000000008000b24:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000b28:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000b2c:	4c000020 	jirl	$r0,$r1,0

9000000008000b30 <snstr>:

// convert wide char string into uchar string
void snstr(char *dst, wchar const *src, int len) {
9000000008000b30:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000b34:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000b38:	02c04076 	addi.d	$r22,$r3,16(0x10)
  while (len-- && *src) {
9000000008000b3c:	400078c0 	beqz	$r6,120(0x78) # 9000000008000bb4 <snstr+0x84>
9000000008000b40:	02bffccc 	addi.w	$r12,$r6,-1(0xfff)
9000000008000b44:	2a4000af 	ld.hu	$r15,$r5,0
9000000008000b48:	0015008d 	move	$r13,$r4
9000000008000b4c:	400049e0 	beqz	$r15,72(0x48) # 9000000008000b94 <snstr+0x64>
9000000008000b50:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
9000000008000b54:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
9000000008000b58:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008000b5c:	0010b48d 	add.d	$r13,$r4,$r13
9000000008000b60:	0015008e 	move	$r14,$r4
9000000008000b64:	00408084 	slli.w	$r4,$r4,0x0
    *dst++ = (uchar)(*src & 0xff);
9000000008000b68:	02c005ce 	addi.d	$r14,$r14,1(0x1)
9000000008000b6c:	293ffdcf 	st.b	$r15,$r14,-1(0xfff)
    src++;
9000000008000b70:	02c008a5 	addi.d	$r5,$r5,2(0x2)
9000000008000b74:	004081cc 	slli.w	$r12,$r14,0x0
9000000008000b78:	0014300c 	nor	$r12,$r0,$r12
9000000008000b7c:	0010198c 	add.w	$r12,$r12,$r6
9000000008000b80:	0010308c 	add.w	$r12,$r4,$r12
  while (len-- && *src) {
9000000008000b84:	580011cd 	beq	$r14,$r13,16(0x10) # 9000000008000b94 <snstr+0x64>
9000000008000b88:	2a4000af 	ld.hu	$r15,$r5,0
9000000008000b8c:	47ffddff 	bnez	$r15,-36(0x7fffdc) # 9000000008000b68 <snstr+0x38>
    *dst++ = (uchar)(*src & 0xff);
9000000008000b90:	001501cd 	move	$r13,$r14
9000000008000b94:	02bffd8e 	addi.w	$r14,$r12,-1(0xfff)
9000000008000b98:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
9000000008000b9c:	02c005ce 	addi.d	$r14,$r14,1(0x1)
9000000008000ba0:	0010b9ae 	add.d	$r14,$r13,$r14
  }
  while (len-- > 0)
9000000008000ba4:	6400100c 	bge	$r0,$r12,16(0x10) # 9000000008000bb4 <snstr+0x84>
    *dst++ = 0;
9000000008000ba8:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008000bac:	293ffda0 	st.b	$r0,$r13,-1(0xfff)
  while (len-- > 0)
9000000008000bb0:	5ffff9cd 	bne	$r14,$r13,-8(0x3fff8) # 9000000008000ba8 <snstr+0x78>
}
9000000008000bb4:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000bb8:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000bbc:	4c000020 	jirl	$r0,$r1,0

9000000008000bc0 <wcsncmp>:

int wcsncmp(wchar const *s1, wchar const *s2, int len) {
9000000008000bc0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000bc4:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000bc8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  int ret = 0;

  while (len-- && *s1) {
9000000008000bcc:	00df00c6 	bstrpick.d	$r6,$r6,0x1f,0x0
9000000008000bd0:	002c00c6 	alsl.d	$r6,$r6,$r0,0x1
9000000008000bd4:	001098a6 	add.d	$r6,$r5,$r6
9000000008000bd8:	580024a6 	beq	$r5,$r6,36(0x24) # 9000000008000bfc <wcsncmp+0x3c>
9000000008000bdc:	2a40008c 	ld.hu	$r12,$r4,0
9000000008000be0:	40002180 	beqz	$r12,32(0x20) # 9000000008000c00 <wcsncmp+0x40>
    ret = (int)(*s1++ - *s2++);
9000000008000be4:	02c00884 	addi.d	$r4,$r4,2(0x2)
9000000008000be8:	02c008a5 	addi.d	$r5,$r5,2(0x2)
9000000008000bec:	2a7ff8ad 	ld.hu	$r13,$r5,-2(0xffe)
9000000008000bf0:	0011358c 	sub.w	$r12,$r12,$r13
    if (ret)
9000000008000bf4:	43ffe59f 	beqz	$r12,-28(0x7fffe4) # 9000000008000bd8 <wcsncmp+0x18>
9000000008000bf8:	50000800 	b	8(0x8) # 9000000008000c00 <wcsncmp+0x40>
9000000008000bfc:	0015000c 	move	$r12,$r0
      break;
  }

  return ret;
}
9000000008000c00:	00150184 	move	$r4,$r12
9000000008000c04:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000c08:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000c0c:	4c000020 	jirl	$r0,$r1,0

9000000008000c10 <strchr>:

char *strchr(const char *s, char c) {
9000000008000c10:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000c14:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000c18:	02c04076 	addi.d	$r22,$r3,16(0x10)
  for (; *s; s++)
9000000008000c1c:	2800008e 	ld.b	$r14,$r4,0
9000000008000c20:	40003dc0 	beqz	$r14,60(0x3c) # 9000000008000c5c <strchr+0x4c>
9000000008000c24:	0015008d 	move	$r13,$r4
    if (*s == c)
9000000008000c28:	001500ac 	move	$r12,$r5
9000000008000c2c:	00150185 	move	$r5,$r12
9000000008000c30:	5800218e 	beq	$r12,$r14,32(0x20) # 9000000008000c50 <strchr+0x40>
  for (; *s; s++)
9000000008000c34:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008000c38:	280001ac 	ld.b	$r12,$r13,0
9000000008000c3c:	40001180 	beqz	$r12,16(0x10) # 9000000008000c4c <strchr+0x3c>
    if (*s == c)
9000000008000c40:	5ffff585 	bne	$r12,$r5,-12(0x3fff4) # 9000000008000c34 <strchr+0x24>
  for (; *s; s++)
9000000008000c44:	001501a4 	move	$r4,$r13
9000000008000c48:	50000800 	b	8(0x8) # 9000000008000c50 <strchr+0x40>
      return (char *)s;
  return 0;
9000000008000c4c:	00150004 	move	$r4,$r0
9000000008000c50:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000c54:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000c58:	4c000020 	jirl	$r0,$r1,0
  return 0;
9000000008000c5c:	00150004 	move	$r4,$r0
9000000008000c60:	53fff3ff 	b	-16(0xffffff0) # 9000000008000c50 <strchr+0x40>

9000000008000c64 <main>:
  asm volatile("addi.d %0, $tp, 0" : "=r" (x) );
9000000008000c64:	02c0004c 	addi.d	$r12,$r2,0
    // started = 1;
    while (1);
    
  } else {
    // other hart
    while (started == 0)
9000000008000c68:	1c00024d 	pcaddu12i	$r13,18(0x12)
9000000008000c6c:	02d021ad 	addi.d	$r13,$r13,1032(0x408)
  if (r_tp() == 0) {
9000000008000c70:	40001180 	beqz	$r12,16(0x10) # 9000000008000c80 <main+0x1c>
    while (started == 0)
9000000008000c74:	288001ac 	ld.w	$r12,$r13,0
9000000008000c78:	43fffd9f 	beqz	$r12,-4(0x7ffffc) # 9000000008000c74 <main+0x10>
9000000008000c7c:	4c000020 	jirl	$r0,$r1,0
void main() {
9000000008000c80:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000c84:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000c88:	29c00076 	st.d	$r22,$r3,0
9000000008000c8c:	02c04076 	addi.d	$r22,$r3,16(0x10)
    cpuinit();
9000000008000c90:	54001c00 	bl	28(0x1c) # 9000000008000cac <cpuinit>
    consoleinit();
9000000008000c94:	5400e800 	bl	232(0xe8) # 9000000008000d7c <consoleinit>
    printfinit(); // init a lock for printf
9000000008000c98:	57f803ff 	bl	-2048(0xffff800) # 9000000008000498 <printfinit>
    printf("test");
9000000008000c9c:	1c000004 	pcaddu12i	$r4,0
9000000008000ca0:	02d05084 	addi.d	$r4,$r4,1044(0x414)
9000000008000ca4:	57f5cfff 	bl	-2612(0xffff5cc) # 9000000008000270 <printf>
    while (1);
9000000008000ca8:	50000000 	b	0 # 9000000008000ca8 <main+0x44>

9000000008000cac <cpuinit>:
//   printf("tp: %p\n", r_tp());
//   printf("ra: %p\n", r_ra());
//   printf("}\n");
// }

void cpuinit(void) {
9000000008000cac:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000cb0:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000cb4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  struct cpu *it;
  for (it = cpus; it < &cpus[NCPU]; it++) {
    it->proc = 0;
9000000008000cb8:	1c00024c 	pcaddu12i	$r12,18(0x12)
9000000008000cbc:	02cf018c 	addi.d	$r12,$r12,960(0x3c0)
9000000008000cc0:	29c00180 	st.d	$r0,$r12,0
    it->intena = 0;
9000000008000cc4:	2981f180 	st.w	$r0,$r12,124(0x7c)
    it->noff = 0;
9000000008000cc8:	2981e180 	st.w	$r0,$r12,120(0x78)
    it->proc = 0;
9000000008000ccc:	29c20180 	st.d	$r0,$r12,128(0x80)
    it->intena = 0;
9000000008000cd0:	2983f180 	st.w	$r0,$r12,252(0xfc)
    it->noff = 0;
9000000008000cd4:	2983e180 	st.w	$r0,$r12,248(0xf8)
  }
}
9000000008000cd8:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000cdc:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000ce0:	4c000020 	jirl	$r0,$r1,0

9000000008000ce4 <cpuid>:
// }

// Must be called with interrupts disabled,
// to prevent race with process being moved
// to a different CPU.
int cpuid() {
9000000008000ce4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000ce8:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000cec:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008000cf0:	02c00044 	addi.d	$r4,$r2,0
  int id = r_tp();
9000000008000cf4:	00408084 	slli.w	$r4,$r4,0x0
  return id;
}
9000000008000cf8:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000cfc:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000d00:	4c000020 	jirl	$r0,$r1,0

9000000008000d04 <mycpu>:

// Return this CPU's cpu struct.
// Interrupts must be disabled.
struct cpu *mycpu(void) {
9000000008000d04:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000d08:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000d0c:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008000d10:	02c0004c 	addi.d	$r12,$r2,0
  int id = r_tp();
9000000008000d14:	0040818c 	slli.w	$r12,$r12,0x0
  int id = cpuid();
  struct cpu *c = &cpus[id];
9000000008000d18:	00411d8c 	slli.d	$r12,$r12,0x7

  return c;
}
9000000008000d1c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008000d20:	02cd7084 	addi.d	$r4,$r4,860(0x35c)
9000000008000d24:	0010b084 	add.d	$r4,$r4,$r12
9000000008000d28:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000d2c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000d30:	4c000020 	jirl	$r0,$r1,0

9000000008000d34 <consputc>:
// #include "include/uart8250.h"

#define BACKSPACE 0x100
#define C(x) ((x) - '@') // Control-x

void consputc(int c) {
9000000008000d34:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000d38:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000d3c:	29c00076 	st.d	$r22,$r3,0
9000000008000d40:	02c04076 	addi.d	$r22,$r3,16(0x10)
  if (c == BACKSPACE) {
9000000008000d44:	0284000c 	addi.w	$r12,$r0,256(0x100)
9000000008000d48:	5800188c 	beq	$r4,$r12,24(0x18) # 9000000008000d60 <consputc+0x2c>
    // if the user typed backspace, overwrite with a space.
    uartputc_sync('\b');
    uartputc_sync(' ');
    uartputc_sync('\b');
  } else {
    uartputc_sync(c);
9000000008000d4c:	57f80fff 	bl	-2036(0xffff80c) # 9000000008000558 <uartputc_sync>
  }
}
9000000008000d50:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008000d54:	28c00076 	ld.d	$r22,$r3,0
9000000008000d58:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000d5c:	4c000020 	jirl	$r0,$r1,0
    uartputc_sync('\b');
9000000008000d60:	02802004 	addi.w	$r4,$r0,8(0x8)
9000000008000d64:	57f7f7ff 	bl	-2060(0xffff7f4) # 9000000008000558 <uartputc_sync>
    uartputc_sync(' ');
9000000008000d68:	02808004 	addi.w	$r4,$r0,32(0x20)
9000000008000d6c:	57f7efff 	bl	-2068(0xffff7ec) # 9000000008000558 <uartputc_sync>
    uartputc_sync('\b');
9000000008000d70:	02802004 	addi.w	$r4,$r0,8(0x8)
9000000008000d74:	57f7e7ff 	bl	-2076(0xffff7e4) # 9000000008000558 <uartputc_sync>
9000000008000d78:	53ffdbff 	b	-40(0xfffffd8) # 9000000008000d50 <consputc+0x1c>

9000000008000d7c <consoleinit>:
//   }

//   release(&cons.lock);
// }

void consoleinit(void) {
9000000008000d7c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000d80:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000d84:	29c00076 	st.d	$r22,$r3,0
9000000008000d88:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&cons.lock, "cons");
9000000008000d8c:	1c000005 	pcaddu12i	$r5,0
9000000008000d90:	02ccb0a5 	addi.d	$r5,$r5,812(0x32c)
9000000008000d94:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008000d98:	02cf9084 	addi.d	$r4,$r4,996(0x3e4)
9000000008000d9c:	57f957ff 	bl	-1708(0xffff954) # 90000000080006f0 <initlock>
// #ifdef QEMU
  uartinit();
9000000008000da0:	57f73fff 	bl	-2244(0xffff73c) # 90000000080004dc <uartinit>
// #endif
// #ifdef visionfive
//   uart8250_init(UART, 24000000, 115200, 2, 4, 0);
// #endif
  cons.e = cons.w = cons.r = 0;
9000000008000da4:	1c00024c 	pcaddu12i	$r12,18(0x12)
9000000008000da8:	02cf518c 	addi.d	$r12,$r12,980(0x3d4)
9000000008000dac:	29826180 	st.w	$r0,$r12,152(0x98)
9000000008000db0:	29827180 	st.w	$r0,$r12,156(0x9c)
9000000008000db4:	29828180 	st.w	$r0,$r12,160(0xa0)

  // connect read and write system calls
  // to consoleread and consolewrite.
//  devsw[CONSOLE].read = consoleread;
//  devsw[CONSOLE].write = consolewrite;
}
9000000008000db8:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008000dbc:	28c00076 	ld.d	$r22,$r3,0
9000000008000dc0:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000dc4:	4c000020 	jirl	$r0,$r1,0
	...
