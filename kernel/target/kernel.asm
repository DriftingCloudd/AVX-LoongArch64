
target/kernel:     file format elf64-loongarch


Disassembly of section .text:

9000000008000000 <_entry>:
9000000008000000:	0380040c 	ori	$r12,$r0,0x1
9000000008000004:	0320018c 	lu52i.d	$r12,$r12,-2048(0x800)
9000000008000008:	0406002c 	csrwr	$r12,0x180
900000000800000c:	0380440c 	ori	$r12,$r0,0x11
9000000008000010:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000014:	0406042c 	csrwr	$r12,0x181
9000000008000018:	0402202c 	csrwr	$r12,0x88
900000000800001c:	0382c00c 	ori	$r12,$r0,0xb0
9000000008000020:	0400002c 	csrwr	$r12,0x0
9000000008000024:	0015000c 	move	$r12,$r0
9000000008000028:	0400042c 	csrwr	$r12,0x1
900000000800002c:	0015000c 	move	$r12,$r0
9000000008000030:	0400082c 	csrwr	$r12,0x2
9000000008000034:	1c000403 	pcaddu12i	$r3,32(0x20)
9000000008000038:	28c33063 	ld.d	$r3,$r3,204(0xcc)
900000000800003c:	14000024 	lu12i.w	$r4,1(0x1)
9000000008000040:	04008005 	csrrd	$r5,0x20
9000000008000044:	02c000a2 	addi.d	$r2,$r5,0
9000000008000048:	02c004a5 	addi.d	$r5,$r5,1(0x1)
900000000800004c:	001d9484 	mul.d	$r4,$r4,$r5
9000000008000050:	00109063 	add.d	$r3,$r3,$r4
9000000008000054:	54136400 	bl	4964(0x1364) # 90000000080013b8 <main>

9000000008000058 <spin>:
9000000008000058:	50000000 	b	0 # 9000000008000058 <spin>

900000000800005c <printstring>:
static struct {
  struct spinlock lock;
  int locking;
} pr;

void printstring(const char *s) {
900000000800005c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000060:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000064:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000068:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800006c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000070:	00150097 	move	$r23,$r4
  while (*s) {
9000000008000074:	28000084 	ld.b	$r4,$r4,0
9000000008000078:	40001480 	beqz	$r4,20(0x14) # 900000000800008c <printstring+0x30>
    consputc(*s++);
900000000800007c:	02c006f7 	addi.d	$r23,$r23,1(0x1)
9000000008000080:	5406fc00 	bl	1788(0x6fc) # 900000000800077c <consputc>
  while (*s) {
9000000008000084:	280002e4 	ld.b	$r4,$r23,0
9000000008000088:	47fff49f 	bnez	$r4,-12(0x7ffff4) # 900000000800007c <printstring+0x20>
  }
}
900000000800008c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000090:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000094:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000098:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800009c:	4c000020 	jirl	$r0,$r1,0

90000000080000a0 <printint>:

void printint(int xx, int base, int sign) {
90000000080000a0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080000a4:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080000a8:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080000ac:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080000b0:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080000b4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  char buf[16];
  int i;
  uint x;

  if (sign && (sign = xx < 0))
90000000080000b8:	400008c0 	beqz	$r6,8(0x8) # 90000000080000c0 <printint+0x20>
90000000080000bc:	60001c80 	blt	$r4,$r0,28(0x1c) # 90000000080000d8 <printint+0x38>
    x = -xx;
  else
    x = xx;
90000000080000c0:	00150011 	move	$r17,$r0
90000000080000c4:	02ff42cd 	addi.d	$r13,$r22,-48(0xfd0)

  i = 0;
90000000080000c8:	0015000f 	move	$r15,$r0
  do {
    buf[i++] = digits[x % base];
90000000080000cc:	1c0002b0 	pcaddu12i	$r16,21(0x15)
90000000080000d0:	02fe9210 	addi.d	$r16,$r16,-92(0xfa4)
90000000080000d4:	50001800 	b	24(0x18) # 90000000080000ec <printint+0x4c>
    x = -xx;
90000000080000d8:	00111004 	sub.w	$r4,$r0,$r4
  if (sign && (sign = xx < 0))
90000000080000dc:	02800411 	addi.w	$r17,$r0,1(0x1)
    x = -xx;
90000000080000e0:	53ffe7ff 	b	-28(0xfffffe4) # 90000000080000c4 <printint+0x24>
  } while ((x /= base) != 0);
90000000080000e4:	00150184 	move	$r4,$r12
    buf[i++] = digits[x % base];
90000000080000e8:	001501cf 	move	$r15,$r14
90000000080000ec:	028005ee 	addi.w	$r14,$r15,1(0x1)
90000000080000f0:	0021948c 	mod.wu	$r12,$r4,$r5
90000000080000f4:	5c0008a0 	bne	$r5,$r0,8(0x8) # 90000000080000fc <printint+0x5c>
90000000080000f8:	002a0007 	break	0x7
90000000080000fc:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000008000100:	0010b20c 	add.d	$r12,$r16,$r12
9000000008000104:	2a00018c 	ld.bu	$r12,$r12,0
9000000008000108:	290001ac 	st.b	$r12,$r13,0
  } while ((x /= base) != 0);
900000000800010c:	0021148c 	div.wu	$r12,$r4,$r5
9000000008000110:	5c0008a0 	bne	$r5,$r0,8(0x8) # 9000000008000118 <printint+0x78>
9000000008000114:	002a0007 	break	0x7
9000000008000118:	02c005ad 	addi.d	$r13,$r13,1(0x1)
900000000800011c:	6fffc885 	bgeu	$r4,$r5,-56(0x3ffc8) # 90000000080000e4 <printint+0x44>

  if (sign)
9000000008000120:	40001a20 	beqz	$r17,24(0x18) # 9000000008000138 <printint+0x98>
    buf[i++] = '-';
9000000008000124:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000008000128:	0010b98e 	add.d	$r14,$r12,$r14
900000000800012c:	0280b40c 	addi.w	$r12,$r0,45(0x2d)
9000000008000130:	293fc1cc 	st.b	$r12,$r14,-16(0xff0)
9000000008000134:	028009ee 	addi.w	$r14,$r15,2(0x2)

  while (--i >= 0)
9000000008000138:	6400340e 	bge	$r0,$r14,52(0x34) # 900000000800016c <printint+0xcc>
900000000800013c:	02ff82cc 	addi.d	$r12,$r22,-32(0xfe0)
9000000008000140:	0010b997 	add.d	$r23,$r12,$r14
9000000008000144:	02ffbef7 	addi.d	$r23,$r23,-17(0xfef)
9000000008000148:	02ff3ad8 	addi.d	$r24,$r22,-50(0xfce)
900000000800014c:	0010bb18 	add.d	$r24,$r24,$r14
9000000008000150:	02bffdce 	addi.w	$r14,$r14,-1(0xfff)
9000000008000154:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
9000000008000158:	0011bb18 	sub.d	$r24,$r24,$r14
    consputc(buf[i]);
900000000800015c:	280002e4 	ld.b	$r4,$r23,0
9000000008000160:	54061c00 	bl	1564(0x61c) # 900000000800077c <consputc>
9000000008000164:	02fffef7 	addi.d	$r23,$r23,-1(0xfff)
  while (--i >= 0)
9000000008000168:	5ffff6f8 	bne	$r23,$r24,-12(0x3fff4) # 900000000800015c <printint+0xbc>
}
900000000800016c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008000170:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008000174:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008000178:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800017c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008000180:	4c000020 	jirl	$r0,$r1,0

9000000008000184 <backtrace>:
  panicked = 1; // freeze uart output from other CPUs
  for (;;)
    ;
}

void backtrace() {
9000000008000184:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008000188:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800018c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008000190:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008000194:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008000198:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800019c:	02c0c076 	addi.d	$r22,$r3,48(0x30)

static inline uint64
r_fp()
{
  uint64 x;
  asm volatile("addi.d %0, $fp, 0" : "=r" (x) );
90000000080001a0:	02c002d8 	addi.d	$r24,$r22,0
  uint64 *fp = (uint64 *)r_fp();
90000000080001a4:	00150317 	move	$r23,$r24
  uint64 *bottom = (uint64 *)PGROUNDUP((uint64)fp);
90000000080001a8:	03bffc0c 	ori	$r12,$r0,0xfff
90000000080001ac:	0010b318 	add.d	$r24,$r24,$r12
90000000080001b0:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
90000000080001b4:	0014b318 	and	$r24,$r24,$r12
  printf("backtrace:\n");   //这个地方原本使用的是serious_print()
90000000080001b8:	1c0002a4 	pcaddu12i	$r4,21(0x15)
90000000080001bc:	02f92084 	addi.d	$r4,$r4,-440(0xe48)
90000000080001c0:	5400b400 	bl	180(0xb4) # 9000000008000274 <printf>
  while (fp < bottom) {
90000000080001c4:	6c0026f8 	bgeu	$r23,$r24,36(0x24) # 90000000080001e8 <backtrace+0x64>
    uint64 ra = *(fp - 1);
    printf("%p\n", ra - 4);     //同上
90000000080001c8:	1c000359 	pcaddu12i	$r25,26(0x1a)
90000000080001cc:	02cbc339 	addi.d	$r25,$r25,752(0x2f0)
90000000080001d0:	28ffe2e5 	ld.d	$r5,$r23,-8(0xff8)
90000000080001d4:	02fff0a5 	addi.d	$r5,$r5,-4(0xffc)
90000000080001d8:	00150324 	move	$r4,$r25
90000000080001dc:	54009800 	bl	152(0x98) # 9000000008000274 <printf>
    fp = (uint64 *)*(fp - 2);
90000000080001e0:	28ffc2f7 	ld.d	$r23,$r23,-16(0xff0)
  while (fp < bottom) {
90000000080001e4:	6bffeef8 	bltu	$r23,$r24,-20(0x3ffec) # 90000000080001d0 <backtrace+0x4c>
  }
}
90000000080001e8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080001ec:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080001f0:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080001f4:	28c04078 	ld.d	$r24,$r3,16(0x10)
90000000080001f8:	28c02079 	ld.d	$r25,$r3,8(0x8)
90000000080001fc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008000200:	4c000020 	jirl	$r0,$r1,0

9000000008000204 <panic>:
void panic(char *s) {
9000000008000204:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000208:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800020c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000210:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000214:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000218:	00150097 	move	$r23,$r4
  if (strncmp(s, "No futex Resource!", 18) == 0) {
900000000800021c:	02804806 	addi.w	$r6,$r0,18(0x12)
9000000008000220:	1c0002a5 	pcaddu12i	$r5,21(0x15)
9000000008000224:	02f7c0a5 	addi.d	$r5,$r5,-528(0xdf0)
9000000008000228:	540e8c00 	bl	3724(0xe8c) # 90000000080010b4 <strncmp>
  printf("%p\n", s);  // 这个地方原本使用的是serious_print
900000000800022c:	001502e5 	move	$r5,$r23
9000000008000230:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000008000234:	02ca2084 	addi.d	$r4,$r4,648(0x288)
9000000008000238:	54003c00 	bl	60(0x3c) # 9000000008000274 <printf>
  printf("panic: ");
900000000800023c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
9000000008000240:	02f7b084 	addi.d	$r4,$r4,-532(0xdec)
9000000008000244:	54003000 	bl	48(0x30) # 9000000008000274 <printf>
  printf(s);
9000000008000248:	001502e4 	move	$r4,$r23
900000000800024c:	54002800 	bl	40(0x28) # 9000000008000274 <printf>
  printf("\n");
9000000008000250:	1c0002a4 	pcaddu12i	$r4,21(0x15)
9000000008000254:	02f86084 	addi.d	$r4,$r4,-488(0xe18)
9000000008000258:	54001c00 	bl	28(0x1c) # 9000000008000274 <printf>
  backtrace();
900000000800025c:	57ff2bff 	bl	-216(0xfffff28) # 9000000008000184 <backtrace>
  panicked = 1; // freeze uart output from other CPUs
9000000008000260:	1c00062c 	pcaddu12i	$r12,49(0x31)
9000000008000264:	02f6918c 	addi.d	$r12,$r12,-604(0xda4)
9000000008000268:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800026c:	2980018d 	st.w	$r13,$r12,0
    ;
9000000008000270:	50000000 	b	0 # 9000000008000270 <panic+0x6c>

9000000008000274 <printf>:
void printf(char *fmt, ...) {
9000000008000274:	02fd4063 	addi.d	$r3,$r3,-176(0xf50)
9000000008000278:	29c1a061 	st.d	$r1,$r3,104(0x68)
900000000800027c:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000008000280:	29c16077 	st.d	$r23,$r3,88(0x58)
9000000008000284:	29c14078 	st.d	$r24,$r3,80(0x50)
9000000008000288:	29c12079 	st.d	$r25,$r3,72(0x48)
900000000800028c:	29c1007a 	st.d	$r26,$r3,64(0x40)
9000000008000290:	29c0e07b 	st.d	$r27,$r3,56(0x38)
9000000008000294:	29c0c07c 	st.d	$r28,$r3,48(0x30)
9000000008000298:	29c0a07d 	st.d	$r29,$r3,40(0x28)
900000000800029c:	29c0807e 	st.d	$r30,$r3,32(0x20)
90000000080002a0:	29c0607f 	st.d	$r31,$r3,24(0x18)
90000000080002a4:	02c1c076 	addi.d	$r22,$r3,112(0x70)
90000000080002a8:	0015009b 	move	$r27,$r4
90000000080002ac:	29c022c5 	st.d	$r5,$r22,8(0x8)
90000000080002b0:	29c042c6 	st.d	$r6,$r22,16(0x10)
90000000080002b4:	29c062c7 	st.d	$r7,$r22,24(0x18)
90000000080002b8:	29c082c8 	st.d	$r8,$r22,32(0x20)
90000000080002bc:	29c0a2c9 	st.d	$r9,$r22,40(0x28)
90000000080002c0:	29c0c2ca 	st.d	$r10,$r22,48(0x30)
90000000080002c4:	29c0e2cb 	st.d	$r11,$r22,56(0x38)
  locking = pr.locking;
90000000080002c8:	1c00062c 	pcaddu12i	$r12,49(0x31)
90000000080002cc:	02f5018c 	addi.d	$r12,$r12,-704(0xd40)
90000000080002d0:	2880619f 	ld.w	$r31,$r12,24(0x18)
  if (locking)
90000000080002d4:	440037e0 	bnez	$r31,52(0x34) # 9000000008000308 <printf+0x94>
  if (fmt == 0) {
90000000080002d8:	40003f60 	beqz	$r27,60(0x3c) # 9000000008000314 <printf+0xa0>
  va_start(ap, fmt);
90000000080002dc:	02c022cc 	addi.d	$r12,$r22,8(0x8)
90000000080002e0:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
  for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
90000000080002e4:	2a000364 	ld.bu	$r4,$r27,0
90000000080002e8:	40016c80 	beqz	$r4,364(0x16c) # 9000000008000454 <printf+0x1e0>
90000000080002ec:	00150017 	move	$r23,$r0
    if (c != '%') {
90000000080002f0:	0280941a 	addi.w	$r26,$r0,37(0x25)
    switch (c) {
90000000080002f4:	0281c01c 	addi.w	$r28,$r0,112(0x70)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
90000000080002f8:	1c0002bd 	pcaddu12i	$r29,21(0x15)
90000000080002fc:	02f5e3bd 	addi.d	$r29,$r29,-648(0xd78)
    switch (c) {
9000000008000300:	0281cc1e 	addi.w	$r30,$r0,115(0x73)
9000000008000304:	50003800 	b	56(0x38) # 900000000800033c <printf+0xc8>
    acquire(&pr.lock);
9000000008000308:	00150184 	move	$r4,$r12
900000000800030c:	540ba400 	bl	2980(0xba4) # 9000000008000eb0 <acquire>
9000000008000310:	53ffcbff 	b	-56(0xfffffc8) # 90000000080002d8 <printf+0x64>
    consputc('A');
9000000008000314:	02810404 	addi.w	$r4,$r0,65(0x41)
9000000008000318:	54046400 	bl	1124(0x464) # 900000000800077c <consputc>
    panic("null fmt");
900000000800031c:	1c0002a4 	pcaddu12i	$r4,21(0x15)
9000000008000320:	02f47084 	addi.d	$r4,$r4,-740(0xd1c)
9000000008000324:	57fee3ff 	bl	-288(0xffffee0) # 9000000008000204 <panic>
      consputc(c);
9000000008000328:	54045400 	bl	1108(0x454) # 900000000800077c <consputc>
  for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
900000000800032c:	028006f7 	addi.w	$r23,$r23,1(0x1)
9000000008000330:	0010df6c 	add.d	$r12,$r27,$r23
9000000008000334:	2a000184 	ld.bu	$r4,$r12,0
9000000008000338:	40011c80 	beqz	$r4,284(0x11c) # 9000000008000454 <printf+0x1e0>
    if (c != '%') {
900000000800033c:	5fffec9a 	bne	$r4,$r26,-20(0x3ffec) # 9000000008000328 <printf+0xb4>
    c = fmt[++i] & 0xff;
9000000008000340:	028006f7 	addi.w	$r23,$r23,1(0x1)
9000000008000344:	0010df6c 	add.d	$r12,$r27,$r23
9000000008000348:	2a000198 	ld.bu	$r24,$r12,0
    if (c == 0)
900000000800034c:	40010b00 	beqz	$r24,264(0x108) # 9000000008000454 <printf+0x1e0>
    switch (c) {
9000000008000350:	5800631c 	beq	$r24,$r28,96(0x60) # 90000000080003b0 <printf+0x13c>
9000000008000354:	64003398 	bge	$r28,$r24,48(0x30) # 9000000008000384 <printf+0x110>
9000000008000358:	58009f1e 	beq	$r24,$r30,156(0x9c) # 90000000080003f4 <printf+0x180>
900000000800035c:	0281e00c 	addi.w	$r12,$r0,120(0x78)
9000000008000360:	5c00e30c 	bne	$r24,$r12,224(0xe0) # 9000000008000440 <printf+0x1cc>
      printint(va_arg(ap, int), 16, 1);
9000000008000364:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008000368:	02c0218d 	addi.d	$r13,$r12,8(0x8)
900000000800036c:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000008000370:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000008000374:	02804005 	addi.w	$r5,$r0,16(0x10)
9000000008000378:	28800184 	ld.w	$r4,$r12,0
900000000800037c:	57fd27ff 	bl	-732(0xffffd24) # 90000000080000a0 <printint>
      break;
9000000008000380:	53ffafff 	b	-84(0xfffffac) # 900000000800032c <printf+0xb8>
    switch (c) {
9000000008000384:	5800b31a 	beq	$r24,$r26,176(0xb0) # 9000000008000434 <printf+0x1c0>
9000000008000388:	0281900c 	addi.w	$r12,$r0,100(0x64)
900000000800038c:	5c00b70c 	bne	$r24,$r12,180(0xb4) # 9000000008000440 <printf+0x1cc>
      printint(va_arg(ap, int), 10, 1);
9000000008000390:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008000394:	02c0218d 	addi.d	$r13,$r12,8(0x8)
9000000008000398:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
900000000800039c:	02800406 	addi.w	$r6,$r0,1(0x1)
90000000080003a0:	02802805 	addi.w	$r5,$r0,10(0xa)
90000000080003a4:	28800184 	ld.w	$r4,$r12,0
90000000080003a8:	57fcfbff 	bl	-776(0xffffcf8) # 90000000080000a0 <printint>
      break;
90000000080003ac:	53ff83ff 	b	-128(0xfffff80) # 900000000800032c <printf+0xb8>
      printptr(va_arg(ap, uint64));
90000000080003b0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000080003b4:	02c0218d 	addi.d	$r13,$r12,8(0x8)
90000000080003b8:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
90000000080003bc:	28c00199 	ld.d	$r25,$r12,0
  consputc('0');
90000000080003c0:	0280c004 	addi.w	$r4,$r0,48(0x30)
90000000080003c4:	5403b800 	bl	952(0x3b8) # 900000000800077c <consputc>
  consputc('x');
90000000080003c8:	0281e004 	addi.w	$r4,$r0,120(0x78)
90000000080003cc:	5403b000 	bl	944(0x3b0) # 900000000800077c <consputc>
90000000080003d0:	02804018 	addi.w	$r24,$r0,16(0x10)
    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
90000000080003d4:	0045f32c 	srli.d	$r12,$r25,0x3c
90000000080003d8:	0010b3ac 	add.d	$r12,$r29,$r12
90000000080003dc:	28000184 	ld.b	$r4,$r12,0
90000000080003e0:	54039c00 	bl	924(0x39c) # 900000000800077c <consputc>
  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
90000000080003e4:	00411339 	slli.d	$r25,$r25,0x4
90000000080003e8:	02bfff18 	addi.w	$r24,$r24,-1(0xfff)
90000000080003ec:	47ffeb1f 	bnez	$r24,-24(0x7fffe8) # 90000000080003d4 <printf+0x160>
90000000080003f0:	53ff3fff 	b	-196(0xfffff3c) # 900000000800032c <printf+0xb8>
      if ((s = va_arg(ap, char *)) == 0)
90000000080003f4:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
90000000080003f8:	02c0218d 	addi.d	$r13,$r12,8(0x8)
90000000080003fc:	29fe62cd 	st.d	$r13,$r22,-104(0xf98)
9000000008000400:	28c00198 	ld.d	$r24,$r12,0
9000000008000404:	40002300 	beqz	$r24,32(0x20) # 9000000008000424 <printf+0x1b0>
      for (; *s; s++)
9000000008000408:	28000304 	ld.b	$r4,$r24,0
900000000800040c:	43ff209f 	beqz	$r4,-224(0x7fff20) # 900000000800032c <printf+0xb8>
        consputc(*s);
9000000008000410:	54036c00 	bl	876(0x36c) # 900000000800077c <consputc>
      for (; *s; s++)
9000000008000414:	02c00718 	addi.d	$r24,$r24,1(0x1)
9000000008000418:	28000304 	ld.b	$r4,$r24,0
900000000800041c:	47fff49f 	bnez	$r4,-12(0x7ffff4) # 9000000008000410 <printf+0x19c>
9000000008000420:	53ff0fff 	b	-244(0xfffff0c) # 900000000800032c <printf+0xb8>
        s = "(null)";
9000000008000424:	1c0002b8 	pcaddu12i	$r24,21(0x15)
9000000008000428:	02f03318 	addi.d	$r24,$r24,-1012(0xc0c)
      for (; *s; s++)
900000000800042c:	0280a004 	addi.w	$r4,$r0,40(0x28)
9000000008000430:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008000410 <printf+0x19c>
      consputc('%');
9000000008000434:	00150344 	move	$r4,$r26
9000000008000438:	54034400 	bl	836(0x344) # 900000000800077c <consputc>
      break;
900000000800043c:	53fef3ff 	b	-272(0xffffef0) # 900000000800032c <printf+0xb8>
      consputc('%');
9000000008000440:	00150344 	move	$r4,$r26
9000000008000444:	54033800 	bl	824(0x338) # 900000000800077c <consputc>
      consputc(c);
9000000008000448:	00150304 	move	$r4,$r24
900000000800044c:	54033000 	bl	816(0x330) # 900000000800077c <consputc>
      break;
9000000008000450:	53fedfff 	b	-292(0xffffedc) # 900000000800032c <printf+0xb8>
  if (locking)
9000000008000454:	44003be0 	bnez	$r31,56(0x38) # 900000000800048c <printf+0x218>
}
9000000008000458:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000800045c:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000008000460:	28c16077 	ld.d	$r23,$r3,88(0x58)
9000000008000464:	28c14078 	ld.d	$r24,$r3,80(0x50)
9000000008000468:	28c12079 	ld.d	$r25,$r3,72(0x48)
900000000800046c:	28c1007a 	ld.d	$r26,$r3,64(0x40)
9000000008000470:	28c0e07b 	ld.d	$r27,$r3,56(0x38)
9000000008000474:	28c0c07c 	ld.d	$r28,$r3,48(0x30)
9000000008000478:	28c0a07d 	ld.d	$r29,$r3,40(0x28)
900000000800047c:	28c0807e 	ld.d	$r30,$r3,32(0x20)
9000000008000480:	28c0607f 	ld.d	$r31,$r3,24(0x18)
9000000008000484:	02c2c063 	addi.d	$r3,$r3,176(0xb0)
9000000008000488:	4c000020 	jirl	$r0,$r1,0
    release(&pr.lock);
900000000800048c:	1c000624 	pcaddu12i	$r4,49(0x31)
9000000008000490:	02edf084 	addi.d	$r4,$r4,-1156(0xb7c)
9000000008000494:	540a7c00 	bl	2684(0xa7c) # 9000000008000f10 <release>
}
9000000008000498:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008000458 <printf+0x1e4>

900000000800049c <printfinit>:

void printfinit(void) {
900000000800049c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080004a0:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080004a4:	29c00076 	st.d	$r22,$r3,0
90000000080004a8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&pr.lock, "pr");
90000000080004ac:	1c0002a5 	pcaddu12i	$r5,21(0x15)
90000000080004b0:	02ee70a5 	addi.d	$r5,$r5,-1124(0xb9c)
90000000080004b4:	1c000624 	pcaddu12i	$r4,49(0x31)
90000000080004b8:	02ed5084 	addi.d	$r4,$r4,-1196(0xb54)
90000000080004bc:	54098800 	bl	2440(0x988) # 9000000008000e44 <initlock>
  pr.locking = 1; // changed, used to be 1
90000000080004c0:	1c00062c 	pcaddu12i	$r12,49(0x31)
90000000080004c4:	02ed218c 	addi.d	$r12,$r12,-1208(0xb48)
90000000080004c8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000080004cc:	2980618d 	st.w	$r13,$r12,24(0x18)
  
  #ifdef DEBUG
  printf("DEBUG:printf initialzie.\n");
90000000080004d0:	1c0002a4 	pcaddu12i	$r4,21(0x15)
90000000080004d4:	02ee0084 	addi.d	$r4,$r4,-1152(0xb80)
90000000080004d8:	57fd9fff 	bl	-612(0xffffd9c) # 9000000008000274 <printf>
  #endif
}
90000000080004dc:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080004e0:	28c00076 	ld.d	$r22,$r3,0
90000000080004e4:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080004e8:	4c000020 	jirl	$r0,$r1,0

90000000080004ec <extioi_init>:
#include "include/extioi.h"

void extioi_init(void)
{
90000000080004ec:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080004f0:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080004f4:	02c04076 	addi.d	$r22,$r3,16(0x10)
/* Data types in instruction templates:  VOID, UDI, USI.  */
extern __inline void
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
__iocsrwr_d (unsigned long int _1, unsigned int _2)
{
  __builtin_loongarch_iocsrwr_d ((unsigned long int) _1, (unsigned int) _2);
90000000080004f8:	1400002c 	lu12i.w	$r12,1(0x1)
90000000080004fc:	0398018e 	ori	$r14,$r12,0x600
9000000008000500:	0280100d 	addi.w	$r13,$r0,4(0x4)
9000000008000504:	06481dcd 	iocsrwr.d	$r13,$r14
9000000008000508:	0393018e 	ori	$r14,$r12,0x4c0
900000000800050c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008000510:	06481dcd 	iocsrwr.d	$r13,$r14
9000000008000514:	03b0018e 	ori	$r14,$r12,0xc00
9000000008000518:	1400020d 	lu12i.w	$r13,16(0x10)
900000000800051c:	06481dcd 	iocsrwr.d	$r13,$r14
9000000008000520:	0392818c 	ori	$r12,$r12,0x4a0
9000000008000524:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008000528:	06481d8d 	iocsrwr.d	$r13,$r12
    iocsr_writeq(0x01UL,LOONGARCH_IOCSR_EXTIOI_MAP_BASE);

    iocsr_writeq(0x10000UL,LOONGARCH_IOCSR_EXTIOI_ROUTE_BASE);

    iocsr_writeq(0x1,LOONGARCH_IOCSR_EXRIOI_NODETYPE_BASE);
}
900000000800052c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000530:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000534:	4c000020 	jirl	$r0,$r1,0

9000000008000538 <extioi_claim>:

// ask the extioi what interrupt we should serve.
uint64
extioi_claim(void)
{
9000000008000538:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800053c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000540:	02c04076 	addi.d	$r22,$r3,16(0x10)
    return iocsr_readq(LOONGARCH_IOCSR_EXTIOI_ISR_BASE);
}
9000000008000544:	14000024 	lu12i.w	$r4,1(0x1)
9000000008000548:	03a00084 	ori	$r4,$r4,0x800
900000000800054c:	06480c84 	iocsrrd.d	$r4,$r4
9000000008000550:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000554:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000558:	4c000020 	jirl	$r0,$r1,0

900000000800055c <extioi_complete>:

void extioi_complete(uint64 irq)
{
900000000800055c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000560:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000564:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008000568:	1400002c 	lu12i.w	$r12,1(0x1)
900000000800056c:	03a0018c 	ori	$r12,$r12,0x800
9000000008000570:	06481d84 	iocsrwr.d	$r4,$r12
    iocsr_writeq(irq, LOONGARCH_IOCSR_EXTIOI_ISR_BASE);
9000000008000574:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000578:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800057c:	4c000020 	jirl	$r0,$r1,0

9000000008000580 <consolewrite>:
} cons;

//
// user write()s to the console go here.
//
int consolewrite(int user_src, uint64 src, int n) {
9000000008000580:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000008000584:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008000588:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800058c:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008000590:	29c0c078 	st.d	$r24,$r3,48(0x30)
9000000008000594:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008000598:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800059c:	29c0607b 	st.d	$r27,$r3,24(0x18)
90000000080005a0:	02c14076 	addi.d	$r22,$r3,80(0x50)
90000000080005a4:	0015009a 	move	$r26,$r4
90000000080005a8:	001500b8 	move	$r24,$r5
90000000080005ac:	001500d9 	move	$r25,$r6
  int i;

  acquire(&cons.lock);
90000000080005b0:	1c000624 	pcaddu12i	$r4,49(0x31)
90000000080005b4:	02e9e084 	addi.d	$r4,$r4,-1416(0xa78)
90000000080005b8:	5408f800 	bl	2296(0x8f8) # 9000000008000eb0 <acquire>
  for (i = 0; i < n; i++) {
90000000080005bc:	00150017 	move	$r23,$r0
90000000080005c0:	64003819 	bge	$r0,$r25,56(0x38) # 90000000080005f8 <consolewrite+0x78>
90000000080005c4:	00150017 	move	$r23,$r0
    char c;
    if (either_copyin(&c, user_src, src + i, 1) == -1)
90000000080005c8:	02bffc1b 	addi.w	$r27,$r0,-1(0xfff)
90000000080005cc:	02800407 	addi.w	$r7,$r0,1(0x1)
90000000080005d0:	00150306 	move	$r6,$r24
90000000080005d4:	00150345 	move	$r5,$r26
90000000080005d8:	02fefec4 	addi.d	$r4,$r22,-65(0xfbf)
90000000080005dc:	541d5000 	bl	7504(0x1d50) # 900000000800232c <either_copyin>
90000000080005e0:	5800189b 	beq	$r4,$r27,24(0x18) # 90000000080005f8 <consolewrite+0x78>
      break;
    uartputc_sync(c);
90000000080005e4:	283efec4 	ld.b	$r4,$r22,-65(0xfbf)
90000000080005e8:	54049800 	bl	1176(0x498) # 9000000008000a80 <uartputc_sync>
  for (i = 0; i < n; i++) {
90000000080005ec:	028006f7 	addi.w	$r23,$r23,1(0x1)
90000000080005f0:	02c00718 	addi.d	$r24,$r24,1(0x1)
90000000080005f4:	5fffdb37 	bne	$r25,$r23,-40(0x3ffd8) # 90000000080005cc <consolewrite+0x4c>
  }
  release(&cons.lock);
90000000080005f8:	1c000624 	pcaddu12i	$r4,49(0x31)
90000000080005fc:	02e8c084 	addi.d	$r4,$r4,-1488(0xa30)
9000000008000600:	54091000 	bl	2320(0x910) # 9000000008000f10 <release>

  return i;
}
9000000008000604:	001502e4 	move	$r4,$r23
9000000008000608:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800060c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000008000610:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008000614:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008000618:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800061c:	28c0807a 	ld.d	$r26,$r3,32(0x20)
9000000008000620:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008000624:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008000628:	4c000020 	jirl	$r0,$r1,0

900000000800062c <consoleread>:
// user read()s from the console go here.
// copy (up to) a whole input line to dst.
// user_dist indicates whether dst is a user
// or kernel address.
//
int consoleread(int user_dst, uint64 dst, int n) {
900000000800062c:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000008000630:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000008000634:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000008000638:	29c16077 	st.d	$r23,$r3,88(0x58)
900000000800063c:	29c14078 	st.d	$r24,$r3,80(0x50)
9000000008000640:	29c12079 	st.d	$r25,$r3,72(0x48)
9000000008000644:	29c1007a 	st.d	$r26,$r3,64(0x40)
9000000008000648:	29c0e07b 	st.d	$r27,$r3,56(0x38)
900000000800064c:	29c0c07c 	st.d	$r28,$r3,48(0x30)
9000000008000650:	29c0a07d 	st.d	$r29,$r3,40(0x28)
9000000008000654:	29c0807e 	st.d	$r30,$r3,32(0x20)
9000000008000658:	29c0607f 	st.d	$r31,$r3,24(0x18)
900000000800065c:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000008000660:	0015009e 	move	$r30,$r4
9000000008000664:	001500ba 	move	$r26,$r5
9000000008000668:	001500d9 	move	$r25,$r6
  uint target;
  int c;
  char cbuf;

  target = n;
900000000800066c:	001500db 	move	$r27,$r6
  acquire(&cons.lock);
9000000008000670:	1c000624 	pcaddu12i	$r4,49(0x31)
9000000008000674:	02e6e084 	addi.d	$r4,$r4,-1608(0x9b8)
9000000008000678:	54083800 	bl	2104(0x838) # 9000000008000eb0 <acquire>
  while (n > 0) {
    // wait until interrupt handler has put some
    // input into cons.buffer.
    while (cons.r == cons.w) {
900000000800067c:	1c000638 	pcaddu12i	$r24,49(0x31)
9000000008000680:	02e6b318 	addi.d	$r24,$r24,-1620(0x9ac)
      sleep(&cons.r, &cons.lock);
    }

    c = cons.buf[cons.r++ % INPUT_BUF];

    if (c == C('D')) { // end-of-file
9000000008000684:	0280101c 	addi.w	$r28,$r0,4(0x4)
      break;
    }

    // copy the input byte to the user-space buffer.
    cbuf = c;
    if (either_copyout(user_dst, dst, &cbuf, 1) == -1)
9000000008000688:	02bffc1d 	addi.w	$r29,$r0,-1(0xfff)
      break;

    dst++;
    --n;

    if (c == '\n') {
900000000800068c:	0280281f 	addi.w	$r31,$r0,10(0xa)
  while (n > 0) {
9000000008000690:	64007c19 	bge	$r0,$r25,124(0x7c) # 900000000800070c <consoleread+0xe0>
    while (cons.r == cons.w) {
9000000008000694:	2882630c 	ld.w	$r12,$r24,152(0x98)
9000000008000698:	2882730d 	ld.w	$r13,$r24,156(0x9c)
900000000800069c:	5c0029ac 	bne	$r13,$r12,40(0x28) # 90000000080006c4 <consoleread+0x98>
      if (myproc()->killed) {
90000000080006a0:	54108800 	bl	4232(0x1088) # 9000000008001728 <myproc>
90000000080006a4:	2880c08c 	ld.w	$r12,$r4,48(0x30)
90000000080006a8:	44007980 	bnez	$r12,120(0x78) # 9000000008000720 <consoleread+0xf4>
      sleep(&cons.r, &cons.lock);
90000000080006ac:	00150305 	move	$r5,$r24
90000000080006b0:	02c26304 	addi.d	$r4,$r24,152(0x98)
90000000080006b4:	54184000 	bl	6208(0x1840) # 9000000008001ef4 <sleep>
    while (cons.r == cons.w) {
90000000080006b8:	2882630c 	ld.w	$r12,$r24,152(0x98)
90000000080006bc:	2882730d 	ld.w	$r13,$r24,156(0x9c)
90000000080006c0:	5bffe1ac 	beq	$r13,$r12,-32(0x3ffe0) # 90000000080006a0 <consoleread+0x74>
    c = cons.buf[cons.r++ % INPUT_BUF];
90000000080006c4:	0280058d 	addi.w	$r13,$r12,1(0x1)
90000000080006c8:	2982630d 	st.w	$r13,$r24,152(0x98)
90000000080006cc:	0341fd8d 	andi	$r13,$r12,0x7f
90000000080006d0:	0010b70d 	add.d	$r13,$r24,$r13
90000000080006d4:	280061ad 	ld.b	$r13,$r13,24(0x18)
90000000080006d8:	001501b7 	move	$r23,$r13
    if (c == C('D')) { // end-of-file
90000000080006dc:	58008afc 	beq	$r23,$r28,136(0x88) # 9000000008000764 <consoleread+0x138>
    cbuf = c;
90000000080006e0:	293e7ecd 	st.b	$r13,$r22,-97(0xf9f)
    if (either_copyout(user_dst, dst, &cbuf, 1) == -1)
90000000080006e4:	02800407 	addi.w	$r7,$r0,1(0x1)
90000000080006e8:	02fe7ec6 	addi.d	$r6,$r22,-97(0xf9f)
90000000080006ec:	00150345 	move	$r5,$r26
90000000080006f0:	001503c4 	move	$r4,$r30
90000000080006f4:	541bb400 	bl	7092(0x1bb4) # 90000000080022a8 <either_copyout>
90000000080006f8:	5800149d 	beq	$r4,$r29,20(0x14) # 900000000800070c <consoleread+0xe0>
    dst++;
90000000080006fc:	02c0075a 	addi.d	$r26,$r26,1(0x1)
    --n;
9000000008000700:	02bfff39 	addi.w	$r25,$r25,-1(0xfff)
    if (c == '\n') {
9000000008000704:	58000aff 	beq	$r23,$r31,8(0x8) # 900000000800070c <consoleread+0xe0>
  while (n > 0) {
9000000008000708:	47ff8f3f 	bnez	$r25,-116(0x7fff8c) # 9000000008000694 <consoleread+0x68>
      // a whole line has arrived, return to
      // the user-level read().
      break;
    }
  }
  release(&cons.lock);
900000000800070c:	1c000624 	pcaddu12i	$r4,49(0x31)
9000000008000710:	02e47084 	addi.d	$r4,$r4,-1764(0x91c)
9000000008000714:	5407fc00 	bl	2044(0x7fc) # 9000000008000f10 <release>

  return target - n;
9000000008000718:	00116764 	sub.w	$r4,$r27,$r25
900000000800071c:	50001400 	b	20(0x14) # 9000000008000730 <consoleread+0x104>
        release(&cons.lock);
9000000008000720:	1c000624 	pcaddu12i	$r4,49(0x31)
9000000008000724:	02e42084 	addi.d	$r4,$r4,-1784(0x908)
9000000008000728:	5407e800 	bl	2024(0x7e8) # 9000000008000f10 <release>
        return -1;
900000000800072c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008000730:	28c1a061 	ld.d	$r1,$r3,104(0x68)
9000000008000734:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000008000738:	28c16077 	ld.d	$r23,$r3,88(0x58)
900000000800073c:	28c14078 	ld.d	$r24,$r3,80(0x50)
9000000008000740:	28c12079 	ld.d	$r25,$r3,72(0x48)
9000000008000744:	28c1007a 	ld.d	$r26,$r3,64(0x40)
9000000008000748:	28c0e07b 	ld.d	$r27,$r3,56(0x38)
900000000800074c:	28c0c07c 	ld.d	$r28,$r3,48(0x30)
9000000008000750:	28c0a07d 	ld.d	$r29,$r3,40(0x28)
9000000008000754:	28c0807e 	ld.d	$r30,$r3,32(0x20)
9000000008000758:	28c0607f 	ld.d	$r31,$r3,24(0x18)
900000000800075c:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000008000760:	4c000020 	jirl	$r0,$r1,0
      if (n < target) {
9000000008000764:	0015032d 	move	$r13,$r25
9000000008000768:	6fffa5bb 	bgeu	$r13,$r27,-92(0x3ffa4) # 900000000800070c <consoleread+0xe0>
        cons.r--;
900000000800076c:	1c00062d 	pcaddu12i	$r13,49(0x31)
9000000008000770:	02e2f1ad 	addi.d	$r13,$r13,-1860(0x8bc)
9000000008000774:	298261ac 	st.w	$r12,$r13,152(0x98)
9000000008000778:	53ff97ff 	b	-108(0xfffff94) # 900000000800070c <consoleread+0xe0>

900000000800077c <consputc>:
void consputc(int c) {
900000000800077c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000780:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000784:	29c00076 	st.d	$r22,$r3,0
9000000008000788:	02c04076 	addi.d	$r22,$r3,16(0x10)
  if (c == BACKSPACE) {
900000000800078c:	0284000c 	addi.w	$r12,$r0,256(0x100)
9000000008000790:	5800188c 	beq	$r4,$r12,24(0x18) # 90000000080007a8 <consputc+0x2c>
    uartputc_sync(c);
9000000008000794:	5402ec00 	bl	748(0x2ec) # 9000000008000a80 <uartputc_sync>
}
9000000008000798:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800079c:	28c00076 	ld.d	$r22,$r3,0
90000000080007a0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080007a4:	4c000020 	jirl	$r0,$r1,0
    uartputc_sync('\b');
90000000080007a8:	02802004 	addi.w	$r4,$r0,8(0x8)
90000000080007ac:	5402d400 	bl	724(0x2d4) # 9000000008000a80 <uartputc_sync>
    uartputc_sync(' ');
90000000080007b0:	02808004 	addi.w	$r4,$r0,32(0x20)
90000000080007b4:	5402cc00 	bl	716(0x2cc) # 9000000008000a80 <uartputc_sync>
    uartputc_sync('\b');
90000000080007b8:	02802004 	addi.w	$r4,$r0,8(0x8)
90000000080007bc:	5402c400 	bl	708(0x2c4) # 9000000008000a80 <uartputc_sync>
90000000080007c0:	53ffdbff 	b	-40(0xfffffd8) # 9000000008000798 <consputc+0x1c>

90000000080007c4 <consoleintr>:
// the console input interrupt handler.
// uartintr() calls this for input character.
// do erase/kill processing, append to cons.buf,
// wake up consoleread() if a whole line has arrived.
//
void consoleintr(int c) {
90000000080007c4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080007c8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080007cc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080007d0:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080007d4:	29c00078 	st.d	$r24,$r3,0
90000000080007d8:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080007dc:	00150097 	move	$r23,$r4
  acquire(&cons.lock);
90000000080007e0:	1c000624 	pcaddu12i	$r4,49(0x31)
90000000080007e4:	02e12084 	addi.d	$r4,$r4,-1976(0x848)
90000000080007e8:	5406c800 	bl	1736(0x6c8) # 9000000008000eb0 <acquire>

  switch (c) {
90000000080007ec:	0280400c 	addi.w	$r12,$r0,16(0x10)
90000000080007f0:	58013eec 	beq	$r23,$r12,316(0x13c) # 900000000800092c <consoleintr+0x168>
90000000080007f4:	64004597 	bge	$r12,$r23,68(0x44) # 9000000008000838 <consoleintr+0x74>
90000000080007f8:	0280540c 	addi.w	$r12,$r0,21(0x15)
90000000080007fc:	5800c2ec 	beq	$r23,$r12,192(0xc0) # 90000000080008bc <consoleintr+0xf8>
9000000008000800:	0281fc0c 	addi.w	$r12,$r0,127(0x7f)
9000000008000804:	5c003eec 	bne	$r23,$r12,60(0x3c) # 9000000008000840 <consoleintr+0x7c>
      consputc(BACKSPACE);
    }
    break;
  case C('H'): // Backspace
  case '\x7f':
    if (cons.e != cons.w) {
9000000008000808:	1c00062d 	pcaddu12i	$r13,49(0x31)
900000000800080c:	02e081ad 	addi.d	$r13,$r13,-2016(0x820)
9000000008000810:	288281ac 	ld.w	$r12,$r13,160(0xa0)
9000000008000814:	288271ad 	ld.w	$r13,$r13,156(0x9c)
9000000008000818:	580119ac 	beq	$r13,$r12,280(0x118) # 9000000008000930 <consoleintr+0x16c>
      cons.e--;
900000000800081c:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000008000820:	1c00062d 	pcaddu12i	$r13,49(0x31)
9000000008000824:	02e021ad 	addi.d	$r13,$r13,-2040(0x808)
9000000008000828:	298281ac 	st.w	$r12,$r13,160(0xa0)
      consputc(BACKSPACE);
900000000800082c:	02840004 	addi.w	$r4,$r0,256(0x100)
9000000008000830:	57ff4fff 	bl	-180(0xfffff4c) # 900000000800077c <consputc>
9000000008000834:	5000fc00 	b	252(0xfc) # 9000000008000930 <consoleintr+0x16c>
  switch (c) {
9000000008000838:	0280200c 	addi.w	$r12,$r0,8(0x8)
900000000800083c:	5bffceec 	beq	$r23,$r12,-52(0x3ffcc) # 9000000008000808 <consoleintr+0x44>
    }
    break;
  default:
    if (c != 0 && cons.e - cons.r < INPUT_BUF) {
9000000008000840:	4000f2e0 	beqz	$r23,240(0xf0) # 9000000008000930 <consoleintr+0x16c>
9000000008000844:	1c00060d 	pcaddu12i	$r13,48(0x30)
9000000008000848:	02df91ad 	addi.d	$r13,$r13,2020(0x7e4)
900000000800084c:	288281ac 	ld.w	$r12,$r13,160(0xa0)
9000000008000850:	288261ad 	ld.w	$r13,$r13,152(0x98)
9000000008000854:	0011358c 	sub.w	$r12,$r12,$r13
9000000008000858:	0281fc0d 	addi.w	$r13,$r0,127(0x7f)
900000000800085c:	6800d5ac 	bltu	$r13,$r12,212(0xd4) # 9000000008000930 <consoleintr+0x16c>
      c = (c == '\r') ? '\n' : c;
9000000008000860:	0280340c 	addi.w	$r12,$r0,13(0xd)
9000000008000864:	5800f2ec 	beq	$r23,$r12,240(0xf0) # 9000000008000954 <consoleintr+0x190>
      // echo back to the user.
      consputc(c);
9000000008000868:	001502e4 	move	$r4,$r23
900000000800086c:	57ff13ff 	bl	-240(0xfffff10) # 900000000800077c <consputc>

      // store for consumption by consoleread().
      cons.buf[cons.e++ % INPUT_BUF] = c;
9000000008000870:	1c00060c 	pcaddu12i	$r12,48(0x30)
9000000008000874:	02dee18c 	addi.d	$r12,$r12,1976(0x7b8)
9000000008000878:	2882818d 	ld.w	$r13,$r12,160(0xa0)
900000000800087c:	028005ae 	addi.w	$r14,$r13,1(0x1)
9000000008000880:	2982818e 	st.w	$r14,$r12,160(0xa0)
9000000008000884:	0341fdad 	andi	$r13,$r13,0x7f
9000000008000888:	0010b58c 	add.d	$r12,$r12,$r13
900000000800088c:	29006197 	st.b	$r23,$r12,24(0x18)

      if (c == '\n' || c == C('D') || cons.e == cons.r + INPUT_BUF) {
9000000008000890:	0280280c 	addi.w	$r12,$r0,10(0xa)
9000000008000894:	5800eeec 	beq	$r23,$r12,236(0xec) # 9000000008000980 <consoleintr+0x1bc>
9000000008000898:	0280100c 	addi.w	$r12,$r0,4(0x4)
900000000800089c:	5800e6ec 	beq	$r23,$r12,228(0xe4) # 9000000008000980 <consoleintr+0x1bc>
90000000080008a0:	1c00060c 	pcaddu12i	$r12,48(0x30)
90000000080008a4:	02de218c 	addi.d	$r12,$r12,1928(0x788)
90000000080008a8:	2882618c 	ld.w	$r12,$r12,152(0x98)
90000000080008ac:	0282018c 	addi.w	$r12,$r12,128(0x80)
90000000080008b0:	5c0081cc 	bne	$r14,$r12,128(0x80) # 9000000008000930 <consoleintr+0x16c>
      cons.buf[cons.e++ % INPUT_BUF] = c;
90000000080008b4:	0015018e 	move	$r14,$r12
90000000080008b8:	5000c800 	b	200(0xc8) # 9000000008000980 <consoleintr+0x1bc>
    while (cons.e != cons.w && cons.buf[(cons.e - 1) % INPUT_BUF] != '\n') {
90000000080008bc:	1c00060d 	pcaddu12i	$r13,48(0x30)
90000000080008c0:	02ddb1ad 	addi.d	$r13,$r13,1900(0x76c)
90000000080008c4:	288281ac 	ld.w	$r12,$r13,160(0xa0)
90000000080008c8:	288271ad 	ld.w	$r13,$r13,156(0x9c)
90000000080008cc:	580065ac 	beq	$r13,$r12,100(0x64) # 9000000008000930 <consoleintr+0x16c>
90000000080008d0:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
90000000080008d4:	0341fd8e 	andi	$r14,$r12,0x7f
90000000080008d8:	1c00060d 	pcaddu12i	$r13,48(0x30)
90000000080008dc:	02dd41ad 	addi.d	$r13,$r13,1872(0x750)
90000000080008e0:	0010b9ad 	add.d	$r13,$r13,$r14
90000000080008e4:	280061ae 	ld.b	$r14,$r13,24(0x18)
90000000080008e8:	0280280d 	addi.w	$r13,$r0,10(0xa)
      cons.e--;
90000000080008ec:	1c000617 	pcaddu12i	$r23,48(0x30)
90000000080008f0:	02dcf2f7 	addi.d	$r23,$r23,1852(0x73c)
    while (cons.e != cons.w && cons.buf[(cons.e - 1) % INPUT_BUF] != '\n') {
90000000080008f4:	02802818 	addi.w	$r24,$r0,10(0xa)
90000000080008f8:	580039cd 	beq	$r14,$r13,56(0x38) # 9000000008000930 <consoleintr+0x16c>
      cons.e--;
90000000080008fc:	298282ec 	st.w	$r12,$r23,160(0xa0)
      consputc(BACKSPACE);
9000000008000900:	02840004 	addi.w	$r4,$r0,256(0x100)
9000000008000904:	57fe7bff 	bl	-392(0xffffe78) # 900000000800077c <consputc>
    while (cons.e != cons.w && cons.buf[(cons.e - 1) % INPUT_BUF] != '\n') {
9000000008000908:	288282ec 	ld.w	$r12,$r23,160(0xa0)
900000000800090c:	288272ed 	ld.w	$r13,$r23,156(0x9c)
9000000008000910:	580021ac 	beq	$r13,$r12,32(0x20) # 9000000008000930 <consoleintr+0x16c>
9000000008000914:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000008000918:	0341fd8d 	andi	$r13,$r12,0x7f
900000000800091c:	0010b6ed 	add.d	$r13,$r23,$r13
9000000008000920:	280061ad 	ld.b	$r13,$r13,24(0x18)
9000000008000924:	5fffd9b8 	bne	$r13,$r24,-40(0x3ffd8) # 90000000080008fc <consoleintr+0x138>
9000000008000928:	50000800 	b	8(0x8) # 9000000008000930 <consoleintr+0x16c>
    procdump();
900000000800092c:	541a8400 	bl	6788(0x1a84) # 90000000080023b0 <procdump>
      }
    }
    break;
  }

  release(&cons.lock);
9000000008000930:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000934:	02dbe084 	addi.d	$r4,$r4,1784(0x6f8)
9000000008000938:	5405d800 	bl	1496(0x5d8) # 9000000008000f10 <release>
}
900000000800093c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000940:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000944:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000948:	28c00078 	ld.d	$r24,$r3,0
900000000800094c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000950:	4c000020 	jirl	$r0,$r1,0
      consputc(c);
9000000008000954:	02802804 	addi.w	$r4,$r0,10(0xa)
9000000008000958:	57fe27ff 	bl	-476(0xffffe24) # 900000000800077c <consputc>
      cons.buf[cons.e++ % INPUT_BUF] = c;
900000000800095c:	1c00060c 	pcaddu12i	$r12,48(0x30)
9000000008000960:	02db318c 	addi.d	$r12,$r12,1740(0x6cc)
9000000008000964:	2882818d 	ld.w	$r13,$r12,160(0xa0)
9000000008000968:	028005ae 	addi.w	$r14,$r13,1(0x1)
900000000800096c:	2982818e 	st.w	$r14,$r12,160(0xa0)
9000000008000970:	0341fdad 	andi	$r13,$r13,0x7f
9000000008000974:	0010b58c 	add.d	$r12,$r12,$r13
9000000008000978:	0280280d 	addi.w	$r13,$r0,10(0xa)
900000000800097c:	2900618d 	st.b	$r13,$r12,24(0x18)
        cons.w = cons.e;
9000000008000980:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000984:	02daa084 	addi.d	$r4,$r4,1704(0x6a8)
9000000008000988:	2982708e 	st.w	$r14,$r4,156(0x9c)
        wakeup(&cons.r);
900000000800098c:	02c26084 	addi.d	$r4,$r4,152(0x98)
9000000008000990:	54175000 	bl	5968(0x1750) # 90000000080020e0 <wakeup>
9000000008000994:	53ff9fff 	b	-100(0xfffff9c) # 9000000008000930 <consoleintr+0x16c>

9000000008000998 <consoleinit>:

void consoleinit(void) {
9000000008000998:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800099c:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080009a0:	29c00076 	st.d	$r22,$r3,0
90000000080009a4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&cons.lock, "cons");
90000000080009a8:	1c000285 	pcaddu12i	$r5,20(0x14)
90000000080009ac:	02db80a5 	addi.d	$r5,$r5,1760(0x6e0)
90000000080009b0:	1c000604 	pcaddu12i	$r4,48(0x30)
90000000080009b4:	02d9e084 	addi.d	$r4,$r4,1656(0x678)
90000000080009b8:	54048c00 	bl	1164(0x48c) # 9000000008000e44 <initlock>
// #ifdef QEMU
  uartinit();
90000000080009bc:	54004800 	bl	72(0x48) # 9000000008000a04 <uartinit>
// #endif
// #ifdef visionfive
//   uart8250_init(UART, 24000000, 115200, 2, 4, 0);
// #endif
  cons.e = cons.w = cons.r = 0;
90000000080009c0:	1c00060c 	pcaddu12i	$r12,48(0x30)
90000000080009c4:	02d9a18c 	addi.d	$r12,$r12,1640(0x668)
90000000080009c8:	29826180 	st.w	$r0,$r12,152(0x98)
90000000080009cc:	29827180 	st.w	$r0,$r12,156(0x9c)
90000000080009d0:	29828180 	st.w	$r0,$r12,160(0xa0)

  // connect read and write system calls
  // to consoleread and consolewrite.
 devsw[CONSOLE].read = consoleread;
90000000080009d4:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
90000000080009d8:	28dcd18c 	ld.d	$r12,$r12,1844(0x734)
90000000080009dc:	1c00000d 	pcaddu12i	$r13,0
90000000080009e0:	02f141ad 	addi.d	$r13,$r13,-944(0xc50)
90000000080009e4:	29c1818d 	st.d	$r13,$r12,96(0x60)
 devsw[CONSOLE].write = consolewrite;
90000000080009e8:	1c00000d 	pcaddu12i	$r13,0
90000000080009ec:	02ee61ad 	addi.d	$r13,$r13,-1128(0xb98)
90000000080009f0:	29c1a18d 	st.d	$r13,$r12,104(0x68)
}
90000000080009f4:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080009f8:	28c00076 	ld.d	$r22,$r3,0
90000000080009fc:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000a00:	4c000020 	jirl	$r0,$r1,0

9000000008000a04 <uartinit>:

extern volatile int panicked; // from printf.c

void
uartinit(void)
{
9000000008000a04:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000a08:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000a0c:	29c00076 	st.d	$r22,$r3,0
9000000008000a10:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // disable interrupts.
  WriteReg(IER, 0x00);
9000000008000a14:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
9000000008000a18:	0380058d 	ori	$r13,$r12,0x1
9000000008000a1c:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
9000000008000a20:	290001a0 	st.b	$r0,$r13,0

  // special mode to set baud rate.
  WriteReg(LCR, LCR_BAUD_LATCH);
9000000008000a24:	03800d8e 	ori	$r14,$r12,0x3
9000000008000a28:	032401ce 	lu52i.d	$r14,$r14,-1792(0x900)
9000000008000a2c:	02be000f 	addi.w	$r15,$r0,-128(0xf80)
9000000008000a30:	290001cf 	st.b	$r15,$r14,0

  // LSB for baud rate of 38.4K.
  WriteReg(0, 0x03);
9000000008000a34:	03240190 	lu52i.d	$r16,$r12,-1792(0x900)
9000000008000a38:	02800c0f 	addi.w	$r15,$r0,3(0x3)
9000000008000a3c:	2900020f 	st.b	$r15,$r16,0

  // MSB for baud rate of 38.4K.
  WriteReg(1, 0x00);
9000000008000a40:	290001a0 	st.b	$r0,$r13,0

  // leave set-baud mode,
  // and set word length to 8 bits, no parity.
  WriteReg(LCR, LCR_EIGHT_BITS);
9000000008000a44:	290001cf 	st.b	$r15,$r14,0

  // reset and enable FIFOs.
  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
9000000008000a48:	0380098c 	ori	$r12,$r12,0x2
9000000008000a4c:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000a50:	02801c0e 	addi.w	$r14,$r0,7(0x7)
9000000008000a54:	2900018e 	st.b	$r14,$r12,0

  // enable transmit and receive interrupts.
  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
9000000008000a58:	290001af 	st.b	$r15,$r13,0

  initlock(&uart_tx_lock, "uart");
9000000008000a5c:	1c000285 	pcaddu12i	$r5,20(0x14)
9000000008000a60:	02d8d0a5 	addi.d	$r5,$r5,1588(0x634)
9000000008000a64:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000a68:	02da7084 	addi.d	$r4,$r4,1692(0x69c)
9000000008000a6c:	5403d800 	bl	984(0x3d8) # 9000000008000e44 <initlock>
}
9000000008000a70:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008000a74:	28c00076 	ld.d	$r22,$r3,0
9000000008000a78:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000a7c:	4c000020 	jirl	$r0,$r1,0

9000000008000a80 <uartputc_sync>:
// use interrupts, for use by kernel printf() and
// to echo characters. it spins waiting for the uart's
// output register to be empty.
void
uartputc_sync(int c)
{
9000000008000a80:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000a84:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000a88:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000a8c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000a90:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000a94:	00150097 	move	$r23,$r4
  push_off();
9000000008000a98:	5402cc00 	bl	716(0x2cc) # 9000000008000d64 <push_off>

  if(panicked){
9000000008000a9c:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
9000000008000aa0:	28d7d18c 	ld.d	$r12,$r12,1524(0x5f4)
9000000008000aa4:	2880018c 	ld.w	$r12,$r12,0
    for(;;)
      ;
  }

  // wait for Transmit Holding Empty to be set in LSR.
  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
9000000008000aa8:	143fc40d 	lu12i.w	$r13,130592(0x1fe20)
  if(panicked){
9000000008000aac:	40000980 	beqz	$r12,8(0x8) # 9000000008000ab4 <uartputc_sync+0x34>
      ;
9000000008000ab0:	50000000 	b	0 # 9000000008000ab0 <uartputc_sync+0x30>
  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
9000000008000ab4:	038015ac 	ori	$r12,$r13,0x5
9000000008000ab8:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000abc:	2a00018c 	ld.bu	$r12,$r12,0
9000000008000ac0:	00c5158c 	bstrpick.d	$r12,$r12,0x5,0x5
9000000008000ac4:	43fff19f 	beqz	$r12,-16(0x7ffff0) # 9000000008000ab4 <uartputc_sync+0x34>
    ;
  WriteReg(THR, c);
9000000008000ac8:	006782ed 	bstrpick.w	$r13,$r23,0x7,0x0
9000000008000acc:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
9000000008000ad0:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000ad4:	2900018d 	st.b	$r13,$r12,0

  pop_off();
9000000008000ad8:	5402fc00 	bl	764(0x2fc) # 9000000008000dd4 <pop_off>
}
9000000008000adc:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000ae0:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000ae4:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000ae8:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000aec:	4c000020 	jirl	$r0,$r1,0

9000000008000af0 <uartstart>:
// called from both the top- and bottom-half.
void
uartstart()
{
  while(1){
    if(uart_tx_w == uart_tx_r){
9000000008000af0:	1c00060c 	pcaddu12i	$r12,48(0x30)
9000000008000af4:	02d7818c 	addi.d	$r12,$r12,1504(0x5e0)
9000000008000af8:	28c0018c 	ld.d	$r12,$r12,0
9000000008000afc:	1c00060d 	pcaddu12i	$r13,48(0x30)
9000000008000b00:	02d771ad 	addi.d	$r13,$r13,1500(0x5dc)
9000000008000b04:	28c001ad 	ld.d	$r13,$r13,0
9000000008000b08:	5800cdac 	beq	$r13,$r12,204(0xcc) # 9000000008000bd4 <uartstart+0xe4>
      // transmit buffer is empty.
      return;
    }
    
    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
9000000008000b0c:	143fc40d 	lu12i.w	$r13,130592(0x1fe20)
9000000008000b10:	038015ad 	ori	$r13,$r13,0x5
9000000008000b14:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
9000000008000b18:	2a0001ad 	ld.bu	$r13,$r13,0
9000000008000b1c:	00c515ad 	bstrpick.d	$r13,$r13,0x5,0x5
9000000008000b20:	4000b5a0 	beqz	$r13,180(0xb4) # 9000000008000bd4 <uartstart+0xe4>
{
9000000008000b24:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008000b28:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008000b2c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008000b30:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008000b34:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008000b38:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008000b3c:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008000b40:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008000b44:	02c10076 	addi.d	$r22,$r3,64(0x40)
      // so we cannot give it another byte.
      // it will interrupt when it's ready for a new byte.
      return;
    }
    
    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
9000000008000b48:	1c00061a 	pcaddu12i	$r26,48(0x30)
9000000008000b4c:	02d6635a 	addi.d	$r26,$r26,1432(0x598)
    uart_tx_r += 1;
9000000008000b50:	1c000618 	pcaddu12i	$r24,48(0x30)
9000000008000b54:	02d60318 	addi.d	$r24,$r24,1408(0x580)
    if(uart_tx_w == uart_tx_r){
9000000008000b58:	1c000619 	pcaddu12i	$r25,48(0x30)
9000000008000b5c:	02d60339 	addi.d	$r25,$r25,1408(0x580)
    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
9000000008000b60:	143fc41b 	lu12i.w	$r27,130592(0x1fe20)
    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
9000000008000b64:	03407d8d 	andi	$r13,$r12,0x1f
9000000008000b68:	0010b74d 	add.d	$r13,$r26,$r13
9000000008000b6c:	280001b7 	ld.b	$r23,$r13,0
    uart_tx_r += 1;
9000000008000b70:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000008000b74:	29c0030c 	st.d	$r12,$r24,0
    
    // maybe uartputc() is waiting for space in the buffer.
    wakeup(&uart_tx_r);
9000000008000b78:	00150304 	move	$r4,$r24
9000000008000b7c:	54156400 	bl	5476(0x1564) # 90000000080020e0 <wakeup>
    
    WriteReg(THR, c);
9000000008000b80:	006782f7 	bstrpick.w	$r23,$r23,0x7,0x0
9000000008000b84:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
9000000008000b88:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000b8c:	29000197 	st.b	$r23,$r12,0
    if(uart_tx_w == uart_tx_r){
9000000008000b90:	28c0030c 	ld.d	$r12,$r24,0
9000000008000b94:	28c0032d 	ld.d	$r13,$r25,0
9000000008000b98:	580019ac 	beq	$r13,$r12,24(0x18) # 9000000008000bb0 <uartstart+0xc0>
    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
9000000008000b9c:	0380176d 	ori	$r13,$r27,0x5
9000000008000ba0:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
9000000008000ba4:	2a0001ad 	ld.bu	$r13,$r13,0
9000000008000ba8:	00c515ad 	bstrpick.d	$r13,$r13,0x5,0x5
9000000008000bac:	47ffb9bf 	bnez	$r13,-72(0x7fffb8) # 9000000008000b64 <uartstart+0x74>
  }
}
9000000008000bb0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008000bb4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008000bb8:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008000bbc:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008000bc0:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008000bc4:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008000bc8:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008000bcc:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008000bd0:	4c000020 	jirl	$r0,$r1,0
9000000008000bd4:	4c000020 	jirl	$r0,$r1,0

9000000008000bd8 <uartputc>:
{
9000000008000bd8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008000bdc:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008000be0:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008000be4:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008000be8:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008000bec:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008000bf0:	29c0007a 	st.d	$r26,$r3,0
9000000008000bf4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008000bf8:	00150099 	move	$r25,$r4
  acquire(&uart_tx_lock);
9000000008000bfc:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000c00:	02d41084 	addi.d	$r4,$r4,1284(0x504)
9000000008000c04:	5402ac00 	bl	684(0x2ac) # 9000000008000eb0 <acquire>
  if(panicked){
9000000008000c08:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
9000000008000c0c:	28d2218c 	ld.d	$r12,$r12,1160(0x488)
9000000008000c10:	2880018c 	ld.w	$r12,$r12,0
9000000008000c14:	40000980 	beqz	$r12,8(0x8) # 9000000008000c1c <uartputc+0x44>
      ;
9000000008000c18:	50000000 	b	0 # 9000000008000c18 <uartputc+0x40>
    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
9000000008000c1c:	1c00060c 	pcaddu12i	$r12,48(0x30)
9000000008000c20:	02d2f18c 	addi.d	$r12,$r12,1212(0x4bc)
9000000008000c24:	28c0018c 	ld.d	$r12,$r12,0
9000000008000c28:	1c00060d 	pcaddu12i	$r13,48(0x30)
9000000008000c2c:	02d2a1ad 	addi.d	$r13,$r13,1192(0x4a8)
9000000008000c30:	28c001ad 	ld.d	$r13,$r13,0
9000000008000c34:	02c081ad 	addi.d	$r13,$r13,32(0x20)
9000000008000c38:	5c0039ac 	bne	$r13,$r12,56(0x38) # 9000000008000c70 <uartputc+0x98>
      sleep(&uart_tx_r, &uart_tx_lock);
9000000008000c3c:	1c00061a 	pcaddu12i	$r26,48(0x30)
9000000008000c40:	02d3135a 	addi.d	$r26,$r26,1220(0x4c4)
9000000008000c44:	1c000617 	pcaddu12i	$r23,48(0x30)
9000000008000c48:	02d232f7 	addi.d	$r23,$r23,1164(0x48c)
    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
9000000008000c4c:	1c000618 	pcaddu12i	$r24,48(0x30)
9000000008000c50:	02d23318 	addi.d	$r24,$r24,1164(0x48c)
      sleep(&uart_tx_r, &uart_tx_lock);
9000000008000c54:	00150345 	move	$r5,$r26
9000000008000c58:	001502e4 	move	$r4,$r23
9000000008000c5c:	54129800 	bl	4760(0x1298) # 9000000008001ef4 <sleep>
    if(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
9000000008000c60:	28c0030c 	ld.d	$r12,$r24,0
9000000008000c64:	28c002ed 	ld.d	$r13,$r23,0
9000000008000c68:	02c081ad 	addi.d	$r13,$r13,32(0x20)
9000000008000c6c:	5bffe9ac 	beq	$r13,$r12,-24(0x3ffe8) # 9000000008000c54 <uartputc+0x7c>
      uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
9000000008000c70:	03407d8e 	andi	$r14,$r12,0x1f
9000000008000c74:	1c00060d 	pcaddu12i	$r13,48(0x30)
9000000008000c78:	02d1b1ad 	addi.d	$r13,$r13,1132(0x46c)
9000000008000c7c:	0010b9ad 	add.d	$r13,$r13,$r14
9000000008000c80:	290001b9 	st.b	$r25,$r13,0
      uart_tx_w += 1;
9000000008000c84:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000008000c88:	1c00060d 	pcaddu12i	$r13,48(0x30)
9000000008000c8c:	02d141ad 	addi.d	$r13,$r13,1104(0x450)
9000000008000c90:	29c001ac 	st.d	$r12,$r13,0
      uartstart();
9000000008000c94:	57fe5fff 	bl	-420(0xffffe5c) # 9000000008000af0 <uartstart>
      release(&uart_tx_lock);
9000000008000c98:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000c9c:	02d1a084 	addi.d	$r4,$r4,1128(0x468)
9000000008000ca0:	54027000 	bl	624(0x270) # 9000000008000f10 <release>
}
9000000008000ca4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008000ca8:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008000cac:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008000cb0:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008000cb4:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008000cb8:	28c0007a 	ld.d	$r26,$r3,0
9000000008000cbc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008000cc0:	4c000020 	jirl	$r0,$r1,0

9000000008000cc4 <uartgetc>:

// read one input character from the UART.
// return -1 if none is waiting.
int
uartgetc(void)
{
9000000008000cc4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000cc8:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000ccc:	02c04076 	addi.d	$r22,$r3,16(0x10)
  if(ReadReg(LSR) & 0x01){
9000000008000cd0:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
9000000008000cd4:	0380158c 	ori	$r12,$r12,0x5
9000000008000cd8:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000cdc:	2a00018c 	ld.bu	$r12,$r12,0
9000000008000ce0:	0340058c 	andi	$r12,$r12,0x1
9000000008000ce4:	40002180 	beqz	$r12,32(0x20) # 9000000008000d04 <uartgetc+0x40>
    // input data is ready.
    return ReadReg(RHR);
9000000008000ce8:	143fc40c 	lu12i.w	$r12,130592(0x1fe20)
9000000008000cec:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008000cf0:	2a000184 	ld.bu	$r4,$r12,0
9000000008000cf4:	00678084 	bstrpick.w	$r4,$r4,0x7,0x0
  } else {
    return -1;
  }
}
9000000008000cf8:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000cfc:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000d00:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008000d04:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008000d08:	53fff3ff 	b	-16(0xffffff0) # 9000000008000cf8 <uartgetc+0x34>

9000000008000d0c <uartintr>:
// handle a uart interrupt, raised because input has
// arrived, or the uart is ready for more output, or
// both. called from trap.c.
void
uartintr(void)
{
9000000008000d0c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000d10:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000d14:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000d18:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000d1c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  // read and process incoming characters.
  while(1){
    int c = uartgetc();
    if(c == -1)
9000000008000d20:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
    int c = uartgetc();
9000000008000d24:	57ffa3ff 	bl	-96(0xfffffa0) # 9000000008000cc4 <uartgetc>
    if(c == -1)
9000000008000d28:	58000c97 	beq	$r4,$r23,12(0xc) # 9000000008000d34 <uartintr+0x28>
      break;
    consoleintr(c);
9000000008000d2c:	57fa9bff 	bl	-1384(0xffffa98) # 90000000080007c4 <consoleintr>
  while(1){
9000000008000d30:	53fff7ff 	b	-12(0xffffff4) # 9000000008000d24 <uartintr+0x18>
  }

  // send buffered characters.
  acquire(&uart_tx_lock);
9000000008000d34:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000d38:	02cf3084 	addi.d	$r4,$r4,972(0x3cc)
9000000008000d3c:	54017400 	bl	372(0x174) # 9000000008000eb0 <acquire>
  uartstart();
9000000008000d40:	57fdb3ff 	bl	-592(0xffffdb0) # 9000000008000af0 <uartstart>
  release(&uart_tx_lock);
9000000008000d44:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008000d48:	02cef084 	addi.d	$r4,$r4,956(0x3bc)
9000000008000d4c:	5401c400 	bl	452(0x1c4) # 9000000008000f10 <release>
}
9000000008000d50:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000d54:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000d58:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000d5c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000d60:	4c000020 	jirl	$r0,$r1,0

9000000008000d64 <push_off>:

// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
// are initially off, then push_off, pop_off leaves them off.

void push_off(void) {
9000000008000d64:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000d68:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000d6c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000d70:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000d74:	02c08076 	addi.d	$r22,$r3,32(0x20)

static inline uint32
r_csr_crmd()
{
  uint32 x;
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008000d78:	0400000c 	csrrd	$r12,0x0
9000000008000d7c:	00150197 	move	$r23,$r12
9000000008000d80:	0400000c 	csrrd	$r12,0x0

// disable device interrupts
static inline void
intr_off()
{
  w_csr_crmd(r_csr_crmd() & ~CSR_CRMD_IE);
9000000008000d84:	02bfec0d 	addi.w	$r13,$r0,-5(0xffb)
9000000008000d88:	0014b58c 	and	$r12,$r12,$r13
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008000d8c:	0400002c 	csrwr	$r12,0x0
  int old = intr_get();

  intr_off();
  // printf("\e[32mpush_off()\e[0m: cpuid(): %d\n", cpuid());
  if (mycpu()->noff == 0)
9000000008000d90:	54096400 	bl	2404(0x964) # 90000000080016f4 <mycpu>
9000000008000d94:	2881a08c 	ld.w	$r12,$r4,104(0x68)
9000000008000d98:	40002980 	beqz	$r12,40(0x28) # 9000000008000dc0 <push_off+0x5c>
    mycpu()->intena = old;
  // printstring("push_off noff++ noff:\n");
  // printint(mycpu()->noff, 10, 1);
  // consputc('\n');
  mycpu()->noff += 1;
9000000008000d9c:	54095800 	bl	2392(0x958) # 90000000080016f4 <mycpu>
9000000008000da0:	2881a08c 	ld.w	$r12,$r4,104(0x68)
9000000008000da4:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000008000da8:	2981a08c 	st.w	$r12,$r4,104(0x68)
}
9000000008000dac:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000db0:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000db4:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000db8:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000dbc:	4c000020 	jirl	$r0,$r1,0
    mycpu()->intena = old;
9000000008000dc0:	54093400 	bl	2356(0x934) # 90000000080016f4 <mycpu>
  return (x & CSR_CRMD_IE) != 0;
9000000008000dc4:	00488aec 	srai.w	$r12,$r23,0x2
9000000008000dc8:	0340058c 	andi	$r12,$r12,0x1
9000000008000dcc:	2981b08c 	st.w	$r12,$r4,108(0x6c)
9000000008000dd0:	53ffcfff 	b	-52(0xfffffcc) # 9000000008000d9c <push_off+0x38>

9000000008000dd4 <pop_off>:

void pop_off(void) {
9000000008000dd4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000dd8:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008000ddc:	29c00076 	st.d	$r22,$r3,0
9000000008000de0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  struct cpu *c = mycpu();
9000000008000de4:	54091000 	bl	2320(0x910) # 90000000080016f4 <mycpu>
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008000de8:	0400000c 	csrrd	$r12,0x0

  // printf("\e[31mpop_off()\e[0m: cpuid(): %d\n", cpuid());
  if (intr_get())
9000000008000dec:	00c2098c 	bstrpick.d	$r12,$r12,0x2,0x2
9000000008000df0:	44003d80 	bnez	$r12,60(0x3c) # 9000000008000e2c <pop_off+0x58>
    panic("pop_off - interruptible");
  if (c->noff < 1) {
9000000008000df4:	2881a08c 	ld.w	$r12,$r4,104(0x68)
9000000008000df8:	6400400c 	bge	$r0,$r12,64(0x40) # 9000000008000e38 <pop_off+0x64>
  // printf("c: %x\n", c);
  // printstring("pop_off noff--\n");
  // printstring("pop_off noff-- noff:\n");
  // printint(mycpu()->noff, 10, 1);
  // consputc('\n');
  c->noff -= 1;
9000000008000dfc:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000008000e00:	2981a08c 	st.w	$r12,$r4,104(0x68)
  if (c->noff == 0 && c->intena)
9000000008000e04:	44001980 	bnez	$r12,24(0x18) # 9000000008000e1c <pop_off+0x48>
9000000008000e08:	2881b08c 	ld.w	$r12,$r4,108(0x6c)
9000000008000e0c:	40001180 	beqz	$r12,16(0x10) # 9000000008000e1c <pop_off+0x48>
9000000008000e10:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() | CSR_CRMD_IE);
9000000008000e14:	0380118c 	ori	$r12,$r12,0x4
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008000e18:	0400002c 	csrwr	$r12,0x0
    intr_on();
}
9000000008000e1c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008000e20:	28c00076 	ld.d	$r22,$r3,0
9000000008000e24:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000e28:	4c000020 	jirl	$r0,$r1,0
    panic("pop_off - interruptible");
9000000008000e2c:	1c000284 	pcaddu12i	$r4,20(0x14)
9000000008000e30:	02c9b084 	addi.d	$r4,$r4,620(0x26c)
9000000008000e34:	57f3d3ff 	bl	-3120(0xffff3d0) # 9000000008000204 <panic>
    panic("pop_off");
9000000008000e38:	1c000284 	pcaddu12i	$r4,20(0x14)
9000000008000e3c:	02c9e084 	addi.d	$r4,$r4,632(0x278)
9000000008000e40:	57f3c7ff 	bl	-3132(0xffff3c4) # 9000000008000204 <panic>

9000000008000e44 <initlock>:
#include "include/printf.h"
#include "include/proc.h"
#include "include/loongarch.h"
#include "include/types.h"

void initlock(struct spinlock *lk, char *name) {
9000000008000e44:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000e48:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000e4c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  lk->name = name;
9000000008000e50:	29c02085 	st.d	$r5,$r4,8(0x8)
  lk->locked = 0;
9000000008000e54:	29800080 	st.w	$r0,$r4,0
  lk->cpu = 0;
9000000008000e58:	29c04080 	st.d	$r0,$r4,16(0x10)
}
9000000008000e5c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000e60:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000e64:	4c000020 	jirl	$r0,$r1,0

9000000008000e68 <holding>:

// Check whether this cpu is holding the lock.
// Interrupts must be off.
int holding(struct spinlock *lk) {
  int r;
  r = (lk->locked && lk->cpu == mycpu());
9000000008000e68:	2880008c 	ld.w	$r12,$r4,0
9000000008000e6c:	44000d80 	bnez	$r12,12(0xc) # 9000000008000e78 <holding+0x10>
9000000008000e70:	00150004 	move	$r4,$r0
  return r;
}
9000000008000e74:	4c000020 	jirl	$r0,$r1,0
int holding(struct spinlock *lk) {
9000000008000e78:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000e7c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000e80:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000e84:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000e88:	02c08076 	addi.d	$r22,$r3,32(0x20)
  r = (lk->locked && lk->cpu == mycpu());
9000000008000e8c:	28c04097 	ld.d	$r23,$r4,16(0x10)
9000000008000e90:	54086400 	bl	2148(0x864) # 90000000080016f4 <mycpu>
9000000008000e94:	001592e4 	xor	$r4,$r23,$r4
9000000008000e98:	02400484 	sltui	$r4,$r4,1(0x1)
}
9000000008000e9c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000ea0:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000ea4:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000ea8:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000eac:	4c000020 	jirl	$r0,$r1,0

9000000008000eb0 <acquire>:
void acquire(struct spinlock *lk) {
9000000008000eb0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000eb4:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000eb8:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000ebc:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000ec0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000ec4:	00150097 	move	$r23,$r4
  push_off(); // disable interrupts to avoid deadlock.
9000000008000ec8:	57fe9fff 	bl	-356(0xffffe9c) # 9000000008000d64 <push_off>
  if (holding(lk))
9000000008000ecc:	001502e4 	move	$r4,$r23
9000000008000ed0:	57ff9bff 	bl	-104(0xfffff98) # 9000000008000e68 <holding>
  while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
9000000008000ed4:	0280040d 	addi.w	$r13,$r0,1(0x1)
  if (holding(lk))
9000000008000ed8:	44002c80 	bnez	$r4,44(0x2c) # 9000000008000f04 <acquire+0x54>
  while (__sync_lock_test_and_set(&lk->locked, 1) != 0)
9000000008000edc:	386936ec 	amswap_db.w	$r12,$r13,$r23
9000000008000ee0:	47fffd9f 	bnez	$r12,-4(0x7ffffc) # 9000000008000edc <acquire+0x2c>
  __sync_synchronize();
9000000008000ee4:	38720000 	dbar	0x0
  lk->cpu = mycpu();
9000000008000ee8:	54080c00 	bl	2060(0x80c) # 90000000080016f4 <mycpu>
9000000008000eec:	29c042e4 	st.d	$r4,$r23,16(0x10)
}
9000000008000ef0:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000ef4:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000ef8:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000efc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000f00:	4c000020 	jirl	$r0,$r1,0
    panic("acquire");
9000000008000f04:	1c000284 	pcaddu12i	$r4,20(0x14)
9000000008000f08:	02c6d084 	addi.d	$r4,$r4,436(0x1b4)
9000000008000f0c:	57f2fbff 	bl	-3336(0xffff2f8) # 9000000008000204 <panic>

9000000008000f10 <release>:
void release(struct spinlock *lk) {
9000000008000f10:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008000f14:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008000f18:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008000f1c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008000f20:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008000f24:	00150097 	move	$r23,$r4
  if (!holding(lk))
9000000008000f28:	57ff43ff 	bl	-192(0xfffff40) # 9000000008000e68 <holding>
9000000008000f2c:	40002c80 	beqz	$r4,44(0x2c) # 9000000008000f58 <release+0x48>
  lk->cpu = 0;
9000000008000f30:	29c042e0 	st.d	$r0,$r23,16(0x10)
  __sync_synchronize();
9000000008000f34:	38720000 	dbar	0x0
  __sync_lock_release(&lk->locked);
9000000008000f38:	38720001 	dbar	0x1
9000000008000f3c:	298002e0 	st.w	$r0,$r23,0
  pop_off();
9000000008000f40:	57fe97ff 	bl	-364(0xffffe94) # 9000000008000dd4 <pop_off>
}
9000000008000f44:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008000f48:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008000f4c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008000f50:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008000f54:	4c000020 	jirl	$r0,$r1,0
    panic("release");
9000000008000f58:	1c000284 	pcaddu12i	$r4,20(0x14)
9000000008000f5c:	02c5a084 	addi.d	$r4,$r4,360(0x168)
9000000008000f60:	57f2a7ff 	bl	-3420(0xffff2a4) # 9000000008000204 <panic>

9000000008000f64 <memset>:
#include "include/types.h"

void *memset(void *dst, int c, uint n) {
9000000008000f64:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000f68:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000f6c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  char *cdst = (char *)dst;
  int i;
  for (i = 0; i < n; i++) {
9000000008000f70:	400024c0 	beqz	$r6,36(0x24) # 9000000008000f94 <memset+0x30>
9000000008000f74:	0015008c 	move	$r12,$r4
9000000008000f78:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
9000000008000f7c:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
9000000008000f80:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008000f84:	001091ad 	add.d	$r13,$r13,$r4
    cdst[i] = c;
9000000008000f88:	29000185 	st.b	$r5,$r12,0
9000000008000f8c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
  for (i = 0; i < n; i++) {
9000000008000f90:	5ffff98d 	bne	$r12,$r13,-8(0x3fff8) # 9000000008000f88 <memset+0x24>
  }
  return dst;
}
9000000008000f94:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000f98:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000f9c:	4c000020 	jirl	$r0,$r1,0

9000000008000fa0 <memcmp>:

int memcmp(const void *v1, const void *v2, uint n) {
9000000008000fa0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008000fa4:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008000fa8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  const uchar *s1, *s2;

  s1 = v1;
  s2 = v2;
  while (n-- > 0) {
9000000008000fac:	400058c0 	beqz	$r6,88(0x58) # 9000000008001004 <memcmp+0x64>
9000000008000fb0:	02bffccf 	addi.w	$r15,$r6,-1(0xfff)
    if (*s1 != *s2)
9000000008000fb4:	2a00008c 	ld.bu	$r12,$r4,0
9000000008000fb8:	2a0000ad 	ld.bu	$r13,$r5,0
9000000008000fbc:	0015018e 	move	$r14,$r12
9000000008000fc0:	00df01ef 	bstrpick.d	$r15,$r15,0x1f,0x0
9000000008000fc4:	02c005ef 	addi.d	$r15,$r15,1(0x1)
9000000008000fc8:	0010bc8f 	add.d	$r15,$r4,$r15
9000000008000fcc:	5c0021cd 	bne	$r14,$r13,32(0x20) # 9000000008000fec <memcmp+0x4c>
      return *s1 - *s2;
    s1++, s2++;
9000000008000fd0:	02c00484 	addi.d	$r4,$r4,1(0x1)
9000000008000fd4:	02c004a5 	addi.d	$r5,$r5,1(0x1)
  while (n-- > 0) {
9000000008000fd8:	5800248f 	beq	$r4,$r15,36(0x24) # 9000000008000ffc <memcmp+0x5c>
    if (*s1 != *s2)
9000000008000fdc:	2a00008c 	ld.bu	$r12,$r4,0
9000000008000fe0:	2a0000ad 	ld.bu	$r13,$r5,0
9000000008000fe4:	0015018e 	move	$r14,$r12
9000000008000fe8:	5bffe9cd 	beq	$r14,$r13,-24(0x3ffe8) # 9000000008000fd0 <memcmp+0x30>
      return *s1 - *s2;
9000000008000fec:	00113584 	sub.w	$r4,$r12,$r13
  }

  return 0;
}
9000000008000ff0:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008000ff4:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008000ff8:	4c000020 	jirl	$r0,$r1,0
  return 0;
9000000008000ffc:	00150004 	move	$r4,$r0
9000000008001000:	53fff3ff 	b	-16(0xffffff0) # 9000000008000ff0 <memcmp+0x50>
9000000008001004:	00150004 	move	$r4,$r0
9000000008001008:	53ffebff 	b	-24(0xfffffe8) # 9000000008000ff0 <memcmp+0x50>

900000000800100c <memmove>:

void *memmove(void *dst, const void *src, uint n) {
900000000800100c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008001010:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008001014:	02c04076 	addi.d	$r22,$r3,16(0x10)
  const char *s;
  char *d;

  s = src;
  d = dst;
  if (s < d && s + n > d) {
9000000008001018:	68003ca4 	bltu	$r5,$r4,60(0x3c) # 9000000008001054 <memmove+0x48>
    s += n;
    d += n;
    while (n-- > 0)
      *--d = *--s;
  } else
    while (n-- > 0)
900000000800101c:	02bffcce 	addi.w	$r14,$r6,-1(0xfff)
9000000008001020:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
9000000008001024:	02c005ce 	addi.d	$r14,$r14,1(0x1)
9000000008001028:	0010b8ae 	add.d	$r14,$r5,$r14
900000000800102c:	0015008c 	move	$r12,$r4
9000000008001030:	400018c0 	beqz	$r6,24(0x18) # 9000000008001048 <memmove+0x3c>
      *d++ = *s++;
9000000008001034:	02c004a5 	addi.d	$r5,$r5,1(0x1)
9000000008001038:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800103c:	283ffcad 	ld.b	$r13,$r5,-1(0xfff)
9000000008001040:	293ffd8d 	st.b	$r13,$r12,-1(0xfff)
    while (n-- > 0)
9000000008001044:	5ffff0ae 	bne	$r5,$r14,-16(0x3fff0) # 9000000008001034 <memmove+0x28>

  return dst;
}
9000000008001048:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800104c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008001050:	4c000020 	jirl	$r0,$r1,0
  if (s < d && s + n > d) {
9000000008001054:	00df00cd 	bstrpick.d	$r13,$r6,0x1f,0x0
9000000008001058:	0010b4ac 	add.d	$r12,$r5,$r13
900000000800105c:	6fffc08c 	bgeu	$r4,$r12,-64(0x3ffc0) # 900000000800101c <memmove+0x10>
    d += n;
9000000008001060:	0010b48d 	add.d	$r13,$r4,$r13
    while (n-- > 0)
9000000008001064:	02bffcce 	addi.w	$r14,$r6,-1(0xfff)
9000000008001068:	43ffe0df 	beqz	$r6,-32(0x7fffe0) # 9000000008001048 <memmove+0x3c>
900000000800106c:	00df01cf 	bstrpick.d	$r15,$r14,0x1f,0x0
9000000008001070:	00143c0f 	nor	$r15,$r0,$r15
9000000008001074:	0010bd8f 	add.d	$r15,$r12,$r15
      *--d = *--s;
9000000008001078:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000800107c:	02fffdad 	addi.d	$r13,$r13,-1(0xfff)
9000000008001080:	2800018e 	ld.b	$r14,$r12,0
9000000008001084:	290001ae 	st.b	$r14,$r13,0
    while (n-- > 0)
9000000008001088:	5ffff1ec 	bne	$r15,$r12,-16(0x3fff0) # 9000000008001078 <memmove+0x6c>
900000000800108c:	53ffbfff 	b	-68(0xfffffbc) # 9000000008001048 <memmove+0x3c>

9000000008001090 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void *memcpy(void *dst, const void *src, uint n) {
9000000008001090:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008001094:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008001098:	29c00076 	st.d	$r22,$r3,0
900000000800109c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return memmove(dst, src, n);
90000000080010a0:	57ff6fff 	bl	-148(0xfffff6c) # 900000000800100c <memmove>
}
90000000080010a4:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080010a8:	28c00076 	ld.d	$r22,$r3,0
90000000080010ac:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080010b0:	4c000020 	jirl	$r0,$r1,0

90000000080010b4 <strncmp>:

int strncmp(const char *p, const char *q, uint n) {
90000000080010b4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080010b8:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080010bc:	02c04076 	addi.d	$r22,$r3,16(0x10)
  while (n > 0 && *p && *p == *q)
90000000080010c0:	400058c0 	beqz	$r6,88(0x58) # 9000000008001118 <strncmp+0x64>
90000000080010c4:	2800008c 	ld.b	$r12,$r4,0
90000000080010c8:	40003980 	beqz	$r12,56(0x38) # 9000000008001100 <strncmp+0x4c>
90000000080010cc:	280000ad 	ld.b	$r13,$r5,0
90000000080010d0:	5c0031ac 	bne	$r13,$r12,48(0x30) # 9000000008001100 <strncmp+0x4c>
90000000080010d4:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
90000000080010d8:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
90000000080010dc:	02c005ad 	addi.d	$r13,$r13,1(0x1)
90000000080010e0:	0010b48d 	add.d	$r13,$r4,$r13
    n--, p++, q++;
90000000080010e4:	02c00484 	addi.d	$r4,$r4,1(0x1)
90000000080010e8:	02c004a5 	addi.d	$r5,$r5,1(0x1)
  while (n > 0 && *p && *p == *q)
90000000080010ec:	5800348d 	beq	$r4,$r13,52(0x34) # 9000000008001120 <strncmp+0x6c>
90000000080010f0:	2800008c 	ld.b	$r12,$r4,0
90000000080010f4:	40000d80 	beqz	$r12,12(0xc) # 9000000008001100 <strncmp+0x4c>
90000000080010f8:	280000ae 	ld.b	$r14,$r5,0
90000000080010fc:	5bffe9cc 	beq	$r14,$r12,-24(0x3ffe8) # 90000000080010e4 <strncmp+0x30>
  if (n == 0)
    return 0;
  return (uchar)*p - (uchar)*q;
9000000008001100:	2a000084 	ld.bu	$r4,$r4,0
9000000008001104:	2a0000ac 	ld.bu	$r12,$r5,0
9000000008001108:	00113084 	sub.w	$r4,$r4,$r12
}
900000000800110c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008001110:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008001114:	4c000020 	jirl	$r0,$r1,0
    return 0;
9000000008001118:	00150004 	move	$r4,$r0
900000000800111c:	53fff3ff 	b	-16(0xffffff0) # 900000000800110c <strncmp+0x58>
9000000008001120:	00150004 	move	$r4,$r0
9000000008001124:	53ffebff 	b	-24(0xfffffe8) # 900000000800110c <strncmp+0x58>

9000000008001128 <strncpy>:

char *strncpy(char *s, const char *t, int n) {
9000000008001128:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800112c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008001130:	02c04076 	addi.d	$r22,$r3,16(0x10)
  char *os;

  os = s;
  while (n-- > 0 && (*s++ = *t++) != 0)
9000000008001134:	0015008c 	move	$r12,$r4
9000000008001138:	50000800 	b	8(0x8) # 9000000008001140 <strncpy+0x18>
900000000800113c:	001501e6 	move	$r6,$r15
9000000008001140:	02bffccf 	addi.w	$r15,$r6,-1(0xfff)
9000000008001144:	64001806 	bge	$r0,$r6,24(0x18) # 900000000800115c <strncpy+0x34>
9000000008001148:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800114c:	280000ad 	ld.b	$r13,$r5,0
9000000008001150:	293ffd8d 	st.b	$r13,$r12,-1(0xfff)
9000000008001154:	02c004a5 	addi.d	$r5,$r5,1(0x1)
9000000008001158:	47ffe5bf 	bnez	$r13,-28(0x7fffe4) # 900000000800113c <strncpy+0x14>
    ;
  while (n-- > 0)
900000000800115c:	0015018e 	move	$r14,$r12
9000000008001160:	0040818d 	slli.w	$r13,$r12,0x0
9000000008001164:	6400200f 	bge	$r0,$r15,32(0x20) # 9000000008001184 <strncpy+0x5c>
    *s++ = 0;
9000000008001168:	02c005ce 	addi.d	$r14,$r14,1(0x1)
900000000800116c:	293ffdc0 	st.b	$r0,$r14,-1(0xfff)
9000000008001170:	004081cc 	slli.w	$r12,$r14,0x0
9000000008001174:	0014300c 	nor	$r12,$r0,$r12
9000000008001178:	0010358c 	add.w	$r12,$r12,$r13
  while (n-- > 0)
900000000800117c:	0010198c 	add.w	$r12,$r12,$r6
9000000008001180:	63ffe80c 	blt	$r0,$r12,-24(0x3ffe8) # 9000000008001168 <strncpy+0x40>
  return os;
}
9000000008001184:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008001188:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800118c:	4c000020 	jirl	$r0,$r1,0

9000000008001190 <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char *safestrcpy(char *s, const char *t, int n) {
9000000008001190:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008001194:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008001198:	02c04076 	addi.d	$r22,$r3,16(0x10)
  char *os;

  os = s;
  if (n <= 0)
900000000800119c:	64003006 	bge	$r0,$r6,48(0x30) # 90000000080011cc <safestrcpy+0x3c>
90000000080011a0:	02bffcce 	addi.w	$r14,$r6,-1(0xfff)
90000000080011a4:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
90000000080011a8:	0010b8ae 	add.d	$r14,$r5,$r14
90000000080011ac:	0015008c 	move	$r12,$r4
    return os;
  while (--n > 0 && (*s++ = *t++) != 0)
90000000080011b0:	580018ae 	beq	$r5,$r14,24(0x18) # 90000000080011c8 <safestrcpy+0x38>
90000000080011b4:	02c004a5 	addi.d	$r5,$r5,1(0x1)
90000000080011b8:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000080011bc:	283ffcad 	ld.b	$r13,$r5,-1(0xfff)
90000000080011c0:	293ffd8d 	st.b	$r13,$r12,-1(0xfff)
90000000080011c4:	47ffedbf 	bnez	$r13,-20(0x7fffec) # 90000000080011b0 <safestrcpy+0x20>
    ;
  *s = 0;
90000000080011c8:	29000180 	st.b	$r0,$r12,0
  return os;
}
90000000080011cc:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080011d0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080011d4:	4c000020 	jirl	$r0,$r1,0

90000000080011d8 <strlen>:

int strlen(const char *s) {
90000000080011d8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080011dc:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080011e0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  int n;

  for (n = 0; s[n]; n++)
90000000080011e4:	2800008c 	ld.b	$r12,$r4,0
90000000080011e8:	40003980 	beqz	$r12,56(0x38) # 9000000008001220 <strlen+0x48>
90000000080011ec:	02c00484 	addi.d	$r4,$r4,1(0x1)
90000000080011f0:	0015008c 	move	$r12,$r4
90000000080011f4:	00408084 	slli.w	$r4,$r4,0x0
90000000080011f8:	0280040e 	addi.w	$r14,$r0,1(0x1)
90000000080011fc:	001111ce 	sub.w	$r14,$r14,$r4
    ;
9000000008001200:	00408184 	slli.w	$r4,$r12,0x0
9000000008001204:	001011c4 	add.w	$r4,$r14,$r4
9000000008001208:	02c0058c 	addi.d	$r12,$r12,1(0x1)
  for (n = 0; s[n]; n++)
900000000800120c:	283ffd8d 	ld.b	$r13,$r12,-1(0xfff)
9000000008001210:	47fff1bf 	bnez	$r13,-16(0x7ffff0) # 9000000008001200 <strlen+0x28>
  return n;
}
9000000008001214:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008001218:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800121c:	4c000020 	jirl	$r0,$r1,0
  for (n = 0; s[n]; n++)
9000000008001220:	00150004 	move	$r4,$r0
9000000008001224:	53fff3ff 	b	-16(0xffffff0) # 9000000008001214 <strlen+0x3c>

9000000008001228 <wnstr>:

// convert uchar string into wide char string
void wnstr(wchar *dst, char const *src, int len) {
9000000008001228:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800122c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008001230:	02c04076 	addi.d	$r22,$r3,16(0x10)
  while (len-- && *src) {
9000000008001234:	0015008d 	move	$r13,$r4
9000000008001238:	40003cc0 	beqz	$r6,60(0x3c) # 9000000008001274 <wnstr+0x4c>
900000000800123c:	280000ac 	ld.b	$r12,$r5,0
9000000008001240:	40003580 	beqz	$r12,52(0x34) # 9000000008001274 <wnstr+0x4c>
9000000008001244:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
9000000008001248:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
900000000800124c:	002c01ad 	alsl.d	$r13,$r13,$r0,0x1
9000000008001250:	02c009ad 	addi.d	$r13,$r13,2(0x2)
9000000008001254:	0010b48d 	add.d	$r13,$r4,$r13
    *(uchar *)dst = *src++;
9000000008001258:	02c004a5 	addi.d	$r5,$r5,1(0x1)
900000000800125c:	2900008c 	st.b	$r12,$r4,0
    dst++;
9000000008001260:	02c00884 	addi.d	$r4,$r4,2(0x2)
  while (len-- && *src) {
9000000008001264:	5800108d 	beq	$r4,$r13,16(0x10) # 9000000008001274 <wnstr+0x4c>
9000000008001268:	280000ac 	ld.b	$r12,$r5,0
900000000800126c:	47ffed9f 	bnez	$r12,-20(0x7fffec) # 9000000008001258 <wnstr+0x30>
    dst++;
9000000008001270:	0015008d 	move	$r13,$r4
  }

  *dst = 0;
9000000008001274:	294001a0 	st.h	$r0,$r13,0
}
9000000008001278:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800127c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008001280:	4c000020 	jirl	$r0,$r1,0

9000000008001284 <snstr>:

// convert wide char string into uchar string
void snstr(char *dst, wchar const *src, int len) {
9000000008001284:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008001288:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800128c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  while (len-- && *src) {
9000000008001290:	400078c0 	beqz	$r6,120(0x78) # 9000000008001308 <snstr+0x84>
9000000008001294:	02bffccc 	addi.w	$r12,$r6,-1(0xfff)
9000000008001298:	2a4000af 	ld.hu	$r15,$r5,0
900000000800129c:	0015008d 	move	$r13,$r4
90000000080012a0:	400049e0 	beqz	$r15,72(0x48) # 90000000080012e8 <snstr+0x64>
90000000080012a4:	02bffccd 	addi.w	$r13,$r6,-1(0xfff)
90000000080012a8:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
90000000080012ac:	02c005ad 	addi.d	$r13,$r13,1(0x1)
90000000080012b0:	0010b48d 	add.d	$r13,$r4,$r13
90000000080012b4:	0015008e 	move	$r14,$r4
90000000080012b8:	00408084 	slli.w	$r4,$r4,0x0
    *dst++ = (uchar)(*src & 0xff);
90000000080012bc:	02c005ce 	addi.d	$r14,$r14,1(0x1)
90000000080012c0:	293ffdcf 	st.b	$r15,$r14,-1(0xfff)
    src++;
90000000080012c4:	02c008a5 	addi.d	$r5,$r5,2(0x2)
90000000080012c8:	004081cc 	slli.w	$r12,$r14,0x0
90000000080012cc:	0014300c 	nor	$r12,$r0,$r12
90000000080012d0:	0010198c 	add.w	$r12,$r12,$r6
90000000080012d4:	0010308c 	add.w	$r12,$r4,$r12
  while (len-- && *src) {
90000000080012d8:	580011cd 	beq	$r14,$r13,16(0x10) # 90000000080012e8 <snstr+0x64>
90000000080012dc:	2a4000af 	ld.hu	$r15,$r5,0
90000000080012e0:	47ffddff 	bnez	$r15,-36(0x7fffdc) # 90000000080012bc <snstr+0x38>
    *dst++ = (uchar)(*src & 0xff);
90000000080012e4:	001501cd 	move	$r13,$r14
90000000080012e8:	02bffd8e 	addi.w	$r14,$r12,-1(0xfff)
90000000080012ec:	00df01ce 	bstrpick.d	$r14,$r14,0x1f,0x0
90000000080012f0:	02c005ce 	addi.d	$r14,$r14,1(0x1)
90000000080012f4:	0010b9ae 	add.d	$r14,$r13,$r14
  }
  while (len-- > 0)
90000000080012f8:	6400100c 	bge	$r0,$r12,16(0x10) # 9000000008001308 <snstr+0x84>
    *dst++ = 0;
90000000080012fc:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008001300:	293ffda0 	st.b	$r0,$r13,-1(0xfff)
  while (len-- > 0)
9000000008001304:	5ffff9cd 	bne	$r14,$r13,-8(0x3fff8) # 90000000080012fc <snstr+0x78>
}
9000000008001308:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800130c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008001310:	4c000020 	jirl	$r0,$r1,0

9000000008001314 <wcsncmp>:

int wcsncmp(wchar const *s1, wchar const *s2, int len) {
9000000008001314:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008001318:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800131c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  int ret = 0;

  while (len-- && *s1) {
9000000008001320:	00df00c6 	bstrpick.d	$r6,$r6,0x1f,0x0
9000000008001324:	002c00c6 	alsl.d	$r6,$r6,$r0,0x1
9000000008001328:	001098a6 	add.d	$r6,$r5,$r6
900000000800132c:	580024a6 	beq	$r5,$r6,36(0x24) # 9000000008001350 <wcsncmp+0x3c>
9000000008001330:	2a40008c 	ld.hu	$r12,$r4,0
9000000008001334:	40002180 	beqz	$r12,32(0x20) # 9000000008001354 <wcsncmp+0x40>
    ret = (int)(*s1++ - *s2++);
9000000008001338:	02c00884 	addi.d	$r4,$r4,2(0x2)
900000000800133c:	02c008a5 	addi.d	$r5,$r5,2(0x2)
9000000008001340:	2a7ff8ad 	ld.hu	$r13,$r5,-2(0xffe)
9000000008001344:	0011358c 	sub.w	$r12,$r12,$r13
    if (ret)
9000000008001348:	43ffe59f 	beqz	$r12,-28(0x7fffe4) # 900000000800132c <wcsncmp+0x18>
900000000800134c:	50000800 	b	8(0x8) # 9000000008001354 <wcsncmp+0x40>
9000000008001350:	0015000c 	move	$r12,$r0
      break;
  }

  return ret;
}
9000000008001354:	00150184 	move	$r4,$r12
9000000008001358:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800135c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008001360:	4c000020 	jirl	$r0,$r1,0

9000000008001364 <strchr>:

char *strchr(const char *s, char c) {
9000000008001364:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008001368:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800136c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  for (; *s; s++)
9000000008001370:	2800008e 	ld.b	$r14,$r4,0
9000000008001374:	40003dc0 	beqz	$r14,60(0x3c) # 90000000080013b0 <strchr+0x4c>
9000000008001378:	0015008d 	move	$r13,$r4
    if (*s == c)
900000000800137c:	001500ac 	move	$r12,$r5
9000000008001380:	00150185 	move	$r5,$r12
9000000008001384:	5800218e 	beq	$r12,$r14,32(0x20) # 90000000080013a4 <strchr+0x40>
  for (; *s; s++)
9000000008001388:	02c005ad 	addi.d	$r13,$r13,1(0x1)
900000000800138c:	280001ac 	ld.b	$r12,$r13,0
9000000008001390:	40001180 	beqz	$r12,16(0x10) # 90000000080013a0 <strchr+0x3c>
    if (*s == c)
9000000008001394:	5ffff585 	bne	$r12,$r5,-12(0x3fff4) # 9000000008001388 <strchr+0x24>
  for (; *s; s++)
9000000008001398:	001501a4 	move	$r4,$r13
900000000800139c:	50000800 	b	8(0x8) # 90000000080013a4 <strchr+0x40>
      return (char *)s;
  return 0;
90000000080013a0:	00150004 	move	$r4,$r0
90000000080013a4:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080013a8:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080013ac:	4c000020 	jirl	$r0,$r1,0
  return 0;
90000000080013b0:	00150004 	move	$r4,$r0
90000000080013b4:	53fff3ff 	b	-16(0xffffff0) # 90000000080013a4 <strchr+0x40>

90000000080013b8 <main>:
  asm volatile("addi.d %0, $tp, 0" : "=r" (x) );
90000000080013b8:	02c0004c 	addi.d	$r12,$r2,0
    started = 1;
    while (1);
    
  } else {
    // other hart
    while (started == 0)
90000000080013bc:	1c00060d 	pcaddu12i	$r13,48(0x30)
90000000080013c0:	02f571ad 	addi.d	$r13,$r13,-676(0xd5c)
  if (r_tp() == 0) {
90000000080013c4:	40001180 	beqz	$r12,16(0x10) # 90000000080013d4 <main+0x1c>
    while (started == 0)
90000000080013c8:	288001ac 	ld.w	$r12,$r13,0
90000000080013cc:	43fffd9f 	beqz	$r12,-4(0x7ffffc) # 90000000080013c8 <main+0x10>
90000000080013d0:	4c000020 	jirl	$r0,$r1,0
void main() {
90000000080013d4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080013d8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080013dc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080013e0:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080013e4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080013e8:	02c0004c 	addi.d	$r12,$r2,0
    int cpuid = r_tp();
90000000080013ec:	0040818c 	slli.w	$r12,$r12,0x0
90000000080013f0:	00150197 	move	$r23,$r12
    cpuinit();
90000000080013f4:	5400cc00 	bl	204(0xcc) # 90000000080014c0 <cpuinit>
    consoleinit();
90000000080013f8:	57f5a3ff 	bl	-2656(0xffff5a0) # 9000000008000998 <consoleinit>
    printfinit(); // init a lock for printf
90000000080013fc:	57f0a3ff 	bl	-3936(0xffff0a0) # 900000000800049c <printfinit>
    printf("DEBUG:hart %d enter main()...\n", cpuid);
9000000008001400:	001502e5 	move	$r5,$r23
9000000008001404:	1c000284 	pcaddu12i	$r4,20(0x14)
9000000008001408:	02f31084 	addi.d	$r4,$r4,-828(0xcc4)
900000000800140c:	57ee6bff 	bl	-4504(0xfffee68) # 9000000008000274 <printf>
    kinit();        // physical page allocator
9000000008001410:	541a4000 	bl	6720(0x1a40) # 9000000008002e50 <kinit>
    kvminit();      // create kernel page table
9000000008001414:	541fac00 	bl	8108(0x1fac) # 90000000080033c0 <kvminit>
    kvminithart();  // turn on paging
9000000008001418:	541bc800 	bl	7112(0x1bc8) # 9000000008002fe0 <kvminithart>
    timerinit();    // init a lock for timer
900000000800141c:	54d56400 	bl	54628(0xd564) # 900000000800e980 <timerinit>
    trapinit(); // install kernel trap vector, including interrupt handler
9000000008001420:	54496400 	bl	18788(0x4964) # 9000000008005d84 <trapinit>
    procinit();
9000000008001424:	5400d400 	bl	212(0xd4) # 90000000080014f8 <procinit>
    fileinit(); // file table
9000000008001428:	54379800 	bl	14232(0x3798) # 9000000008004bc0 <fileinit>
    userinit(); // first user process
900000000800142c:	5414f400 	bl	5364(0x14f4) # 9000000008002920 <userinit>
    printf("cpu %d init done\n", cpuid);
9000000008001430:	001502e5 	move	$r5,$r23
9000000008001434:	1c000284 	pcaddu12i	$r4,20(0x14)
9000000008001438:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
900000000800143c:	57ee3bff 	bl	-4552(0xfffee38) # 9000000008000274 <printf>
    __sync_synchronize();
9000000008001440:	38720000 	dbar	0x0
    started = 1;
9000000008001444:	1c00060c 	pcaddu12i	$r12,48(0x30)
9000000008001448:	02f3518c 	addi.d	$r12,$r12,-812(0xcd4)
900000000800144c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008001450:	2980018d 	st.w	$r13,$r12,0
    while (1);
9000000008001454:	50000000 	b	0 # 9000000008001454 <main+0x9c>
	...

9000000008001460 <wakeup1>:
}

//  Wake up p if it is sleeping in wait(); 
//  used by exit().
//  Caller must hold p->lock.
static void wakeup1(struct proc *p) {
9000000008001460:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008001464:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008001468:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800146c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008001470:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008001474:	00150097 	move	$r23,$r4
  if (!holding(&p->lock))
9000000008001478:	57f9f3ff 	bl	-1552(0xffff9f0) # 9000000008000e68 <holding>
900000000800147c:	40002080 	beqz	$r4,32(0x20) # 900000000800149c <wakeup1+0x3c>
    panic("wakeup1");
  if (p->chan == p && p->state == SLEEPING) {
9000000008001480:	28c0a2ec 	ld.d	$r12,$r23,40(0x28)
9000000008001484:	58002597 	beq	$r12,$r23,36(0x24) # 90000000080014a8 <wakeup1+0x48>
    p->state = RUNNABLE;
  }
}
9000000008001488:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800148c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001490:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008001494:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001498:	4c000020 	jirl	$r0,$r1,0
    panic("wakeup1");
900000000800149c:	1c000284 	pcaddu12i	$r4,20(0x14)
90000000080014a0:	02f19084 	addi.d	$r4,$r4,-924(0xc64)
90000000080014a4:	57ed63ff 	bl	-4768(0xfffed60) # 9000000008000204 <panic>
  if (p->chan == p && p->state == SLEEPING) {
90000000080014a8:	288062ed 	ld.w	$r13,$r23,24(0x18)
90000000080014ac:	0280080c 	addi.w	$r12,$r0,2(0x2)
90000000080014b0:	5fffd9ac 	bne	$r13,$r12,-40(0x3ffd8) # 9000000008001488 <wakeup1+0x28>
    p->state = RUNNABLE;
90000000080014b4:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000080014b8:	298062ec 	st.w	$r12,$r23,24(0x18)
}
90000000080014bc:	53ffcfff 	b	-52(0xfffffcc) # 9000000008001488 <wakeup1+0x28>

90000000080014c0 <cpuinit>:
void cpuinit(void) {
90000000080014c0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080014c4:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080014c8:	02c04076 	addi.d	$r22,$r3,16(0x10)
    it->proc = 0;
90000000080014cc:	1c000a6c 	pcaddu12i	$r12,83(0x53)
90000000080014d0:	02c2718c 	addi.d	$r12,$r12,156(0x9c)
90000000080014d4:	29c00180 	st.d	$r0,$r12,0
    it->intena = 0;
90000000080014d8:	2981b180 	st.w	$r0,$r12,108(0x6c)
    it->noff = 0;
90000000080014dc:	2981a180 	st.w	$r0,$r12,104(0x68)
    it->proc = 0;
90000000080014e0:	29c1c180 	st.d	$r0,$r12,112(0x70)
    it->intena = 0;
90000000080014e4:	29837180 	st.w	$r0,$r12,220(0xdc)
    it->noff = 0;
90000000080014e8:	29836180 	st.w	$r0,$r12,216(0xd8)
}
90000000080014ec:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080014f0:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080014f4:	4c000020 	jirl	$r0,$r1,0

90000000080014f8 <procinit>:
void procinit(void) {
90000000080014f8:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
90000000080014fc:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008001500:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008001504:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008001508:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800150c:	29c0e079 	st.d	$r25,$r3,56(0x38)
9000000008001510:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008001514:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008001518:	29c0807c 	st.d	$r28,$r3,32(0x20)
900000000800151c:	29c0607d 	st.d	$r29,$r3,24(0x18)
9000000008001520:	29c0407e 	st.d	$r30,$r3,16(0x10)
9000000008001524:	29c0207f 	st.d	$r31,$r3,8(0x8)
9000000008001528:	02c18076 	addi.d	$r22,$r3,96(0x60)
  magic_count = 0;
900000000800152c:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
9000000008001530:	28edb18c 	ld.d	$r12,$r12,-1172(0xb6c)
9000000008001534:	29800180 	st.w	$r0,$r12,0
  initlock(&pid_lock, "nextpid");
9000000008001538:	1c000285 	pcaddu12i	$r5,20(0x14)
900000000800153c:	02ef40a5 	addi.d	$r5,$r5,-1072(0xbd0)
9000000008001540:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008001544:	02efe084 	addi.d	$r4,$r4,-1032(0xbf8)
9000000008001548:	57f8ffff 	bl	-1796(0xffff8fc) # 9000000008000e44 <initlock>
  for (p = proc; p < &proc[NPROC]; p++) {
900000000800154c:	1c000618 	pcaddu12i	$r24,48(0x30)
9000000008001550:	02f03318 	addi.d	$r24,$r24,-1012(0xc0c)
9000000008001554:	02d36317 	addi.d	$r23,$r24,1240(0x4d8)
    initlock(&p->lock, "proc");
9000000008001558:	1c00029f 	pcaddu12i	$r31,20(0x14)
900000000800155c:	02eee3ff 	addi.d	$r31,$r31,-1096(0xbb8)
    memset(p->sig_set.__val, 0, sizeof(p->sig_set));
9000000008001560:	03acc01e 	ori	$r30,$r0,0xb30
    memset(p->sig_pending.__val, 0, sizeof(p->sig_pending));
9000000008001564:	03ace01d 	ori	$r29,$r0,0xb38
    uint64 va = KSTACK((int) (p - proc));
9000000008001568:	0015031c 	move	$r28,$r24
900000000800156c:	1404413b 	lu12i.w	$r27,8713(0x2209)
  for (p = proc; p < &proc[NPROC]; p++) {
9000000008001570:	1c00029a 	pcaddu12i	$r26,20(0x14)
9000000008001574:	02f5c35a 	addi.d	$r26,$r26,-656(0xd70)
    initlock(&p->lock, "proc");
9000000008001578:	00150319 	move	$r25,$r24
900000000800157c:	001503e5 	move	$r5,$r31
9000000008001580:	00150304 	move	$r4,$r24
9000000008001584:	57f8c3ff 	bl	-1856(0xffff8c0) # 9000000008000e44 <initlock>
    p->state = UNUSED;
9000000008001588:	29806300 	st.w	$r0,$r24,24(0x18)
    p->parent = 0;
900000000800158c:	29c08300 	st.d	$r0,$r24,32(0x20)
    p->chan = 0;
9000000008001590:	29c0a300 	st.d	$r0,$r24,40(0x28)
    p->killed = 0;
9000000008001594:	2980c300 	st.w	$r0,$r24,48(0x30)
    p->xstate = 0;
9000000008001598:	2980d300 	st.w	$r0,$r24,52(0x34)
    p->pid = 0;
900000000800159c:	2980e300 	st.w	$r0,$r24,56(0x38)
    p->kstack = 0;
90000000080015a0:	29c14300 	st.d	$r0,$r24,80(0x50)
    p->sz = 0;
90000000080015a4:	29c16300 	st.d	$r0,$r24,88(0x58)
    p->pagetable = 0;
90000000080015a8:	29c18300 	st.d	$r0,$r24,96(0x60)
    p->kpagetable = 0;
90000000080015ac:	29c1a300 	st.d	$r0,$r24,104(0x68)
    p->trapframe = 0;
90000000080015b0:	29c1c300 	st.d	$r0,$r24,112(0x70)
      for (int i = 0; i < NOFILE; i++)
90000000080015b4:	02c3630c 	addi.d	$r12,$r24,216(0xd8)
        p->ofile[i] = 0;
90000000080015b8:	29c00180 	st.d	$r0,$r12,0
90000000080015bc:	02c0218c 	addi.d	$r12,$r12,8(0x8)
      for (int i = 0; i < NOFILE; i++)
90000000080015c0:	5ffff997 	bne	$r12,$r23,-8(0x3fff8) # 90000000080015b8 <procinit+0xc0>
    p->cwd = 0;
90000000080015c4:	29d38300 	st.d	$r0,$r24,1248(0x4e0)
    p->name[0] = 0;
90000000080015c8:	2913a300 	st.b	$r0,$r24,1256(0x4e8)
    p->vma = 0;
90000000080015cc:	29d40300 	st.d	$r0,$r24,1280(0x500)
    p->tmask = 0;
90000000080015d0:	2993e300 	st.w	$r0,$r24,1272(0x4f8)
    p->ktime = 0;
90000000080015d4:	29942300 	st.w	$r0,$r24,1288(0x508)
    p->utime = 0;
90000000080015d8:	29943300 	st.w	$r0,$r24,1292(0x50c)
    memset(p->sigaction, 0, sizeof(p->sigaction));
90000000080015dc:	02986006 	addi.w	$r6,$r0,1560(0x618)
90000000080015e0:	00150005 	move	$r5,$r0
90000000080015e4:	02d46324 	addi.d	$r4,$r25,1304(0x518)
90000000080015e8:	57f97fff 	bl	-1668(0xffff97c) # 9000000008000f64 <memset>
    memset(p->sig_set.__val, 0, sizeof(p->sig_set));
90000000080015ec:	02802006 	addi.w	$r6,$r0,8(0x8)
90000000080015f0:	00150005 	move	$r5,$r0
90000000080015f4:	0010fb24 	add.d	$r4,$r25,$r30
90000000080015f8:	57f96fff 	bl	-1684(0xffff96c) # 9000000008000f64 <memset>
    memset(p->sig_pending.__val, 0, sizeof(p->sig_pending));
90000000080015fc:	02802006 	addi.w	$r6,$r0,8(0x8)
9000000008001600:	00150005 	move	$r5,$r0
9000000008001604:	0010f724 	add.d	$r4,$r25,$r29
9000000008001608:	57f95fff 	bl	-1700(0xffff95c) # 9000000008000f64 <memset>
    p->sig_tf = NULL;
900000000800160c:	270b4300 	stptr.d	$r0,$r24,2880(0xb40)
    char *pa = kalloc();
9000000008001610:	5418c000 	bl	6336(0x18c0) # 9000000008002ed0 <kalloc>
    if(pa == 0)
9000000008001614:	4000b480 	beqz	$r4,180(0xb4) # 90000000080016c8 <procinit+0x1d0>
    uint64 va = KSTACK((int) (p - proc));
9000000008001618:	0011f30c 	sub.d	$r12,$r24,$r28
900000000800161c:	00490d8c 	srai.d	$r12,$r12,0x3
9000000008001620:	03bb676d 	ori	$r13,$r27,0xed9
9000000008001624:	17c46ead 	lu32i.d	$r13,-121995(0xe2375)
9000000008001628:	033e65ad 	lu52i.d	$r13,$r13,-103(0xf99)
900000000800162c:	001db58c 	mul.d	$r12,$r12,$r13
9000000008001630:	0040818c 	slli.w	$r12,$r12,0x0
9000000008001634:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000008001638:	0040b58c 	slli.w	$r12,$r12,0xd
900000000800163c:	14001fd9 	lu12i.w	$r25,254(0xfe)
9000000008001640:	0011b339 	sub.d	$r25,$r25,$r12
    kvmmap(va, (uint64)pa, PGSIZE, ~PTE_NR & PTE_W);
9000000008001644:	02840007 	addi.w	$r7,$r0,256(0x100)
9000000008001648:	14000026 	lu12i.w	$r6,1(0x1)
900000000800164c:	00150085 	move	$r5,$r4
9000000008001650:	00150324 	move	$r4,$r25
9000000008001654:	541d2000 	bl	7456(0x1d20) # 9000000008003374 <kvmmap>
    p->kstack = va;
9000000008001658:	29c14319 	st.d	$r25,$r24,80(0x50)
  for (p = proc; p < &proc[NPROC]; p++) {
900000000800165c:	03ad200c 	ori	$r12,$r0,0xb48
9000000008001660:	0010b318 	add.d	$r24,$r24,$r12
9000000008001664:	0010b2f7 	add.d	$r23,$r23,$r12
9000000008001668:	28c0034c 	ld.d	$r12,$r26,0
900000000800166c:	5fff0f0c 	bne	$r24,$r12,-244(0x3ff0c) # 9000000008001578 <procinit+0x80>
  kvminithart();
9000000008001670:	54197000 	bl	6512(0x1970) # 9000000008002fe0 <kvminithart>
  memset(cpus, 0, sizeof(cpus));
9000000008001674:	02838006 	addi.w	$r6,$r0,224(0xe0)
9000000008001678:	00150005 	move	$r5,$r0
900000000800167c:	1c000a64 	pcaddu12i	$r4,83(0x53)
9000000008001680:	02fbb084 	addi.d	$r4,$r4,-276(0xeec)
9000000008001684:	57f8e3ff 	bl	-1824(0xffff8e0) # 9000000008000f64 <memset>
  printf("procinit\n");
9000000008001688:	1c000284 	pcaddu12i	$r4,20(0x14)
900000000800168c:	02ea6084 	addi.d	$r4,$r4,-1384(0xa98)
9000000008001690:	57ebe7ff 	bl	-5148(0xfffebe4) # 9000000008000274 <printf>
}
9000000008001694:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000008001698:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000800169c:	28c12077 	ld.d	$r23,$r3,72(0x48)
90000000080016a0:	28c10078 	ld.d	$r24,$r3,64(0x40)
90000000080016a4:	28c0e079 	ld.d	$r25,$r3,56(0x38)
90000000080016a8:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
90000000080016ac:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
90000000080016b0:	28c0807c 	ld.d	$r28,$r3,32(0x20)
90000000080016b4:	28c0607d 	ld.d	$r29,$r3,24(0x18)
90000000080016b8:	28c0407e 	ld.d	$r30,$r3,16(0x10)
90000000080016bc:	28c0207f 	ld.d	$r31,$r3,8(0x8)
90000000080016c0:	02c18063 	addi.d	$r3,$r3,96(0x60)
90000000080016c4:	4c000020 	jirl	$r0,$r1,0
      panic("kalloc");
90000000080016c8:	1c000284 	pcaddu12i	$r4,20(0x14)
90000000080016cc:	02e94084 	addi.d	$r4,$r4,-1456(0xa50)
90000000080016d0:	57eb37ff 	bl	-5324(0xfffeb34) # 9000000008000204 <panic>

90000000080016d4 <cpuid>:
int cpuid() {
90000000080016d4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080016d8:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080016dc:	02c04076 	addi.d	$r22,$r3,16(0x10)
90000000080016e0:	02c00044 	addi.d	$r4,$r2,0
  int id = r_tp();
90000000080016e4:	00408084 	slli.w	$r4,$r4,0x0
}
90000000080016e8:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080016ec:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080016f0:	4c000020 	jirl	$r0,$r1,0

90000000080016f4 <mycpu>:
struct cpu *mycpu(void) {
90000000080016f4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080016f8:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080016fc:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008001700:	02c0004c 	addi.d	$r12,$r2,0
  int id = r_tp();
9000000008001704:	0040818c 	slli.w	$r12,$r12,0x0
  struct cpu *c = &cpus[id];
9000000008001708:	0281c004 	addi.w	$r4,$r0,112(0x70)
900000000800170c:	001d918c 	mul.d	$r12,$r12,$r4
}
9000000008001710:	1c000a64 	pcaddu12i	$r4,83(0x53)
9000000008001714:	02f96084 	addi.d	$r4,$r4,-424(0xe58)
9000000008001718:	0010b084 	add.d	$r4,$r4,$r12
900000000800171c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008001720:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008001724:	4c000020 	jirl	$r0,$r1,0

9000000008001728 <myproc>:
struct proc *myproc(void) {
9000000008001728:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800172c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008001730:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008001734:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008001738:	02c08076 	addi.d	$r22,$r3,32(0x20)
  push_off();
900000000800173c:	57f62bff 	bl	-2520(0xffff628) # 9000000008000d64 <push_off>
9000000008001740:	02c0004c 	addi.d	$r12,$r2,0
  int id = r_tp();
9000000008001744:	0040818c 	slli.w	$r12,$r12,0x0
  struct proc *p = c->proc;
9000000008001748:	0281c00d 	addi.w	$r13,$r0,112(0x70)
900000000800174c:	001db58c 	mul.d	$r12,$r12,$r13
9000000008001750:	1c000a6d 	pcaddu12i	$r13,83(0x53)
9000000008001754:	02f861ad 	addi.d	$r13,$r13,-488(0xe18)
9000000008001758:	0010b1ac 	add.d	$r12,$r13,$r12
900000000800175c:	28c00197 	ld.d	$r23,$r12,0
  pop_off();
9000000008001760:	57f677ff 	bl	-2444(0xffff674) # 9000000008000dd4 <pop_off>
}
9000000008001764:	001502e4 	move	$r4,$r23
9000000008001768:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800176c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001770:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008001774:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001778:	4c000020 	jirl	$r0,$r1,0

900000000800177c <forkret>:
void forkret(void) {
900000000800177c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008001780:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008001784:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008001788:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800178c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  release(&myproc()->lock);
9000000008001790:	57ff9bff 	bl	-104(0xfffff98) # 9000000008001728 <myproc>
9000000008001794:	57f77fff 	bl	-2180(0xffff77c) # 9000000008000f10 <release>
  if (first) {
9000000008001798:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
900000000800179c:	02e2f18c 	addi.d	$r12,$r12,-1860(0x8bc)
90000000080017a0:	2880018c 	ld.w	$r12,$r12,0
90000000080017a4:	44001d80 	bnez	$r12,28(0x1c) # 90000000080017c0 <forkret+0x44>
  usertrapret();
90000000080017a8:	54465400 	bl	18004(0x4654) # 9000000008005dfc <usertrapret>
}
90000000080017ac:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080017b0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080017b4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080017b8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080017bc:	4c000020 	jirl	$r0,$r1,0
    first = 0;
90000000080017c0:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
90000000080017c4:	02e2518c 	addi.d	$r12,$r12,-1900(0x894)
90000000080017c8:	29800180 	st.w	$r0,$r12,0
    fat32_init();
90000000080017cc:	54b55c00 	bl	46428(0xb55c) # 900000000800cd28 <fat32_init>
    myproc()->cwd = ename("/");
90000000080017d0:	57ff5bff 	bl	-168(0xfffff58) # 9000000008001728 <myproc>
90000000080017d4:	00150097 	move	$r23,$r4
90000000080017d8:	1c000284 	pcaddu12i	$r4,20(0x14)
90000000080017dc:	02e56084 	addi.d	$r4,$r4,-1704(0x958)
90000000080017e0:	54cf4c00 	bl	53068(0xcf4c) # 900000000800e72c <ename>
90000000080017e4:	29d382e4 	st.d	$r4,$r23,1248(0x4e0)
90000000080017e8:	53ffc3ff 	b	-64(0xfffffc0) # 90000000080017a8 <forkret+0x2c>

90000000080017ec <allocpid>:
int allocpid() {
90000000080017ec:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080017f0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080017f4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080017f8:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080017fc:	02c08076 	addi.d	$r22,$r3,32(0x20)
  acquire(&pid_lock);
9000000008001800:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008001804:	02e4e084 	addi.d	$r4,$r4,-1736(0x938)
9000000008001808:	57f6abff 	bl	-2392(0xffff6a8) # 9000000008000eb0 <acquire>
  pid = nextpid;
900000000800180c:	1c0003ec 	pcaddu12i	$r12,31(0x1f)
9000000008001810:	02e1318c 	addi.d	$r12,$r12,-1972(0x84c)
9000000008001814:	28800197 	ld.w	$r23,$r12,0
  nextpid = nextpid + 1;
9000000008001818:	028006ed 	addi.w	$r13,$r23,1(0x1)
900000000800181c:	2980018d 	st.w	$r13,$r12,0
  release(&pid_lock);
9000000008001820:	1c000604 	pcaddu12i	$r4,48(0x30)
9000000008001824:	02e46084 	addi.d	$r4,$r4,-1768(0x918)
9000000008001828:	57f6ebff 	bl	-2328(0xffff6e8) # 9000000008000f10 <release>
}
900000000800182c:	001502e4 	move	$r4,$r23
9000000008001830:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008001834:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001838:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800183c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001840:	4c000020 	jirl	$r0,$r1,0

9000000008001844 <proc_pagetable>:
pagetable_t proc_pagetable(struct proc *p) {
9000000008001844:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008001848:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800184c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008001850:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008001854:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008001858:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800185c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008001860:	00150098 	move	$r24,$r4
  pagetable = uvmcreate();
9000000008001864:	541d4000 	bl	7488(0x1d40) # 90000000080035a4 <uvmcreate>
9000000008001868:	00150097 	move	$r23,$r4
  if (pagetable == 0)
900000000800186c:	40005080 	beqz	$r4,80(0x50) # 90000000080018bc <proc_pagetable+0x78>
  if (NULL == vma_init(p)) {
9000000008001870:	00150304 	move	$r4,$r24
9000000008001874:	54d92800 	bl	55592(0xd928) # 900000000800f19c <vma_init>
9000000008001878:	00150099 	move	$r25,$r4
900000000800187c:	40006080 	beqz	$r4,96(0x60) # 90000000080018dc <proc_pagetable+0x98>
  if (mappages(pagetable, TRAMPOLINE, PGSIZE, (uint64)trampoline,
9000000008001880:	02824008 	addi.w	$r8,$r0,144(0x90)
9000000008001884:	1c0003e7 	pcaddu12i	$r7,31(0x1f)
9000000008001888:	28e010e7 	ld.d	$r7,$r7,-2044(0x804)
900000000800188c:	14000026 	lu12i.w	$r6,1(0x1)
9000000008001890:	14001fe5 	lu12i.w	$r5,255(0xff)
9000000008001894:	001502e4 	move	$r4,$r23
9000000008001898:	5419e000 	bl	6624(0x19e0) # 9000000008003278 <mappages>
900000000800189c:	60005480 	blt	$r4,$r0,84(0x54) # 90000000080018f0 <proc_pagetable+0xac>
  if (mappages(pagetable, TRAPFRAME, PGSIZE, (uint64)(p->trapframe),
90000000080018a0:	02860008 	addi.w	$r8,$r0,384(0x180)
90000000080018a4:	28c1c307 	ld.d	$r7,$r24,112(0x70)
90000000080018a8:	14000026 	lu12i.w	$r6,1(0x1)
90000000080018ac:	14001fc5 	lu12i.w	$r5,254(0xfe)
90000000080018b0:	001502e4 	move	$r4,$r23
90000000080018b4:	5419c400 	bl	6596(0x19c4) # 9000000008003278 <mappages>
90000000080018b8:	60004c80 	blt	$r4,$r0,76(0x4c) # 9000000008001904 <proc_pagetable+0xc0>
}
90000000080018bc:	001502e4 	move	$r4,$r23
90000000080018c0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080018c4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080018c8:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080018cc:	28c04078 	ld.d	$r24,$r3,16(0x10)
90000000080018d0:	28c02079 	ld.d	$r25,$r3,8(0x8)
90000000080018d4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080018d8:	4c000020 	jirl	$r0,$r1,0
    uvmfree(pagetable, 0);
90000000080018dc:	00150005 	move	$r5,$r0
90000000080018e0:	001502e4 	move	$r4,$r23
90000000080018e4:	5422ac00 	bl	8876(0x22ac) # 9000000008003b90 <uvmfree>
    return NULL;
90000000080018e8:	00150337 	move	$r23,$r25
90000000080018ec:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080018bc <proc_pagetable+0x78>
    uvmfree(pagetable, 0);
90000000080018f0:	00150005 	move	$r5,$r0
90000000080018f4:	001502e4 	move	$r4,$r23
90000000080018f8:	54229800 	bl	8856(0x2298) # 9000000008003b90 <uvmfree>
    return NULL;
90000000080018fc:	00150017 	move	$r23,$r0
9000000008001900:	53ffbfff 	b	-68(0xfffffbc) # 90000000080018bc <proc_pagetable+0x78>
    vmunmap(pagetable, TRAMPOLINE, 1, 0);
9000000008001904:	00150007 	move	$r7,$r0
9000000008001908:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800190c:	14001fe5 	lu12i.w	$r5,255(0xff)
9000000008001910:	001502e4 	move	$r4,$r23
9000000008001914:	541b7800 	bl	7032(0x1b78) # 900000000800348c <vmunmap>
    uvmfree(pagetable, 0);
9000000008001918:	00150005 	move	$r5,$r0
900000000800191c:	001502e4 	move	$r4,$r23
9000000008001920:	54227000 	bl	8816(0x2270) # 9000000008003b90 <uvmfree>
    return NULL;
9000000008001924:	00150017 	move	$r23,$r0
9000000008001928:	53ff97ff 	b	-108(0xfffff94) # 90000000080018bc <proc_pagetable+0x78>

900000000800192c <proc_freepagetable>:
void proc_freepagetable(pagetable_t pagetable, uint64 sz) {
900000000800192c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008001930:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008001934:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008001938:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800193c:	29c00078 	st.d	$r24,$r3,0
9000000008001940:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008001944:	00150097 	move	$r23,$r4
9000000008001948:	001500b8 	move	$r24,$r5
  vmunmap(pagetable, TRAMPOLINE, 1, 0);
900000000800194c:	00150007 	move	$r7,$r0
9000000008001950:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000008001954:	14001fe5 	lu12i.w	$r5,255(0xff)
9000000008001958:	541b3400 	bl	6964(0x1b34) # 900000000800348c <vmunmap>
  vmunmap(pagetable, TRAPFRAME, 1, 0);
900000000800195c:	00150007 	move	$r7,$r0
9000000008001960:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000008001964:	14001fc5 	lu12i.w	$r5,254(0xfe)
9000000008001968:	001502e4 	move	$r4,$r23
900000000800196c:	541b2000 	bl	6944(0x1b20) # 900000000800348c <vmunmap>
  uvmfree(pagetable, sz);
9000000008001970:	00150305 	move	$r5,$r24
9000000008001974:	001502e4 	move	$r4,$r23
9000000008001978:	54221800 	bl	8728(0x2218) # 9000000008003b90 <uvmfree>
}
900000000800197c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008001980:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001984:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008001988:	28c00078 	ld.d	$r24,$r3,0
900000000800198c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001990:	4c000020 	jirl	$r0,$r1,0

9000000008001994 <freeproc>:
static void freeproc(struct proc *p) {
9000000008001994:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008001998:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800199c:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080019a0:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080019a4:	29c00078 	st.d	$r24,$r3,0
90000000080019a8:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080019ac:	00150097 	move	$r23,$r4
  if (p->trapframe)
90000000080019b0:	28c1c084 	ld.d	$r4,$r4,112(0x70)
90000000080019b4:	40000880 	beqz	$r4,8(0x8) # 90000000080019bc <freeproc+0x28>
    kfree((void *)p->trapframe);
90000000080019b8:	54138800 	bl	5000(0x1388) # 9000000008002d40 <kfree>
  p->trapframe = 0;
90000000080019bc:	29c1c2e0 	st.d	$r0,$r23,112(0x70)
  if (p->kpagetable) {
90000000080019c0:	28c1a2e4 	ld.d	$r4,$r23,104(0x68)
90000000080019c4:	40001080 	beqz	$r4,16(0x10) # 90000000080019d4 <freeproc+0x40>
    kvmfree(p->kpagetable, 1, p);
90000000080019c8:	001502e6 	move	$r6,$r23
90000000080019cc:	02800405 	addi.w	$r5,$r0,1(0x1)
90000000080019d0:	542a4800 	bl	10824(0x2a48) # 9000000008004418 <kvmfree>
  p->kpagetable = 0;
90000000080019d4:	29c1a2e0 	st.d	$r0,$r23,104(0x68)
  if (p->pagetable) {
90000000080019d8:	28c182ec 	ld.d	$r12,$r23,96(0x60)
90000000080019dc:	40001980 	beqz	$r12,24(0x18) # 90000000080019f4 <freeproc+0x60>
    free_vma_list(p);
90000000080019e0:	001502e4 	move	$r4,$r23
90000000080019e4:	54db2400 	bl	56100(0xdb24) # 900000000800f508 <free_vma_list>
    proc_freepagetable(p->pagetable, p->sz);
90000000080019e8:	28c162e5 	ld.d	$r5,$r23,88(0x58)
90000000080019ec:	28c182e4 	ld.d	$r4,$r23,96(0x60)
90000000080019f0:	57ff3fff 	bl	-196(0xfffff3c) # 900000000800192c <proc_freepagetable>
  freemem_amount();
90000000080019f4:	54157000 	bl	5488(0x1570) # 9000000008002f64 <freemem_amount>
  printf("free proc : %d freemem_mount:%p\n",p->pid, freemem_amount());
90000000080019f8:	2880e2f8 	ld.w	$r24,$r23,56(0x38)
90000000080019fc:	54156800 	bl	5480(0x1568) # 9000000008002f64 <freemem_amount>
9000000008001a00:	00150086 	move	$r6,$r4
9000000008001a04:	00150305 	move	$r5,$r24
9000000008001a08:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001a0c:	02dcc084 	addi.d	$r4,$r4,1840(0x730)
9000000008001a10:	57e867ff 	bl	-6044(0xfffe864) # 9000000008000274 <printf>
  p->pagetable = 0;
9000000008001a14:	29c182e0 	st.d	$r0,$r23,96(0x60)
  p->vma = NULL;
9000000008001a18:	29d402e0 	st.d	$r0,$r23,1280(0x500)
  p->sz = 0;
9000000008001a1c:	29c162e0 	st.d	$r0,$r23,88(0x58)
  p->pid = 0;
9000000008001a20:	2980e2e0 	st.w	$r0,$r23,56(0x38)
  p->parent = 0;
9000000008001a24:	29c082e0 	st.d	$r0,$r23,32(0x20)
  p->name[0] = 0;
9000000008001a28:	2913a2e0 	st.b	$r0,$r23,1256(0x4e8)
  p->chan = 0;
9000000008001a2c:	29c0a2e0 	st.d	$r0,$r23,40(0x28)
  p->killed = 0;
9000000008001a30:	2980c2e0 	st.w	$r0,$r23,48(0x30)
  p->xstate = 0;
9000000008001a34:	2980d2e0 	st.w	$r0,$r23,52(0x34)
  p->state = UNUSED;
9000000008001a38:	298062e0 	st.w	$r0,$r23,24(0x18)
}
9000000008001a3c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008001a40:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001a44:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008001a48:	28c00078 	ld.d	$r24,$r3,0
9000000008001a4c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001a50:	4c000020 	jirl	$r0,$r1,0

9000000008001a54 <growproc>:
int growproc(int n) {
9000000008001a54:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008001a58:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008001a5c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008001a60:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008001a64:	29c00078 	st.d	$r24,$r3,0
9000000008001a68:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008001a6c:	00150098 	move	$r24,$r4
  struct proc *p = myproc();
9000000008001a70:	57fcbbff 	bl	-840(0xffffcb8) # 9000000008001728 <myproc>
9000000008001a74:	00150097 	move	$r23,$r4
  sz = p->sz;
9000000008001a78:	28c16086 	ld.d	$r6,$r4,88(0x58)
9000000008001a7c:	28816084 	ld.w	$r4,$r4,88(0x58)
  if (n > 0) {
9000000008001a80:	60002c18 	blt	$r0,$r24,44(0x2c) # 9000000008001aac <growproc+0x58>
  } else if (n < 0) {
9000000008001a84:	60005700 	blt	$r24,$r0,84(0x54) # 9000000008001ad8 <growproc+0x84>
  p->sz = sz;
9000000008001a88:	00df0084 	bstrpick.d	$r4,$r4,0x1f,0x0
9000000008001a8c:	29c162e4 	st.d	$r4,$r23,88(0x58)
  return 0;
9000000008001a90:	00150004 	move	$r4,$r0
}
9000000008001a94:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008001a98:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001a9c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008001aa0:	28c00078 	ld.d	$r24,$r3,0
9000000008001aa4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001aa8:	4c000020 	jirl	$r0,$r1,0
    if ((sz = uvmalloc(p->pagetable, p->kpagetable, sz, sz + n,
9000000008001aac:	00101304 	add.w	$r4,$r24,$r4
9000000008001ab0:	02860008 	addi.w	$r8,$r0,384(0x180)
9000000008001ab4:	00df0087 	bstrpick.d	$r7,$r4,0x1f,0x0
9000000008001ab8:	00df00c6 	bstrpick.d	$r6,$r6,0x1f,0x0
9000000008001abc:	28c1a2e5 	ld.d	$r5,$r23,104(0x68)
9000000008001ac0:	28c182e4 	ld.d	$r4,$r23,96(0x60)
9000000008001ac4:	541eac00 	bl	7852(0x1eac) # 9000000008003970 <uvmalloc>
9000000008001ac8:	00408084 	slli.w	$r4,$r4,0x0
9000000008001acc:	47ffbc9f 	bnez	$r4,-68(0x7fffbc) # 9000000008001a88 <growproc+0x34>
      return -1;
9000000008001ad0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008001ad4:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008001a94 <growproc+0x40>
    sz = uvmdealloc(p->pagetable, p->kpagetable, sz, sz + n);
9000000008001ad8:	00101304 	add.w	$r4,$r24,$r4
9000000008001adc:	00df0087 	bstrpick.d	$r7,$r4,0x1f,0x0
9000000008001ae0:	00df00c6 	bstrpick.d	$r6,$r6,0x1f,0x0
9000000008001ae4:	28c1a2e5 	ld.d	$r5,$r23,104(0x68)
9000000008001ae8:	28c182e4 	ld.d	$r4,$r23,96(0x60)
9000000008001aec:	541ddc00 	bl	7644(0x1ddc) # 90000000080038c8 <uvmdealloc>
9000000008001af0:	00408084 	slli.w	$r4,$r4,0x0
9000000008001af4:	53ff97ff 	b	-108(0xfffff94) # 9000000008001a88 <growproc+0x34>

9000000008001af8 <reparent>:
void reparent(struct proc *p) {
9000000008001af8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008001afc:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008001b00:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008001b04:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008001b08:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008001b0c:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008001b10:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008001b14:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008001b18:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008001b1c:	0015009a 	move	$r26,$r4
  for (pp = proc; pp < &proc[NPROC]; pp++) {
9000000008001b20:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
9000000008001b24:	02d8e2f7 	addi.d	$r23,$r23,1592(0x638)
      pp->parent = initproc;
9000000008001b28:	1c0005fb 	pcaddu12i	$r27,47(0x2f)
9000000008001b2c:	02d8a37b 	addi.d	$r27,$r27,1576(0x628)
  for (pp = proc; pp < &proc[NPROC]; pp++) {
9000000008001b30:	03ad2019 	ori	$r25,$r0,0xb48
9000000008001b34:	1c000278 	pcaddu12i	$r24,19(0x13)
9000000008001b38:	02deb318 	addi.d	$r24,$r24,1964(0x7ac)
9000000008001b3c:	50001000 	b	16(0x10) # 9000000008001b4c <reparent+0x54>
9000000008001b40:	0010e6f7 	add.d	$r23,$r23,$r25
9000000008001b44:	28c0030c 	ld.d	$r12,$r24,0
9000000008001b48:	58002aec 	beq	$r23,$r12,40(0x28) # 9000000008001b70 <reparent+0x78>
    if (pp->parent == p) {
9000000008001b4c:	28c082ec 	ld.d	$r12,$r23,32(0x20)
9000000008001b50:	5ffff19a 	bne	$r12,$r26,-16(0x3fff0) # 9000000008001b40 <reparent+0x48>
      acquire(&pp->lock);
9000000008001b54:	001502e4 	move	$r4,$r23
9000000008001b58:	57f35bff 	bl	-3240(0xffff358) # 9000000008000eb0 <acquire>
      pp->parent = initproc;
9000000008001b5c:	28c0036c 	ld.d	$r12,$r27,0
9000000008001b60:	29c082ec 	st.d	$r12,$r23,32(0x20)
      release(&pp->lock);
9000000008001b64:	001502e4 	move	$r4,$r23
9000000008001b68:	57f3abff 	bl	-3160(0xffff3a8) # 9000000008000f10 <release>
9000000008001b6c:	53ffd7ff 	b	-44(0xfffffd4) # 9000000008001b40 <reparent+0x48>
}
9000000008001b70:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008001b74:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008001b78:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008001b7c:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008001b80:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008001b84:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008001b88:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008001b8c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008001b90:	4c000020 	jirl	$r0,$r1,0

9000000008001b94 <scheduler>:
void scheduler(void) {
9000000008001b94:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008001b98:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008001b9c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008001ba0:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008001ba4:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008001ba8:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008001bac:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008001bb0:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008001bb4:	29c0007c 	st.d	$r28,$r3,0
9000000008001bb8:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008001bbc:	02c0004c 	addi.d	$r12,$r2,0
  int id = r_tp();
9000000008001bc0:	0040818c 	slli.w	$r12,$r12,0x0
  c->proc = 0;
9000000008001bc4:	1c000a7a 	pcaddu12i	$r26,83(0x53)
9000000008001bc8:	02e6935a 	addi.d	$r26,$r26,-1628(0x9a4)
9000000008001bcc:	0281c00d 	addi.w	$r13,$r0,112(0x70)
9000000008001bd0:	001db58d 	mul.d	$r13,$r12,$r13
9000000008001bd4:	0010b74e 	add.d	$r14,$r26,$r13
9000000008001bd8:	29c001c0 	st.d	$r0,$r14,0
        swtch(&c->context, &p->context);
9000000008001bdc:	02c021ad 	addi.d	$r13,$r13,8(0x8)
9000000008001be0:	0010b75a 	add.d	$r26,$r26,$r13
        c->proc = 0;
9000000008001be4:	001501db 	move	$r27,$r14
    for (p = proc; p < &proc[NPROC]; p++) {
9000000008001be8:	1c000279 	pcaddu12i	$r25,19(0x13)
9000000008001bec:	02dbe339 	addi.d	$r25,$r25,1784(0x6f8)
9000000008001bf0:	50006400 	b	100(0x64) # 9000000008001c54 <scheduler+0xc0>
        p->state = RUNNING;
9000000008001bf4:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000008001bf8:	298062ec 	st.w	$r12,$r23,24(0x18)
        tlbinit();
9000000008001bfc:	5413b000 	bl	5040(0x13b0) # 9000000008002fac <tlbinit>
        swtch(&c->context, &p->context);
9000000008001c00:	02c1e2e5 	addi.d	$r5,$r23,120(0x78)
9000000008001c04:	00150344 	move	$r4,$r26
9000000008001c08:	542aa000 	bl	10912(0x2aa0) # 90000000080046a8 <swtch>
        tlbinit();
9000000008001c0c:	5413a000 	bl	5024(0x13a0) # 9000000008002fac <tlbinit>
        c->proc = 0;
9000000008001c10:	29c00360 	st.d	$r0,$r27,0
        found = 1;
9000000008001c14:	0280041c 	addi.w	$r28,$r0,1(0x1)
      release(&p->lock);
9000000008001c18:	001502e4 	move	$r4,$r23
9000000008001c1c:	57f2f7ff 	bl	-3340(0xffff2f4) # 9000000008000f10 <release>
    for (p = proc; p < &proc[NPROC]; p++) {
9000000008001c20:	03ad200c 	ori	$r12,$r0,0xb48
9000000008001c24:	0010b2f7 	add.d	$r23,$r23,$r12
9000000008001c28:	28c0032c 	ld.d	$r12,$r25,0
9000000008001c2c:	58001aec 	beq	$r23,$r12,24(0x18) # 9000000008001c44 <scheduler+0xb0>
      acquire(&p->lock);
9000000008001c30:	001502e4 	move	$r4,$r23
9000000008001c34:	57f27fff 	bl	-3460(0xffff27c) # 9000000008000eb0 <acquire>
      if (p->state == RUNNABLE) {
9000000008001c38:	288062ec 	ld.w	$r12,$r23,24(0x18)
9000000008001c3c:	5fffdd98 	bne	$r12,$r24,-36(0x3ffdc) # 9000000008001c18 <scheduler+0x84>
9000000008001c40:	53ffb7ff 	b	-76(0xfffffb4) # 9000000008001bf4 <scheduler+0x60>
    if (found == 0) {
9000000008001c44:	44001380 	bnez	$r28,16(0x10) # 9000000008001c54 <scheduler+0xc0>
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008001c48:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() | CSR_CRMD_IE);
9000000008001c4c:	0380118c 	ori	$r12,$r12,0x4
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008001c50:	0400002c 	csrwr	$r12,0x0
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008001c54:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() | CSR_CRMD_IE);
9000000008001c58:	0380118c 	ori	$r12,$r12,0x4
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008001c5c:	0400002c 	csrwr	$r12,0x0
    int found = 0;
9000000008001c60:	0015001c 	move	$r28,$r0
    for (p = proc; p < &proc[NPROC]; p++) {
9000000008001c64:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
9000000008001c68:	02d3d2f7 	addi.d	$r23,$r23,1268(0x4f4)
      if (p->state == RUNNABLE) {
9000000008001c6c:	02800c18 	addi.w	$r24,$r0,3(0x3)
9000000008001c70:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008001c30 <scheduler+0x9c>

9000000008001c74 <sched>:
void sched(void) {
9000000008001c74:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008001c78:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008001c7c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008001c80:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008001c84:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008001c88:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008001c8c:	29c0007a 	st.d	$r26,$r3,0
9000000008001c90:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  struct proc *p = myproc();
9000000008001c94:	57fa97ff 	bl	-1388(0xffffa94) # 9000000008001728 <myproc>
9000000008001c98:	00150099 	move	$r25,$r4
  if (!holding(&p->lock))
9000000008001c9c:	57f1cfff 	bl	-3636(0xffff1cc) # 9000000008000e68 <holding>
9000000008001ca0:	4000b480 	beqz	$r4,180(0xb4) # 9000000008001d54 <sched+0xe0>
  asm volatile("addi.d %0, $tp, 0" : "=r" (x) );
9000000008001ca4:	02c0004c 	addi.d	$r12,$r2,0
  int id = r_tp();
9000000008001ca8:	0040818c 	slli.w	$r12,$r12,0x0
  if (mycpu()->noff != 1) {
9000000008001cac:	0281c00d 	addi.w	$r13,$r0,112(0x70)
9000000008001cb0:	001db58c 	mul.d	$r12,$r12,$r13
9000000008001cb4:	1c000a6d 	pcaddu12i	$r13,83(0x53)
9000000008001cb8:	02e2d1ad 	addi.d	$r13,$r13,-1868(0x8b4)
9000000008001cbc:	0010b1ac 	add.d	$r12,$r13,$r12
9000000008001cc0:	2881a18d 	ld.w	$r13,$r12,104(0x68)
9000000008001cc4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008001cc8:	5c0099ac 	bne	$r13,$r12,152(0x98) # 9000000008001d60 <sched+0xec>
  if(p->state == RUNNING)
9000000008001ccc:	2880632d 	ld.w	$r13,$r25,24(0x18)
9000000008001cd0:	0280100c 	addi.w	$r12,$r0,4(0x4)
9000000008001cd4:	580099ac 	beq	$r13,$r12,152(0x98) # 9000000008001d6c <sched+0xf8>
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008001cd8:	0400000c 	csrrd	$r12,0x0
  if (intr_get())
9000000008001cdc:	00c2098c 	bstrpick.d	$r12,$r12,0x2,0x2
9000000008001ce0:	44009980 	bnez	$r12,152(0x98) # 9000000008001d78 <sched+0x104>
  asm volatile("addi.d %0, $tp, 0" : "=r" (x) );
9000000008001ce4:	02c0004c 	addi.d	$r12,$r2,0
  intena = mycpu()->intena;
9000000008001ce8:	1c000a77 	pcaddu12i	$r23,83(0x53)
9000000008001cec:	02e202f7 	addi.d	$r23,$r23,-1920(0x880)
  int id = r_tp();
9000000008001cf0:	0040818c 	slli.w	$r12,$r12,0x0
  intena = mycpu()->intena;
9000000008001cf4:	0281c018 	addi.w	$r24,$r0,112(0x70)
9000000008001cf8:	001de18c 	mul.d	$r12,$r12,$r24
9000000008001cfc:	0010b2ec 	add.d	$r12,$r23,$r12
9000000008001d00:	2881b19a 	ld.w	$r26,$r12,108(0x6c)
9000000008001d04:	02c00045 	addi.d	$r5,$r2,0
  int id = r_tp();
9000000008001d08:	004080a5 	slli.w	$r5,$r5,0x0
  swtch(&p->context, &mycpu()->context);
9000000008001d0c:	001de0a5 	mul.d	$r5,$r5,$r24
9000000008001d10:	02c020a5 	addi.d	$r5,$r5,8(0x8)
9000000008001d14:	001096e5 	add.d	$r5,$r23,$r5
9000000008001d18:	02c1e324 	addi.d	$r4,$r25,120(0x78)
9000000008001d1c:	54298c00 	bl	10636(0x298c) # 90000000080046a8 <swtch>
9000000008001d20:	02c0004c 	addi.d	$r12,$r2,0
  int id = r_tp();
9000000008001d24:	0040818c 	slli.w	$r12,$r12,0x0
  mycpu()->intena = intena;
9000000008001d28:	001de198 	mul.d	$r24,$r12,$r24
9000000008001d2c:	0010e2f8 	add.d	$r24,$r23,$r24
9000000008001d30:	2981b31a 	st.w	$r26,$r24,108(0x6c)
}
9000000008001d34:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008001d38:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008001d3c:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008001d40:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008001d44:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008001d48:	28c0007a 	ld.d	$r26,$r3,0
9000000008001d4c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008001d50:	4c000020 	jirl	$r0,$r1,0
    panic("sched p->lock");
9000000008001d54:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001d58:	02d03084 	addi.d	$r4,$r4,1036(0x40c)
9000000008001d5c:	57e4abff 	bl	-7000(0xfffe4a8) # 9000000008000204 <panic>
    panic("sched locks");
9000000008001d60:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001d64:	02d04084 	addi.d	$r4,$r4,1040(0x410)
9000000008001d68:	57e49fff 	bl	-7012(0xfffe49c) # 9000000008000204 <panic>
    panic("sched running");
9000000008001d6c:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001d70:	02d05084 	addi.d	$r4,$r4,1044(0x414)
9000000008001d74:	57e493ff 	bl	-7024(0xfffe490) # 9000000008000204 <panic>
    panic("sched interruptible");
9000000008001d78:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001d7c:	02d06084 	addi.d	$r4,$r4,1048(0x418)
9000000008001d80:	57e487ff 	bl	-7036(0xfffe484) # 9000000008000204 <panic>

9000000008001d84 <exit>:
void exit(int status) {
9000000008001d84:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008001d88:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008001d8c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008001d90:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008001d94:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008001d98:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008001d9c:	29c0007a 	st.d	$r26,$r3,0
9000000008001da0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008001da4:	0015009a 	move	$r26,$r4
  struct proc *p = myproc();
9000000008001da8:	57f983ff 	bl	-1664(0xffff980) # 9000000008001728 <myproc>
9000000008001dac:	00150099 	move	$r25,$r4
  if (p == initproc)
9000000008001db0:	1c0005ec 	pcaddu12i	$r12,47(0x2f)
9000000008001db4:	02ce818c 	addi.d	$r12,$r12,928(0x3a0)
9000000008001db8:	28c0018c 	ld.d	$r12,$r12,0
9000000008001dbc:	02c36097 	addi.d	$r23,$r4,216(0xd8)
9000000008001dc0:	02d36098 	addi.d	$r24,$r4,1240(0x4d8)
9000000008001dc4:	5c002184 	bne	$r12,$r4,32(0x20) # 9000000008001de4 <exit+0x60>
    panic("init exiting");
9000000008001dc8:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001dcc:	02cf8084 	addi.d	$r4,$r4,992(0x3e0)
9000000008001dd0:	57e437ff 	bl	-7116(0xfffe434) # 9000000008000204 <panic>
      fileclose(f);
9000000008001dd4:	542f7400 	bl	12148(0x2f74) # 9000000008004d48 <fileclose>
      p->ofile[fd] = 0;
9000000008001dd8:	29c002e0 	st.d	$r0,$r23,0
9000000008001ddc:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (int fd = 0; fd < NOFILE; fd++) {
9000000008001de0:	580012f8 	beq	$r23,$r24,16(0x10) # 9000000008001df0 <exit+0x6c>
    if (p->ofile[fd]) {
9000000008001de4:	28c002e4 	ld.d	$r4,$r23,0
9000000008001de8:	47ffec9f 	bnez	$r4,-20(0x7fffec) # 9000000008001dd4 <exit+0x50>
9000000008001dec:	53fff3ff 	b	-16(0xffffff0) # 9000000008001ddc <exit+0x58>
  eput(p->cwd);
9000000008001df0:	28d38324 	ld.d	$r4,$r25,1248(0x4e0)
9000000008001df4:	54be3000 	bl	48688(0xbe30) # 900000000800dc24 <eput>
  p->cwd = 0;
9000000008001df8:	29d38320 	st.d	$r0,$r25,1248(0x4e0)
  acquire(&initproc->lock);
9000000008001dfc:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
9000000008001e00:	02cd52f7 	addi.d	$r23,$r23,852(0x354)
9000000008001e04:	28c002e4 	ld.d	$r4,$r23,0
9000000008001e08:	57f0abff 	bl	-3928(0xffff0a8) # 9000000008000eb0 <acquire>
  wakeup1(initproc);
9000000008001e0c:	28c002e4 	ld.d	$r4,$r23,0
9000000008001e10:	57f653ff 	bl	-2480(0xffff650) # 9000000008001460 <wakeup1>
  release(&initproc->lock);
9000000008001e14:	28c002e4 	ld.d	$r4,$r23,0
9000000008001e18:	57f0fbff 	bl	-3848(0xffff0f8) # 9000000008000f10 <release>
  acquire(&p->lock);
9000000008001e1c:	00150324 	move	$r4,$r25
9000000008001e20:	57f093ff 	bl	-3952(0xffff090) # 9000000008000eb0 <acquire>
  struct proc *original_parent = p->parent;
9000000008001e24:	28c08337 	ld.d	$r23,$r25,32(0x20)
  release(&p->lock);
9000000008001e28:	00150324 	move	$r4,$r25
9000000008001e2c:	57f0e7ff 	bl	-3868(0xffff0e4) # 9000000008000f10 <release>
  acquire(&original_parent->lock);
9000000008001e30:	001502e4 	move	$r4,$r23
9000000008001e34:	57f07fff 	bl	-3972(0xffff07c) # 9000000008000eb0 <acquire>
  acquire(&p->lock);
9000000008001e38:	00150324 	move	$r4,$r25
9000000008001e3c:	57f077ff 	bl	-3980(0xffff074) # 9000000008000eb0 <acquire>
  reparent(p);
9000000008001e40:	00150324 	move	$r4,$r25
9000000008001e44:	57fcb7ff 	bl	-844(0xffffcb4) # 9000000008001af8 <reparent>
  wakeup1(original_parent);
9000000008001e48:	001502e4 	move	$r4,$r23
9000000008001e4c:	57f617ff 	bl	-2540(0xffff614) # 9000000008001460 <wakeup1>
  if (original_parent->chan == p && original_parent->state == SLEEPING) {
9000000008001e50:	28c0a2ec 	ld.d	$r12,$r23,40(0x28)
9000000008001e54:	58002999 	beq	$r12,$r25,40(0x28) # 9000000008001e7c <exit+0xf8>
  p->xstate = status;
9000000008001e58:	2980d33a 	st.w	$r26,$r25,52(0x34)
  p->state = ZOMBIE;
9000000008001e5c:	0280140c 	addi.w	$r12,$r0,5(0x5)
9000000008001e60:	2980632c 	st.w	$r12,$r25,24(0x18)
  release(&original_parent->lock);
9000000008001e64:	001502e4 	move	$r4,$r23
9000000008001e68:	57f0abff 	bl	-3928(0xffff0a8) # 9000000008000f10 <release>
  sched();
9000000008001e6c:	57fe0bff 	bl	-504(0xffffe08) # 9000000008001c74 <sched>
  panic("zombie exit");
9000000008001e70:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001e74:	02cd2084 	addi.d	$r4,$r4,840(0x348)
9000000008001e78:	57e38fff 	bl	-7284(0xfffe38c) # 9000000008000204 <panic>
  if (original_parent->chan == p && original_parent->state == SLEEPING) {
9000000008001e7c:	288062ed 	ld.w	$r13,$r23,24(0x18)
9000000008001e80:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008001e84:	5fffd5ac 	bne	$r13,$r12,-44(0x3ffd4) # 9000000008001e58 <exit+0xd4>
    original_parent->state = RUNNABLE;
9000000008001e88:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000008001e8c:	298062ec 	st.w	$r12,$r23,24(0x18)
9000000008001e90:	53ffcbff 	b	-56(0xfffffc8) # 9000000008001e58 <exit+0xd4>

9000000008001e94 <yield>:
void yield(void) {
9000000008001e94:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008001e98:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008001e9c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008001ea0:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008001ea4:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct proc *p = myproc();
9000000008001ea8:	57f883ff 	bl	-1920(0xffff880) # 9000000008001728 <myproc>
9000000008001eac:	00150097 	move	$r23,$r4
  acquire(&p->lock);
9000000008001eb0:	57f003ff 	bl	-4096(0xffff000) # 9000000008000eb0 <acquire>
  printf("pid %d yield\n, era: %p", p->pid, p->trapframe->era);
9000000008001eb4:	28c1c2ec 	ld.d	$r12,$r23,112(0x70)
9000000008001eb8:	28c42186 	ld.d	$r6,$r12,264(0x108)
9000000008001ebc:	2880e2e5 	ld.w	$r5,$r23,56(0x38)
9000000008001ec0:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008001ec4:	02cc2084 	addi.d	$r4,$r4,776(0x308)
9000000008001ec8:	57e3afff 	bl	-7252(0xfffe3ac) # 9000000008000274 <printf>
  p->state = RUNNABLE;
9000000008001ecc:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000008001ed0:	298062ec 	st.w	$r12,$r23,24(0x18)
  sched();
9000000008001ed4:	57fda3ff 	bl	-608(0xffffda0) # 9000000008001c74 <sched>
  release(&p->lock);
9000000008001ed8:	001502e4 	move	$r4,$r23
9000000008001edc:	57f037ff 	bl	-4044(0xffff034) # 9000000008000f10 <release>
}
9000000008001ee0:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008001ee4:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008001ee8:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008001eec:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008001ef0:	4c000020 	jirl	$r0,$r1,0

9000000008001ef4 <sleep>:
void sleep(void *chan, struct spinlock *lk) {
9000000008001ef4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008001ef8:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008001efc:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008001f00:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008001f04:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008001f08:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008001f0c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008001f10:	00150099 	move	$r25,$r4
9000000008001f14:	001500b8 	move	$r24,$r5
  struct proc *p = myproc();
9000000008001f18:	57f813ff 	bl	-2032(0xffff810) # 9000000008001728 <myproc>
9000000008001f1c:	00150097 	move	$r23,$r4
  if (lk != &p->lock) { // DOC: sleeplock0
9000000008001f20:	58005098 	beq	$r4,$r24,80(0x50) # 9000000008001f70 <sleep+0x7c>
    acquire(&p->lock);  // DOC: sleeplock1
9000000008001f24:	57ef8fff 	bl	-4212(0xfffef8c) # 9000000008000eb0 <acquire>
    release(lk);
9000000008001f28:	00150304 	move	$r4,$r24
9000000008001f2c:	57efe7ff 	bl	-4124(0xfffefe4) # 9000000008000f10 <release>
  p->chan = chan;
9000000008001f30:	29c0a2f9 	st.d	$r25,$r23,40(0x28)
  p->state = SLEEPING;
9000000008001f34:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008001f38:	298062ec 	st.w	$r12,$r23,24(0x18)
  sched();
9000000008001f3c:	57fd3bff 	bl	-712(0xffffd38) # 9000000008001c74 <sched>
  p->chan = 0;
9000000008001f40:	29c0a2e0 	st.d	$r0,$r23,40(0x28)
    release(&p->lock);
9000000008001f44:	001502e4 	move	$r4,$r23
9000000008001f48:	57efcbff 	bl	-4152(0xfffefc8) # 9000000008000f10 <release>
    acquire(lk);
9000000008001f4c:	00150304 	move	$r4,$r24
9000000008001f50:	57ef63ff 	bl	-4256(0xfffef60) # 9000000008000eb0 <acquire>
}
9000000008001f54:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008001f58:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008001f5c:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008001f60:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008001f64:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008001f68:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008001f6c:	4c000020 	jirl	$r0,$r1,0
  p->chan = chan;
9000000008001f70:	29c0a099 	st.d	$r25,$r4,40(0x28)
  p->state = SLEEPING;
9000000008001f74:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008001f78:	2980608c 	st.w	$r12,$r4,24(0x18)
  sched();
9000000008001f7c:	57fcfbff 	bl	-776(0xffffcf8) # 9000000008001c74 <sched>
  p->chan = 0;
9000000008001f80:	29c0a2e0 	st.d	$r0,$r23,40(0x28)
  if (lk != &p->lock) {
9000000008001f84:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008001f54 <sleep+0x60>

9000000008001f88 <wait>:
int wait(uint64 addr) {
9000000008001f88:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000008001f8c:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008001f90:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008001f94:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008001f98:	29c10078 	st.d	$r24,$r3,64(0x40)
9000000008001f9c:	29c0e079 	st.d	$r25,$r3,56(0x38)
9000000008001fa0:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008001fa4:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008001fa8:	29c0807c 	st.d	$r28,$r3,32(0x20)
9000000008001fac:	29c0607d 	st.d	$r29,$r3,24(0x18)
9000000008001fb0:	29c0407e 	st.d	$r30,$r3,16(0x10)
9000000008001fb4:	29c0207f 	st.d	$r31,$r3,8(0x8)
9000000008001fb8:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000008001fbc:	0015009e 	move	$r30,$r4
  struct proc *p = myproc();
9000000008001fc0:	57f76bff 	bl	-2200(0xffff768) # 9000000008001728 <myproc>
9000000008001fc4:	00150098 	move	$r24,$r4
  acquire(&p->lock);
9000000008001fc8:	0015009f 	move	$r31,$r4
9000000008001fcc:	57eee7ff 	bl	-4380(0xfffeee4) # 9000000008000eb0 <acquire>
    havekids = 0;
9000000008001fd0:	0015001d 	move	$r29,$r0
        if (np->state == ZOMBIE) {
9000000008001fd4:	0280141b 	addi.w	$r27,$r0,5(0x5)
    for (np = proc; np < &proc[NPROC]; np++) {
9000000008001fd8:	1c00027a 	pcaddu12i	$r26,19(0x13)
9000000008001fdc:	02cc235a 	addi.d	$r26,$r26,776(0x308)
        havekids = 1;
9000000008001fe0:	0280041c 	addi.w	$r28,$r0,1(0x1)
    havekids = 0;
9000000008001fe4:	001503ad 	move	$r13,$r29
    for (np = proc; np < &proc[NPROC]; np++) {
9000000008001fe8:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
9000000008001fec:	02c5c2f7 	addi.d	$r23,$r23,368(0x170)
9000000008001ff0:	03ad2019 	ori	$r25,$r0,0xb48
9000000008001ff4:	50006400 	b	100(0x64) # 9000000008002058 <wait+0xd0>
          pid = np->pid;
9000000008001ff8:	2880e2f9 	ld.w	$r25,$r23,56(0x38)
          if (addr != 0 && copyout(p->pagetable, addr, (char *)&np->xstate,
9000000008001ffc:	40001fc0 	beqz	$r30,28(0x1c) # 9000000008002018 <wait+0x90>
9000000008002000:	02801007 	addi.w	$r7,$r0,4(0x4)
9000000008002004:	02c0d2e6 	addi.d	$r6,$r23,52(0x34)
9000000008002008:	001503c5 	move	$r5,$r30
900000000800200c:	28c18304 	ld.d	$r4,$r24,96(0x60)
9000000008002010:	541e7c00 	bl	7804(0x1e7c) # 9000000008003e8c <copyout>
9000000008002014:	60002080 	blt	$r4,$r0,32(0x20) # 9000000008002034 <wait+0xac>
          freeproc(np);
9000000008002018:	001502e4 	move	$r4,$r23
900000000800201c:	57f97bff 	bl	-1672(0xffff978) # 9000000008001994 <freeproc>
          release(&np->lock);
9000000008002020:	001502e4 	move	$r4,$r23
9000000008002024:	57eeefff 	bl	-4372(0xfffeeec) # 9000000008000f10 <release>
          release(&p->lock);
9000000008002028:	00150304 	move	$r4,$r24
900000000800202c:	57eee7ff 	bl	-4380(0xfffeee4) # 9000000008000f10 <release>
          return pid;
9000000008002030:	50006800 	b	104(0x68) # 9000000008002098 <wait+0x110>
            release(&np->lock);
9000000008002034:	001502e4 	move	$r4,$r23
9000000008002038:	57eedbff 	bl	-4392(0xfffeed8) # 9000000008000f10 <release>
            release(&p->lock);
900000000800203c:	00150304 	move	$r4,$r24
9000000008002040:	57eed3ff 	bl	-4400(0xfffeed0) # 9000000008000f10 <release>
            return -1;
9000000008002044:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
9000000008002048:	50005000 	b	80(0x50) # 9000000008002098 <wait+0x110>
    for (np = proc; np < &proc[NPROC]; np++) {
900000000800204c:	0010e6f7 	add.d	$r23,$r23,$r25
9000000008002050:	28c0034c 	ld.d	$r12,$r26,0
9000000008002054:	58002eec 	beq	$r23,$r12,44(0x2c) # 9000000008002080 <wait+0xf8>
      if (np->parent == p) {
9000000008002058:	28c082ec 	ld.d	$r12,$r23,32(0x20)
900000000800205c:	5ffff198 	bne	$r12,$r24,-16(0x3fff0) # 900000000800204c <wait+0xc4>
        acquire(&np->lock);
9000000008002060:	001502e4 	move	$r4,$r23
9000000008002064:	57ee4fff 	bl	-4532(0xfffee4c) # 9000000008000eb0 <acquire>
        if (np->state == ZOMBIE) {
9000000008002068:	288062ec 	ld.w	$r12,$r23,24(0x18)
900000000800206c:	5bff8d9b 	beq	$r12,$r27,-116(0x3ff8c) # 9000000008001ff8 <wait+0x70>
        release(&np->lock);
9000000008002070:	001502e4 	move	$r4,$r23
9000000008002074:	57ee9fff 	bl	-4452(0xfffee9c) # 9000000008000f10 <release>
        havekids = 1;
9000000008002078:	0015038d 	move	$r13,$r28
900000000800207c:	53ffd3ff 	b	-48(0xfffffd0) # 900000000800204c <wait+0xc4>
    if (!havekids || p->killed) {
9000000008002080:	40000da0 	beqz	$r13,12(0xc) # 900000000800208c <wait+0x104>
9000000008002084:	2880c30c 	ld.w	$r12,$r24,48(0x30)
9000000008002088:	40004980 	beqz	$r12,72(0x48) # 90000000080020d0 <wait+0x148>
      release(&p->lock);
900000000800208c:	00150304 	move	$r4,$r24
9000000008002090:	57ee83ff 	bl	-4480(0xfffee80) # 9000000008000f10 <release>
      return -1;
9000000008002094:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
}
9000000008002098:	00150324 	move	$r4,$r25
900000000800209c:	28c16061 	ld.d	$r1,$r3,88(0x58)
90000000080020a0:	28c14076 	ld.d	$r22,$r3,80(0x50)
90000000080020a4:	28c12077 	ld.d	$r23,$r3,72(0x48)
90000000080020a8:	28c10078 	ld.d	$r24,$r3,64(0x40)
90000000080020ac:	28c0e079 	ld.d	$r25,$r3,56(0x38)
90000000080020b0:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
90000000080020b4:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
90000000080020b8:	28c0807c 	ld.d	$r28,$r3,32(0x20)
90000000080020bc:	28c0607d 	ld.d	$r29,$r3,24(0x18)
90000000080020c0:	28c0407e 	ld.d	$r30,$r3,16(0x10)
90000000080020c4:	28c0207f 	ld.d	$r31,$r3,8(0x8)
90000000080020c8:	02c18063 	addi.d	$r3,$r3,96(0x60)
90000000080020cc:	4c000020 	jirl	$r0,$r1,0
    sleep(p, &p->lock); // DOC: wait-sleep
90000000080020d0:	001503e5 	move	$r5,$r31
90000000080020d4:	00150304 	move	$r4,$r24
90000000080020d8:	57fe1fff 	bl	-484(0xffffe1c) # 9000000008001ef4 <sleep>
    havekids = 0;
90000000080020dc:	53ff0bff 	b	-248(0xfffff08) # 9000000008001fe4 <wait+0x5c>

90000000080020e0 <wakeup>:
void wakeup(void *chan) {
90000000080020e0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000080020e4:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000080020e8:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000080020ec:	29c0a077 	st.d	$r23,$r3,40(0x28)
90000000080020f0:	29c08078 	st.d	$r24,$r3,32(0x20)
90000000080020f4:	29c06079 	st.d	$r25,$r3,24(0x18)
90000000080020f8:	29c0407a 	st.d	$r26,$r3,16(0x10)
90000000080020fc:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008002100:	29c0007c 	st.d	$r28,$r3,0
9000000008002104:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008002108:	0015009b 	move	$r27,$r4
  for (p = proc; p < &proc[NPROC]; p++) {
900000000800210c:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
9000000008002110:	02c132f7 	addi.d	$r23,$r23,76(0x4c)
    if (p->state == SLEEPING && p->chan == chan) {
9000000008002114:	0280081a 	addi.w	$r26,$r0,2(0x2)
      p->state = RUNNABLE;
9000000008002118:	02800c1c 	addi.w	$r28,$r0,3(0x3)
  for (p = proc; p < &proc[NPROC]; p++) {
900000000800211c:	03ad2019 	ori	$r25,$r0,0xb48
9000000008002120:	1c000278 	pcaddu12i	$r24,19(0x13)
9000000008002124:	02c70318 	addi.d	$r24,$r24,448(0x1c0)
9000000008002128:	50001c00 	b	28(0x1c) # 9000000008002144 <wakeup+0x64>
      p->state = RUNNABLE;
900000000800212c:	298062fc 	st.w	$r28,$r23,24(0x18)
    release(&p->lock);
9000000008002130:	001502e4 	move	$r4,$r23
9000000008002134:	57eddfff 	bl	-4644(0xfffeddc) # 9000000008000f10 <release>
  for (p = proc; p < &proc[NPROC]; p++) {
9000000008002138:	0010e6f7 	add.d	$r23,$r23,$r25
900000000800213c:	28c0030c 	ld.d	$r12,$r24,0
9000000008002140:	580022ec 	beq	$r23,$r12,32(0x20) # 9000000008002160 <wakeup+0x80>
    acquire(&p->lock);
9000000008002144:	001502e4 	move	$r4,$r23
9000000008002148:	57ed6bff 	bl	-4760(0xfffed68) # 9000000008000eb0 <acquire>
    if (p->state == SLEEPING && p->chan == chan) {
900000000800214c:	288062ec 	ld.w	$r12,$r23,24(0x18)
9000000008002150:	5fffe19a 	bne	$r12,$r26,-32(0x3ffe0) # 9000000008002130 <wakeup+0x50>
9000000008002154:	28c0a2ec 	ld.d	$r12,$r23,40(0x28)
9000000008002158:	5fffd99b 	bne	$r12,$r27,-40(0x3ffd8) # 9000000008002130 <wakeup+0x50>
900000000800215c:	53ffd3ff 	b	-48(0xfffffd0) # 900000000800212c <wakeup+0x4c>
}
9000000008002160:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008002164:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008002168:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800216c:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008002170:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008002174:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008002178:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800217c:	28c0007c 	ld.d	$r28,$r3,0
9000000008002180:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008002184:	4c000020 	jirl	$r0,$r1,0

9000000008002188 <kill>:
// // Kill the process with the given pid.
// // The victim won't exit until it tries to return
// // to user space (see usertrap() in trap.c).
// 懒处理杀死进程
// sig 也许表示信号来源，异常处理
int kill(int pid, int sig) {
9000000008002188:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800218c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008002190:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008002194:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008002198:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800219c:	29c06079 	st.d	$r25,$r3,24(0x18)
90000000080021a0:	29c0407a 	st.d	$r26,$r3,16(0x10)
90000000080021a4:	29c0207b 	st.d	$r27,$r3,8(0x8)
90000000080021a8:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000080021ac:	00150098 	move	$r24,$r4
90000000080021b0:	001500bb 	move	$r27,$r5
  struct proc *p;
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080021b4:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
90000000080021b8:	02fe92f7 	addi.d	$r23,$r23,-92(0xfa4)
90000000080021bc:	03ad201a 	ori	$r26,$r0,0xb48
90000000080021c0:	1c000279 	pcaddu12i	$r25,19(0x13)
90000000080021c4:	02c48339 	addi.d	$r25,$r25,288(0x120)
    acquire(&p->lock);
90000000080021c8:	001502e4 	move	$r4,$r23
90000000080021cc:	57ece7ff 	bl	-4892(0xfffece4) # 9000000008000eb0 <acquire>
    if (p->pid == pid) {
90000000080021d0:	2880e2ec 	ld.w	$r12,$r23,56(0x38)
90000000080021d4:	58002198 	beq	$r12,$r24,32(0x20) # 90000000080021f4 <kill+0x6c>
        p->state = RUNNABLE;
      }
      release(&p->lock);
      return 0;
    }
    release(&p->lock);
90000000080021d8:	001502e4 	move	$r4,$r23
90000000080021dc:	57ed37ff 	bl	-4812(0xfffed34) # 9000000008000f10 <release>
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080021e0:	0010eaf7 	add.d	$r23,$r23,$r26
90000000080021e4:	28c0032c 	ld.d	$r12,$r25,0
90000000080021e8:	5fffe2ec 	bne	$r23,$r12,-32(0x3ffe0) # 90000000080021c8 <kill+0x40>
  }
  return -1;
90000000080021ec:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080021f0:	50002c00 	b	44(0x2c) # 900000000800221c <kill+0x94>
      if (p->killed == 0 || p->killed > sig) {
90000000080021f4:	2880c2ec 	ld.w	$r12,$r23,48(0x30)
90000000080021f8:	40000980 	beqz	$r12,8(0x8) # 9000000008002200 <kill+0x78>
90000000080021fc:	64000b6c 	bge	$r27,$r12,8(0x8) # 9000000008002204 <kill+0x7c>
        p->killed = sig;
9000000008002200:	2980c2fb 	st.w	$r27,$r23,48(0x30)
      if (p->state == SLEEPING) {
9000000008002204:	288062ed 	ld.w	$r13,$r23,24(0x18)
9000000008002208:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800220c:	580035ac 	beq	$r13,$r12,52(0x34) # 9000000008002240 <kill+0xb8>
      release(&p->lock);
9000000008002210:	001502e4 	move	$r4,$r23
9000000008002214:	57ecffff 	bl	-4868(0xfffecfc) # 9000000008000f10 <release>
      return 0;
9000000008002218:	00150004 	move	$r4,$r0
}
900000000800221c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008002220:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008002224:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008002228:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800222c:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008002230:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008002234:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008002238:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800223c:	4c000020 	jirl	$r0,$r1,0
        p->state = RUNNABLE;
9000000008002240:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000008002244:	298062ec 	st.w	$r12,$r23,24(0x18)
9000000008002248:	53ffcbff 	b	-56(0xfffffc8) # 9000000008002210 <kill+0x88>

900000000800224c <tgkill>:
//     if(p->pid == pid) return 1;
//   }
//   return 0;
// }

int tgkill(int tid, int pid, int sig) {
900000000800224c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008002250:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008002254:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008002258:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800225c:	29c00078 	st.d	$r24,$r3,0
9000000008002260:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008002264:	00150097 	move	$r23,$r4
9000000008002268:	001500d8 	move	$r24,$r6
  // if(!cmp_parent(pid,tid)) {printf("pid:%d, tid:%d\n");return -1;}
  // else return kill(tid,sig);
  printf("tgkill:%d %d %d\n", tid, pid, sig);
900000000800226c:	001500c7 	move	$r7,$r6
9000000008002270:	001500a6 	move	$r6,$r5
9000000008002274:	00150085 	move	$r5,$r4
9000000008002278:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000800227c:	02fda084 	addi.d	$r4,$r4,-152(0xf68)
9000000008002280:	57dff7ff 	bl	-8204(0xfffdff4) # 9000000008000274 <printf>
  return kill(tid, sig);
9000000008002284:	00150305 	move	$r5,$r24
9000000008002288:	001502e4 	move	$r4,$r23
900000000800228c:	57feffff 	bl	-260(0xffffefc) # 9000000008002188 <kill>
}
9000000008002290:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008002294:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008002298:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800229c:	28c00078 	ld.d	$r24,$r3,0
90000000080022a0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080022a4:	4c000020 	jirl	$r0,$r1,0

90000000080022a8 <either_copyout>:

// // Copy to either a user address, or kernel address,
// // depending on usr_dst.
// // Returns 0 on success, -1 on error.
int either_copyout(int user_dst, uint64 dst, void *src, uint64 len) {
90000000080022a8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080022ac:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080022b0:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080022b4:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080022b8:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080022bc:	29c02079 	st.d	$r25,$r3,8(0x8)
90000000080022c0:	29c0007a 	st.d	$r26,$r3,0
90000000080022c4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000080022c8:	00150097 	move	$r23,$r4
90000000080022cc:	001500b9 	move	$r25,$r5
90000000080022d0:	001500da 	move	$r26,$r6
90000000080022d4:	001500f8 	move	$r24,$r7
  struct proc *p = myproc();
90000000080022d8:	57f453ff 	bl	-2992(0xffff450) # 9000000008001728 <myproc>
  if (user_dst) {
90000000080022dc:	40003ae0 	beqz	$r23,56(0x38) # 9000000008002314 <either_copyout+0x6c>
    return copyout(p->pagetable, dst, src, len);
90000000080022e0:	00150307 	move	$r7,$r24
90000000080022e4:	00150346 	move	$r6,$r26
90000000080022e8:	00150325 	move	$r5,$r25
90000000080022ec:	28c18084 	ld.d	$r4,$r4,96(0x60)
90000000080022f0:	541b9c00 	bl	7068(0x1b9c) # 9000000008003e8c <copyout>
    // return copyout2(dst, src, len);
  } else {
    memmove((char *)dst, src, len);
    return 0;
  }
}
90000000080022f4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080022f8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080022fc:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008002300:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008002304:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008002308:	28c0007a 	ld.d	$r26,$r3,0
900000000800230c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008002310:	4c000020 	jirl	$r0,$r1,0
    memmove((char *)dst, src, len);
9000000008002314:	00408306 	slli.w	$r6,$r24,0x0
9000000008002318:	00150345 	move	$r5,$r26
900000000800231c:	00150324 	move	$r4,$r25
9000000008002320:	57ecefff 	bl	-4884(0xfffecec) # 900000000800100c <memmove>
    return 0;
9000000008002324:	001502e4 	move	$r4,$r23
9000000008002328:	53ffcfff 	b	-52(0xfffffcc) # 90000000080022f4 <either_copyout+0x4c>

900000000800232c <either_copyin>:

// // Copy from either a user address, or kernel address,
// // depending on usr_src.
// // Returns 0 on success, -1 on error.
int either_copyin(void *dst, int user_src, uint64 src, uint64 len) {
900000000800232c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008002330:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008002334:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008002338:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800233c:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008002340:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008002344:	29c0007a 	st.d	$r26,$r3,0
9000000008002348:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800234c:	00150099 	move	$r25,$r4
9000000008002350:	001500b7 	move	$r23,$r5
9000000008002354:	001500da 	move	$r26,$r6
9000000008002358:	001500f8 	move	$r24,$r7
  struct proc *p = myproc();
900000000800235c:	57f3cfff 	bl	-3124(0xffff3cc) # 9000000008001728 <myproc>
  if (user_src) {
9000000008002360:	40003ae0 	beqz	$r23,56(0x38) # 9000000008002398 <either_copyin+0x6c>
    return copyin(p->pagetable, dst, src, len);
9000000008002364:	00150307 	move	$r7,$r24
9000000008002368:	00150346 	move	$r6,$r26
900000000800236c:	00150325 	move	$r5,$r25
9000000008002370:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008002374:	541c8400 	bl	7300(0x1c84) # 9000000008003ff8 <copyin>
    // return copyin2(dst, src, len);
  } else {
    memmove(dst, (char *)src, len);
    return 0;
  }
}
9000000008002378:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800237c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008002380:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008002384:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008002388:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800238c:	28c0007a 	ld.d	$r26,$r3,0
9000000008002390:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008002394:	4c000020 	jirl	$r0,$r1,0
    memmove(dst, (char *)src, len);
9000000008002398:	00408306 	slli.w	$r6,$r24,0x0
900000000800239c:	00150345 	move	$r5,$r26
90000000080023a0:	00150324 	move	$r4,$r25
90000000080023a4:	57ec6bff 	bl	-5016(0xfffec68) # 900000000800100c <memmove>
    return 0;
90000000080023a8:	001502e4 	move	$r4,$r23
90000000080023ac:	53ffcfff 	b	-52(0xfffffcc) # 9000000008002378 <either_copyin+0x4c>

90000000080023b0 <procdump>:

// // Print a process listing to console.  For debugging.
// // Runs when user types ^P on console.
// // No lock to avoid wedging a stuck machine further.
void procdump(void) {
90000000080023b0:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
90000000080023b4:	29c12061 	st.d	$r1,$r3,72(0x48)
90000000080023b8:	29c10076 	st.d	$r22,$r3,64(0x40)
90000000080023bc:	29c0e077 	st.d	$r23,$r3,56(0x38)
90000000080023c0:	29c0c078 	st.d	$r24,$r3,48(0x30)
90000000080023c4:	29c0a079 	st.d	$r25,$r3,40(0x28)
90000000080023c8:	29c0807a 	st.d	$r26,$r3,32(0x20)
90000000080023cc:	29c0607b 	st.d	$r27,$r3,24(0x18)
90000000080023d0:	29c0407c 	st.d	$r28,$r3,16(0x10)
90000000080023d4:	29c0207d 	st.d	$r29,$r3,8(0x8)
90000000080023d8:	29c0007e 	st.d	$r30,$r3,0
90000000080023dc:	02c14076 	addi.d	$r22,$r3,80(0x50)
                           [RUNNING] "run   ",
                           [ZOMBIE] "zombie"};
  struct proc *p;
  char *state;

  printf("\nPID\tSTATE\tNAME\tMEM\n");
90000000080023e0:	1c000264 	pcaddu12i	$r4,19(0x13)
90000000080023e4:	02f88084 	addi.d	$r4,$r4,-480(0xe20)
90000000080023e8:	57de8fff 	bl	-8564(0xfffde8c) # 9000000008000274 <printf>
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080023ec:	1c0005f8 	pcaddu12i	$r24,47(0x2f)
90000000080023f0:	02f5b318 	addi.d	$r24,$r24,-660(0xd6c)
90000000080023f4:	02d3a317 	addi.d	$r23,$r24,1256(0x4e8)
90000000080023f8:	1400046c 	lu12i.w	$r12,35(0x23)
90000000080023fc:	03a3e18c 	ori	$r12,$r12,0x8f8
9000000008002400:	0010b318 	add.d	$r24,$r24,$r12
    if (p->state == UNUSED)
      continue;
    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
9000000008002404:	0280141d 	addi.w	$r29,$r0,5(0x5)
      state = states[p->state];
    else
      state = "???";
9000000008002408:	1c000279 	pcaddu12i	$r25,19(0x13)
900000000800240c:	02f7c339 	addi.d	$r25,$r25,-528(0xdf0)
    printf("%d\t%s\t%s\t%d", p->pid, state, p->name, p->sz);
9000000008002410:	1c00027c 	pcaddu12i	$r28,19(0x13)
9000000008002414:	02f8239c 	addi.d	$r28,$r28,-504(0xe08)
    printf("\n");
9000000008002418:	1c00027b 	pcaddu12i	$r27,19(0x13)
900000000800241c:	02f1437b 	addi.d	$r27,$r27,-944(0xc50)
    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
9000000008002420:	1c00027e 	pcaddu12i	$r30,19(0x13)
9000000008002424:	02fa43de 	addi.d	$r30,$r30,-368(0xe90)
9000000008002428:	03ad201a 	ori	$r26,$r0,0xb48
900000000800242c:	50002800 	b	40(0x28) # 9000000008002454 <procdump+0xa4>
    printf("%d\t%s\t%s\t%d", p->pid, state, p->name, p->sz);
9000000008002430:	28edc1a8 	ld.d	$r8,$r13,-1168(0xb70)
9000000008002434:	001501a7 	move	$r7,$r13
9000000008002438:	28ad41a5 	ld.w	$r5,$r13,-1200(0xb50)
900000000800243c:	00150384 	move	$r4,$r28
9000000008002440:	57de37ff 	bl	-8652(0xfffde34) # 9000000008000274 <printf>
    printf("\n");
9000000008002444:	00150364 	move	$r4,$r27
9000000008002448:	57de2fff 	bl	-8660(0xfffde2c) # 9000000008000274 <printf>
900000000800244c:	0010eaf7 	add.d	$r23,$r23,$r26
  for (p = proc; p < &proc[NPROC]; p++) {
9000000008002450:	58003af8 	beq	$r23,$r24,56(0x38) # 9000000008002488 <procdump+0xd8>
    if (p->state == UNUSED)
9000000008002454:	001502ed 	move	$r13,$r23
9000000008002458:	28acc2ec 	ld.w	$r12,$r23,-1232(0xb30)
900000000800245c:	43fff19f 	beqz	$r12,-16(0x7ffff0) # 900000000800244c <procdump+0x9c>
      state = "???";
9000000008002460:	00150326 	move	$r6,$r25
    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
9000000008002464:	6bffcfac 	bltu	$r29,$r12,-52(0x3ffcc) # 9000000008002430 <procdump+0x80>
9000000008002468:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
900000000800246c:	002d018c 	alsl.d	$r12,$r12,$r0,0x3
9000000008002470:	0010b3cc 	add.d	$r12,$r30,$r12
9000000008002474:	28c00186 	ld.d	$r6,$r12,0
      state = "???";
9000000008002478:	001318cc 	maskeqz	$r12,$r6,$r6
900000000800247c:	00139b26 	masknez	$r6,$r25,$r6
9000000008002480:	00151986 	or	$r6,$r12,$r6
9000000008002484:	53ffafff 	b	-84(0xfffffac) # 9000000008002430 <procdump+0x80>
  }
}
9000000008002488:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800248c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000008002490:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008002494:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008002498:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800249c:	28c0807a 	ld.d	$r26,$r3,32(0x20)
90000000080024a0:	28c0607b 	ld.d	$r27,$r3,24(0x18)
90000000080024a4:	28c0407c 	ld.d	$r28,$r3,16(0x10)
90000000080024a8:	28c0207d 	ld.d	$r29,$r3,8(0x8)
90000000080024ac:	28c0007e 	ld.d	$r30,$r3,0
90000000080024b0:	02c14063 	addi.d	$r3,$r3,80(0x50)
90000000080024b4:	4c000020 	jirl	$r0,$r1,0

90000000080024b8 <procnum>:

uint64 procnum(void) {
90000000080024b8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080024bc:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080024c0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  int num = 0;
  struct proc *p;

  for (p = proc; p < &proc[NPROC]; p++) {
90000000080024c4:	1c0005ec 	pcaddu12i	$r12,47(0x2f)
90000000080024c8:	02f2518c 	addi.d	$r12,$r12,-876(0xc94)
  int num = 0;
90000000080024cc:	00150004 	move	$r4,$r0
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080024d0:	03ad2010 	ori	$r16,$r0,0xb48
90000000080024d4:	1c00026d 	pcaddu12i	$r13,19(0x13)
90000000080024d8:	02f831ad 	addi.d	$r13,$r13,-500(0xe0c)
90000000080024dc:	28c001af 	ld.d	$r15,$r13,0
    if (p->state != UNUSED) {
90000000080024e0:	2880618e 	ld.w	$r14,$r12,24(0x18)
      num++;
90000000080024e4:	0280048d 	addi.w	$r13,$r4,1(0x1)
90000000080024e8:	001339ad 	maskeqz	$r13,$r13,$r14
90000000080024ec:	0013b884 	masknez	$r4,$r4,$r14
90000000080024f0:	001511a4 	or	$r4,$r13,$r4
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080024f4:	0010c18c 	add.d	$r12,$r12,$r16
90000000080024f8:	5fffe98f 	bne	$r12,$r15,-24(0x3ffe8) # 90000000080024e0 <procnum+0x28>
    }
  }

  return num;
}
90000000080024fc:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008002500:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008002504:	4c000020 	jirl	$r0,$r1,0

9000000008002508 <findchild>:

struct proc *findchild(struct proc *p, int pid, struct proc **child) {
9000000008002508:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800250c:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008002510:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008002514:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008002518:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800251c:	29c0e079 	st.d	$r25,$r3,56(0x38)
9000000008002520:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008002524:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008002528:	29c0807c 	st.d	$r28,$r3,32(0x20)
900000000800252c:	29c0607d 	st.d	$r29,$r3,24(0x18)
9000000008002530:	29c0407e 	st.d	$r30,$r3,16(0x10)
9000000008002534:	29c0207f 	st.d	$r31,$r3,8(0x8)
9000000008002538:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000800253c:	0015009c 	move	$r28,$r4
9000000008002540:	001500b8 	move	$r24,$r5
9000000008002544:	001500dd 	move	$r29,$r6
  *child = NULL;
9000000008002548:	29c000c0 	st.d	$r0,$r6,0
  // iterator all process
  for (struct proc *np = proc; np < &proc[NPROC]; np++) {
900000000800254c:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
9000000008002550:	02f032f7 	addi.d	$r23,$r23,-1012(0xc0c)
    if ((pid == -1 || np->pid == pid) && np->parent == p) {
9000000008002554:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
      acquire(&np->lock);
      *child = np;
      printf("state : %d\n", np->state);
9000000008002558:	1c00027f 	pcaddu12i	$r31,19(0x13)
900000000800255c:	02f343ff 	addi.d	$r31,$r31,-816(0xcd0)
      if (np->state == ZOMBIE) {
9000000008002560:	0280141e 	addi.w	$r30,$r0,5(0x5)
  for (struct proc *np = proc; np < &proc[NPROC]; np++) {
9000000008002564:	03ad201b 	ori	$r27,$r0,0xb48
9000000008002568:	1c00027a 	pcaddu12i	$r26,19(0x13)
900000000800256c:	02f5e35a 	addi.d	$r26,$r26,-648(0xd78)
9000000008002570:	50001800 	b	24(0x18) # 9000000008002588 <findchild+0x80>
    if ((pid == -1 || np->pid == pid) && np->parent == p) {
9000000008002574:	28c082ec 	ld.d	$r12,$r23,32(0x20)
9000000008002578:	5800219c 	beq	$r12,$r28,32(0x20) # 9000000008002598 <findchild+0x90>
  for (struct proc *np = proc; np < &proc[NPROC]; np++) {
900000000800257c:	0010eef7 	add.d	$r23,$r23,$r27
9000000008002580:	28c0034c 	ld.d	$r12,$r26,0
9000000008002584:	580042ec 	beq	$r23,$r12,64(0x40) # 90000000080025c4 <findchild+0xbc>
    if ((pid == -1 || np->pid == pid) && np->parent == p) {
9000000008002588:	5bffef19 	beq	$r24,$r25,-20(0x3ffec) # 9000000008002574 <findchild+0x6c>
900000000800258c:	2880e2ec 	ld.w	$r12,$r23,56(0x38)
9000000008002590:	5fffed98 	bne	$r12,$r24,-20(0x3ffec) # 900000000800257c <findchild+0x74>
9000000008002594:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008002574 <findchild+0x6c>
      acquire(&np->lock);
9000000008002598:	001502e4 	move	$r4,$r23
900000000800259c:	57e917ff 	bl	-5868(0xfffe914) # 9000000008000eb0 <acquire>
      *child = np;
90000000080025a0:	29c003b7 	st.d	$r23,$r29,0
      printf("state : %d\n", np->state);
90000000080025a4:	288062e5 	ld.w	$r5,$r23,24(0x18)
90000000080025a8:	001503e4 	move	$r4,$r31
90000000080025ac:	57dccbff 	bl	-9016(0xfffdcc8) # 9000000008000274 <printf>
      if (np->state == ZOMBIE) {
90000000080025b0:	288062ec 	ld.w	$r12,$r23,24(0x18)
90000000080025b4:	5800159e 	beq	$r12,$r30,20(0x14) # 90000000080025c8 <findchild+0xc0>
        return np;
      }
      release(&np->lock);
90000000080025b8:	001502e4 	move	$r4,$r23
90000000080025bc:	57e957ff 	bl	-5804(0xfffe954) # 9000000008000f10 <release>
90000000080025c0:	53ffbfff 	b	-68(0xfffffbc) # 900000000800257c <findchild+0x74>
    }
  }
  return NULL;
90000000080025c4:	00150017 	move	$r23,$r0
}
90000000080025c8:	001502e4 	move	$r4,$r23
90000000080025cc:	28c16061 	ld.d	$r1,$r3,88(0x58)
90000000080025d0:	28c14076 	ld.d	$r22,$r3,80(0x50)
90000000080025d4:	28c12077 	ld.d	$r23,$r3,72(0x48)
90000000080025d8:	28c10078 	ld.d	$r24,$r3,64(0x40)
90000000080025dc:	28c0e079 	ld.d	$r25,$r3,56(0x38)
90000000080025e0:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
90000000080025e4:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
90000000080025e8:	28c0807c 	ld.d	$r28,$r3,32(0x20)
90000000080025ec:	28c0607d 	ld.d	$r29,$r3,24(0x18)
90000000080025f0:	28c0407e 	ld.d	$r30,$r3,16(0x10)
90000000080025f4:	28c0207f 	ld.d	$r31,$r3,8(0x8)
90000000080025f8:	02c18063 	addi.d	$r3,$r3,96(0x60)
90000000080025fc:	4c000020 	jirl	$r0,$r1,0

9000000008002600 <wait4pid>:

int wait4pid(int pid, uint64 addr, int options) {
9000000008002600:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000008002604:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008002608:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800260c:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008002610:	29c0c078 	st.d	$r24,$r3,48(0x30)
9000000008002614:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008002618:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800261c:	29c0607b 	st.d	$r27,$r3,24(0x18)
9000000008002620:	29c0407c 	st.d	$r28,$r3,16(0x10)
9000000008002624:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000008002628:	00150098 	move	$r24,$r4
900000000800262c:	001500bc 	move	$r28,$r5
  struct proc *p = myproc(), *child = NULL, *tchild = NULL;
9000000008002630:	57f0fbff 	bl	-3848(0xffff0f8) # 9000000008001728 <myproc>
9000000008002634:	00150099 	move	$r25,$r4
9000000008002638:	29fee2c0 	st.d	$r0,$r22,-72(0xfb8)
  int kidpid;
  acquire(&p->lock);
900000000800263c:	0015009b 	move	$r27,$r4
9000000008002640:	57e873ff 	bl	-6032(0xfffe870) # 9000000008000eb0 <acquire>
    */
    if (!tchild) {
      release(&p->lock);
      return -1;
    }
    if (pid == -1) {
9000000008002644:	02bffc1a 	addi.w	$r26,$r0,-1(0xfff)
9000000008002648:	5000a400 	b	164(0xa4) # 90000000080026ec <wait4pid+0xec>
      kidpid = child->pid;
900000000800264c:	2880e098 	ld.w	$r24,$r4,56(0x38)
      child->xstate <<= 8;
9000000008002650:	2880d08c 	ld.w	$r12,$r4,52(0x34)
9000000008002654:	0040a18c 	slli.w	$r12,$r12,0x8
9000000008002658:	2980d08c 	st.w	$r12,$r4,52(0x34)
      if (addr != 0 && copyout(p->pagetable, addr, (char *)&child->xstate,
900000000800265c:	40001f80 	beqz	$r28,28(0x1c) # 9000000008002678 <wait4pid+0x78>
9000000008002660:	02801007 	addi.w	$r7,$r0,4(0x4)
9000000008002664:	02c0d086 	addi.d	$r6,$r4,52(0x34)
9000000008002668:	00150385 	move	$r5,$r28
900000000800266c:	28c18324 	ld.d	$r4,$r25,96(0x60)
9000000008002670:	54181c00 	bl	6172(0x181c) # 9000000008003e8c <copyout>
9000000008002674:	60004880 	blt	$r4,$r0,72(0x48) # 90000000080026bc <wait4pid+0xbc>
      freeproc(child);
9000000008002678:	001502e4 	move	$r4,$r23
900000000800267c:	57f31bff 	bl	-3304(0xffff318) # 9000000008001994 <freeproc>
      release(&child->lock);
9000000008002680:	001502e4 	move	$r4,$r23
9000000008002684:	57e88fff 	bl	-6004(0xfffe88c) # 9000000008000f10 <release>
      release(&p->lock);
9000000008002688:	00150324 	move	$r4,$r25
900000000800268c:	57e887ff 	bl	-6012(0xfffe884) # 9000000008000f10 <release>
  }
  release(&p->lock);
  return 0;

  // TODO: deal with options
}
9000000008002690:	00150304 	move	$r4,$r24
9000000008002694:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000008002698:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800269c:	28c0e077 	ld.d	$r23,$r3,56(0x38)
90000000080026a0:	28c0c078 	ld.d	$r24,$r3,48(0x30)
90000000080026a4:	28c0a079 	ld.d	$r25,$r3,40(0x28)
90000000080026a8:	28c0807a 	ld.d	$r26,$r3,32(0x20)
90000000080026ac:	28c0607b 	ld.d	$r27,$r3,24(0x18)
90000000080026b0:	28c0407c 	ld.d	$r28,$r3,16(0x10)
90000000080026b4:	02c14063 	addi.d	$r3,$r3,80(0x50)
90000000080026b8:	4c000020 	jirl	$r0,$r1,0
        release(&child->lock);
90000000080026bc:	001502e4 	move	$r4,$r23
90000000080026c0:	57e853ff 	bl	-6064(0xfffe850) # 9000000008000f10 <release>
        release(&p->lock);
90000000080026c4:	00150324 	move	$r4,$r25
90000000080026c8:	57e84bff 	bl	-6072(0xfffe848) # 9000000008000f10 <release>
        return -1;
90000000080026cc:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
90000000080026d0:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008002690 <wait4pid+0x90>
      release(&p->lock);
90000000080026d4:	00150324 	move	$r4,$r25
90000000080026d8:	57e83bff 	bl	-6088(0xfffe838) # 9000000008000f10 <release>
      return -1;
90000000080026dc:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
90000000080026e0:	53ffb3ff 	b	-80(0xfffffb0) # 9000000008002690 <wait4pid+0x90>
      sleep(tchild, &p->lock);
90000000080026e4:	00150365 	move	$r5,$r27
90000000080026e8:	57f80fff 	bl	-2036(0xffff80c) # 9000000008001ef4 <sleep>
    child = findchild(p, pid, &tchild);
90000000080026ec:	02fee2c6 	addi.d	$r6,$r22,-72(0xfb8)
90000000080026f0:	00150305 	move	$r5,$r24
90000000080026f4:	00150324 	move	$r4,$r25
90000000080026f8:	57fe13ff 	bl	-496(0xffffe10) # 9000000008002508 <findchild>
90000000080026fc:	00150097 	move	$r23,$r4
    if (NULL != child) {
9000000008002700:	47ff4c9f 	bnez	$r4,-180(0x7fff4c) # 900000000800264c <wait4pid+0x4c>
    if (!tchild) {
9000000008002704:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000008002708:	43ffcc9f 	beqz	$r4,-52(0x7fffcc) # 90000000080026d4 <wait4pid+0xd4>
    if (pid == -1) {
900000000800270c:	5fffdb1a 	bne	$r24,$r26,-40(0x3ffd8) # 90000000080026e4 <wait4pid+0xe4>
      sleep(p, &p->lock);
9000000008002710:	00150365 	move	$r5,$r27
9000000008002714:	00150324 	move	$r4,$r25
9000000008002718:	57f7dfff 	bl	-2084(0xffff7dc) # 9000000008001ef4 <sleep>
900000000800271c:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080026ec <wait4pid+0xec>

9000000008002720 <sys_yield>:
// sys_call()?
uint64 sys_yield() {
9000000008002720:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008002724:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008002728:	29c00076 	st.d	$r22,$r3,0
900000000800272c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  yield();
9000000008002730:	57f767ff 	bl	-2204(0xffff764) # 9000000008001e94 <yield>
  return 0;
}
9000000008002734:	00150004 	move	$r4,$r0
9000000008002738:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800273c:	28c00076 	ld.d	$r22,$r3,0
9000000008002740:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008002744:	4c000020 	jirl	$r0,$r1,0

9000000008002748 <get_proc_addr_num>:
//   release(&p->lock);
//   return p;
// }

// 获取proc
int get_proc_addr_num(struct proc *p) {
9000000008002748:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800274c:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008002750:	02c04076 	addi.d	$r22,$r3,16(0x10)
  for (int i = 0; i < NPROC; i++) {
    if (&proc[i] == p) {
9000000008002754:	1c0005ec 	pcaddu12i	$r12,47(0x2f)
9000000008002758:	02e8118c 	addi.d	$r12,$r12,-1532(0xa04)
900000000800275c:	5800408c 	beq	$r4,$r12,64(0x40) # 900000000800279c <get_proc_addr_num+0x54>
9000000008002760:	1c00026c 	pcaddu12i	$r12,19(0x13)
9000000008002764:	02ee218c 	addi.d	$r12,$r12,-1144(0xb88)
9000000008002768:	28c0018d 	ld.d	$r13,$r12,0
  for (int i = 0; i < NPROC; i++) {
900000000800276c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008002770:	03ad200f 	ori	$r15,$r0,0xb48
9000000008002774:	0280c80e 	addi.w	$r14,$r0,50(0x32)
    if (&proc[i] == p) {
9000000008002778:	5800148d 	beq	$r4,$r13,20(0x14) # 900000000800278c <get_proc_addr_num+0x44>
  for (int i = 0; i < NPROC; i++) {
900000000800277c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000008002780:	0010bdad 	add.d	$r13,$r13,$r15
9000000008002784:	5ffff58e 	bne	$r12,$r14,-12(0x3fff4) # 9000000008002778 <get_proc_addr_num+0x30>
      return i;
    }
  }
  return -1;
9000000008002788:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800278c:	00150184 	move	$r4,$r12
9000000008002790:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008002794:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008002798:	4c000020 	jirl	$r0,$r1,0
  for (int i = 0; i < NPROC; i++) {
900000000800279c:	0015000c 	move	$r12,$r0
90000000080027a0:	53ffefff 	b	-20(0xfffffec) # 900000000800278c <get_proc_addr_num+0x44>

90000000080027a4 <allocproc>:
static struct proc *allocproc(void) {
90000000080027a4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080027a8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080027ac:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080027b0:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080027b4:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080027b8:	29c02079 	st.d	$r25,$r3,8(0x8)
90000000080027bc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080027c0:	1c0005f7 	pcaddu12i	$r23,47(0x2f)
90000000080027c4:	02e662f7 	addi.d	$r23,$r23,-1640(0x998)
90000000080027c8:	03ad2019 	ori	$r25,$r0,0xb48
90000000080027cc:	1c000278 	pcaddu12i	$r24,19(0x13)
90000000080027d0:	02ec5318 	addi.d	$r24,$r24,-1260(0xb14)
    acquire(&p->lock);
90000000080027d4:	001502e4 	move	$r4,$r23
90000000080027d8:	57e6dbff 	bl	-6440(0xfffe6d8) # 9000000008000eb0 <acquire>
    if (p->state == UNUSED) {
90000000080027dc:	288062ec 	ld.w	$r12,$r23,24(0x18)
90000000080027e0:	40002180 	beqz	$r12,32(0x20) # 9000000008002800 <allocproc+0x5c>
      release(&p->lock);
90000000080027e4:	001502e4 	move	$r4,$r23
90000000080027e8:	57e72bff 	bl	-6360(0xfffe728) # 9000000008000f10 <release>
  for (p = proc; p < &proc[NPROC]; p++) {
90000000080027ec:	0010e6f7 	add.d	$r23,$r23,$r25
90000000080027f0:	28c0030c 	ld.d	$r12,$r24,0
90000000080027f4:	5fffe2ec 	bne	$r23,$r12,-32(0x3ffe0) # 90000000080027d4 <allocproc+0x30>
  return NULL;
90000000080027f8:	00150017 	move	$r23,$r0
90000000080027fc:	5000dc00 	b	220(0xdc) # 90000000080028d8 <allocproc+0x134>
  p->pid = allocpid();
9000000008002800:	57efefff 	bl	-4116(0xfffefec) # 90000000080017ec <allocpid>
9000000008002804:	2980e2e4 	st.w	$r4,$r23,56(0x38)
  freemem_amount();
9000000008002808:	54075c00 	bl	1884(0x75c) # 9000000008002f64 <freemem_amount>
  printf("alloc proc:%d freemem_mount:%p\n", p->pid, freemem_amount());
900000000800280c:	2880e2f8 	ld.w	$r24,$r23,56(0x38)
9000000008002810:	54075400 	bl	1876(0x754) # 9000000008002f64 <freemem_amount>
9000000008002814:	00150086 	move	$r6,$r4
9000000008002818:	00150305 	move	$r5,$r24
900000000800281c:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008002820:	02e87084 	addi.d	$r4,$r4,-1508(0xa1c)
9000000008002824:	57da53ff 	bl	-9648(0xfffda50) # 9000000008000274 <printf>
  p->vma = NULL;
9000000008002828:	29d402e0 	st.d	$r0,$r23,1280(0x500)
  p->filelimit = NOFILE;
900000000800282c:	0282000c 	addi.w	$r12,$r0,128(0x80)
9000000008002830:	29c122ec 	st.d	$r12,$r23,72(0x48)
  p->ktime = 1;
9000000008002834:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008002838:	299422ec 	st.w	$r12,$r23,1288(0x508)
  p->utime = 1;
900000000800283c:	299432ec 	st.w	$r12,$r23,1292(0x50c)
  p->uid = 0;
9000000008002840:	2980f2e0 	st.w	$r0,$r23,60(0x3c)
  p->gid = 0;
9000000008002844:	298102e0 	st.w	$r0,$r23,64(0x40)
  p->pgid = 0;
9000000008002848:	298112e0 	st.w	$r0,$r23,68(0x44)
  if ((p->trapframe = (struct trapframe *)kalloc()) == NULL) {
900000000800284c:	54068400 	bl	1668(0x684) # 9000000008002ed0 <kalloc>
9000000008002850:	00150098 	move	$r24,$r4
9000000008002854:	29c1c2e4 	st.d	$r4,$r23,112(0x70)
9000000008002858:	4000a080 	beqz	$r4,160(0xa0) # 90000000080028f8 <allocproc+0x154>
  if ((p->pagetable = proc_pagetable(p)) == NULL ||
900000000800285c:	001502e4 	move	$r4,$r23
9000000008002860:	57efe7ff 	bl	-4124(0xfffefe4) # 9000000008001844 <proc_pagetable>
9000000008002864:	29c182e4 	st.d	$r4,$r23,96(0x60)
9000000008002868:	4000a080 	beqz	$r4,160(0xa0) # 9000000008002908 <allocproc+0x164>
      (p->kpagetable = proc_pagetable(p)) == NULL) {
900000000800286c:	001502e4 	move	$r4,$r23
9000000008002870:	57efd7ff 	bl	-4140(0xfffefd4) # 9000000008001844 <proc_pagetable>
9000000008002874:	29c1a2e4 	st.d	$r4,$r23,104(0x68)
  if ((p->pagetable = proc_pagetable(p)) == NULL ||
9000000008002878:	40009080 	beqz	$r4,144(0x90) # 9000000008002908 <allocproc+0x164>
  p->kstack = PROCVKSTACK(get_proc_addr_num(p));
900000000800287c:	001502e4 	move	$r4,$r23
9000000008002880:	57fecbff 	bl	-312(0xffffec8) # 9000000008002748 <get_proc_addr_num>
9000000008002884:	02800484 	addi.w	$r4,$r4,1(0x1)
9000000008002888:	0280c80d 	addi.w	$r13,$r0,50(0x32)
900000000800288c:	0020b48c 	mod.w	$r12,$r4,$r13
9000000008002890:	5c0009a0 	bne	$r13,$r0,8(0x8) # 9000000008002898 <allocproc+0xf4>
9000000008002894:	002a0007 	break	0x7
9000000008002898:	0040bd8d 	slli.w	$r13,$r12,0xf
900000000800289c:	1580004c 	lu12i.w	$r12,-262142(0xc0002)
90000000080028a0:	160007cc 	lu32i.d	$r12,62(0x3e)
90000000080028a4:	0011b58c 	sub.d	$r12,$r12,$r13
90000000080028a8:	29c142ec 	st.d	$r12,$r23,80(0x50)
  memset(&p->context, 0, sizeof(p->context));
90000000080028ac:	02818006 	addi.w	$r6,$r0,96(0x60)
90000000080028b0:	00150005 	move	$r5,$r0
90000000080028b4:	02c1e2e4 	addi.d	$r4,$r23,120(0x78)
90000000080028b8:	57e6afff 	bl	-6484(0xfffe6ac) # 9000000008000f64 <memset>
  p->context.ra = (uint64)forkret;
90000000080028bc:	1dffffec 	pcaddu12i	$r12,-1(0xfffff)
90000000080028c0:	02fb018c 	addi.d	$r12,$r12,-320(0xec0)
90000000080028c4:	29c1e2ec 	st.d	$r12,$r23,120(0x78)
  p->context.sp = p->kstack + KSTACKSIZE;
90000000080028c8:	28c142ec 	ld.d	$r12,$r23,80(0x50)
90000000080028cc:	140000cd 	lu12i.w	$r13,6(0x6)
90000000080028d0:	0010b58c 	add.d	$r12,$r12,$r13
90000000080028d4:	29c202ec 	st.d	$r12,$r23,128(0x80)
  }
90000000080028d8:	001502e4 	move	$r4,$r23
90000000080028dc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080028e0:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080028e4:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080028e8:	28c04078 	ld.d	$r24,$r3,16(0x10)
90000000080028ec:	28c02079 	ld.d	$r25,$r3,8(0x8)
90000000080028f0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080028f4:	4c000020 	jirl	$r0,$r1,0
    release(&p->lock);
90000000080028f8:	001502e4 	move	$r4,$r23
90000000080028fc:	57e617ff 	bl	-6636(0xfffe614) # 9000000008000f10 <release>
    return NULL;
9000000008002900:	00150317 	move	$r23,$r24
9000000008002904:	53ffd7ff 	b	-44(0xfffffd4) # 90000000080028d8 <allocproc+0x134>
    freeproc(p);
9000000008002908:	001502e4 	move	$r4,$r23
900000000800290c:	57f08bff 	bl	-3960(0xffff088) # 9000000008001994 <freeproc>
    release(&p->lock);
9000000008002910:	001502e4 	move	$r4,$r23
9000000008002914:	57e5ffff 	bl	-6660(0xfffe5fc) # 9000000008000f10 <release>
    return NULL;
9000000008002918:	00150017 	move	$r23,$r0
900000000800291c:	53ffbfff 	b	-68(0xfffffbc) # 90000000080028d8 <allocproc+0x134>

9000000008002920 <userinit>:
{
9000000008002920:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008002924:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008002928:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800292c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008002930:	29c00078 	st.d	$r24,$r3,0
9000000008002934:	02c08076 	addi.d	$r22,$r3,32(0x20)
  p = allocproc();
9000000008002938:	57fe6fff 	bl	-404(0xffffe6c) # 90000000080027a4 <allocproc>
900000000800293c:	00150097 	move	$r23,$r4
  initproc = p;
9000000008002940:	1c0005ec 	pcaddu12i	$r12,47(0x2f)
9000000008002944:	02e0418c 	addi.d	$r12,$r12,-2032(0x810)
9000000008002948:	29c00184 	st.d	$r4,$r12,0
  uvminit(p->pagetable, p->kpagetable, initcode, initcodesize);
900000000800294c:	1c0003b8 	pcaddu12i	$r24,29(0x1d)
9000000008002950:	28ddf318 	ld.d	$r24,$r24,1916(0x77c)
9000000008002954:	28800307 	ld.w	$r7,$r24,0
9000000008002958:	1c0003a6 	pcaddu12i	$r6,29(0x1d)
900000000800295c:	28de40c6 	ld.d	$r6,$r6,1936(0x790)
9000000008002960:	28c1a085 	ld.d	$r5,$r4,104(0x68)
9000000008002964:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008002968:	540c8000 	bl	3200(0xc80) # 90000000080035e8 <uvminit>
  p->sz = initcodesize;
900000000800296c:	2880030c 	ld.w	$r12,$r24,0
  p->sz = PGROUNDUP(p->sz);
9000000008002970:	03bffc0d 	ori	$r13,$r0,0xfff
9000000008002974:	0010b58c 	add.d	$r12,$r12,$r13
9000000008002978:	15ffffed 	lu12i.w	$r13,-1(0xfffff)
900000000800297c:	0014b58c 	and	$r12,$r12,$r13
9000000008002980:	29c162ec 	st.d	$r12,$r23,88(0x58)
  p->trapframe->era = 0x0;      // user program counter
9000000008002984:	28c1c2ec 	ld.d	$r12,$r23,112(0x70)
9000000008002988:	29c42180 	st.d	$r0,$r12,264(0x108)
  p->trapframe->sp = get_proc_sp(p); // user stack pointer
900000000800298c:	28c1c2f8 	ld.d	$r24,$r23,112(0x70)
9000000008002990:	001502e4 	move	$r4,$r23
9000000008002994:	54cea400 	bl	52900(0xcea4) # 900000000800f838 <get_proc_sp>
9000000008002998:	29c04304 	st.d	$r4,$r24,16(0x10)
  safestrcpy(p->name, "initcode", sizeof(p->name));
900000000800299c:	02804006 	addi.w	$r6,$r0,16(0x10)
90000000080029a0:	1c000265 	pcaddu12i	$r5,19(0x13)
90000000080029a4:	02e2e0a5 	addi.d	$r5,$r5,-1864(0x8b8)
90000000080029a8:	02d3a2e4 	addi.d	$r4,$r23,1256(0x4e8)
90000000080029ac:	57e7e7ff 	bl	-6172(0xfffe7e4) # 9000000008001190 <safestrcpy>
  p->cwd = ename("/"); 
90000000080029b0:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080029b4:	02de0084 	addi.d	$r4,$r4,1920(0x780)
90000000080029b8:	54bd7400 	bl	48500(0xbd74) # 900000000800e72c <ename>
90000000080029bc:	29d382e4 	st.d	$r4,$r23,1248(0x4e0)
  p->state = RUNNABLE;
90000000080029c0:	02800c0c 	addi.w	$r12,$r0,3(0x3)
90000000080029c4:	298062ec 	st.w	$r12,$r23,24(0x18)
  release(&p->lock);
90000000080029c8:	001502e4 	move	$r4,$r23
90000000080029cc:	57e547ff 	bl	-6844(0xfffe544) # 9000000008000f10 <release>
}
90000000080029d0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080029d4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080029d8:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080029dc:	28c00078 	ld.d	$r24,$r3,0
90000000080029e0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080029e4:	4c000020 	jirl	$r0,$r1,0

90000000080029e8 <fork>:
int fork(void) {
90000000080029e8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080029ec:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080029f0:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080029f4:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080029f8:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080029fc:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008002a00:	29c0007a 	st.d	$r26,$r3,0
9000000008002a04:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  struct proc *p = myproc();
9000000008002a08:	57ed23ff 	bl	-4832(0xfffed20) # 9000000008001728 <myproc>
9000000008002a0c:	00150098 	move	$r24,$r4
  if ((np = allocproc()) == NULL) {
9000000008002a10:	57fd97ff 	bl	-620(0xffffd94) # 90000000080027a4 <allocproc>
9000000008002a14:	40016480 	beqz	$r4,356(0x164) # 9000000008002b78 <fork+0x190>
9000000008002a18:	0015009a 	move	$r26,$r4
  if (uvmcopy(p->pagetable, np->pagetable, np->kpagetable, p->sz) < 0) {
9000000008002a1c:	28c16307 	ld.d	$r7,$r24,88(0x58)
9000000008002a20:	28c1a086 	ld.d	$r6,$r4,104(0x68)
9000000008002a24:	28c18085 	ld.d	$r5,$r4,96(0x60)
9000000008002a28:	28c18304 	ld.d	$r4,$r24,96(0x60)
9000000008002a2c:	5411b800 	bl	4536(0x11b8) # 9000000008003be4 <uvmcopy>
9000000008002a30:	6000a480 	blt	$r4,$r0,164(0xa4) # 9000000008002ad4 <fork+0xec>
  struct vma *nvma = vma_copy(np, p->vma);
9000000008002a34:	28d40305 	ld.d	$r5,$r24,1280(0x500)
9000000008002a38:	00150344 	move	$r4,$r26
9000000008002a3c:	54c81400 	bl	51220(0xc814) # 900000000800f250 <vma_copy>
  if (NULL != nvma) {
9000000008002a40:	40003080 	beqz	$r4,48(0x30) # 9000000008002a70 <fork+0x88>
    nvma = nvma->next;
9000000008002a44:	28c0e097 	ld.d	$r23,$r4,56(0x38)
    while (nvma != np->vma) {
9000000008002a48:	28d4034c 	ld.d	$r12,$r26,1280(0x500)
9000000008002a4c:	580026ec 	beq	$r23,$r12,36(0x24) # 9000000008002a70 <fork+0x88>
      if (vma_map(p->pagetable, np->pagetable, nvma) < 0) {
9000000008002a50:	001502e6 	move	$r6,$r23
9000000008002a54:	28c18345 	ld.d	$r5,$r26,96(0x60)
9000000008002a58:	28c18304 	ld.d	$r4,$r24,96(0x60)
9000000008002a5c:	54c8c400 	bl	51396(0xc8c4) # 900000000800f320 <vma_map>
9000000008002a60:	60008c80 	blt	$r4,$r0,140(0x8c) # 9000000008002aec <fork+0x104>
      nvma = nvma->next;
9000000008002a64:	28c0e2f7 	ld.d	$r23,$r23,56(0x38)
    while (nvma != np->vma) {
9000000008002a68:	28d4034c 	ld.d	$r12,$r26,1280(0x500)
9000000008002a6c:	5fffe597 	bne	$r12,$r23,-28(0x3ffe4) # 9000000008002a50 <fork+0x68>
  np->sz = p->sz;
9000000008002a70:	28c1630c 	ld.d	$r12,$r24,88(0x58)
9000000008002a74:	29c1634c 	st.d	$r12,$r26,88(0x58)
  np->parent = p;
9000000008002a78:	29c08358 	st.d	$r24,$r26,32(0x20)
  np->tmask = p->tmask;
9000000008002a7c:	2893e30c 	ld.w	$r12,$r24,1272(0x4f8)
9000000008002a80:	2993e34c 	st.w	$r12,$r26,1272(0x4f8)
  *(np->trapframe) = *(p->trapframe);
9000000008002a84:	28c1c30e 	ld.d	$r14,$r24,112(0x70)
9000000008002a88:	001501cc 	move	$r12,$r14
9000000008002a8c:	28c1c34d 	ld.d	$r13,$r26,112(0x70)
9000000008002a90:	02c481ce 	addi.d	$r14,$r14,288(0x120)
9000000008002a94:	28c00192 	ld.d	$r18,$r12,0
9000000008002a98:	28c02191 	ld.d	$r17,$r12,8(0x8)
9000000008002a9c:	28c04190 	ld.d	$r16,$r12,16(0x10)
9000000008002aa0:	28c0618f 	ld.d	$r15,$r12,24(0x18)
9000000008002aa4:	29c001b2 	st.d	$r18,$r13,0
9000000008002aa8:	29c021b1 	st.d	$r17,$r13,8(0x8)
9000000008002aac:	29c041b0 	st.d	$r16,$r13,16(0x10)
9000000008002ab0:	29c061af 	st.d	$r15,$r13,24(0x18)
9000000008002ab4:	02c0818c 	addi.d	$r12,$r12,32(0x20)
9000000008002ab8:	02c081ad 	addi.d	$r13,$r13,32(0x20)
9000000008002abc:	5fffd98e 	bne	$r12,$r14,-40(0x3ffd8) # 9000000008002a94 <fork+0xac>
  np->trapframe->a0 = 0;
9000000008002ac0:	28c1c34c 	ld.d	$r12,$r26,112(0x70)
9000000008002ac4:	29c06180 	st.d	$r0,$r12,24(0x18)
9000000008002ac8:	02836017 	addi.w	$r23,$r0,216(0xd8)
  for (i = 0; i < NOFILE; i++)
9000000008002acc:	02936019 	addi.w	$r25,$r0,1240(0x4d8)
9000000008002ad0:	50004400 	b	68(0x44) # 9000000008002b14 <fork+0x12c>
    freeproc(np);
9000000008002ad4:	00150344 	move	$r4,$r26
9000000008002ad8:	57eebfff 	bl	-4420(0xfffeebc) # 9000000008001994 <freeproc>
    release(&np->lock);
9000000008002adc:	00150344 	move	$r4,$r26
9000000008002ae0:	57e433ff 	bl	-7120(0xfffe430) # 9000000008000f10 <release>
    return -1;
9000000008002ae4:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
9000000008002ae8:	50006c00 	b	108(0x6c) # 9000000008002b54 <fork+0x16c>
        printf("clone: vma deep mapping failed\n");
9000000008002aec:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008002af0:	02ddf084 	addi.d	$r4,$r4,1916(0x77c)
9000000008002af4:	57d783ff 	bl	-10368(0xfffd780) # 9000000008000274 <printf>
        return -1;
9000000008002af8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
9000000008002afc:	50005800 	b	88(0x58) # 9000000008002b54 <fork+0x16c>
      np->ofile[i] = filedup(p->ofile[i]);
9000000008002b00:	5421e400 	bl	8676(0x21e4) # 9000000008004ce4 <filedup>
9000000008002b04:	0010df4c 	add.d	$r12,$r26,$r23
9000000008002b08:	29c00184 	st.d	$r4,$r12,0
9000000008002b0c:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (i = 0; i < NOFILE; i++)
9000000008002b10:	580016f9 	beq	$r23,$r25,20(0x14) # 9000000008002b24 <fork+0x13c>
    if (p->ofile[i])
9000000008002b14:	0010df0c 	add.d	$r12,$r24,$r23
9000000008002b18:	28c00184 	ld.d	$r4,$r12,0
9000000008002b1c:	47ffe49f 	bnez	$r4,-28(0x7fffe4) # 9000000008002b00 <fork+0x118>
9000000008002b20:	53ffefff 	b	-20(0xfffffec) # 9000000008002b0c <fork+0x124>
  np->cwd = edup(p->cwd);
9000000008002b24:	28d38304 	ld.d	$r4,$r24,1248(0x4e0)
9000000008002b28:	54ac6c00 	bl	44140(0xac6c) # 900000000800d794 <edup>
9000000008002b2c:	29d38344 	st.d	$r4,$r26,1248(0x4e0)
  safestrcpy(np->name, p->name, sizeof(p->name));
9000000008002b30:	02804006 	addi.w	$r6,$r0,16(0x10)
9000000008002b34:	02d3a305 	addi.d	$r5,$r24,1256(0x4e8)
9000000008002b38:	02d3a344 	addi.d	$r4,$r26,1256(0x4e8)
9000000008002b3c:	57e657ff 	bl	-6572(0xfffe654) # 9000000008001190 <safestrcpy>
  pid = np->pid;
9000000008002b40:	2880e357 	ld.w	$r23,$r26,56(0x38)
  np->state = RUNNABLE;
9000000008002b44:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000008002b48:	2980634c 	st.w	$r12,$r26,24(0x18)
  release(&np->lock);
9000000008002b4c:	00150344 	move	$r4,$r26
9000000008002b50:	57e3c3ff 	bl	-7232(0xfffe3c0) # 9000000008000f10 <release>
}
9000000008002b54:	001502e4 	move	$r4,$r23
9000000008002b58:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008002b5c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008002b60:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008002b64:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008002b68:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008002b6c:	28c0007a 	ld.d	$r26,$r3,0
9000000008002b70:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008002b74:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008002b78:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
9000000008002b7c:	53ffdbff 	b	-40(0xfffffd8) # 9000000008002b54 <fork+0x16c>

9000000008002b80 <clone>:
uint64 clone(uint64 new_stack, uint64 new_fn) {
9000000008002b80:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008002b84:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008002b88:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008002b8c:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008002b90:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008002b94:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008002b98:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008002b9c:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008002ba0:	29c0007c 	st.d	$r28,$r3,0
9000000008002ba4:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008002ba8:	0015009b 	move	$r27,$r4
9000000008002bac:	001500bc 	move	$r28,$r5
  struct proc *p = myproc();
9000000008002bb0:	57eb7bff 	bl	-5256(0xfffeb78) # 9000000008001728 <myproc>
9000000008002bb4:	00150098 	move	$r24,$r4
  if ((np = allocproc()) == NULL) {
9000000008002bb8:	57fbefff 	bl	-1044(0xffffbec) # 90000000080027a4 <allocproc>
9000000008002bbc:	40017c80 	beqz	$r4,380(0x17c) # 9000000008002d38 <clone+0x1b8>
9000000008002bc0:	0015009a 	move	$r26,$r4
  if (uvmcopy(p->pagetable, np->pagetable, np->kpagetable, p->sz) < 0) {
9000000008002bc4:	28c16307 	ld.d	$r7,$r24,88(0x58)
9000000008002bc8:	28c1a086 	ld.d	$r6,$r4,104(0x68)
9000000008002bcc:	28c18085 	ld.d	$r5,$r4,96(0x60)
9000000008002bd0:	28c18304 	ld.d	$r4,$r24,96(0x60)
9000000008002bd4:	54101000 	bl	4112(0x1010) # 9000000008003be4 <uvmcopy>
9000000008002bd8:	6000a480 	blt	$r4,$r0,164(0xa4) # 9000000008002c7c <clone+0xfc>
  struct vma *nvma = vma_copy(np, p->vma);
9000000008002bdc:	28d40305 	ld.d	$r5,$r24,1280(0x500)
9000000008002be0:	00150344 	move	$r4,$r26
9000000008002be4:	54c66c00 	bl	50796(0xc66c) # 900000000800f250 <vma_copy>
  if (NULL != nvma) {
9000000008002be8:	40003080 	beqz	$r4,48(0x30) # 9000000008002c18 <clone+0x98>
    nvma = nvma->next;
9000000008002bec:	28c0e097 	ld.d	$r23,$r4,56(0x38)
    while (nvma != np->vma) {
9000000008002bf0:	28d4034c 	ld.d	$r12,$r26,1280(0x500)
9000000008002bf4:	580026ec 	beq	$r23,$r12,36(0x24) # 9000000008002c18 <clone+0x98>
      if (vma_map(p->pagetable, np->pagetable, nvma) < 0) {
9000000008002bf8:	001502e6 	move	$r6,$r23
9000000008002bfc:	28c18345 	ld.d	$r5,$r26,96(0x60)
9000000008002c00:	28c18304 	ld.d	$r4,$r24,96(0x60)
9000000008002c04:	54c71c00 	bl	50972(0xc71c) # 900000000800f320 <vma_map>
9000000008002c08:	60008c80 	blt	$r4,$r0,140(0x8c) # 9000000008002c94 <clone+0x114>
      nvma = nvma->next;
9000000008002c0c:	28c0e2f7 	ld.d	$r23,$r23,56(0x38)
    while (nvma != np->vma) {
9000000008002c10:	28d4034c 	ld.d	$r12,$r26,1280(0x500)
9000000008002c14:	5fffe597 	bne	$r12,$r23,-28(0x3ffe4) # 9000000008002bf8 <clone+0x78>
  np->sz = p->sz;
9000000008002c18:	28c1630c 	ld.d	$r12,$r24,88(0x58)
9000000008002c1c:	29c1634c 	st.d	$r12,$r26,88(0x58)
  np->parent = p;
9000000008002c20:	29c08358 	st.d	$r24,$r26,32(0x20)
  np->tmask = p->tmask;
9000000008002c24:	2893e30c 	ld.w	$r12,$r24,1272(0x4f8)
9000000008002c28:	2993e34c 	st.w	$r12,$r26,1272(0x4f8)
  *(np->trapframe) = *(p->trapframe);
9000000008002c2c:	28c1c30e 	ld.d	$r14,$r24,112(0x70)
9000000008002c30:	001501cc 	move	$r12,$r14
9000000008002c34:	28c1c34d 	ld.d	$r13,$r26,112(0x70)
9000000008002c38:	02c481ce 	addi.d	$r14,$r14,288(0x120)
9000000008002c3c:	28c00192 	ld.d	$r18,$r12,0
9000000008002c40:	28c02191 	ld.d	$r17,$r12,8(0x8)
9000000008002c44:	28c04190 	ld.d	$r16,$r12,16(0x10)
9000000008002c48:	28c0618f 	ld.d	$r15,$r12,24(0x18)
9000000008002c4c:	29c001b2 	st.d	$r18,$r13,0
9000000008002c50:	29c021b1 	st.d	$r17,$r13,8(0x8)
9000000008002c54:	29c041b0 	st.d	$r16,$r13,16(0x10)
9000000008002c58:	29c061af 	st.d	$r15,$r13,24(0x18)
9000000008002c5c:	02c0818c 	addi.d	$r12,$r12,32(0x20)
9000000008002c60:	02c081ad 	addi.d	$r13,$r13,32(0x20)
9000000008002c64:	5fffd98e 	bne	$r12,$r14,-40(0x3ffd8) # 9000000008002c3c <clone+0xbc>
  np->trapframe->a0 = 0;
9000000008002c68:	28c1c34c 	ld.d	$r12,$r26,112(0x70)
9000000008002c6c:	29c06180 	st.d	$r0,$r12,24(0x18)
9000000008002c70:	02836017 	addi.w	$r23,$r0,216(0xd8)
  for (i = 0; i < NOFILE; i++)
9000000008002c74:	02936019 	addi.w	$r25,$r0,1240(0x4d8)
9000000008002c78:	50004400 	b	68(0x44) # 9000000008002cbc <clone+0x13c>
    freeproc(np);
9000000008002c7c:	00150344 	move	$r4,$r26
9000000008002c80:	57ed17ff 	bl	-4844(0xfffed14) # 9000000008001994 <freeproc>
    release(&np->lock);
9000000008002c84:	00150344 	move	$r4,$r26
9000000008002c88:	57e28bff 	bl	-7544(0xfffe288) # 9000000008000f10 <release>
    return -1;
9000000008002c8c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008002c90:	50008000 	b	128(0x80) # 9000000008002d10 <clone+0x190>
        printf("clone: vma deep mapping failed\n");
9000000008002c94:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008002c98:	02d75084 	addi.d	$r4,$r4,1492(0x5d4)
9000000008002c9c:	57d5dbff 	bl	-10792(0xfffd5d8) # 9000000008000274 <printf>
        return -1;
9000000008002ca0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008002ca4:	50006c00 	b	108(0x6c) # 9000000008002d10 <clone+0x190>
      np->ofile[i] = filedup(p->ofile[i]);
9000000008002ca8:	54203c00 	bl	8252(0x203c) # 9000000008004ce4 <filedup>
9000000008002cac:	0010df4c 	add.d	$r12,$r26,$r23
9000000008002cb0:	29c00184 	st.d	$r4,$r12,0
9000000008002cb4:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (i = 0; i < NOFILE; i++)
9000000008002cb8:	580016f9 	beq	$r23,$r25,20(0x14) # 9000000008002ccc <clone+0x14c>
    if (p->ofile[i])// file.h
9000000008002cbc:	0010df0c 	add.d	$r12,$r24,$r23
9000000008002cc0:	28c00184 	ld.d	$r4,$r12,0
9000000008002cc4:	47ffe49f 	bnez	$r4,-28(0x7fffe4) # 9000000008002ca8 <clone+0x128>
9000000008002cc8:	53ffefff 	b	-20(0xfffffec) # 9000000008002cb4 <clone+0x134>
  np->cwd = edup(p->cwd);
9000000008002ccc:	28d38304 	ld.d	$r4,$r24,1248(0x4e0)
9000000008002cd0:	54aac400 	bl	43716(0xaac4) # 900000000800d794 <edup>
9000000008002cd4:	29d38344 	st.d	$r4,$r26,1248(0x4e0)
  safestrcpy(np->name, p->name, sizeof(p->name));
9000000008002cd8:	02804006 	addi.w	$r6,$r0,16(0x10)
9000000008002cdc:	02d3a305 	addi.d	$r5,$r24,1256(0x4e8)
9000000008002ce0:	02d3a344 	addi.d	$r4,$r26,1256(0x4e8)
9000000008002ce4:	57e4afff 	bl	-6996(0xfffe4ac) # 9000000008001190 <safestrcpy>
  pid = np->pid;
9000000008002ce8:	2880e357 	ld.w	$r23,$r26,56(0x38)
  np->state = RUNNABLE;
9000000008002cec:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000008002cf0:	2980634c 	st.w	$r12,$r26,24(0x18)
  np->trapframe->era = new_fn;
9000000008002cf4:	28c1c34c 	ld.d	$r12,$r26,112(0x70)
9000000008002cf8:	29c4219c 	st.d	$r28,$r12,264(0x108)
  np->trapframe->sp = new_stack;
9000000008002cfc:	28c1c34c 	ld.d	$r12,$r26,112(0x70)
9000000008002d00:	29c0419b 	st.d	$r27,$r12,16(0x10)
  release(&np->lock);
9000000008002d04:	00150344 	move	$r4,$r26
9000000008002d08:	57e20bff 	bl	-7672(0xfffe208) # 9000000008000f10 <release>
  return pid;
9000000008002d0c:	001502e4 	move	$r4,$r23
}
9000000008002d10:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008002d14:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008002d18:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008002d1c:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008002d20:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008002d24:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008002d28:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008002d2c:	28c0007c 	ld.d	$r28,$r3,0
9000000008002d30:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008002d34:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008002d38:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008002d3c:	53ffd7ff 	b	-44(0xfffffd4) # 9000000008002d10 <clone+0x190>

9000000008002d40 <kfree>:
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; 
// see kinit above.)

void kfree(void *pa) {
9000000008002d40:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008002d44:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008002d48:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008002d4c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008002d50:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct run *r;

  if (((uint64)pa % PGSIZE) != 0 || (char *)pa < kernel_end ||
9000000008002d54:	037ffc8c 	andi	$r12,$r4,0xfff
9000000008002d58:	44007580 	bnez	$r12,116(0x74) # 9000000008002dcc <kfree+0x8c>
9000000008002d5c:	00150097 	move	$r23,$r4
9000000008002d60:	1c0003ac 	pcaddu12i	$r12,29(0x1d)
9000000008002d64:	28cde18c 	ld.d	$r12,$r12,888(0x378)
9000000008002d68:	6800648c 	bltu	$r4,$r12,100(0x64) # 9000000008002dcc <kfree+0x8c>
9000000008002d6c:	1530000c 	lu12i.w	$r12,-425984(0x98000)
9000000008002d70:	1600000c 	lu32i.d	$r12,0
9000000008002d74:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008002d78:	6c00548c 	bgeu	$r4,$r12,84(0x54) # 9000000008002dcc <kfree+0x8c>
      (uint64)pa >= RAMSTOP)
    panic("kfree");

  // Fill with junk to catch dangling refs.
  memset(pa, 1, PGSIZE);
9000000008002d7c:	14000026 	lu12i.w	$r6,1(0x1)
9000000008002d80:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008002d84:	57e1e3ff 	bl	-7712(0xfffe1e0) # 9000000008000f64 <memset>

  r = (struct run *)pa;

  acquire(&kmem.lock);
9000000008002d88:	1c000a44 	pcaddu12i	$r4,82(0x52)
9000000008002d8c:	02e30084 	addi.d	$r4,$r4,-1856(0x8c0)
9000000008002d90:	57e123ff 	bl	-7904(0xfffe120) # 9000000008000eb0 <acquire>
  r->next = kmem.freelist;
9000000008002d94:	1c000a44 	pcaddu12i	$r4,82(0x52)
9000000008002d98:	02e2d084 	addi.d	$r4,$r4,-1868(0x8b4)
9000000008002d9c:	28c0608c 	ld.d	$r12,$r4,24(0x18)
9000000008002da0:	29c002ec 	st.d	$r12,$r23,0
  kmem.freelist = r;
9000000008002da4:	29c06097 	st.d	$r23,$r4,24(0x18)
  kmem.npage++;
9000000008002da8:	28c0808c 	ld.d	$r12,$r4,32(0x20)
9000000008002dac:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000008002db0:	29c0808c 	st.d	$r12,$r4,32(0x20)
  release(&kmem.lock);
9000000008002db4:	57e15fff 	bl	-7844(0xfffe15c) # 9000000008000f10 <release>
}
9000000008002db8:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008002dbc:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008002dc0:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008002dc4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008002dc8:	4c000020 	jirl	$r0,$r1,0
    panic("kfree");
9000000008002dcc:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008002dd0:	02d49084 	addi.d	$r4,$r4,1316(0x524)
9000000008002dd4:	57d433ff 	bl	-11216(0xfffd430) # 9000000008000204 <panic>

9000000008002dd8 <freerange>:
void freerange(void *pa_start, void *pa_end) {
9000000008002dd8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008002ddc:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008002de0:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008002de4:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008002de8:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008002dec:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008002df0:	29c0007a 	st.d	$r26,$r3,0
9000000008002df4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  p = (char *)PGROUNDUP((uint64)pa_start);
9000000008002df8:	03bffc17 	ori	$r23,$r0,0xfff
9000000008002dfc:	0010dc97 	add.d	$r23,$r4,$r23
9000000008002e00:	15ffffe4 	lu12i.w	$r4,-1(0xfffff)
9000000008002e04:	001492f7 	and	$r23,$r23,$r4
  for (; p + PGSIZE <= (char *)pa_end; p += PGSIZE)
9000000008002e08:	14000024 	lu12i.w	$r4,1(0x1)
9000000008002e0c:	001092f7 	add.d	$r23,$r23,$r4
9000000008002e10:	680020b7 	bltu	$r5,$r23,32(0x20) # 9000000008002e30 <freerange+0x58>
9000000008002e14:	001500b8 	move	$r24,$r5
    kfree(p);
9000000008002e18:	15fffffa 	lu12i.w	$r26,-1(0xfffff)
  for (; p + PGSIZE <= (char *)pa_end; p += PGSIZE)
9000000008002e1c:	14000039 	lu12i.w	$r25,1(0x1)
    kfree(p);
9000000008002e20:	0010eae4 	add.d	$r4,$r23,$r26
9000000008002e24:	57ff1fff 	bl	-228(0xfffff1c) # 9000000008002d40 <kfree>
  for (; p + PGSIZE <= (char *)pa_end; p += PGSIZE)
9000000008002e28:	0010e6f7 	add.d	$r23,$r23,$r25
9000000008002e2c:	6ffff717 	bgeu	$r24,$r23,-12(0x3fff4) # 9000000008002e20 <freerange+0x48>
}
9000000008002e30:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008002e34:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008002e38:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008002e3c:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008002e40:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008002e44:	28c0007a 	ld.d	$r26,$r3,0
9000000008002e48:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008002e4c:	4c000020 	jirl	$r0,$r1,0

9000000008002e50 <kinit>:
void kinit() {
9000000008002e50:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008002e54:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008002e58:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008002e5c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008002e60:	02c08076 	addi.d	$r22,$r3,32(0x20)
  initlock(&kmem.lock, "kmem");
9000000008002e64:	1c000245 	pcaddu12i	$r5,18(0x12)
9000000008002e68:	02d250a5 	addi.d	$r5,$r5,1172(0x494)
9000000008002e6c:	1c000a24 	pcaddu12i	$r4,81(0x51)
9000000008002e70:	02df7084 	addi.d	$r4,$r4,2012(0x7dc)
9000000008002e74:	57dfd3ff 	bl	-8240(0xfffdfd0) # 9000000008000e44 <initlock>
  kmem.freelist = 0;
9000000008002e78:	1c000a2c 	pcaddu12i	$r12,81(0x51)
9000000008002e7c:	02df418c 	addi.d	$r12,$r12,2000(0x7d0)
9000000008002e80:	29c06180 	st.d	$r0,$r12,24(0x18)
  kmem.npage = 0;
9000000008002e84:	29c08180 	st.d	$r0,$r12,32(0x20)
  freerange(kernel_end, (void *)RAMSTOP);
9000000008002e88:	15300017 	lu12i.w	$r23,-425984(0x98000)
9000000008002e8c:	16000017 	lu32i.d	$r23,0
9000000008002e90:	032402f7 	lu52i.d	$r23,$r23,-1792(0x900)
9000000008002e94:	001502e5 	move	$r5,$r23
9000000008002e98:	1c0003a4 	pcaddu12i	$r4,29(0x1d)
9000000008002e9c:	28c90084 	ld.d	$r4,$r4,576(0x240)
9000000008002ea0:	57ff3bff 	bl	-200(0xfffff38) # 9000000008002dd8 <freerange>
  printf("kernel_end: %p, RAMSTOP: %p\n", kernel_end, (void *)RAMSTOP);
9000000008002ea4:	001502e6 	move	$r6,$r23
9000000008002ea8:	1c0003a5 	pcaddu12i	$r5,29(0x1d)
9000000008002eac:	28c8c0a5 	ld.d	$r5,$r5,560(0x230)
9000000008002eb0:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008002eb4:	02d14084 	addi.d	$r4,$r4,1104(0x450)
9000000008002eb8:	57d3bfff 	bl	-11332(0xfffd3bc) # 9000000008000274 <printf>
}
9000000008002ebc:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008002ec0:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008002ec4:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008002ec8:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008002ecc:	4c000020 	jirl	$r0,$r1,0

9000000008002ed0 <kalloc>:

// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
void *kalloc(void) {
9000000008002ed0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008002ed4:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008002ed8:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008002edc:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008002ee0:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct run *r;

  acquire(&kmem.lock);
9000000008002ee4:	1c000a24 	pcaddu12i	$r4,81(0x51)
9000000008002ee8:	02dd9084 	addi.d	$r4,$r4,1892(0x764)
9000000008002eec:	57dfc7ff 	bl	-8252(0xfffdfc4) # 9000000008000eb0 <acquire>
  r = kmem.freelist;
9000000008002ef0:	1c000a2c 	pcaddu12i	$r12,81(0x51)
9000000008002ef4:	02dd618c 	addi.d	$r12,$r12,1880(0x758)
9000000008002ef8:	28c06197 	ld.d	$r23,$r12,24(0x18)
  if (r) {
9000000008002efc:	40004ee0 	beqz	$r23,76(0x4c) # 9000000008002f48 <kalloc+0x78>
    // 自由链表块数量减少
    kmem.freelist = r->next;
9000000008002f00:	28c002ec 	ld.d	$r12,$r23,0
9000000008002f04:	1c000a24 	pcaddu12i	$r4,81(0x51)
9000000008002f08:	02dd1084 	addi.d	$r4,$r4,1860(0x744)
9000000008002f0c:	29c0608c 	st.d	$r12,$r4,24(0x18)
    // 可用页数减少
    kmem.npage--;
9000000008002f10:	28c0808c 	ld.d	$r12,$r4,32(0x20)
9000000008002f14:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000008002f18:	29c0808c 	st.d	$r12,$r4,32(0x20)
  }
  release(&kmem.lock);
9000000008002f1c:	57dff7ff 	bl	-8204(0xfffdff4) # 9000000008000f10 <release>

  if (r)
    memset((char *)r, 5, PGSIZE); // fill with junk
9000000008002f20:	14000026 	lu12i.w	$r6,1(0x1)
9000000008002f24:	02801405 	addi.w	$r5,$r0,5(0x5)
9000000008002f28:	001502e4 	move	$r4,$r23
9000000008002f2c:	57e03bff 	bl	-8136(0xfffe038) # 9000000008000f64 <memset>
  else {
    printf("kalloc out of memory\n");
  }
  return (void *)r;
}
9000000008002f30:	001502e4 	move	$r4,$r23
9000000008002f34:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008002f38:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008002f3c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008002f40:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008002f44:	4c000020 	jirl	$r0,$r1,0
  release(&kmem.lock);
9000000008002f48:	1c000a24 	pcaddu12i	$r4,81(0x51)
9000000008002f4c:	02dc0084 	addi.d	$r4,$r4,1792(0x700)
9000000008002f50:	57dfc3ff 	bl	-8256(0xfffdfc0) # 9000000008000f10 <release>
    printf("kalloc out of memory\n");
9000000008002f54:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008002f58:	02cf3084 	addi.d	$r4,$r4,972(0x3cc)
9000000008002f5c:	57d31bff 	bl	-11496(0xfffd318) # 9000000008000274 <printf>
9000000008002f60:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008002f30 <kalloc+0x60>

9000000008002f64 <freemem_amount>:
// 获取系统内可用的内存数量
uint64 freemem_amount(void) {
9000000008002f64:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008002f68:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008002f6c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008002f70:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008002f74:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint64 amount = 0;
  // 内核内存锁
  acquire(&kmem.lock);
9000000008002f78:	1c000a24 	pcaddu12i	$r4,81(0x51)
9000000008002f7c:	02db4084 	addi.d	$r4,$r4,1744(0x6d0)
9000000008002f80:	57df33ff 	bl	-8400(0xfffdf30) # 9000000008000eb0 <acquire>
  amount = kmem.npage;
9000000008002f84:	1c000a24 	pcaddu12i	$r4,81(0x51)
9000000008002f88:	02db1084 	addi.d	$r4,$r4,1732(0x6c4)
9000000008002f8c:	28c08097 	ld.d	$r23,$r4,32(0x20)
  release(&kmem.lock);
9000000008002f90:	57df83ff 	bl	-8320(0xfffdf80) # 9000000008000f10 <release>
  // 将页转换为字节数
  // PGSHIFT = 12, size for mem = 4k
  return amount << PGSHIFT;
}
9000000008002f94:	004132e4 	slli.d	$r4,$r23,0xc
9000000008002f98:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008002f9c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008002fa0:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008002fa4:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008002fa8:	4c000020 	jirl	$r0,$r1,0

9000000008002fac <tlbinit>:
#endif
}
// flush tlb, fill '0'

void tlbinit(void)
{
9000000008002fac:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008002fb0:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008002fb4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  asm volatile("invtlb  0x0,$zero,$zero");
9000000008002fb8:	06498000 	invtlb	0x0,$r0,$r0
  asm volatile("csrwr %0, 0x1e" : : "r" (x) );
9000000008002fbc:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000008002fc0:	0400782c 	csrwr	$r12,0x1e
  asm volatile("csrwr %0, 0x18" : : "r" (x) );
9000000008002fc4:	0015000c 	move	$r12,$r0
9000000008002fc8:	0400602c 	csrwr	$r12,0x18
  asm volatile("csrwr %0, 0x8e" : : "r" (x) );
9000000008002fcc:	0280300c 	addi.w	$r12,$r0,12(0xc)
9000000008002fd0:	0402382c 	csrwr	$r12,0x8e
  w_csr_stlbps(0xcU);
  // 设置asid 表项
  w_csr_asid(0x0U);
  // 设置高位tlbehi项， 虚页号相关消息
  w_csr_tlbrehi(0xcU);
}
9000000008002fd4:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008002fd8:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008002fdc:	4c000020 	jirl	$r0,$r1,0

9000000008002fe0 <kvminithart>:

// Switch h/w page table register to the kernel's page table,
// and enable paging.
// wty_todo
void kvminithart() {
9000000008002fe0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008002fe4:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008002fe8:	29c00076 	st.d	$r22,$r3,0
9000000008002fec:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // flush the tlb(tlbinit)
  tlbinit();
9000000008002ff0:	57ffbfff 	bl	-68(0xfffffbc) # 9000000008002fac <tlbinit>

// flush the TLB.
static inline void
flush_TLB()
{
  asm volatile("invtlb 0x0,$zero,$zero");
9000000008002ff4:	06498000 	invtlb	0x0,$r0,$r0
  // w_satp(MAKE_SATP(kernel_pagetable));
  // 修改uart的地址映射
  // uart
  // uart8250_change_base_addr(UART_V);
  flush_TLB();
  w_csr_pgdl((uint64)kernel_pagetable);
9000000008002ff8:	1c000a2c 	pcaddu12i	$r12,81(0x51)
9000000008002ffc:	02da018c 	addi.d	$r12,$r12,1664(0x680)
  asm volatile("csrwr %0, 0x19" : : "r" (x) );
9000000008003000:	28c0018c 	ld.d	$r12,$r12,0
9000000008003004:	0400642c 	csrwr	$r12,0x19
  asm volatile("invtlb 0x0,$zero,$zero");
9000000008003008:	06498000 	invtlb	0x0,$r0,$r0
  flush_TLB();
// sfence_vma();

#ifdef DEBUG
  printf("kvminithart\n");
900000000800300c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003010:	02ccb084 	addi.d	$r4,$r4,812(0x32c)
9000000008003014:	57d263ff 	bl	-11680(0xfffd260) # 9000000008000274 <printf>
#endif
}
9000000008003018:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800301c:	28c00076 	ld.d	$r22,$r3,0
9000000008003020:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008003024:	4c000020 	jirl	$r0,$r1,0

9000000008003028 <walk>:
//   30..38 -- 9 bits of level-2 index.
//   21..29 -- 9 bits of level-1 index.
//   12..20 -- 9 bits of level-0 index.
//    0..11 -- 12 bits of byte offset within the page.
// 
pte_t *walk(pagetable_t pagetable, uint64 va, int alloc) {
9000000008003028:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800302c:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008003030:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000008003034:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008003038:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800303c:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008003040:	29c0807a 	st.d	$r26,$r3,32(0x20)
9000000008003044:	29c0607b 	st.d	$r27,$r3,24(0x18)
9000000008003048:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800304c:	29c0207d 	st.d	$r29,$r3,8(0x8)
9000000008003050:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000008003054:	00150097 	move	$r23,$r4
9000000008003058:	001500ba 	move	$r26,$r5
900000000800305c:	001500dd 	move	$r29,$r6

  if (va >= MAXVA)
9000000008003060:	1400200c 	lu12i.w	$r12,256(0x100)
9000000008003064:	02809c19 	addi.w	$r25,$r0,39(0x27)

  for (int level = 3; level > 0; level--) {
    pte_t *pte = &pagetable[PX(level, va)];
    if (*pte & PTE_V) {
      // 内核转换为物理地址
      pagetable = (pagetable_t)(PTE2PA(*pte) | DMWIN_MASK);
9000000008003068:	0324001c 	lu52i.d	$r28,$r0,-1792(0x900)
  for (int level = 3; level > 0; level--) {
900000000800306c:	0280301b 	addi.w	$r27,$r0,12(0xc)
  if (va >= MAXVA)
9000000008003070:	680048ac 	bltu	$r5,$r12,72(0x48) # 90000000080030b8 <walk+0x90>
    panic("walk");
9000000008003074:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003078:	02cb5084 	addi.d	$r4,$r4,724(0x2d4)
900000000800307c:	57d18bff 	bl	-11896(0xfffd188) # 9000000008000204 <panic>
    } else {
      if (!alloc || (pagetable = (pde_t *)kalloc()) == NULL) {
9000000008003080:	40009ba0 	beqz	$r29,152(0x98) # 9000000008003118 <walk+0xf0>
9000000008003084:	57fe4fff 	bl	-436(0xffffe4c) # 9000000008002ed0 <kalloc>
9000000008003088:	00150097 	move	$r23,$r4
900000000800308c:	40006080 	beqz	$r4,96(0x60) # 90000000080030ec <walk+0xc4>
        // printf("walk: not valid\n");
        return NULL;
      }
      memset(pagetable, 0, PGSIZE);
9000000008003090:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003094:	00150005 	move	$r5,$r0
9000000008003098:	57decfff 	bl	-8500(0xfffdecc) # 9000000008000f64 <memset>
      *pte = PA2PTE(pagetable) | PTE_V;
900000000800309c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
90000000080030a0:	161fffec 	lu32i.d	$r12,65535(0xffff)
90000000080030a4:	0014b2ec 	and	$r12,$r23,$r12
90000000080030a8:	0380058c 	ori	$r12,$r12,0x1
90000000080030ac:	29c0030c 	st.d	$r12,$r24,0
90000000080030b0:	02bfdf39 	addi.w	$r25,$r25,-9(0xff7)
  for (int level = 3; level > 0; level--) {
90000000080030b4:	5800333b 	beq	$r25,$r27,48(0x30) # 90000000080030e4 <walk+0xbc>
    pte_t *pte = &pagetable[PX(level, va)];
90000000080030b8:	00196758 	srl.d	$r24,$r26,$r25
90000000080030bc:	0347ff18 	andi	$r24,$r24,0x1ff
90000000080030c0:	002d5f18 	alsl.d	$r24,$r24,$r23,0x3
    if (*pte & PTE_V) {
90000000080030c4:	28c00317 	ld.d	$r23,$r24,0
90000000080030c8:	034006ec 	andi	$r12,$r23,0x1
90000000080030cc:	43ffb59f 	beqz	$r12,-76(0x7fffb4) # 9000000008003080 <walk+0x58>
      pagetable = (pagetable_t)(PTE2PA(*pte) | DMWIN_MASK);
90000000080030d0:	15ffffe4 	lu12i.w	$r4,-1(0xfffff)
90000000080030d4:	161fffe4 	lu32i.d	$r4,65535(0xffff)
90000000080030d8:	001492f7 	and	$r23,$r23,$r4
90000000080030dc:	001572f7 	or	$r23,$r23,$r28
90000000080030e0:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080030b0 <walk+0x88>
    }
  }
  return &pagetable[PX(0, va)];
90000000080030e4:	00453344 	srli.d	$r4,$r26,0xc
90000000080030e8:	002d5c84 	alsl.d	$r4,$r4,$r23,0x3
}
90000000080030ec:	28c12061 	ld.d	$r1,$r3,72(0x48)
90000000080030f0:	28c10076 	ld.d	$r22,$r3,64(0x40)
90000000080030f4:	28c0e077 	ld.d	$r23,$r3,56(0x38)
90000000080030f8:	28c0c078 	ld.d	$r24,$r3,48(0x30)
90000000080030fc:	28c0a079 	ld.d	$r25,$r3,40(0x28)
9000000008003100:	28c0807a 	ld.d	$r26,$r3,32(0x20)
9000000008003104:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008003108:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800310c:	28c0207d 	ld.d	$r29,$r3,8(0x8)
9000000008003110:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008003114:	4c000020 	jirl	$r0,$r1,0
        return NULL;
9000000008003118:	00150004 	move	$r4,$r0
900000000800311c:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080030ec <walk+0xc4>

9000000008003120 <walkaddr>:

// Look up a virtual address, return the physical address,
// or 0 if not mapped.
// Can only be used to look up user pages.
uint64 walkaddr(pagetable_t pagetable, uint64 va) {
9000000008003120:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008003124:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008003128:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800312c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008003130:	29c00078 	st.d	$r24,$r3,0
9000000008003134:	02c08076 	addi.d	$r22,$r3,32(0x20)
  pte_t *pte;
  uint64 pa;

  if (va >= MAXVA) {
9000000008003138:	1400200c 	lu12i.w	$r12,256(0x100)
900000000800313c:	6c0050ac 	bgeu	$r5,$r12,80(0x50) # 900000000800318c <walkaddr+0x6c>
9000000008003140:	001500b8 	move	$r24,$r5
    // debug_print --> printf
    printf("walkaddr: va >= MAXVA\n");
    return NULL;
  }

  pte = walk(pagetable, va, 0);
9000000008003144:	00150006 	move	$r6,$r0
9000000008003148:	57fee3ff 	bl	-288(0xffffee0) # 9000000008003028 <walk>
  if (pte == 0) {
900000000800314c:	40005480 	beqz	$r4,84(0x54) # 90000000080031a0 <walkaddr+0x80>
    printf("walkaddr: pte == 0\n");
    return NULL;
  }
  if ((*pte & PTE_V) == 0) {
9000000008003150:	28c0008c 	ld.d	$r12,$r4,0
9000000008003154:	03400597 	andi	$r23,$r12,0x1
9000000008003158:	40005ee0 	beqz	$r23,92(0x5c) # 90000000080031b4 <walkaddr+0x94>
    printf("va :%p walkaddr: *pte & PTE_V == 0\n", va);
    return NULL;
  }
  if ((*pte & PTE_PLV) == 0) {
900000000800315c:	03403197 	andi	$r23,$r12,0xc
9000000008003160:	40006ae0 	beqz	$r23,104(0x68) # 90000000080031c8 <walkaddr+0xa8>
    printf("walkaddr: *pte & PTE_U == 0\n");
    return NULL;
  }
  // Used when in user_mode
  pa = PTE2PA(*pte);
9000000008003164:	15fffff7 	lu12i.w	$r23,-1(0xfffff)
9000000008003168:	161ffff7 	lu32i.d	$r23,65535(0xffff)
900000000800316c:	0014dd97 	and	$r23,$r12,$r23
  return pa;
}
9000000008003170:	001502e4 	move	$r4,$r23
9000000008003174:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008003178:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800317c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008003180:	28c00078 	ld.d	$r24,$r3,0
9000000008003184:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008003188:	4c000020 	jirl	$r0,$r1,0
    printf("walkaddr: va >= MAXVA\n");
900000000800318c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003190:	02c71084 	addi.d	$r4,$r4,452(0x1c4)
9000000008003194:	57d0e3ff 	bl	-12064(0xfffd0e0) # 9000000008000274 <printf>
    return NULL;
9000000008003198:	00150017 	move	$r23,$r0
900000000800319c:	53ffd7ff 	b	-44(0xfffffd4) # 9000000008003170 <walkaddr+0x50>
    printf("walkaddr: pte == 0\n");
90000000080031a0:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080031a4:	02c72084 	addi.d	$r4,$r4,456(0x1c8)
90000000080031a8:	57d0cfff 	bl	-12084(0xfffd0cc) # 9000000008000274 <printf>
    return NULL;
90000000080031ac:	00150017 	move	$r23,$r0
90000000080031b0:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008003170 <walkaddr+0x50>
    printf("va :%p walkaddr: *pte & PTE_V == 0\n", va);
90000000080031b4:	00150305 	move	$r5,$r24
90000000080031b8:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080031bc:	02c72084 	addi.d	$r4,$r4,456(0x1c8)
90000000080031c0:	57d0b7ff 	bl	-12108(0xfffd0b4) # 9000000008000274 <printf>
    return NULL;
90000000080031c4:	53ffafff 	b	-84(0xfffffac) # 9000000008003170 <walkaddr+0x50>
    printf("walkaddr: *pte & PTE_U == 0\n");
90000000080031c8:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080031cc:	02c78084 	addi.d	$r4,$r4,480(0x1e0)
90000000080031d0:	57d0a7ff 	bl	-12124(0xfffd0a4) # 9000000008000274 <printf>
    return NULL;
90000000080031d4:	53ff9fff 	b	-100(0xfffff9c) # 9000000008003170 <walkaddr+0x50>

90000000080031d8 <kwalkaddr>:
// a physical address. only needed for
// addresses on the stack.
// assumes va is page aligned.
uint64 kvmpa(uint64 va) { return kwalkaddr(kernel_pagetable, va); }

uint64 kwalkaddr(pagetable_t kpt, uint64 va) {
90000000080031d8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080031dc:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080031e0:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080031e4:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080031e8:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint64 off = va % PGSIZE;
90000000080031ec:	037ffcb7 	andi	$r23,$r5,0xfff
  pte_t *pte;
  uint64 pa;

  pte = walk(kpt, va, 0);
90000000080031f0:	00150006 	move	$r6,$r0
90000000080031f4:	57fe37ff 	bl	-460(0xffffe34) # 9000000008003028 <walk>
  if (pte == 0)
90000000080031f8:	40003480 	beqz	$r4,52(0x34) # 900000000800322c <kwalkaddr+0x54>
    panic("kvmpa");
  if ((*pte & PTE_V) == 0)
90000000080031fc:	28c00084 	ld.d	$r4,$r4,0
9000000008003200:	0340048c 	andi	$r12,$r4,0x1
9000000008003204:	40003580 	beqz	$r12,52(0x34) # 9000000008003238 <kwalkaddr+0x60>
    panic("kvmpa");
  pa = PTE2PA(*pte);
9000000008003208:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000800320c:	161fffec 	lu32i.d	$r12,65535(0xffff)
9000000008003210:	0014b084 	and	$r4,$r4,$r12
  return pa + off;
}
9000000008003214:	00155c84 	or	$r4,$r4,$r23
9000000008003218:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800321c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008003220:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008003224:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008003228:	4c000020 	jirl	$r0,$r1,0
    panic("kvmpa");
900000000800322c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003230:	02c67084 	addi.d	$r4,$r4,412(0x19c)
9000000008003234:	57cfd3ff 	bl	-12336(0xfffcfd0) # 9000000008000204 <panic>
    panic("kvmpa");
9000000008003238:	1c000244 	pcaddu12i	$r4,18(0x12)
900000000800323c:	02c64084 	addi.d	$r4,$r4,400(0x190)
9000000008003240:	57cfc7ff 	bl	-12348(0xfffcfc4) # 9000000008000204 <panic>

9000000008003244 <kvmpa>:
uint64 kvmpa(uint64 va) { return kwalkaddr(kernel_pagetable, va); }
9000000008003244:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008003248:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800324c:	29c00076 	st.d	$r22,$r3,0
9000000008003250:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008003254:	00150085 	move	$r5,$r4
9000000008003258:	1c000a2c 	pcaddu12i	$r12,81(0x51)
900000000800325c:	02d0818c 	addi.d	$r12,$r12,1056(0x420)
9000000008003260:	28c00184 	ld.d	$r4,$r12,0
9000000008003264:	57ff77ff 	bl	-140(0xfffff74) # 90000000080031d8 <kwalkaddr>
9000000008003268:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800326c:	28c00076 	ld.d	$r22,$r3,0
9000000008003270:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008003274:	4c000020 	jirl	$r0,$r1,0

9000000008003278 <mappages>:
// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned. Returns 0 on success, -1 if walk() couldn't
// allocate a needed page-table page.
int mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa,
             int perm) {
9000000008003278:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800327c:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008003280:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000008003284:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008003288:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800328c:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008003290:	29c0807a 	st.d	$r26,$r3,32(0x20)
9000000008003294:	29c0607b 	st.d	$r27,$r3,24(0x18)
9000000008003298:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800329c:	29c0207d 	st.d	$r29,$r3,8(0x8)
90000000080032a0:	02c14076 	addi.d	$r22,$r3,80(0x50)
90000000080032a4:	0015009b 	move	$r27,$r4
90000000080032a8:	0015011c 	move	$r28,$r8
  // for visionfive 2
  // perm |= PTE_A | PTE_D;
  uint64 a, last;
  pte_t *pte;

  a = PGROUNDDOWN(va);
90000000080032ac:	15fffff9 	lu12i.w	$r25,-1(0xfffff)
90000000080032b0:	0014e4ba 	and	$r26,$r5,$r25
  last = PGROUNDDOWN(va + size - 1);
90000000080032b4:	02fffcc6 	addi.d	$r6,$r6,-1(0xfff)
90000000080032b8:	001094c6 	add.d	$r6,$r6,$r5
90000000080032bc:	0014e4d9 	and	$r25,$r6,$r25
  a = PGROUNDDOWN(va);
90000000080032c0:	00150358 	move	$r24,$r26
90000000080032c4:	0011e8fa 	sub.d	$r26,$r7,$r26
    }

    *pte = PA2PTE(pa) | perm | PTE_V;
    if (a == last)
      break;
    a += PGSIZE;
90000000080032c8:	1400003d 	lu12i.w	$r29,1(0x1)
90000000080032cc:	50003000 	b	48(0x30) # 90000000080032fc <mappages+0x84>
      printf("mappages:%p %p\n", a, PTE2PA(*pte));
90000000080032d0:	15ffffe6 	lu12i.w	$r6,-1(0xfffff)
90000000080032d4:	161fffe6 	lu32i.d	$r6,65535(0xffff)
90000000080032d8:	00149986 	and	$r6,$r12,$r6
90000000080032dc:	00150305 	move	$r5,$r24
90000000080032e0:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080032e4:	02c3c084 	addi.d	$r4,$r4,240(0xf0)
90000000080032e8:	57cf8fff 	bl	-12404(0xfffcf8c) # 9000000008000274 <printf>
      panic("remap");
90000000080032ec:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080032f0:	02c3d084 	addi.d	$r4,$r4,244(0xf4)
90000000080032f4:	57cf13ff 	bl	-12528(0xfffcf10) # 9000000008000204 <panic>
    a += PGSIZE;
90000000080032f8:	0010f718 	add.d	$r24,$r24,$r29
    pa += PGSIZE;
90000000080032fc:	0010e357 	add.d	$r23,$r26,$r24
    if ((pte = walk(pagetable, a, 1)) == NULL)
9000000008003300:	02800406 	addi.w	$r6,$r0,1(0x1)
9000000008003304:	00150305 	move	$r5,$r24
9000000008003308:	00150364 	move	$r4,$r27
900000000800330c:	57fd1fff 	bl	-740(0xffffd1c) # 9000000008003028 <walk>
9000000008003310:	40003480 	beqz	$r4,52(0x34) # 9000000008003344 <mappages+0xcc>
    if (*pte & PTE_V) {
9000000008003314:	28c0008c 	ld.d	$r12,$r4,0
9000000008003318:	0340058d 	andi	$r13,$r12,0x1
900000000800331c:	47ffb5bf 	bnez	$r13,-76(0x7fffb4) # 90000000080032d0 <mappages+0x58>
    *pte = PA2PTE(pa) | perm | PTE_V;
9000000008003320:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000008003324:	161fffec 	lu32i.d	$r12,65535(0xffff)
9000000008003328:	0014b2f7 	and	$r23,$r23,$r12
900000000800332c:	001572f7 	or	$r23,$r23,$r28
9000000008003330:	038006f7 	ori	$r23,$r23,0x1
9000000008003334:	29c00097 	st.d	$r23,$r4,0
    if (a == last)
9000000008003338:	5fffc319 	bne	$r24,$r25,-64(0x3ffc0) # 90000000080032f8 <mappages+0x80>
  }
  return 0;
900000000800333c:	00150004 	move	$r4,$r0
9000000008003340:	50000800 	b	8(0x8) # 9000000008003348 <mappages+0xd0>
      return -1;
9000000008003344:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008003348:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800334c:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000008003350:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008003354:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008003358:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800335c:	28c0807a 	ld.d	$r26,$r3,32(0x20)
9000000008003360:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008003364:	28c0407c 	ld.d	$r28,$r3,16(0x10)
9000000008003368:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800336c:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008003370:	4c000020 	jirl	$r0,$r1,0

9000000008003374 <kvmmap>:
void kvmmap(uint64 va, uint64 pa, uint64 sz, int perm) {
9000000008003374:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008003378:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800337c:	29c00076 	st.d	$r22,$r3,0
9000000008003380:	02c04076 	addi.d	$r22,$r3,16(0x10)
  if (mappages(kernel_pagetable, va, sz, pa, perm) != 0)
9000000008003384:	001500e8 	move	$r8,$r7
9000000008003388:	001500a7 	move	$r7,$r5
900000000800338c:	00150085 	move	$r5,$r4
9000000008003390:	1c000a2c 	pcaddu12i	$r12,81(0x51)
9000000008003394:	02cba18c 	addi.d	$r12,$r12,744(0x2e8)
9000000008003398:	28c00184 	ld.d	$r4,$r12,0
900000000800339c:	57fedfff 	bl	-292(0xffffedc) # 9000000008003278 <mappages>
90000000080033a0:	44001480 	bnez	$r4,20(0x14) # 90000000080033b4 <kvmmap+0x40>
} 
90000000080033a4:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080033a8:	28c00076 	ld.d	$r22,$r3,0
90000000080033ac:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080033b0:	4c000020 	jirl	$r0,$r1,0
    panic("kvmmap");
90000000080033b4:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080033b8:	02c0d084 	addi.d	$r4,$r4,52(0x34)
90000000080033bc:	57ce4bff 	bl	-12728(0xfffce48) # 9000000008000204 <panic>

90000000080033c0 <kvminit>:
void kvminit() {
90000000080033c0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080033c4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080033c8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080033cc:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080033d0:	02c08076 	addi.d	$r22,$r3,32(0x20)
  kernel_pagetable = (pagetable_t)kalloc();
90000000080033d4:	57faffff 	bl	-1284(0xffffafc) # 9000000008002ed0 <kalloc>
90000000080033d8:	1c000a37 	pcaddu12i	$r23,81(0x51)
90000000080033dc:	02ca82f7 	addi.d	$r23,$r23,672(0x2a0)
90000000080033e0:	29c002e4 	st.d	$r4,$r23,0
  printf("kernel_pagetable: %p\n", kernel_pagetable);
90000000080033e4:	00150085 	move	$r5,$r4
90000000080033e8:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080033ec:	02c02084 	addi.d	$r4,$r4,8(0x8)
90000000080033f0:	57ce87ff 	bl	-12668(0xfffce84) # 9000000008000274 <printf>
  memset(kernel_pagetable, 0, PGSIZE);
90000000080033f4:	14000026 	lu12i.w	$r6,1(0x1)
90000000080033f8:	00150005 	move	$r5,$r0
90000000080033fc:	28c002e4 	ld.d	$r4,$r23,0
9000000008003400:	57db67ff 	bl	-9372(0xfffdb64) # 9000000008000f64 <memset>
  kvmmap(RAMBASE, RAMBASE, (uint64)etext - RAMBASE,
9000000008003404:	1c0003b7 	pcaddu12i	$r23,29(0x1d)
9000000008003408:	28f332f7 	ld.d	$r23,$r23,-820(0xccc)
900000000800340c:	14e00006 	lu12i.w	$r6,458752(0x70000)
9000000008003410:	17ffffe6 	lu32i.d	$r6,-1(0xfffff)
9000000008003414:	031bfcc6 	lu52i.d	$r6,$r6,1791(0x6ff)
9000000008003418:	02867007 	addi.w	$r7,$r0,412(0x19c)
900000000800341c:	00109ae6 	add.d	$r6,$r23,$r6
9000000008003420:	15200004 	lu12i.w	$r4,-458752(0x90000)
9000000008003424:	16000004 	lu32i.d	$r4,0
9000000008003428:	03240084 	lu52i.d	$r4,$r4,-1792(0x900)
900000000800342c:	00150085 	move	$r5,$r4
9000000008003430:	57ff47ff 	bl	-188(0xfffff44) # 9000000008003374 <kvmmap>
  kvmmap((uint64)etext, (uint64)etext, RAMSTOP - (uint64)etext,
9000000008003434:	15300006 	lu12i.w	$r6,-425984(0x98000)
9000000008003438:	16000006 	lu32i.d	$r6,0
900000000800343c:	032400c6 	lu52i.d	$r6,$r6,-1792(0x900)
9000000008003440:	02867007 	addi.w	$r7,$r0,412(0x19c)
9000000008003444:	0011dcc6 	sub.d	$r6,$r6,$r23
9000000008003448:	001502e5 	move	$r5,$r23
900000000800344c:	001502e4 	move	$r4,$r23
9000000008003450:	57ff27ff 	bl	-220(0xfffff24) # 9000000008003374 <kvmmap>
  kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_W | PTE_MAT | PTE_PLV | PTE_P);
9000000008003454:	02867007 	addi.w	$r7,$r0,412(0x19c)
9000000008003458:	14000026 	lu12i.w	$r6,1(0x1)
900000000800345c:	1c0003a5 	pcaddu12i	$r5,29(0x1d)
9000000008003460:	28f0b0a5 	ld.d	$r5,$r5,-980(0xc2c)
9000000008003464:	14001fe4 	lu12i.w	$r4,255(0xff)
9000000008003468:	57ff0fff 	bl	-244(0xfffff0c) # 9000000008003374 <kvmmap>
  printf("kvminit\n");
900000000800346c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003470:	02fe7084 	addi.d	$r4,$r4,-100(0xf9c)
9000000008003474:	57ce03ff 	bl	-12800(0xfffce00) # 9000000008000274 <printf>
}
9000000008003478:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800347c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008003480:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008003484:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008003488:	4c000020 	jirl	$r0,$r1,0

900000000800348c <vmunmap>:

// Remove npages of mappings starting from va. va must be
// page-aligned. The mappings must exist.
// Optionally free the physical memory.
void vmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free) {
900000000800348c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000008003490:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008003494:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000008003498:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800349c:	29c0c078 	st.d	$r24,$r3,48(0x30)
90000000080034a0:	29c0a079 	st.d	$r25,$r3,40(0x28)
90000000080034a4:	29c0807a 	st.d	$r26,$r3,32(0x20)
90000000080034a8:	29c0607b 	st.d	$r27,$r3,24(0x18)
90000000080034ac:	29c0407c 	st.d	$r28,$r3,16(0x10)
90000000080034b0:	29c0207d 	st.d	$r29,$r3,8(0x8)
90000000080034b4:	29c0007e 	st.d	$r30,$r3,0
90000000080034b8:	02c14076 	addi.d	$r22,$r3,80(0x50)
  uint64 a;
  pte_t *pte;

  if ((va % PGSIZE) != 0)
90000000080034bc:	037ffcac 	andi	$r12,$r5,0xfff
90000000080034c0:	44005980 	bnez	$r12,88(0x58) # 9000000008003518 <vmunmap+0x8c>
90000000080034c4:	0015009a 	move	$r26,$r4
90000000080034c8:	001500b7 	move	$r23,$r5
90000000080034cc:	001500fd 	move	$r29,$r7
    panic("vmunmap: not aligned");

  for (a = va; a < va + npages * PGSIZE; a += PGSIZE) {
90000000080034d0:	004130c6 	slli.d	$r6,$r6,0xc
90000000080034d4:	001094d9 	add.d	$r25,$r6,$r5
    if ((pte = walk(pagetable, a, 0)) == 0)
      panic("vmunmap: walk");
    if ((*pte & PTE_V) == 0)
      panic("vmunmap: not mapped");
    if (PTE_FLAGS(*pte) == PTE_V)
90000000080034d8:	0280041c 	addi.w	$r28,$r0,1(0x1)
      panic("vmunmap: not a leaf");
    if (do_free) {
      uint64 pa = PTE2PA(*pte);
      kfree((void*)(pa | DMWIN_MASK));
90000000080034dc:	0324001e 	lu52i.d	$r30,$r0,-1792(0x900)
  for (a = va; a < va + npages * PGSIZE; a += PGSIZE) {
90000000080034e0:	1400003b 	lu12i.w	$r27,1(0x1)
90000000080034e4:	680084b9 	bltu	$r5,$r25,132(0x84) # 9000000008003568 <vmunmap+0xdc>
    }
    *pte = 0;
  }
}
90000000080034e8:	28c12061 	ld.d	$r1,$r3,72(0x48)
90000000080034ec:	28c10076 	ld.d	$r22,$r3,64(0x40)
90000000080034f0:	28c0e077 	ld.d	$r23,$r3,56(0x38)
90000000080034f4:	28c0c078 	ld.d	$r24,$r3,48(0x30)
90000000080034f8:	28c0a079 	ld.d	$r25,$r3,40(0x28)
90000000080034fc:	28c0807a 	ld.d	$r26,$r3,32(0x20)
9000000008003500:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008003504:	28c0407c 	ld.d	$r28,$r3,16(0x10)
9000000008003508:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800350c:	28c0007e 	ld.d	$r30,$r3,0
9000000008003510:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008003514:	4c000020 	jirl	$r0,$r1,0
    panic("vmunmap: not aligned");
9000000008003518:	1c000244 	pcaddu12i	$r4,18(0x12)
900000000800351c:	02fc0084 	addi.d	$r4,$r4,-256(0xf00)
9000000008003520:	57cce7ff 	bl	-13084(0xfffcce4) # 9000000008000204 <panic>
      panic("vmunmap: walk");
9000000008003524:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003528:	02fc3084 	addi.d	$r4,$r4,-244(0xf0c)
900000000800352c:	57ccdbff 	bl	-13096(0xfffccd8) # 9000000008000204 <panic>
      panic("vmunmap: not mapped");
9000000008003530:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003534:	02fc4084 	addi.d	$r4,$r4,-240(0xf10)
9000000008003538:	57cccfff 	bl	-13108(0xfffcccc) # 9000000008000204 <panic>
      panic("vmunmap: not a leaf");
900000000800353c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003540:	02fc7084 	addi.d	$r4,$r4,-228(0xf1c)
9000000008003544:	57ccc3ff 	bl	-13120(0xfffccc0) # 9000000008000204 <panic>
      uint64 pa = PTE2PA(*pte);
9000000008003548:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000800354c:	161fffec 	lu32i.d	$r12,65535(0xffff)
9000000008003550:	0014b084 	and	$r4,$r4,$r12
      kfree((void*)(pa | DMWIN_MASK));
9000000008003554:	00157884 	or	$r4,$r4,$r30
9000000008003558:	57f7ebff 	bl	-2072(0xffff7e8) # 9000000008002d40 <kfree>
    *pte = 0;
900000000800355c:	29c00300 	st.d	$r0,$r24,0
  for (a = va; a < va + npages * PGSIZE; a += PGSIZE) {
9000000008003560:	0010eef7 	add.d	$r23,$r23,$r27
9000000008003564:	6fff86f9 	bgeu	$r23,$r25,-124(0x3ff84) # 90000000080034e8 <vmunmap+0x5c>
    if ((pte = walk(pagetable, a, 0)) == 0)
9000000008003568:	00150006 	move	$r6,$r0
900000000800356c:	001502e5 	move	$r5,$r23
9000000008003570:	00150344 	move	$r4,$r26
9000000008003574:	57fab7ff 	bl	-1356(0xffffab4) # 9000000008003028 <walk>
9000000008003578:	00150098 	move	$r24,$r4
900000000800357c:	43ffa89f 	beqz	$r4,-88(0x7fffa8) # 9000000008003524 <vmunmap+0x98>
    if ((*pte & PTE_V) == 0)
9000000008003580:	28c00084 	ld.d	$r4,$r4,0
9000000008003584:	0340048c 	andi	$r12,$r4,0x1
9000000008003588:	43ffa99f 	beqz	$r12,-88(0x7fffa8) # 9000000008003530 <vmunmap+0xa4>
    if (PTE_FLAGS(*pte) == PTE_V)
900000000800358c:	0287fc0c 	addi.w	$r12,$r0,511(0x1ff)
9000000008003590:	0338018c 	lu52i.d	$r12,$r12,-512(0xe00)
9000000008003594:	0014b08c 	and	$r12,$r4,$r12
9000000008003598:	5bffa59c 	beq	$r12,$r28,-92(0x3ffa4) # 900000000800353c <vmunmap+0xb0>
    if (do_free) {
900000000800359c:	43ffc3bf 	beqz	$r29,-64(0x7fffc0) # 900000000800355c <vmunmap+0xd0>
90000000080035a0:	53ffabff 	b	-88(0xfffffa8) # 9000000008003548 <vmunmap+0xbc>

90000000080035a4 <uvmcreate>:

// create an empty user page table.
// returns 0 if out of memory.
// 创建空页表 （用户）
pagetable_t uvmcreate() {
90000000080035a4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080035a8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080035ac:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080035b0:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080035b4:	02c08076 	addi.d	$r22,$r3,32(0x20)
  pagetable_t pagetable;
  pagetable = (pagetable_t)kalloc();
90000000080035b8:	57f91bff 	bl	-1768(0xffff918) # 9000000008002ed0 <kalloc>
90000000080035bc:	00150097 	move	$r23,$r4
  if (pagetable == NULL)
90000000080035c0:	40001080 	beqz	$r4,16(0x10) # 90000000080035d0 <uvmcreate+0x2c>
    return NULL;
  memset(pagetable, 0, PGSIZE);
90000000080035c4:	14000026 	lu12i.w	$r6,1(0x1)
90000000080035c8:	00150005 	move	$r5,$r0
90000000080035cc:	57d99bff 	bl	-9832(0xfffd998) # 9000000008000f64 <memset>
  return pagetable;
}
90000000080035d0:	001502e4 	move	$r4,$r23
90000000080035d4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080035d8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080035dc:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080035e0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080035e4:	4c000020 	jirl	$r0,$r1,0

90000000080035e8 <uvminit>:

// Load the user initcode into address 0 of pagetable,
// for the very first process.
// sz must be less than a page.
void uvminit(pagetable_t pagetable, pagetable_t kpagetable, uchar *src,
             uint sz) {
90000000080035e8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
90000000080035ec:	29c12061 	st.d	$r1,$r3,72(0x48)
90000000080035f0:	29c10076 	st.d	$r22,$r3,64(0x40)
90000000080035f4:	29c0e077 	st.d	$r23,$r3,56(0x38)
90000000080035f8:	29c0c078 	st.d	$r24,$r3,48(0x30)
90000000080035fc:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008003600:	29c0807a 	st.d	$r26,$r3,32(0x20)
9000000008003604:	29c0607b 	st.d	$r27,$r3,24(0x18)
9000000008003608:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800360c:	29c0207d 	st.d	$r29,$r3,8(0x8)
9000000008003610:	29c0007e 	st.d	$r30,$r3,0
9000000008003614:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000008003618:	0015009c 	move	$r28,$r4
900000000800361c:	001500bb 	move	$r27,$r5
9000000008003620:	001500da 	move	$r26,$r6
9000000008003624:	001500fe 	move	$r30,$r7
  char *mem;
  uint64 i;
  for (i = 0; i + PGSIZE < sz; i += PGSIZE) {
9000000008003628:	00df00f9 	bstrpick.d	$r25,$r7,0x1f,0x0
900000000800362c:	1400002c 	lu12i.w	$r12,1(0x1)
9000000008003630:	0015001d 	move	$r29,$r0
9000000008003634:	6c008d99 	bgeu	$r12,$r25,140(0x8c) # 90000000080036c0 <uvminit+0xd8>
9000000008003638:	15ffffcc 	lu12i.w	$r12,-2(0xffffe)
900000000800363c:	03bffd8c 	ori	$r12,$r12,0xfff
9000000008003640:	0010b339 	add.d	$r25,$r25,$r12
9000000008003644:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000008003648:	0014b339 	and	$r25,$r25,$r12
900000000800364c:	1400003d 	lu12i.w	$r29,1(0x1)
9000000008003650:	0010f73d 	add.d	$r29,$r25,$r29
9000000008003654:	00150017 	move	$r23,$r0
9000000008003658:	50000800 	b	8(0x8) # 9000000008003660 <uvminit+0x78>
900000000800365c:	00150197 	move	$r23,$r12
    mem = kalloc();
9000000008003660:	57f873ff 	bl	-1936(0xffff870) # 9000000008002ed0 <kalloc>
9000000008003664:	00150098 	move	$r24,$r4
    // printf("[uvminit]kalloc: %p\n", mem);
    memset(mem, 0, PGSIZE);
9000000008003668:	14000026 	lu12i.w	$r6,1(0x1)
900000000800366c:	00150005 	move	$r5,$r0
9000000008003670:	57d8f7ff 	bl	-9996(0xfffd8f4) # 9000000008000f64 <memset>
    mappages(pagetable, i, PGSIZE, (uint64)mem, PTE_P | PTE_PLV | PTE_W | PTE_MAT);
9000000008003674:	02867008 	addi.w	$r8,$r0,412(0x19c)
9000000008003678:	00150307 	move	$r7,$r24
900000000800367c:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003680:	001502e5 	move	$r5,$r23
9000000008003684:	00150384 	move	$r4,$r28
9000000008003688:	57fbf3ff 	bl	-1040(0xffffbf0) # 9000000008003278 <mappages>
    mappages(kpagetable, i, PGSIZE, (uint64)mem, PTE_W | PTE_P | PTE_MAT);
900000000800368c:	02864008 	addi.w	$r8,$r0,400(0x190)
9000000008003690:	00150307 	move	$r7,$r24
9000000008003694:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003698:	001502e5 	move	$r5,$r23
900000000800369c:	00150364 	move	$r4,$r27
90000000080036a0:	57fbdbff 	bl	-1064(0xffffbd8) # 9000000008003278 <mappages>
    memmove(mem, src + i, PGSIZE);
90000000080036a4:	14000026 	lu12i.w	$r6,1(0x1)
90000000080036a8:	0010df45 	add.d	$r5,$r26,$r23
90000000080036ac:	00150304 	move	$r4,$r24
90000000080036b0:	57d95fff 	bl	-9892(0xfffd95c) # 900000000800100c <memmove>
90000000080036b4:	1400002c 	lu12i.w	$r12,1(0x1)
90000000080036b8:	0010b2ec 	add.d	$r12,$r23,$r12
  for (i = 0; i + PGSIZE < sz; i += PGSIZE) {
90000000080036bc:	5fffa2f9 	bne	$r23,$r25,-96(0x3ffa0) # 900000000800365c <uvminit+0x74>
  }
  mem = kalloc();
90000000080036c0:	57f813ff 	bl	-2032(0xffff810) # 9000000008002ed0 <kalloc>
90000000080036c4:	00150097 	move	$r23,$r4
  memset(mem, 0, PGSIZE);
90000000080036c8:	14000026 	lu12i.w	$r6,1(0x1)
90000000080036cc:	00150005 	move	$r5,$r0
90000000080036d0:	57d897ff 	bl	-10092(0xfffd894) # 9000000008000f64 <memset>
  mappages(pagetable, i, PGSIZE, (uint64)mem, PTE_P | PTE_PLV | PTE_W | PTE_MAT);
90000000080036d4:	02867008 	addi.w	$r8,$r0,412(0x19c)
90000000080036d8:	001502e7 	move	$r7,$r23
90000000080036dc:	14000026 	lu12i.w	$r6,1(0x1)
90000000080036e0:	001503a5 	move	$r5,$r29
90000000080036e4:	00150384 	move	$r4,$r28
90000000080036e8:	57fb93ff 	bl	-1136(0xffffb90) # 9000000008003278 <mappages>
  mappages(kpagetable, i, PGSIZE, (uint64)mem, PTE_P | PTE_W | PTE_MAT);
90000000080036ec:	02864008 	addi.w	$r8,$r0,400(0x190)
90000000080036f0:	001502e7 	move	$r7,$r23
90000000080036f4:	14000026 	lu12i.w	$r6,1(0x1)
90000000080036f8:	001503a5 	move	$r5,$r29
90000000080036fc:	00150364 	move	$r4,$r27
9000000008003700:	57fb7bff 	bl	-1160(0xffffb78) # 9000000008003278 <mappages>
  memmove(mem, src + i, sz % PGSIZE);
9000000008003704:	037fffc6 	andi	$r6,$r30,0xfff
9000000008003708:	0010f745 	add.d	$r5,$r26,$r29
900000000800370c:	001502e4 	move	$r4,$r23
9000000008003710:	57d8ffff 	bl	-9988(0xfffd8fc) # 900000000800100c <memmove>
  printf("uvminit done sz:%d\n", sz);
9000000008003714:	001503c5 	move	$r5,$r30
9000000008003718:	1c000244 	pcaddu12i	$r4,18(0x12)
900000000800371c:	02f56084 	addi.d	$r4,$r4,-680(0xd58)
9000000008003720:	57cb57ff 	bl	-13484(0xfffcb54) # 9000000008000274 <printf>
  // for (int i = 0; i < sz; i ++) {
  //   printf("[uvminit]mem: %p, %x\n", mem + i, mem[i]);
  // }
}
9000000008003724:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000008003728:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800372c:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008003730:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008003734:	28c0a079 	ld.d	$r25,$r3,40(0x28)
9000000008003738:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800373c:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008003740:	28c0407c 	ld.d	$r28,$r3,16(0x10)
9000000008003744:	28c0207d 	ld.d	$r29,$r3,8(0x8)
9000000008003748:	28c0007e 	ld.d	$r30,$r3,0
900000000800374c:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008003750:	4c000020 	jirl	$r0,$r1,0

9000000008003754 <uvmdealloc1>:
  return 0;
}

uint64 uvmdealloc1(pagetable_t pagetable, uint64 start, uint64 end) {

  if (start >= end)
9000000008003754:	6c0068a6 	bgeu	$r5,$r6,104(0x68) # 90000000080037bc <uvmdealloc1+0x68>
    return -1;
  if (PGROUNDUP(start) <= PGROUNDUP(end)) {
9000000008003758:	03bffc0d 	ori	$r13,$r0,0xfff
900000000800375c:	0010b4a5 	add.d	$r5,$r5,$r13
9000000008003760:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000008003764:	0014b0a5 	and	$r5,$r5,$r12
9000000008003768:	0010b4c6 	add.d	$r6,$r6,$r13
900000000800376c:	0014b0c6 	and	$r6,$r6,$r12
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
  }

  return 0;
9000000008003770:	0015000c 	move	$r12,$r0
  if (PGROUNDUP(start) <= PGROUNDUP(end)) {
9000000008003774:	6c000cc5 	bgeu	$r6,$r5,12(0xc) # 9000000008003780 <uvmdealloc1+0x2c>
}
9000000008003778:	00150184 	move	$r4,$r12
900000000800377c:	4c000020 	jirl	$r0,$r1,0
uint64 uvmdealloc1(pagetable_t pagetable, uint64 start, uint64 end) {
9000000008003780:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008003784:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008003788:	29c00076 	st.d	$r22,$r3,0
900000000800378c:	02c04076 	addi.d	$r22,$r3,16(0x10)
    int npages = (PGROUNDUP(end) - PGROUNDUP(start)) / PGSIZE;
9000000008003790:	001194c6 	sub.d	$r6,$r6,$r5
9000000008003794:	004530c6 	srli.d	$r6,$r6,0xc
9000000008003798:	004080c6 	slli.w	$r6,$r6,0x0
    vmunmap(pagetable, PGROUNDUP(start), npages, 1);
900000000800379c:	02800407 	addi.w	$r7,$r0,1(0x1)
90000000080037a0:	57fcefff 	bl	-788(0xffffcec) # 900000000800348c <vmunmap>
  return 0;
90000000080037a4:	0015000c 	move	$r12,$r0
}
90000000080037a8:	00150184 	move	$r4,$r12
90000000080037ac:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080037b0:	28c00076 	ld.d	$r22,$r3,0
90000000080037b4:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080037b8:	4c000020 	jirl	$r0,$r1,0
    return -1;
90000000080037bc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000080037c0:	53ffbbff 	b	-72(0xfffffb8) # 9000000008003778 <uvmdealloc1+0x24>

90000000080037c4 <uvmalloc1>:
  if (start >= end)
90000000080037c4:	6c00fca6 	bgeu	$r5,$r6,252(0xfc) # 90000000080038c0 <uvmalloc1+0xfc>
uint64 uvmalloc1(pagetable_t pagetable, uint64 start, uint64 end, int perm) {
90000000080037c8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000080037cc:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000080037d0:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000080037d4:	29c0a077 	st.d	$r23,$r3,40(0x28)
90000000080037d8:	29c08078 	st.d	$r24,$r3,32(0x20)
90000000080037dc:	29c06079 	st.d	$r25,$r3,24(0x18)
90000000080037e0:	29c0407a 	st.d	$r26,$r3,16(0x10)
90000000080037e4:	29c0207b 	st.d	$r27,$r3,8(0x8)
90000000080037e8:	29c0007c 	st.d	$r28,$r3,0
90000000080037ec:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000080037f0:	001500fb 	move	$r27,$r7
90000000080037f4:	001500d9 	move	$r25,$r6
90000000080037f8:	001500bc 	move	$r28,$r5
90000000080037fc:	0015009a 	move	$r26,$r4
  for (a = start; a < end; a += PGSIZE) {
9000000008003800:	001500b8 	move	$r24,$r5
    mem = kalloc();
9000000008003804:	57f6cfff 	bl	-2356(0xffff6cc) # 9000000008002ed0 <kalloc>
9000000008003808:	00150097 	move	$r23,$r4
    if (mem == NULL) {
900000000800380c:	40004080 	beqz	$r4,64(0x40) # 900000000800384c <uvmalloc1+0x88>
    memset(mem, 0, PGSIZE);
9000000008003810:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003814:	00150005 	move	$r5,$r0
9000000008003818:	57d74fff 	bl	-10420(0xfffd74c) # 9000000008000f64 <memset>
    if (mappages(pagetable, a, PGSIZE, (uint64)mem, perm) != 0) {
900000000800381c:	00150368 	move	$r8,$r27
9000000008003820:	001502e7 	move	$r7,$r23
9000000008003824:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003828:	00150305 	move	$r5,$r24
900000000800382c:	00150344 	move	$r4,$r26
9000000008003830:	57fa4bff 	bl	-1464(0xffffa48) # 9000000008003278 <mappages>
9000000008003834:	44006080 	bnez	$r4,96(0x60) # 9000000008003894 <uvmalloc1+0xd0>
  for (a = start; a < end; a += PGSIZE) {
9000000008003838:	1400002c 	lu12i.w	$r12,1(0x1)
900000000800383c:	0010b318 	add.d	$r24,$r24,$r12
9000000008003840:	6bffc719 	bltu	$r24,$r25,-60(0x3ffc4) # 9000000008003804 <uvmalloc1+0x40>
  return 0;
9000000008003844:	00150004 	move	$r4,$r0
9000000008003848:	50002400 	b	36(0x24) # 900000000800386c <uvmalloc1+0xa8>
      uvmdealloc1(pagetable, start, a);
900000000800384c:	00150306 	move	$r6,$r24
9000000008003850:	00150385 	move	$r5,$r28
9000000008003854:	00150344 	move	$r4,$r26
9000000008003858:	57feffff 	bl	-260(0xffffefc) # 9000000008003754 <uvmdealloc1>
      printf("uvmalloc kalloc failed\n");
900000000800385c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003860:	02f0b084 	addi.d	$r4,$r4,-980(0xc2c)
9000000008003864:	57ca13ff 	bl	-13808(0xfffca10) # 9000000008000274 <printf>
      return -1;
9000000008003868:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800386c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008003870:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008003874:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008003878:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800387c:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008003880:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008003884:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008003888:	28c0007c 	ld.d	$r28,$r3,0
900000000800388c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008003890:	4c000020 	jirl	$r0,$r1,0
      kfree(mem);
9000000008003894:	001502e4 	move	$r4,$r23
9000000008003898:	57f4abff 	bl	-2904(0xffff4a8) # 9000000008002d40 <kfree>
      uvmdealloc1(pagetable, start, a);
900000000800389c:	00150306 	move	$r6,$r24
90000000080038a0:	00150385 	move	$r5,$r28
90000000080038a4:	00150344 	move	$r4,$r26
90000000080038a8:	57feafff 	bl	-340(0xffffeac) # 9000000008003754 <uvmdealloc1>
      printf("[uvmalloc]map user page failed\n");
90000000080038ac:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080038b0:	02efd084 	addi.d	$r4,$r4,-1036(0xbf4)
90000000080038b4:	57c9c3ff 	bl	-13888(0xfffc9c0) # 9000000008000274 <printf>
      return -1;
90000000080038b8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080038bc:	53ffb3ff 	b	-80(0xfffffb0) # 900000000800386c <uvmalloc1+0xa8>
    return -1;
90000000080038c0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
90000000080038c4:	4c000020 	jirl	$r0,$r1,0

90000000080038c8 <uvmdealloc>:
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
// 释放虚拟空间大小
uint64 uvmdealloc(pagetable_t pagetable, pagetable_t kpagetable, uint64 oldsz,
                  uint64 newsz) {
90000000080038c8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080038cc:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080038d0:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080038d4:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080038d8:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080038dc:	29c02079 	st.d	$r25,$r3,8(0x8)
90000000080038e0:	29c0007a 	st.d	$r26,$r3,0
90000000080038e4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  if (newsz >= oldsz)
    return oldsz;
90000000080038e8:	001500d8 	move	$r24,$r6
  if (newsz >= oldsz)
90000000080038ec:	6c002ce6 	bgeu	$r7,$r6,44(0x2c) # 9000000008003918 <uvmdealloc+0x50>
90000000080038f0:	0015009a 	move	$r26,$r4
90000000080038f4:	001500a4 	move	$r4,$r5
90000000080038f8:	001500f8 	move	$r24,$r7

  if (PGROUNDUP(newsz) < PGROUNDUP(oldsz)) {
90000000080038fc:	03bffc0d 	ori	$r13,$r0,0xfff
9000000008003900:	0010b4f9 	add.d	$r25,$r7,$r13
9000000008003904:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000008003908:	0014b339 	and	$r25,$r25,$r12
900000000800390c:	0010b4c6 	add.d	$r6,$r6,$r13
9000000008003910:	0014b0c6 	and	$r6,$r6,$r12
9000000008003914:	68002b26 	bltu	$r25,$r6,40(0x28) # 900000000800393c <uvmdealloc+0x74>
    vmunmap(kpagetable, PGROUNDUP(newsz), npages, 0);
    vmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
  }

  return newsz;
}
9000000008003918:	00150304 	move	$r4,$r24
900000000800391c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008003920:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008003924:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008003928:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800392c:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008003930:	28c0007a 	ld.d	$r26,$r3,0
9000000008003934:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008003938:	4c000020 	jirl	$r0,$r1,0
    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
900000000800393c:	0011e4d7 	sub.d	$r23,$r6,$r25
9000000008003940:	004532f7 	srli.d	$r23,$r23,0xc
9000000008003944:	004082f7 	slli.w	$r23,$r23,0x0
    vmunmap(kpagetable, PGROUNDUP(newsz), npages, 0);
9000000008003948:	00150007 	move	$r7,$r0
900000000800394c:	001502e6 	move	$r6,$r23
9000000008003950:	00150325 	move	$r5,$r25
9000000008003954:	57fb3bff 	bl	-1224(0xffffb38) # 900000000800348c <vmunmap>
    vmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
9000000008003958:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000800395c:	001502e6 	move	$r6,$r23
9000000008003960:	00150325 	move	$r5,$r25
9000000008003964:	00150344 	move	$r4,$r26
9000000008003968:	57fb27ff 	bl	-1244(0xffffb24) # 900000000800348c <vmunmap>
900000000800396c:	53ffafff 	b	-84(0xfffffac) # 9000000008003918 <uvmdealloc+0x50>

9000000008003970 <uvmalloc>:
  if (newsz < oldsz)
9000000008003970:	68016ce6 	bltu	$r7,$r6,364(0x16c) # 9000000008003adc <uvmalloc+0x16c>
                uint64 newsz, int perm) {
9000000008003974:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000008003978:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800397c:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000008003980:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008003984:	29c0c078 	st.d	$r24,$r3,48(0x30)
9000000008003988:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800398c:	29c0807a 	st.d	$r26,$r3,32(0x20)
9000000008003990:	29c0607b 	st.d	$r27,$r3,24(0x18)
9000000008003994:	29c0407c 	st.d	$r28,$r3,16(0x10)
9000000008003998:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800399c:	29c0007e 	st.d	$r30,$r3,0
90000000080039a0:	02c14076 	addi.d	$r22,$r3,80(0x50)
  oldsz = PGROUNDUP(oldsz);
90000000080039a4:	03bffc19 	ori	$r25,$r0,0xfff
90000000080039a8:	0010e4c6 	add.d	$r6,$r6,$r25
90000000080039ac:	15fffff9 	lu12i.w	$r25,-1(0xfffff)
90000000080039b0:	0014e4d9 	and	$r25,$r6,$r25
  for (a = oldsz; a < newsz; a += PGSIZE) {
90000000080039b4:	6c013327 	bgeu	$r25,$r7,304(0x130) # 9000000008003ae4 <uvmalloc+0x174>
90000000080039b8:	0015011d 	move	$r29,$r8
90000000080039bc:	001500fc 	move	$r28,$r7
90000000080039c0:	001500bb 	move	$r27,$r5
90000000080039c4:	0015009a 	move	$r26,$r4
90000000080039c8:	00150337 	move	$r23,$r25
    if (mappages(pagetable, a, PGSIZE, (uint64)mem, perm | PTE_PLV) != 0) {
90000000080039cc:	0380311e 	ori	$r30,$r8,0xc
    mem = kalloc();
90000000080039d0:	57f503ff 	bl	-2816(0xffff500) # 9000000008002ed0 <kalloc>
90000000080039d4:	00150098 	move	$r24,$r4
    if (mem == NULL) {
90000000080039d8:	40005c80 	beqz	$r4,92(0x5c) # 9000000008003a34 <uvmalloc+0xc4>
    memset(mem, 0, PGSIZE);
90000000080039dc:	14000026 	lu12i.w	$r6,1(0x1)
90000000080039e0:	00150005 	move	$r5,$r0
90000000080039e4:	57d583ff 	bl	-10880(0xfffd580) # 9000000008000f64 <memset>
    if (mappages(pagetable, a, PGSIZE, (uint64)mem, perm | PTE_PLV) != 0) {
90000000080039e8:	001503c8 	move	$r8,$r30
90000000080039ec:	00150307 	move	$r7,$r24
90000000080039f0:	14000026 	lu12i.w	$r6,1(0x1)
90000000080039f4:	001502e5 	move	$r5,$r23
90000000080039f8:	00150344 	move	$r4,$r26
90000000080039fc:	57f87fff 	bl	-1924(0xffff87c) # 9000000008003278 <mappages>
9000000008003a00:	44007c80 	bnez	$r4,124(0x7c) # 9000000008003a7c <uvmalloc+0x10c>
    if (mappages(kpagetable , a, PGSIZE, (uint64)mem, perm) != 0) {
9000000008003a04:	001503a8 	move	$r8,$r29
9000000008003a08:	00150307 	move	$r7,$r24
9000000008003a0c:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003a10:	001502e5 	move	$r5,$r23
9000000008003a14:	00150364 	move	$r4,$r27
9000000008003a18:	57f863ff 	bl	-1952(0xffff860) # 9000000008003278 <mappages>
9000000008003a1c:	44008480 	bnez	$r4,132(0x84) # 9000000008003aa0 <uvmalloc+0x130>
  for (a = oldsz; a < newsz; a += PGSIZE) {
9000000008003a20:	1400002c 	lu12i.w	$r12,1(0x1)
9000000008003a24:	0010b2f7 	add.d	$r23,$r23,$r12
9000000008003a28:	6bffaafc 	bltu	$r23,$r28,-88(0x3ffa8) # 90000000080039d0 <uvmalloc+0x60>
  return newsz;
9000000008003a2c:	00150384 	move	$r4,$r28
9000000008003a30:	50001c00 	b	28(0x1c) # 9000000008003a4c <uvmalloc+0xdc>
      uvmdealloc(pagetable, kpagetable, a, oldsz);
9000000008003a34:	00150327 	move	$r7,$r25
9000000008003a38:	001502e6 	move	$r6,$r23
9000000008003a3c:	00150365 	move	$r5,$r27
9000000008003a40:	00150344 	move	$r4,$r26
9000000008003a44:	57fe87ff 	bl	-380(0xffffe84) # 90000000080038c8 <uvmdealloc>
      return 0;
9000000008003a48:	00150004 	move	$r4,$r0
}
9000000008003a4c:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000008003a50:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000008003a54:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008003a58:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008003a5c:	28c0a079 	ld.d	$r25,$r3,40(0x28)
9000000008003a60:	28c0807a 	ld.d	$r26,$r3,32(0x20)
9000000008003a64:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008003a68:	28c0407c 	ld.d	$r28,$r3,16(0x10)
9000000008003a6c:	28c0207d 	ld.d	$r29,$r3,8(0x8)
9000000008003a70:	28c0007e 	ld.d	$r30,$r3,0
9000000008003a74:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008003a78:	4c000020 	jirl	$r0,$r1,0
      kfree(mem);
9000000008003a7c:	00150304 	move	$r4,$r24
9000000008003a80:	57f2c3ff 	bl	-3392(0xffff2c0) # 9000000008002d40 <kfree>
      uvmdealloc(pagetable, kpagetable, a, oldsz);
9000000008003a84:	00150327 	move	$r7,$r25
9000000008003a88:	001502e6 	move	$r6,$r23
9000000008003a8c:	00150365 	move	$r5,$r27
9000000008003a90:	00150344 	move	$r4,$r26
9000000008003a94:	57fe37ff 	bl	-460(0xffffe34) # 90000000080038c8 <uvmdealloc>
      return 0;
9000000008003a98:	00150004 	move	$r4,$r0
9000000008003a9c:	53ffb3ff 	b	-80(0xfffffb0) # 9000000008003a4c <uvmalloc+0xdc>
      int npages = (a - oldsz) / PGSIZE;
9000000008003aa0:	0011e6f7 	sub.d	$r23,$r23,$r25
9000000008003aa4:	004532f7 	srli.d	$r23,$r23,0xc
9000000008003aa8:	004082f7 	slli.w	$r23,$r23,0x0
      vmunmap(pagetable, oldsz, npages + 1,
9000000008003aac:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008003ab0:	028006e6 	addi.w	$r6,$r23,1(0x1)
9000000008003ab4:	00150325 	move	$r5,$r25
9000000008003ab8:	00150344 	move	$r4,$r26
9000000008003abc:	57f9d3ff 	bl	-1584(0xffff9d0) # 900000000800348c <vmunmap>
      vmunmap(kpagetable, oldsz, npages, 0);
9000000008003ac0:	00150007 	move	$r7,$r0
9000000008003ac4:	001502e6 	move	$r6,$r23
9000000008003ac8:	00150325 	move	$r5,$r25
9000000008003acc:	00150364 	move	$r4,$r27
9000000008003ad0:	57f9bfff 	bl	-1604(0xffff9bc) # 900000000800348c <vmunmap>
      return 0;
9000000008003ad4:	00150004 	move	$r4,$r0
9000000008003ad8:	53ff77ff 	b	-140(0xfffff74) # 9000000008003a4c <uvmalloc+0xdc>
    return oldsz;
9000000008003adc:	001500c4 	move	$r4,$r6
}
9000000008003ae0:	4c000020 	jirl	$r0,$r1,0
  return newsz;
9000000008003ae4:	001500e4 	move	$r4,$r7
9000000008003ae8:	53ff67ff 	b	-156(0xfffff64) # 9000000008003a4c <uvmalloc+0xdc>

9000000008003aec <freewalk>:

// Recursively free page-table pages.
// All leaf mappings must already have been removed.
void freewalk(pagetable_t pagetable) {
9000000008003aec:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008003af0:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008003af4:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008003af8:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008003afc:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008003b00:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008003b04:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008003b08:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008003b0c:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008003b10:	0015009b 	move	$r27,$r4
  // there are 2^9 = 512 PTEs in a page table.
  for (int i = 0; i < 512; i++) {
9000000008003b14:	00150097 	move	$r23,$r4
9000000008003b18:	14000038 	lu12i.w	$r24,1(0x1)
9000000008003b1c:	0010e098 	add.d	$r24,$r4,$r24
    pte_t pte = pagetable[i];
    if ((pte & PTE_V) && PTE_FLAGS(pte) == PTE_V ) {
9000000008003b20:	02800419 	addi.w	$r25,$r0,1(0x1)
      // this PTE points to a lower-level page table.
      uint64 child = (PTE2PA(pte) | DMWIN_MASK);
9000000008003b24:	0324001a 	lu52i.d	$r26,$r0,-1792(0x900)
9000000008003b28:	50002400 	b	36(0x24) # 9000000008003b4c <freewalk+0x60>
9000000008003b2c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
9000000008003b30:	161fffec 	lu32i.d	$r12,65535(0xffff)
9000000008003b34:	0014b084 	and	$r4,$r4,$r12
      freewalk((pagetable_t)child);
9000000008003b38:	00156884 	or	$r4,$r4,$r26
9000000008003b3c:	57ffb3ff 	bl	-80(0xfffffb0) # 9000000008003aec <freewalk>
      pagetable[i] = 0;
9000000008003b40:	29c002e0 	st.d	$r0,$r23,0
9000000008003b44:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (int i = 0; i < 512; i++) {
9000000008003b48:	58001ef8 	beq	$r23,$r24,28(0x1c) # 9000000008003b64 <freewalk+0x78>
    pte_t pte = pagetable[i];
9000000008003b4c:	28c002e4 	ld.d	$r4,$r23,0
    if ((pte & PTE_V) && PTE_FLAGS(pte) == PTE_V ) {
9000000008003b50:	0287fc0c 	addi.w	$r12,$r0,511(0x1ff)
9000000008003b54:	0338018c 	lu52i.d	$r12,$r12,-512(0xe00)
9000000008003b58:	0014b08c 	and	$r12,$r4,$r12
9000000008003b5c:	5fffe999 	bne	$r12,$r25,-24(0x3ffe8) # 9000000008003b44 <freewalk+0x58>
9000000008003b60:	53ffcfff 	b	-52(0xfffffcc) # 9000000008003b2c <freewalk+0x40>
    } else if (pte & PTE_V) {
      // panic("freewalk: leaf");
      continue;
    }
  }
  kfree((void *)pagetable);
9000000008003b64:	00150364 	move	$r4,$r27
9000000008003b68:	57f1dbff 	bl	-3624(0xffff1d8) # 9000000008002d40 <kfree>
}
9000000008003b6c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008003b70:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008003b74:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008003b78:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008003b7c:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008003b80:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008003b84:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008003b88:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008003b8c:	4c000020 	jirl	$r0,$r1,0

9000000008003b90 <uvmfree>:

// Free user memory pages,
// then free page-table pages.
// 用户内存和页表
void uvmfree(pagetable_t pagetable, uint64 sz) {
9000000008003b90:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008003b94:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008003b98:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008003b9c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008003ba0:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008003ba4:	00150097 	move	$r23,$r4
  if (sz > 0)
9000000008003ba8:	440020a0 	bnez	$r5,32(0x20) # 9000000008003bc8 <uvmfree+0x38>
    vmunmap(pagetable, 0, PGROUNDUP(sz) / PGSIZE, 1);
  freewalk(pagetable);
9000000008003bac:	001502e4 	move	$r4,$r23
9000000008003bb0:	57ff3fff 	bl	-196(0xfffff3c) # 9000000008003aec <freewalk>
}
9000000008003bb4:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008003bb8:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008003bbc:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008003bc0:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008003bc4:	4c000020 	jirl	$r0,$r1,0
    vmunmap(pagetable, 0, PGROUNDUP(sz) / PGSIZE, 1);
9000000008003bc8:	03bffc06 	ori	$r6,$r0,0xfff
9000000008003bcc:	001098a6 	add.d	$r6,$r5,$r6
9000000008003bd0:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008003bd4:	004530c6 	srli.d	$r6,$r6,0xc
9000000008003bd8:	00150005 	move	$r5,$r0
9000000008003bdc:	57f8b3ff 	bl	-1872(0xffff8b0) # 900000000800348c <vmunmap>
9000000008003be0:	53ffcfff 	b	-52(0xfffffcc) # 9000000008003bac <uvmfree+0x1c>

9000000008003be4 <uvmcopy>:
  pte_t *pte;
  uint64 pa, i = 0, ki = 0;
  uint flags;
  char *mem;

  while (i < sz) {
9000000008003be4:	400178e0 	beqz	$r7,376(0x178) # 9000000008003d5c <uvmcopy+0x178>
int uvmcopy(pagetable_t old, pagetable_t new, pagetable_t knew, uint64 sz) {
9000000008003be8:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
9000000008003bec:	29c1a061 	st.d	$r1,$r3,104(0x68)
9000000008003bf0:	29c18076 	st.d	$r22,$r3,96(0x60)
9000000008003bf4:	29c16077 	st.d	$r23,$r3,88(0x58)
9000000008003bf8:	29c14078 	st.d	$r24,$r3,80(0x50)
9000000008003bfc:	29c12079 	st.d	$r25,$r3,72(0x48)
9000000008003c00:	29c1007a 	st.d	$r26,$r3,64(0x40)
9000000008003c04:	29c0e07b 	st.d	$r27,$r3,56(0x38)
9000000008003c08:	29c0c07c 	st.d	$r28,$r3,48(0x30)
9000000008003c0c:	29c0a07d 	st.d	$r29,$r3,40(0x28)
9000000008003c10:	29c0807e 	st.d	$r30,$r3,32(0x20)
9000000008003c14:	29c0607f 	st.d	$r31,$r3,24(0x18)
9000000008003c18:	02c1c076 	addi.d	$r22,$r3,112(0x70)
9000000008003c1c:	001500fb 	move	$r27,$r7
9000000008003c20:	001500dc 	move	$r28,$r6
9000000008003c24:	001500ba 	move	$r26,$r5
9000000008003c28:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
  uint64 pa, i = 0, ki = 0;
9000000008003c2c:	00150018 	move	$r24,$r0
      panic("uvmcopy: page not present");
    pa = PTE2PA(*pte);
    flags = PTE_FLAGS(*pte);
    if ((mem = kalloc()) == NULL)
      goto err;
    memmove(mem, (char *)(pa | DMWIN_MASK), PGSIZE);
9000000008003c30:	0324001d 	lu52i.d	$r29,$r0,-1792(0x900)
      kfree(mem);
      goto err;
    }
    i += PGSIZE;
    // 试图在用户进程清理内核页表
    if (mappages(knew, ki, PGSIZE, (uint64)mem, flags & ~PTE_PLV) != 0) {
9000000008003c34:	02bfcc1e 	addi.w	$r30,$r0,-13(0xff3)
9000000008003c38:	50000800 	b	8(0x8) # 9000000008003c40 <uvmcopy+0x5c>
    i += PGSIZE;
9000000008003c3c:	001503f8 	move	$r24,$r31
    if ((pte = walk(old, i, 0)) == NULL)
9000000008003c40:	00150006 	move	$r6,$r0
9000000008003c44:	00150305 	move	$r5,$r24
9000000008003c48:	28fe62c4 	ld.d	$r4,$r22,-104(0xf98)
9000000008003c4c:	57f3dfff 	bl	-3108(0xffff3dc) # 9000000008003028 <walk>
9000000008003c50:	40008080 	beqz	$r4,128(0x80) # 9000000008003cd0 <uvmcopy+0xec>
    if ((*pte & PTE_V) == 0)
9000000008003c54:	28c00097 	ld.d	$r23,$r4,0
9000000008003c58:	034006ec 	andi	$r12,$r23,0x1
9000000008003c5c:	40008180 	beqz	$r12,128(0x80) # 9000000008003cdc <uvmcopy+0xf8>
    pa = PTE2PA(*pte);
9000000008003c60:	15ffffff 	lu12i.w	$r31,-1(0xfffff)
9000000008003c64:	161fffff 	lu32i.d	$r31,65535(0xffff)
9000000008003c68:	0014feff 	and	$r31,$r23,$r31
    flags = PTE_FLAGS(*pte);
9000000008003c6c:	0347fef7 	andi	$r23,$r23,0x1ff
    if ((mem = kalloc()) == NULL)
9000000008003c70:	57f263ff 	bl	-3488(0xffff260) # 9000000008002ed0 <kalloc>
9000000008003c74:	00150099 	move	$r25,$r4
9000000008003c78:	40008080 	beqz	$r4,128(0x80) # 9000000008003cf8 <uvmcopy+0x114>
    memmove(mem, (char *)(pa | DMWIN_MASK), PGSIZE);
9000000008003c7c:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003c80:	001577e5 	or	$r5,$r31,$r29
9000000008003c84:	57d38bff 	bl	-11384(0xfffd388) # 900000000800100c <memmove>
    if (mappages(new, i, PGSIZE, (uint64)mem, flags) != 0) {
9000000008003c88:	001502e8 	move	$r8,$r23
9000000008003c8c:	00150327 	move	$r7,$r25
9000000008003c90:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003c94:	00150305 	move	$r5,$r24
9000000008003c98:	00150344 	move	$r4,$r26
9000000008003c9c:	57f5dfff 	bl	-2596(0xffff5dc) # 9000000008003278 <mappages>
9000000008003ca0:	44004880 	bnez	$r4,72(0x48) # 9000000008003ce8 <uvmcopy+0x104>
    i += PGSIZE;
9000000008003ca4:	1400003f 	lu12i.w	$r31,1(0x1)
9000000008003ca8:	0010ff1f 	add.d	$r31,$r24,$r31
    if (mappages(knew, ki, PGSIZE, (uint64)mem, flags & ~PTE_PLV) != 0) {
9000000008003cac:	0014fae8 	and	$r8,$r23,$r30
9000000008003cb0:	00150327 	move	$r7,$r25
9000000008003cb4:	14000026 	lu12i.w	$r6,1(0x1)
9000000008003cb8:	00150305 	move	$r5,$r24
9000000008003cbc:	00150384 	move	$r4,$r28
9000000008003cc0:	57f5bbff 	bl	-2632(0xffff5b8) # 9000000008003278 <mappages>
9000000008003cc4:	44003880 	bnez	$r4,56(0x38) # 9000000008003cfc <uvmcopy+0x118>
  while (i < sz) {
9000000008003cc8:	6bff77fb 	bltu	$r31,$r27,-140(0x3ff74) # 9000000008003c3c <uvmcopy+0x58>
9000000008003ccc:	50005c00 	b	92(0x5c) # 9000000008003d28 <uvmcopy+0x144>
      panic("uvmcopy: pte should exist");
9000000008003cd0:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008003cd4:	02dfc084 	addi.d	$r4,$r4,2032(0x7f0)
9000000008003cd8:	57c52fff 	bl	-15060(0xfffc52c) # 9000000008000204 <panic>
      panic("uvmcopy: page not present");
9000000008003cdc:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008003ce0:	02e01084 	addi.d	$r4,$r4,-2044(0x804)
9000000008003ce4:	57c523ff 	bl	-15072(0xfffc520) # 9000000008000204 <panic>
      kfree(mem);
9000000008003ce8:	00150324 	move	$r4,$r25
9000000008003cec:	57f057ff 	bl	-4012(0xffff054) # 9000000008002d40 <kfree>
      goto err;
9000000008003cf0:	0015031f 	move	$r31,$r24
9000000008003cf4:	50000800 	b	8(0x8) # 9000000008003cfc <uvmcopy+0x118>
9000000008003cf8:	0015031f 	move	$r31,$r24
    ki += PGSIZE;
  }
  return 0;

err:
  vmunmap(knew, 0, ki / PGSIZE, 0);
9000000008003cfc:	00150007 	move	$r7,$r0
9000000008003d00:	00453306 	srli.d	$r6,$r24,0xc
9000000008003d04:	00150005 	move	$r5,$r0
9000000008003d08:	00150384 	move	$r4,$r28
9000000008003d0c:	57f783ff 	bl	-2176(0xffff780) # 900000000800348c <vmunmap>
  vmunmap(new, 0, i / PGSIZE, 1);
9000000008003d10:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008003d14:	004533e6 	srli.d	$r6,$r31,0xc
9000000008003d18:	00150005 	move	$r5,$r0
9000000008003d1c:	00150344 	move	$r4,$r26
9000000008003d20:	57f76fff 	bl	-2196(0xffff76c) # 900000000800348c <vmunmap>
  return -1;
9000000008003d24:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008003d28:	28c1a061 	ld.d	$r1,$r3,104(0x68)
9000000008003d2c:	28c18076 	ld.d	$r22,$r3,96(0x60)
9000000008003d30:	28c16077 	ld.d	$r23,$r3,88(0x58)
9000000008003d34:	28c14078 	ld.d	$r24,$r3,80(0x50)
9000000008003d38:	28c12079 	ld.d	$r25,$r3,72(0x48)
9000000008003d3c:	28c1007a 	ld.d	$r26,$r3,64(0x40)
9000000008003d40:	28c0e07b 	ld.d	$r27,$r3,56(0x38)
9000000008003d44:	28c0c07c 	ld.d	$r28,$r3,48(0x30)
9000000008003d48:	28c0a07d 	ld.d	$r29,$r3,40(0x28)
9000000008003d4c:	28c0807e 	ld.d	$r30,$r3,32(0x20)
9000000008003d50:	28c0607f 	ld.d	$r31,$r3,24(0x18)
9000000008003d54:	02c1c063 	addi.d	$r3,$r3,112(0x70)
9000000008003d58:	4c000020 	jirl	$r0,$r1,0
  return 0;
9000000008003d5c:	00150004 	move	$r4,$r0
}
9000000008003d60:	4c000020 	jirl	$r0,$r1,0

9000000008003d64 <uvmclear>:

// mark a PTE invalid for user access.
// used by exec for the user stack guard page.
void uvmclear(pagetable_t pagetable, uint64 va) {
9000000008003d64:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008003d68:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008003d6c:	29c00076 	st.d	$r22,$r3,0
9000000008003d70:	02c04076 	addi.d	$r22,$r3,16(0x10)
  pte_t *pte;

  pte = walk(pagetable, va, 0);
9000000008003d74:	00150006 	move	$r6,$r0
9000000008003d78:	57f2b3ff 	bl	-3408(0xffff2b0) # 9000000008003028 <walk>
  if (pte == NULL)
9000000008003d7c:	40002480 	beqz	$r4,36(0x24) # 9000000008003da0 <uvmclear+0x3c>
    panic("uvmclear");
  *pte &= ~PTE_PLV;
9000000008003d80:	28c0008c 	ld.d	$r12,$r4,0
9000000008003d84:	02bfcc0d 	addi.w	$r13,$r0,-13(0xff3)
9000000008003d88:	0014b58c 	and	$r12,$r12,$r13
9000000008003d8c:	29c0008c 	st.d	$r12,$r4,0
}
9000000008003d90:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008003d94:	28c00076 	ld.d	$r22,$r3,0
9000000008003d98:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008003d9c:	4c000020 	jirl	$r0,$r1,0
    panic("uvmclear");
9000000008003da0:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008003da4:	02dd8084 	addi.d	$r4,$r4,1888(0x760)
9000000008003da8:	57c45fff 	bl	-15268(0xfffc45c) # 9000000008000204 <panic>

9000000008003dac <copyout_zero>:

// 向指定的用户地址输出长度为len的0值
int copyout_zero(pagetable_t pagetable, uint64 dstva, uint64 len) {
  uint64 n, va0, pa0;

  while (len > 0) {
9000000008003dac:	4000a4c0 	beqz	$r6,164(0xa4) # 9000000008003e50 <copyout_zero+0xa4>
int copyout_zero(pagetable_t pagetable, uint64 dstva, uint64 len) {
9000000008003db0:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000008003db4:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008003db8:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000008003dbc:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008003dc0:	29c0c078 	st.d	$r24,$r3,48(0x30)
9000000008003dc4:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008003dc8:	29c0807a 	st.d	$r26,$r3,32(0x20)
9000000008003dcc:	29c0607b 	st.d	$r27,$r3,24(0x18)
9000000008003dd0:	29c0407c 	st.d	$r28,$r3,16(0x10)
9000000008003dd4:	29c0207d 	st.d	$r29,$r3,8(0x8)
9000000008003dd8:	29c0007e 	st.d	$r30,$r3,0
9000000008003ddc:	02c14076 	addi.d	$r22,$r3,80(0x50)
9000000008003de0:	0015009b 	move	$r27,$r4
9000000008003de4:	001500be 	move	$r30,$r5
9000000008003de8:	001500d8 	move	$r24,$r6
    va0 = PGROUNDDOWN(dstva);
9000000008003dec:	15fffffc 	lu12i.w	$r28,-1(0xfffff)
    pa0 = walkaddr(pagetable, va0);
    if (pa0 == NULL)
      return -1;
    n = PGSIZE - (dstva - va0);
9000000008003df0:	1400003a 	lu12i.w	$r26,1(0x1)
    if (n > len)
      n = len;

    memmove((void *)((pa0 + (dstva - va0)) | DMWIN_MASK), 0, n);
9000000008003df4:	0324001d 	lu52i.d	$r29,$r0,-1792(0x900)
    va0 = PGROUNDDOWN(dstva);
9000000008003df8:	0014f3d9 	and	$r25,$r30,$r28
    pa0 = walkaddr(pagetable, va0);
9000000008003dfc:	00150325 	move	$r5,$r25
9000000008003e00:	00150364 	move	$r4,$r27
9000000008003e04:	57f31fff 	bl	-3300(0xffff31c) # 9000000008003120 <walkaddr>
    if (pa0 == NULL)
9000000008003e08:	40005080 	beqz	$r4,80(0x50) # 9000000008003e58 <copyout_zero+0xac>
    n = PGSIZE - (dstva - va0);
9000000008003e0c:	0011fb37 	sub.d	$r23,$r25,$r30
9000000008003e10:	0010eaf7 	add.d	$r23,$r23,$r26
    if (n > len)
9000000008003e14:	0012df0c 	sltu	$r12,$r24,$r23
9000000008003e18:	0013b2f7 	masknez	$r23,$r23,$r12
9000000008003e1c:	0013330c 	maskeqz	$r12,$r24,$r12
9000000008003e20:	001532f7 	or	$r23,$r23,$r12
    memmove((void *)((pa0 + (dstva - va0)) | DMWIN_MASK), 0, n);
9000000008003e24:	004082e6 	slli.w	$r6,$r23,0x0
9000000008003e28:	0010f884 	add.d	$r4,$r4,$r30
9000000008003e2c:	0011e484 	sub.d	$r4,$r4,$r25
9000000008003e30:	00150005 	move	$r5,$r0
9000000008003e34:	00157484 	or	$r4,$r4,$r29
9000000008003e38:	57d1d7ff 	bl	-11820(0xfffd1d4) # 900000000800100c <memmove>

    len -= n;
9000000008003e3c:	0011df18 	sub.d	$r24,$r24,$r23
    dstva = va0 + PGSIZE;
9000000008003e40:	0010eb3e 	add.d	$r30,$r25,$r26
  while (len > 0) {
9000000008003e44:	47ffb71f 	bnez	$r24,-76(0x7fffb4) # 9000000008003df8 <copyout_zero+0x4c>
  }
  return 0;
9000000008003e48:	00150004 	move	$r4,$r0
9000000008003e4c:	50001000 	b	16(0x10) # 9000000008003e5c <copyout_zero+0xb0>
9000000008003e50:	00150004 	move	$r4,$r0
}
9000000008003e54:	4c000020 	jirl	$r0,$r1,0
      return -1;
9000000008003e58:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008003e5c:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000008003e60:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000008003e64:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008003e68:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008003e6c:	28c0a079 	ld.d	$r25,$r3,40(0x28)
9000000008003e70:	28c0807a 	ld.d	$r26,$r3,32(0x20)
9000000008003e74:	28c0607b 	ld.d	$r27,$r3,24(0x18)
9000000008003e78:	28c0407c 	ld.d	$r28,$r3,16(0x10)
9000000008003e7c:	28c0207d 	ld.d	$r29,$r3,8(0x8)
9000000008003e80:	28c0007e 	ld.d	$r30,$r3,0
9000000008003e84:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008003e88:	4c000020 	jirl	$r0,$r1,0

9000000008003e8c <copyout>:
// Copy len bytes from src to virtual address dstva in a given page table.
// Return 0 on success, -1 on error.
int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
  uint64 n, va0, pa0;

  while (len > 0) {
9000000008003e8c:	4000b0e0 	beqz	$r7,176(0xb0) # 9000000008003f3c <copyout+0xb0>
int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
9000000008003e90:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000008003e94:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008003e98:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008003e9c:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008003ea0:	29c10078 	st.d	$r24,$r3,64(0x40)
9000000008003ea4:	29c0e079 	st.d	$r25,$r3,56(0x38)
9000000008003ea8:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008003eac:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008003eb0:	29c0807c 	st.d	$r28,$r3,32(0x20)
9000000008003eb4:	29c0607d 	st.d	$r29,$r3,24(0x18)
9000000008003eb8:	29c0407e 	st.d	$r30,$r3,16(0x10)
9000000008003ebc:	29c0207f 	st.d	$r31,$r3,8(0x8)
9000000008003ec0:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000008003ec4:	0015009d 	move	$r29,$r4
9000000008003ec8:	001500ba 	move	$r26,$r5
9000000008003ecc:	001500db 	move	$r27,$r6
9000000008003ed0:	001500f8 	move	$r24,$r7
    va0 = PGROUNDDOWN(dstva);
9000000008003ed4:	15fffffe 	lu12i.w	$r30,-1(0xfffff)
    pa0 = walkaddr(pagetable, va0);
    if (pa0 == NULL)
      return -1;
    n = PGSIZE - (dstva - va0);
9000000008003ed8:	1400003c 	lu12i.w	$r28,1(0x1)
    if (n > len)
      n = len;
    memmove((void *)((pa0 + (dstva - va0)) | DMWIN_MASK), src, n);
9000000008003edc:	0324001f 	lu52i.d	$r31,$r0,-1792(0x900)
    va0 = PGROUNDDOWN(dstva);
9000000008003ee0:	0014fb59 	and	$r25,$r26,$r30
    pa0 = walkaddr(pagetable, va0);
9000000008003ee4:	00150325 	move	$r5,$r25
9000000008003ee8:	001503a4 	move	$r4,$r29
9000000008003eec:	57f237ff 	bl	-3532(0xffff234) # 9000000008003120 <walkaddr>
    if (pa0 == NULL)
9000000008003ef0:	40005480 	beqz	$r4,84(0x54) # 9000000008003f44 <copyout+0xb8>
    n = PGSIZE - (dstva - va0);
9000000008003ef4:	0011eb37 	sub.d	$r23,$r25,$r26
9000000008003ef8:	0010f2f7 	add.d	$r23,$r23,$r28
    if (n > len)
9000000008003efc:	0012df0c 	sltu	$r12,$r24,$r23
9000000008003f00:	0013b2f7 	masknez	$r23,$r23,$r12
9000000008003f04:	0013330c 	maskeqz	$r12,$r24,$r12
9000000008003f08:	001532f7 	or	$r23,$r23,$r12
    memmove((void *)((pa0 + (dstva - va0)) | DMWIN_MASK), src, n);
9000000008003f0c:	004082e6 	slli.w	$r6,$r23,0x0
9000000008003f10:	0010e884 	add.d	$r4,$r4,$r26
9000000008003f14:	0011e484 	sub.d	$r4,$r4,$r25
9000000008003f18:	00150365 	move	$r5,$r27
9000000008003f1c:	00157c84 	or	$r4,$r4,$r31
9000000008003f20:	57d0efff 	bl	-12052(0xfffd0ec) # 900000000800100c <memmove>

    len -= n;
9000000008003f24:	0011df18 	sub.d	$r24,$r24,$r23
    src += n;
9000000008003f28:	0010df7b 	add.d	$r27,$r27,$r23
    dstva = va0 + PGSIZE;
9000000008003f2c:	0010f33a 	add.d	$r26,$r25,$r28
  while (len > 0) {
9000000008003f30:	47ffb31f 	bnez	$r24,-80(0x7fffb0) # 9000000008003ee0 <copyout+0x54>
  }
  return 0;
9000000008003f34:	00150004 	move	$r4,$r0
9000000008003f38:	50001000 	b	16(0x10) # 9000000008003f48 <copyout+0xbc>
9000000008003f3c:	00150004 	move	$r4,$r0
}
9000000008003f40:	4c000020 	jirl	$r0,$r1,0
      return -1;
9000000008003f44:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008003f48:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000008003f4c:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000008003f50:	28c12077 	ld.d	$r23,$r3,72(0x48)
9000000008003f54:	28c10078 	ld.d	$r24,$r3,64(0x40)
9000000008003f58:	28c0e079 	ld.d	$r25,$r3,56(0x38)
9000000008003f5c:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
9000000008003f60:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
9000000008003f64:	28c0807c 	ld.d	$r28,$r3,32(0x20)
9000000008003f68:	28c0607d 	ld.d	$r29,$r3,24(0x18)
9000000008003f6c:	28c0407e 	ld.d	$r30,$r3,16(0x10)
9000000008003f70:	28c0207f 	ld.d	$r31,$r3,8(0x8)
9000000008003f74:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000008003f78:	4c000020 	jirl	$r0,$r1,0

9000000008003f7c <copyout2>:

int copyout2(uint64 dstva, char *src, uint64 len) {
9000000008003f7c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008003f80:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008003f84:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008003f88:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008003f8c:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008003f90:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008003f94:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008003f98:	00150098 	move	$r24,$r4
9000000008003f9c:	001500b9 	move	$r25,$r5
9000000008003fa0:	001500d7 	move	$r23,$r6
  uint64 sz = myproc()->sz;
9000000008003fa4:	57d787ff 	bl	-10364(0xfffd784) # 9000000008001728 <myproc>
9000000008003fa8:	28c1608c 	ld.d	$r12,$r4,88(0x58)
  if (dstva + len > sz || dstva >= sz) {
9000000008003fac:	0010df0d 	add.d	$r13,$r24,$r23
9000000008003fb0:	6800398d 	bltu	$r12,$r13,56(0x38) # 9000000008003fe8 <copyout2+0x6c>
9000000008003fb4:	6c003f0c 	bgeu	$r24,$r12,60(0x3c) # 9000000008003ff0 <copyout2+0x74>
    return -1;
  }
  memmove((void *)dstva, src, len);
9000000008003fb8:	004082e6 	slli.w	$r6,$r23,0x0
9000000008003fbc:	00150325 	move	$r5,$r25
9000000008003fc0:	00150304 	move	$r4,$r24
9000000008003fc4:	57d04bff 	bl	-12216(0xfffd048) # 900000000800100c <memmove>
  return 0;
9000000008003fc8:	00150004 	move	$r4,$r0
}
9000000008003fcc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008003fd0:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008003fd4:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008003fd8:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008003fdc:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008003fe0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008003fe4:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008003fe8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008003fec:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008003fcc <copyout2+0x50>
9000000008003ff0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008003ff4:	53ffdbff 	b	-40(0xfffffd8) # 9000000008003fcc <copyout2+0x50>

9000000008003ff8 <copyin>:
// Copy len bytes to dst from virtual address srcva in a given page table.
// Return 0 on success, -1 on error.
int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
  uint64 n, va0, pa0;

  while (len > 0) {
9000000008003ff8:	4000f4e0 	beqz	$r7,244(0xf4) # 90000000080040ec <copyin+0xf4>
int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
9000000008003ffc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000008004000:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008004004:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008004008:	29c12077 	st.d	$r23,$r3,72(0x48)
900000000800400c:	29c10078 	st.d	$r24,$r3,64(0x40)
9000000008004010:	29c0e079 	st.d	$r25,$r3,56(0x38)
9000000008004014:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008004018:	29c0a07b 	st.d	$r27,$r3,40(0x28)
900000000800401c:	29c0807c 	st.d	$r28,$r3,32(0x20)
9000000008004020:	29c0607d 	st.d	$r29,$r3,24(0x18)
9000000008004024:	29c0407e 	st.d	$r30,$r3,16(0x10)
9000000008004028:	29c0207f 	st.d	$r31,$r3,8(0x8)
900000000800402c:	02c18076 	addi.d	$r22,$r3,96(0x60)
9000000008004030:	0015009d 	move	$r29,$r4
9000000008004034:	001500bb 	move	$r27,$r5
9000000008004038:	001500da 	move	$r26,$r6
900000000800403c:	001500f8 	move	$r24,$r7
    va0 = PGROUNDDOWN(srcva);
9000000008004040:	15fffffe 	lu12i.w	$r30,-1(0xfffff)
    pa0 = walkaddr(pagetable, va0);
    if (pa0 == NULL) {
      printf("copyin: pa0 is NULL\n");
      return -1;
    }
    n = PGSIZE - (srcva - va0);
9000000008004044:	1400003c 	lu12i.w	$r28,1(0x1)
    if (n > len)
      n = len;
    memmove(dst, (void *)((pa0 + (srcva - va0)) | DMWIN_MASK), n);
9000000008004048:	0324001f 	lu52i.d	$r31,$r0,-1792(0x900)
    va0 = PGROUNDDOWN(srcva);
900000000800404c:	0014fb59 	and	$r25,$r26,$r30
    pa0 = walkaddr(pagetable, va0);
9000000008004050:	00150325 	move	$r5,$r25
9000000008004054:	001503a4 	move	$r4,$r29
9000000008004058:	57f0cbff 	bl	-3896(0xffff0c8) # 9000000008003120 <walkaddr>
    if (pa0 == NULL) {
900000000800405c:	40004c80 	beqz	$r4,76(0x4c) # 90000000080040a8 <copyin+0xb0>
    n = PGSIZE - (srcva - va0);
9000000008004060:	0011eb37 	sub.d	$r23,$r25,$r26
9000000008004064:	0010f2f7 	add.d	$r23,$r23,$r28
    if (n > len)
9000000008004068:	0012df0c 	sltu	$r12,$r24,$r23
900000000800406c:	0013b2f7 	masknez	$r23,$r23,$r12
9000000008004070:	0013330c 	maskeqz	$r12,$r24,$r12
9000000008004074:	001532f7 	or	$r23,$r23,$r12
    memmove(dst, (void *)((pa0 + (srcva - va0)) | DMWIN_MASK), n);
9000000008004078:	004082e6 	slli.w	$r6,$r23,0x0
900000000800407c:	0010e884 	add.d	$r4,$r4,$r26
9000000008004080:	0011e485 	sub.d	$r5,$r4,$r25
9000000008004084:	00157ca5 	or	$r5,$r5,$r31
9000000008004088:	00150364 	move	$r4,$r27
900000000800408c:	57cf83ff 	bl	-12416(0xfffcf80) # 900000000800100c <memmove>

    len -= n;
9000000008004090:	0011df18 	sub.d	$r24,$r24,$r23
    dst += n;
9000000008004094:	0010df7b 	add.d	$r27,$r27,$r23
    srcva = va0 + PGSIZE;
9000000008004098:	0010f33a 	add.d	$r26,$r25,$r28
  while (len > 0) {
900000000800409c:	47ffb31f 	bnez	$r24,-80(0x7fffb0) # 900000000800404c <copyin+0x54>
  }
  return 0;
90000000080040a0:	00150004 	move	$r4,$r0
90000000080040a4:	50001400 	b	20(0x14) # 90000000080040b8 <copyin+0xc0>
      printf("copyin: pa0 is NULL\n");
90000000080040a8:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000080040ac:	02d1a084 	addi.d	$r4,$r4,1128(0x468)
90000000080040b0:	57c1c7ff 	bl	-15932(0xfffc1c4) # 9000000008000274 <printf>
      return -1;
90000000080040b4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
90000000080040b8:	28c16061 	ld.d	$r1,$r3,88(0x58)
90000000080040bc:	28c14076 	ld.d	$r22,$r3,80(0x50)
90000000080040c0:	28c12077 	ld.d	$r23,$r3,72(0x48)
90000000080040c4:	28c10078 	ld.d	$r24,$r3,64(0x40)
90000000080040c8:	28c0e079 	ld.d	$r25,$r3,56(0x38)
90000000080040cc:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
90000000080040d0:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
90000000080040d4:	28c0807c 	ld.d	$r28,$r3,32(0x20)
90000000080040d8:	28c0607d 	ld.d	$r29,$r3,24(0x18)
90000000080040dc:	28c0407e 	ld.d	$r30,$r3,16(0x10)
90000000080040e0:	28c0207f 	ld.d	$r31,$r3,8(0x8)
90000000080040e4:	02c18063 	addi.d	$r3,$r3,96(0x60)
90000000080040e8:	4c000020 	jirl	$r0,$r1,0
  return 0;
90000000080040ec:	00150004 	move	$r4,$r0
}
90000000080040f0:	4c000020 	jirl	$r0,$r1,0

90000000080040f4 <copyin2>:

// used by proc
int copyin2(char *dst, uint64 srcva, uint64 len) {
90000000080040f4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080040f8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080040fc:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008004100:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008004104:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008004108:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800410c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008004110:	00150099 	move	$r25,$r4
9000000008004114:	001500b8 	move	$r24,$r5
9000000008004118:	001500d7 	move	$r23,$r6
  uint64 sz = myproc()->sz;
900000000800411c:	57d60fff 	bl	-10740(0xfffd60c) # 9000000008001728 <myproc>
9000000008004120:	28c1608c 	ld.d	$r12,$r4,88(0x58)
  if (srcva + len > sz || srcva >= sz) {
9000000008004124:	0010df0d 	add.d	$r13,$r24,$r23
9000000008004128:	6800398d 	bltu	$r12,$r13,56(0x38) # 9000000008004160 <copyin2+0x6c>
900000000800412c:	6c003f0c 	bgeu	$r24,$r12,60(0x3c) # 9000000008004168 <copyin2+0x74>
    return -1;
  }
  memmove(dst, (void *)srcva, len);
9000000008004130:	004082e6 	slli.w	$r6,$r23,0x0
9000000008004134:	00150305 	move	$r5,$r24
9000000008004138:	00150324 	move	$r4,$r25
900000000800413c:	57ced3ff 	bl	-12592(0xfffced0) # 900000000800100c <memmove>
  return 0;
9000000008004140:	00150004 	move	$r4,$r0
}
9000000008004144:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008004148:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800414c:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008004150:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008004154:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008004158:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800415c:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008004160:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008004164:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008004144 <copyin2+0x50>
9000000008004168:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800416c:	53ffdbff 	b	-40(0xfffffd8) # 9000000008004144 <copyin2+0x50>

9000000008004170 <copyinstr>:

int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
  uint64 n, va0, pa0;
  int got_null = 0;

  while (got_null == 0 && max > 0) {
9000000008004170:	40013ce0 	beqz	$r7,316(0x13c) # 90000000080042ac <copyinstr+0x13c>
int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
9000000008004174:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000008004178:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000800417c:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008004180:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008004184:	29c10078 	st.d	$r24,$r3,64(0x40)
9000000008004188:	29c0e079 	st.d	$r25,$r3,56(0x38)
900000000800418c:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008004190:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008004194:	29c0807c 	st.d	$r28,$r3,32(0x20)
9000000008004198:	29c0607d 	st.d	$r29,$r3,24(0x18)
900000000800419c:	29c0407e 	st.d	$r30,$r3,16(0x10)
90000000080041a0:	29c0207f 	st.d	$r31,$r3,8(0x8)
90000000080041a4:	02c18076 	addi.d	$r22,$r3,96(0x60)
90000000080041a8:	0015009c 	move	$r28,$r4
90000000080041ac:	001500b7 	move	$r23,$r5
90000000080041b0:	001500df 	move	$r31,$r6
90000000080041b4:	001500f8 	move	$r24,$r7
    va0 = PGROUNDDOWN(srcva);
90000000080041b8:	15fffffb 	lu12i.w	$r27,-1(0xfffff)
    pa0 = walkaddr(pagetable, va0);
    if (pa0 == NULL)
      return -1;
    n = PGSIZE - (srcva - va0);
90000000080041bc:	1400003a 	lu12i.w	$r26,1(0x1)
    if (n > max)
      n = max;

    char *p = (char *) ((pa0 + (srcva - va0)) | DMWIN_MASK);
90000000080041c0:	0324001d 	lu52i.d	$r29,$r0,-1792(0x900)
90000000080041c4:	0280041e 	addi.w	$r30,$r0,1(0x1)
90000000080041c8:	50001800 	b	24(0x18) # 90000000080041e0 <copyinstr+0x70>
    while (n > 0) {
      if (*p == '\0') {
90000000080041cc:	001502ec 	move	$r12,$r23
90000000080041d0:	50008800 	b	136(0x88) # 9000000008004258 <copyinstr+0xe8>
        *dst = *p;
      }
      --n;
      --max;
      p++;
      dst++;
90000000080041d4:	001501d7 	move	$r23,$r14
    }

    srcva = va0 + PGSIZE;
90000000080041d8:	0010eb3f 	add.d	$r31,$r25,$r26
  while (got_null == 0 && max > 0) {
90000000080041dc:	4000c300 	beqz	$r24,192(0xc0) # 900000000800429c <copyinstr+0x12c>
    va0 = PGROUNDDOWN(srcva);
90000000080041e0:	0014eff9 	and	$r25,$r31,$r27
    pa0 = walkaddr(pagetable, va0);
90000000080041e4:	00150325 	move	$r5,$r25
90000000080041e8:	00150384 	move	$r4,$r28
90000000080041ec:	57ef37ff 	bl	-4300(0xfffef34) # 9000000008003120 <walkaddr>
    if (pa0 == NULL)
90000000080041f0:	4000b480 	beqz	$r4,180(0xb4) # 90000000080042a4 <copyinstr+0x134>
    n = PGSIZE - (srcva - va0);
90000000080041f4:	0011ff2c 	sub.d	$r12,$r25,$r31
90000000080041f8:	0010e98c 	add.d	$r12,$r12,$r26
    if (n > max)
90000000080041fc:	0012b30d 	sltu	$r13,$r24,$r12
9000000008004200:	0013b58e 	masknez	$r14,$r12,$r13
9000000008004204:	0013370d 	maskeqz	$r13,$r24,$r13
9000000008004208:	001535ce 	or	$r14,$r14,$r13
    char *p = (char *) ((pa0 + (srcva - va0)) | DMWIN_MASK);
900000000800420c:	0010fc84 	add.d	$r4,$r4,$r31
9000000008004210:	0011e484 	sub.d	$r4,$r4,$r25
9000000008004214:	00157484 	or	$r4,$r4,$r29
    while (n > 0) {
9000000008004218:	43ffc1df 	beqz	$r14,-64(0x7fffc0) # 90000000080041d8 <copyinstr+0x68>
      if (*p == '\0') {
900000000800421c:	2800008d 	ld.b	$r13,$r4,0
9000000008004220:	43ffadbf 	beqz	$r13,-84(0x7fffac) # 90000000080041cc <copyinstr+0x5c>
9000000008004224:	0010baee 	add.d	$r14,$r23,$r14
9000000008004228:	001502ec 	move	$r12,$r23
900000000800422c:	02ffff18 	addi.d	$r24,$r24,-1(0xfff)
9000000008004230:	0010df0f 	add.d	$r15,$r24,$r23
9000000008004234:	0011dfd7 	sub.d	$r23,$r30,$r23
9000000008004238:	001092f7 	add.d	$r23,$r23,$r4
        *dst = *p;
900000000800423c:	2900018d 	st.b	$r13,$r12,0
      --max;
9000000008004240:	0011b1f8 	sub.d	$r24,$r15,$r12
      p++;
9000000008004244:	0010b2ed 	add.d	$r13,$r23,$r12
      dst++;
9000000008004248:	02c0058c 	addi.d	$r12,$r12,1(0x1)
    while (n > 0) {
900000000800424c:	5bff89cc 	beq	$r14,$r12,-120(0x3ff88) # 90000000080041d4 <copyinstr+0x64>
      if (*p == '\0') {
9000000008004250:	280001ad 	ld.b	$r13,$r13,0
9000000008004254:	47ffe9bf 	bnez	$r13,-24(0x7fffe8) # 900000000800423c <copyinstr+0xcc>
        *dst = '\0';
9000000008004258:	29000180 	st.b	$r0,$r12,0
900000000800425c:	0280040c 	addi.w	$r12,$r0,1(0x1)
  }
  if (got_null) {
9000000008004260:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000008004264:	0011b004 	sub.d	$r4,$r0,$r12
    return 0;
  } else {
    return -1;
  }
}
9000000008004268:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000800426c:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000008004270:	28c12077 	ld.d	$r23,$r3,72(0x48)
9000000008004274:	28c10078 	ld.d	$r24,$r3,64(0x40)
9000000008004278:	28c0e079 	ld.d	$r25,$r3,56(0x38)
900000000800427c:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
9000000008004280:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
9000000008004284:	28c0807c 	ld.d	$r28,$r3,32(0x20)
9000000008004288:	28c0607d 	ld.d	$r29,$r3,24(0x18)
900000000800428c:	28c0407e 	ld.d	$r30,$r3,16(0x10)
9000000008004290:	28c0207f 	ld.d	$r31,$r3,8(0x8)
9000000008004294:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000008004298:	4c000020 	jirl	$r0,$r1,0
900000000800429c:	0015000c 	move	$r12,$r0
90000000080042a0:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008004260 <copyinstr+0xf0>
      return -1;
90000000080042a4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080042a8:	53ffc3ff 	b	-64(0xfffffc0) # 9000000008004268 <copyinstr+0xf8>
  int got_null = 0;
90000000080042ac:	0015000c 	move	$r12,$r0
  if (got_null) {
90000000080042b0:	0240058c 	sltui	$r12,$r12,1(0x1)
90000000080042b4:	0011b004 	sub.d	$r4,$r0,$r12
}
90000000080042b8:	4c000020 	jirl	$r0,$r1,0

90000000080042bc <copyinstr2>:

int copyinstr2(char *dst, uint64 srcva, uint64 max) {
90000000080042bc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080042c0:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080042c4:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080042c8:	29c06077 	st.d	$r23,$r3,24(0x18)
90000000080042cc:	29c04078 	st.d	$r24,$r3,16(0x10)
90000000080042d0:	29c02079 	st.d	$r25,$r3,8(0x8)
90000000080042d4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
90000000080042d8:	00150099 	move	$r25,$r4
90000000080042dc:	001500b7 	move	$r23,$r5
90000000080042e0:	001500d8 	move	$r24,$r6
  int got_null = 0;
  uint64 sz = myproc()->sz;
90000000080042e4:	57d447ff 	bl	-11196(0xfffd444) # 9000000008001728 <myproc>
90000000080042e8:	28c1608e 	ld.d	$r14,$r4,88(0x58)
  while (srcva < sz && max > 0) {
90000000080042ec:	6c006eee 	bgeu	$r23,$r14,108(0x6c) # 9000000008004358 <copyinstr2+0x9c>
90000000080042f0:	40007300 	beqz	$r24,112(0x70) # 9000000008004360 <copyinstr2+0xa4>
    char *p = (char *)srcva;
    if (*p == '\0') {
90000000080042f4:	280002ed 	ld.b	$r13,$r23,0
90000000080042f8:	0011ddce 	sub.d	$r14,$r14,$r23
90000000080042fc:	0010bb2e 	add.d	$r14,$r25,$r14
9000000008004300:	0010e326 	add.d	$r6,$r25,$r24
9000000008004304:	0015032c 	move	$r12,$r25
9000000008004308:	0011e6e4 	sub.d	$r4,$r23,$r25
900000000800430c:	400021a0 	beqz	$r13,32(0x20) # 900000000800432c <copyinstr2+0x70>
      *dst = '\0';
      got_null = 1;
      break;
    } else {
      *dst = *p;
9000000008004310:	2900018d 	st.b	$r13,$r12,0
    }
    --max;
    srcva++;
    dst++;
9000000008004314:	02c0058c 	addi.d	$r12,$r12,1(0x1)
  while (srcva < sz && max > 0) {
9000000008004318:	580051cc 	beq	$r14,$r12,80(0x50) # 9000000008004368 <copyinstr2+0xac>
900000000800431c:	58003586 	beq	$r12,$r6,52(0x34) # 9000000008004350 <copyinstr2+0x94>
    if (*p == '\0') {
9000000008004320:	0010918d 	add.d	$r13,$r12,$r4
9000000008004324:	280001ad 	ld.b	$r13,$r13,0
9000000008004328:	47ffe9bf 	bnez	$r13,-24(0x7fffe8) # 9000000008004310 <copyinstr2+0x54>
      *dst = '\0';
900000000800432c:	29000180 	st.b	$r0,$r12,0
  }
  if (got_null) {
    return 0;
9000000008004330:	00150004 	move	$r4,$r0
  } else {
    return -1;
  }
}
9000000008004334:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008004338:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800433c:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008004340:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008004344:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008004348:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800434c:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008004350:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008004354:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008004334 <copyinstr2+0x78>
9000000008004358:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800435c:	53ffdbff 	b	-40(0xfffffd8) # 9000000008004334 <copyinstr2+0x78>
9000000008004360:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008004364:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008004334 <copyinstr2+0x78>
9000000008004368:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800436c:	53ffcbff 	b	-56(0xfffffc8) # 9000000008004334 <copyinstr2+0x78>

9000000008004370 <kfreewalk>:
  kvmfree(kpt, 1, p);
  return NULL;
}

// only free page table, not physical pages
void kfreewalk(pagetable_t kpt) {
9000000008004370:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008004374:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008004378:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800437c:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008004380:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008004384:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008004388:	29c0007a 	st.d	$r26,$r3,0
900000000800438c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008004390:	0015009a 	move	$r26,$r4
  for (int i = 0; i < 512; i++) {
9000000008004394:	00150097 	move	$r23,$r4
9000000008004398:	14000038 	lu12i.w	$r24,1(0x1)
900000000800439c:	0010e098 	add.d	$r24,$r4,$r24
    pte_t pte = kpt[i];
    if ((pte & PTE_V) && (pte & (PTE_MAT | PTE_W | PTE_P)) == 0) {
90000000080043a0:	02800419 	addi.w	$r25,$r0,1(0x1)
90000000080043a4:	50002000 	b	32(0x20) # 90000000080043c4 <kfreewalk+0x54>
      kfreewalk((pagetable_t)PTE2PA(pte));
90000000080043a8:	15ffffe4 	lu12i.w	$r4,-1(0xfffff)
90000000080043ac:	161fffe4 	lu32i.d	$r4,65535(0xffff)
90000000080043b0:	00149184 	and	$r4,$r12,$r4
90000000080043b4:	57ffbfff 	bl	-68(0xfffffbc) # 9000000008004370 <kfreewalk>
      kpt[i] = 0;
90000000080043b8:	29c002e0 	st.d	$r0,$r23,0
90000000080043bc:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (int i = 0; i < 512; i++) {
90000000080043c0:	58001af8 	beq	$r23,$r24,24(0x18) # 90000000080043d8 <kfreewalk+0x68>
    pte_t pte = kpt[i];
90000000080043c4:	28c002ec 	ld.d	$r12,$r23,0
    if ((pte & PTE_V) && (pte & (PTE_MAT | PTE_W | PTE_P)) == 0) {
90000000080043c8:	0346458d 	andi	$r13,$r12,0x191
90000000080043cc:	5bffddb9 	beq	$r13,$r25,-36(0x3ffdc) # 90000000080043a8 <kfreewalk+0x38>
    } else if (pte & PTE_V) {
90000000080043d0:	0340058c 	andi	$r12,$r12,0x1
90000000080043d4:	43ffe99f 	beqz	$r12,-24(0x7fffe8) # 90000000080043bc <kfreewalk+0x4c>
      break;
    }
  }
  kfree((void *)kpt);
90000000080043d8:	00150344 	move	$r4,$r26
90000000080043dc:	57e967ff 	bl	-5788(0xfffe964) # 9000000008002d40 <kfree>
}
90000000080043e0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080043e4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080043e8:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080043ec:	28c04078 	ld.d	$r24,$r3,16(0x10)
90000000080043f0:	28c02079 	ld.d	$r25,$r3,8(0x8)
90000000080043f4:	28c0007a 	ld.d	$r26,$r3,0
90000000080043f8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080043fc:	4c000020 	jirl	$r0,$r1,0

9000000008004400 <kvmfreeusr>:

void kvmfreeusr(pagetable_t kpt) {
9000000008004400:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008004404:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008004408:	02c04076 	addi.d	$r22,$r3,16(0x10)
    if ((pte & PTE_V) && (pte & (PTE_MAT | PTE_W | PTE_P)) == 0) {
      kfreewalk((pagetable_t)PTE2PA(pte));
      kpt[i] = 0;
    }
  }
}
900000000800440c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008004410:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008004414:	4c000020 	jirl	$r0,$r1,0

9000000008004418 <kvmfree>:

void kvmfree(pagetable_t kpt, int stack_free, struct proc *p) {
9000000008004418:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800441c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004420:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004424:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008004428:	29c00078 	st.d	$r24,$r3,0
900000000800442c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008004430:	00150098 	move	$r24,$r4
  // if (stack_free && tcpip_pagetable == NULL) {
    if(stack_free) {
9000000008004434:	440024a0 	bnez	$r5,36(0x24) # 9000000008004458 <kvmfree+0x40>
    //     kfreewalk((pagetable_t) PTE2PA(pte));
    //   }
    // }
  }
  kvmfreeusr(kpt);
  kfree(kpt);
9000000008004438:	00150304 	move	$r4,$r24
900000000800443c:	57e907ff 	bl	-5884(0xfffe904) # 9000000008002d40 <kfree>
}
9000000008004440:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004444:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008004448:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800444c:	28c00078 	ld.d	$r24,$r3,0
9000000008004450:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008004454:	4c000020 	jirl	$r0,$r1,0
    uint64 procaddrnum = get_proc_addr_num(p);
9000000008004458:	001500c4 	move	$r4,$r6
900000000800445c:	57e2efff 	bl	-7444(0xfffe2ec) # 9000000008002748 <get_proc_addr_num>
    uint64 prockstack = PROCVKSTACK(procaddrnum);
9000000008004460:	02c00484 	addi.d	$r4,$r4,1(0x1)
9000000008004464:	0280c80c 	addi.w	$r12,$r0,50(0x32)
9000000008004468:	0023b097 	mod.du	$r23,$r4,$r12
900000000800446c:	5c000980 	bne	$r12,$r0,8(0x8) # 9000000008004474 <kvmfree+0x5c>
9000000008004470:	002a0007 	break	0x7
9000000008004474:	15ffff0c 	lu12i.w	$r12,-8(0xffff8)
9000000008004478:	001db2f7 	mul.d	$r23,$r23,$r12
900000000800447c:	15800045 	lu12i.w	$r5,-262142(0xc0002)
9000000008004480:	160007c5 	lu32i.d	$r5,62(0x3e)
    vmunmap(kpt, prockstack, KSTACKSIZE / PGSIZE, 1);
9000000008004484:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008004488:	02801806 	addi.w	$r6,$r0,6(0x6)
900000000800448c:	001096e5 	add.d	$r5,$r23,$r5
9000000008004490:	00150304 	move	$r4,$r24
9000000008004494:	57effbff 	bl	-4104(0xfffeff8) # 900000000800348c <vmunmap>
    pte_t pte = kpt[PX(2, prockstack - PGSIZE)];
9000000008004498:	1580002c 	lu12i.w	$r12,-262143(0xc0001)
900000000800449c:	160007cc 	lu32i.d	$r12,62(0x3e)
90000000080044a0:	0010b2f7 	add.d	$r23,$r23,$r12
90000000080044a4:	00457af7 	srli.d	$r23,$r23,0x1e
90000000080044a8:	002d62f7 	alsl.d	$r23,$r23,$r24,0x3
90000000080044ac:	28c002ec 	ld.d	$r12,$r23,0
    if ((pte & PTE_V) && (pte & (PTE_P | PTE_W | PTE_MAT)) == 0) {
90000000080044b0:	0346458e 	andi	$r14,$r12,0x191
90000000080044b4:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000080044b8:	5fff81cd 	bne	$r14,$r13,-128(0x3ff80) # 9000000008004438 <kvmfree+0x20>
      kfreewalk((pagetable_t)PTE2PA(pte));
90000000080044bc:	15ffffe4 	lu12i.w	$r4,-1(0xfffff)
90000000080044c0:	161fffe4 	lu32i.d	$r4,65535(0xffff)
90000000080044c4:	00149184 	and	$r4,$r12,$r4
90000000080044c8:	57feabff 	bl	-344(0xffffea8) # 9000000008004370 <kfreewalk>
90000000080044cc:	53ff6fff 	b	-148(0xfffff6c) # 9000000008004438 <kvmfree+0x20>

90000000080044d0 <proc_kpagetable>:
pagetable_t proc_kpagetable(struct proc *p) {
90000000080044d0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000080044d4:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000080044d8:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000080044dc:	29c0a077 	st.d	$r23,$r3,40(0x28)
90000000080044e0:	29c08078 	st.d	$r24,$r3,32(0x20)
90000000080044e4:	29c06079 	st.d	$r25,$r3,24(0x18)
90000000080044e8:	29c0407a 	st.d	$r26,$r3,16(0x10)
90000000080044ec:	29c0207b 	st.d	$r27,$r3,8(0x8)
90000000080044f0:	29c0007c 	st.d	$r28,$r3,0
90000000080044f4:	02c10076 	addi.d	$r22,$r3,64(0x40)
90000000080044f8:	0015009c 	move	$r28,$r4
  pagetable_t kpt = (pagetable_t)kalloc();
90000000080044fc:	57e9d7ff 	bl	-5676(0xfffe9d4) # 9000000008002ed0 <kalloc>
9000000008004500:	00150099 	move	$r25,$r4
  if (kpt == NULL)
9000000008004504:	40009480 	beqz	$r4,148(0x94) # 9000000008004598 <proc_kpagetable+0xc8>
    memmove(kpt, kernel_pagetable, PGSIZE);
9000000008004508:	14000026 	lu12i.w	$r6,1(0x1)
900000000800450c:	1c000a0c 	pcaddu12i	$r12,80(0x50)
9000000008004510:	02c5b18c 	addi.d	$r12,$r12,364(0x16c)
9000000008004514:	28c00185 	ld.d	$r5,$r12,0
9000000008004518:	57caf7ff 	bl	-13580(0xfffcaf4) # 900000000800100c <memmove>
  int procaddrnum = get_proc_addr_num(p);
900000000800451c:	00150384 	move	$r4,$r28
9000000008004520:	57e22bff 	bl	-7640(0xfffe228) # 9000000008002748 <get_proc_addr_num>
  uint64 start = PROCVKSTACK(procaddrnum);
9000000008004524:	02800484 	addi.w	$r4,$r4,1(0x1)
9000000008004528:	0280c80c 	addi.w	$r12,$r0,50(0x32)
900000000800452c:	0020b09a 	mod.w	$r26,$r4,$r12
9000000008004530:	5c000980 	bne	$r12,$r0,8(0x8) # 9000000008004538 <proc_kpagetable+0x68>
9000000008004534:	002a0007 	break	0x7
9000000008004538:	0040bf5a 	slli.w	$r26,$r26,0xf
900000000800453c:	1580004c 	lu12i.w	$r12,-262142(0xc0002)
9000000008004540:	160007cc 	lu32i.d	$r12,62(0x3e)
9000000008004544:	0011e99a 	sub.d	$r26,$r12,$r26
  uint64 end = start + KSTACKSIZE;
9000000008004548:	140000db 	lu12i.w	$r27,6(0x6)
900000000800454c:	0010ef5b 	add.d	$r27,$r26,$r27
  for (a = start; a < end; a += PGSIZE) {
9000000008004550:	6c004b5b 	bgeu	$r26,$r27,72(0x48) # 9000000008004598 <proc_kpagetable+0xc8>
9000000008004554:	00150357 	move	$r23,$r26
    mem = kalloc();
9000000008004558:	57e97bff 	bl	-5768(0xfffe978) # 9000000008002ed0 <kalloc>
900000000800455c:	00150098 	move	$r24,$r4
    if (mem == NULL) {
9000000008004560:	40006480 	beqz	$r4,100(0x64) # 90000000080045c4 <proc_kpagetable+0xf4>
    memset(mem, 0, PGSIZE);
9000000008004564:	14000026 	lu12i.w	$r6,1(0x1)
9000000008004568:	00150005 	move	$r5,$r0
900000000800456c:	57c9fbff 	bl	-13832(0xfffc9f8) # 9000000008000f64 <memset>
    if (mappages(kpt, a, PGSIZE, (uint64)mem, PTE_P | PTE_W) != 0) {
9000000008004570:	02860008 	addi.w	$r8,$r0,384(0x180)
9000000008004574:	00150307 	move	$r7,$r24
9000000008004578:	14000026 	lu12i.w	$r6,1(0x1)
900000000800457c:	001502e5 	move	$r5,$r23
9000000008004580:	00150324 	move	$r4,$r25
9000000008004584:	57ecf7ff 	bl	-4876(0xfffecf4) # 9000000008003278 <mappages>
9000000008004588:	44007880 	bnez	$r4,120(0x78) # 9000000008004600 <proc_kpagetable+0x130>
  for (a = start; a < end; a += PGSIZE) {
900000000800458c:	1400002c 	lu12i.w	$r12,1(0x1)
9000000008004590:	0010b2f7 	add.d	$r23,$r23,$r12
9000000008004594:	6bffc6fb 	bltu	$r23,$r27,-60(0x3ffc4) # 9000000008004558 <proc_kpagetable+0x88>
}
9000000008004598:	00150324 	move	$r4,$r25
900000000800459c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000080045a0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000080045a4:	28c0a077 	ld.d	$r23,$r3,40(0x28)
90000000080045a8:	28c08078 	ld.d	$r24,$r3,32(0x20)
90000000080045ac:	28c06079 	ld.d	$r25,$r3,24(0x18)
90000000080045b0:	28c0407a 	ld.d	$r26,$r3,16(0x10)
90000000080045b4:	28c0207b 	ld.d	$r27,$r3,8(0x8)
90000000080045b8:	28c0007c 	ld.d	$r28,$r3,0
90000000080045bc:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000080045c0:	4c000020 	jirl	$r0,$r1,0
      vmunmap(kpt, start, (a - start) / PGSIZE, 1);
90000000080045c4:	0011eae6 	sub.d	$r6,$r23,$r26
90000000080045c8:	02800407 	addi.w	$r7,$r0,1(0x1)
90000000080045cc:	004530c6 	srli.d	$r6,$r6,0xc
90000000080045d0:	00150345 	move	$r5,$r26
90000000080045d4:	00150324 	move	$r4,$r25
90000000080045d8:	57eeb7ff 	bl	-4428(0xfffeeb4) # 900000000800348c <vmunmap>
      printf("kpagetable kalloc failed\n");
90000000080045dc:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000080045e0:	02fd3084 	addi.d	$r4,$r4,-180(0xf4c)
90000000080045e4:	57bc93ff 	bl	-17264(0xfffbc90) # 9000000008000274 <printf>
  kvmfree(kpt, 1, p);
90000000080045e8:	00150386 	move	$r6,$r28
90000000080045ec:	02800405 	addi.w	$r5,$r0,1(0x1)
90000000080045f0:	00150324 	move	$r4,$r25
90000000080045f4:	57fe27ff 	bl	-476(0xffffe24) # 9000000008004418 <kvmfree>
  return NULL;
90000000080045f8:	00150019 	move	$r25,$r0
90000000080045fc:	53ff9fff 	b	-100(0xfffff9c) # 9000000008004598 <proc_kpagetable+0xc8>
      kfree(mem);
9000000008004600:	00150304 	move	$r4,$r24
9000000008004604:	57e73fff 	bl	-6340(0xfffe73c) # 9000000008002d40 <kfree>
      vmunmap(kpt, start, (a - start) / PGSIZE, 1);
9000000008004608:	0011eae6 	sub.d	$r6,$r23,$r26
900000000800460c:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008004610:	004530c6 	srli.d	$r6,$r6,0xc
9000000008004614:	00150345 	move	$r5,$r26
9000000008004618:	00150324 	move	$r4,$r25
900000000800461c:	57ee73ff 	bl	-4496(0xfffee70) # 900000000800348c <vmunmap>
      printf("[kpagetable]map page failed\n");
9000000008004620:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008004624:	02fca084 	addi.d	$r4,$r4,-216(0xf28)
9000000008004628:	57bc4fff 	bl	-17332(0xfffbc4c) # 9000000008000274 <printf>
      goto fail;
900000000800462c:	53ffbfff 	b	-68(0xfffffbc) # 90000000080045e8 <proc_kpagetable+0x118>

9000000008004630 <experm>:
// 在给定的页表，为指定的虚拟地址设置权限
uint64 experm(pagetable_t pagetable, uint64 va, uint64 perm) {
  pte_t *pte;
  uint64 pa;

  if (va >= MAXVA)
9000000008004630:	1400200c 	lu12i.w	$r12,256(0x100)
9000000008004634:	68000cac 	bltu	$r5,$r12,12(0xc) # 9000000008004640 <experm+0x10>
    return NULL;
9000000008004638:	00150004 	move	$r4,$r0
  if ((*pte & PTE_PLV) == 0)
    return NULL;
  *pte |= perm;
  pa = PTE2PA(*pte);
  return pa;
}
900000000800463c:	4c000020 	jirl	$r0,$r1,0
uint64 experm(pagetable_t pagetable, uint64 va, uint64 perm) {
9000000008004640:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004644:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004648:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800464c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008004650:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008004654:	001500d7 	move	$r23,$r6
  pte = walk(pagetable, va, 0);
9000000008004658:	00150006 	move	$r6,$r0
900000000800465c:	57e9cfff 	bl	-5684(0xfffe9cc) # 9000000008003028 <walk>
9000000008004660:	0015008c 	move	$r12,$r4
    return NULL;
9000000008004664:	00150004 	move	$r4,$r0
  if (pte == 0)
9000000008004668:	40002d80 	beqz	$r12,44(0x2c) # 9000000008004694 <experm+0x64>
  if ((*pte & PTE_V) == 0)
900000000800466c:	28c00186 	ld.d	$r6,$r12,0
9000000008004670:	034004c4 	andi	$r4,$r6,0x1
9000000008004674:	40002080 	beqz	$r4,32(0x20) # 9000000008004694 <experm+0x64>
  if ((*pte & PTE_PLV) == 0)
9000000008004678:	034030c4 	andi	$r4,$r6,0xc
900000000800467c:	40001880 	beqz	$r4,24(0x18) # 9000000008004694 <experm+0x64>
  *pte |= perm;
9000000008004680:	00155cc6 	or	$r6,$r6,$r23
9000000008004684:	29c00186 	st.d	$r6,$r12,0
  pa = PTE2PA(*pte);
9000000008004688:	15ffffe4 	lu12i.w	$r4,-1(0xfffff)
900000000800468c:	161fffe4 	lu32i.d	$r4,65535(0xffff)
9000000008004690:	001490c4 	and	$r4,$r6,$r4
}
9000000008004694:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004698:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800469c:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080046a0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080046a4:	4c000020 	jirl	$r0,$r1,0

90000000080046a8 <swtch>:
90000000080046a8:	29c00081 	st.d	$r1,$r4,0
90000000080046ac:	29c02083 	st.d	$r3,$r4,8(0x8)
90000000080046b0:	29c04097 	st.d	$r23,$r4,16(0x10)
90000000080046b4:	29c06098 	st.d	$r24,$r4,24(0x18)
90000000080046b8:	29c08099 	st.d	$r25,$r4,32(0x20)
90000000080046bc:	29c0a09a 	st.d	$r26,$r4,40(0x28)
90000000080046c0:	29c0c09b 	st.d	$r27,$r4,48(0x30)
90000000080046c4:	29c0e09c 	st.d	$r28,$r4,56(0x38)
90000000080046c8:	29c1009d 	st.d	$r29,$r4,64(0x40)
90000000080046cc:	29c1209e 	st.d	$r30,$r4,72(0x48)
90000000080046d0:	29c1409f 	st.d	$r31,$r4,80(0x50)
90000000080046d4:	29c16096 	st.d	$r22,$r4,88(0x58)
90000000080046d8:	28c000a1 	ld.d	$r1,$r5,0
90000000080046dc:	28c020a3 	ld.d	$r3,$r5,8(0x8)
90000000080046e0:	28c040b7 	ld.d	$r23,$r5,16(0x10)
90000000080046e4:	28c060b8 	ld.d	$r24,$r5,24(0x18)
90000000080046e8:	28c080b9 	ld.d	$r25,$r5,32(0x20)
90000000080046ec:	28c0a0ba 	ld.d	$r26,$r5,40(0x28)
90000000080046f0:	28c0c0bb 	ld.d	$r27,$r5,48(0x30)
90000000080046f4:	28c0e0bc 	ld.d	$r28,$r5,56(0x38)
90000000080046f8:	28c100bd 	ld.d	$r29,$r5,64(0x40)
90000000080046fc:	28c120be 	ld.d	$r30,$r5,72(0x48)
9000000008004700:	28c140bf 	ld.d	$r31,$r5,80(0x50)
9000000008004704:	28c160b6 	ld.d	$r22,$r5,88(0x58)
9000000008004708:	4c000020 	jirl	$r0,$r1,0

900000000800470c <apic_init>:



void
apic_init(void)
{
900000000800470c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008004710:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008004714:	02c04076 	addi.d	$r22,$r3,16(0x10)
  *(volatile uint64*)(LS7A_INT_MASK_REG) = ~(0x1UL << UART0_IRQ);
9000000008004718:	1420000c 	lu12i.w	$r12,65536(0x10000)
900000000800471c:	0380818d 	ori	$r13,$r12,0x20
9000000008004720:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
9000000008004724:	02bfec0e 	addi.w	$r14,$r0,-5(0xffb)
9000000008004728:	29c001ae 	st.d	$r14,$r13,0

  *(volatile uint64*)(LS7A_INT_EDGE_REG) = (0x1UL << UART0_IRQ);
900000000800472c:	0381818d 	ori	$r13,$r12,0x60
9000000008004730:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
9000000008004734:	0280100e 	addi.w	$r14,$r0,4(0x4)
9000000008004738:	29c001ae 	st.d	$r14,$r13,0

  *(volatile uint8*)(LS7A_INT_HTMSI_VEC_REG + UART0_IRQ) = UART0_IRQ;
900000000800473c:	0388098d 	ori	$r13,$r12,0x202
9000000008004740:	032401ad 	lu52i.d	$r13,$r13,-1792(0x900)
9000000008004744:	0280080e 	addi.w	$r14,$r0,2(0x2)
9000000008004748:	290001ae 	st.b	$r14,$r13,0

  *(volatile uint64*)(LS7A_INT_POL_REG) = 0x0UL;
900000000800474c:	038f818c 	ori	$r12,$r12,0x3e0
9000000008004750:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
9000000008004754:	29c00180 	st.d	$r0,$r12,0

}
9000000008004758:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800475c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008004760:	4c000020 	jirl	$r0,$r1,0

9000000008004764 <apic_complete>:

// tell the apic we've served this IRQ.
void
apic_complete(uint64 irq)
{
9000000008004764:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008004768:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800476c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  *(volatile uint64*)(LS7A_INT_CLEAR_REG) = (irq);
9000000008004770:	1420000c 	lu12i.w	$r12,65536(0x10000)
9000000008004774:	0382018c 	ori	$r12,$r12,0x80
9000000008004778:	0324018c 	lu52i.d	$r12,$r12,-1792(0x900)
900000000800477c:	29c00184 	st.d	$r4,$r12,0
}
9000000008004780:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008004784:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008004788:	4c000020 	jirl	$r0,$r1,0

900000000800478c <init_ring_buffer>:
    yield(); // give up CPU
  }
  return 0;
}

void init_ring_buffer(struct ring_buffer *rbuf) {
900000000800478c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004790:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004794:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004798:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800479c:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080047a0:	00150097 	move	$r23,$r4
  // there is always one byte which should not be read or written
  // memset(rbuf, 0, sizeof(struct ring_buffer)); /* head = tail = 0 */
  memset(rbuf, 0, RING_BUFFER_SIZE); /* head = tail = 0 */
90000000080047a4:	03bffc06 	ori	$r6,$r0,0xfff
90000000080047a8:	00150005 	move	$r5,$r0
90000000080047ac:	57c7bbff 	bl	-14408(0xfffc7b8) # 9000000008000f64 <memset>
  rbuf->size = RING_BUFFER_SIZE;
90000000080047b0:	03bffc0c 	ori	$r12,$r0,0xfff
90000000080047b4:	298002ec 	st.w	$r12,$r23,0
  // WH ADD
  // rbuf->buf = kmalloc(PAGE_SIZE);
  initlock(&ring_buffer_lock, "ring_buffer_lock");
90000000080047b8:	1c000225 	pcaddu12i	$r5,17(0x11)
90000000080047bc:	02f6c0a5 	addi.d	$r5,$r5,-592(0xdb0)
90000000080047c0:	1c000a04 	pcaddu12i	$r4,80(0x50)
90000000080047c4:	02fb0084 	addi.d	$r4,$r4,-320(0xec0)
90000000080047c8:	57c67fff 	bl	-14724(0xfffc67c) # 9000000008000e44 <initlock>
  return;
}
90000000080047cc:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080047d0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080047d4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080047d8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080047dc:	4c000020 	jirl	$r0,$r1,0

90000000080047e0 <ring_buffer_used>:
// 占用大小
int ring_buffer_used(struct ring_buffer *rbuf) {
90000000080047e0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080047e4:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080047e8:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return (rbuf->tail - rbuf->head + rbuf->size) % (rbuf->size);
90000000080047ec:	2880008d 	ld.w	$r13,$r4,0
90000000080047f0:	2880208c 	ld.w	$r12,$r4,8(0x8)
90000000080047f4:	2880108e 	ld.w	$r14,$r4,4(0x4)
90000000080047f8:	0011398c 	sub.w	$r12,$r12,$r14
90000000080047fc:	0010358c 	add.w	$r12,$r12,$r13
9000000008004800:	0021b584 	mod.wu	$r4,$r12,$r13
9000000008004804:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800480c <ring_buffer_used+0x2c>
9000000008004808:	002a0007 	break	0x7
}
900000000800480c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008004810:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008004814:	4c000020 	jirl	$r0,$r1,0

9000000008004818 <ring_buffer_free>:
//同样，Bool 函数
int ring_buffer_free(struct ring_buffer *rbuf) {
9000000008004818:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800481c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004820:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004824:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008004828:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800482c:	00150097 	move	$r23,$r4
  // let 1 byte to distinguish empty buffer and full buffer
  return rbuf->size - ring_buffer_used(rbuf) - 1;
9000000008004830:	57ffb3ff 	bl	-80(0xfffffb0) # 90000000080047e0 <ring_buffer_used>
9000000008004834:	288002ec 	ld.w	$r12,$r23,0
9000000008004838:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
}
900000000800483c:	00111184 	sub.w	$r4,$r12,$r4
9000000008004840:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004844:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008004848:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800484c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008004850:	4c000020 	jirl	$r0,$r1,0

9000000008004854 <ring_buffer_empty>:

int ring_buffer_empty(struct ring_buffer *rbuf) {
9000000008004854:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008004858:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800485c:	29c00076 	st.d	$r22,$r3,0
9000000008004860:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return ring_buffer_used(rbuf) == 0;
9000000008004864:	57ff7fff 	bl	-132(0xfffff7c) # 90000000080047e0 <ring_buffer_used>
}
9000000008004868:	02400484 	sltui	$r4,$r4,1(0x1)
900000000800486c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008004870:	28c00076 	ld.d	$r22,$r3,0
9000000008004874:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008004878:	4c000020 	jirl	$r0,$r1,0

900000000800487c <wait_ring_buffer_read>:
int wait_ring_buffer_read(struct ring_buffer *rbuf, time_t final_ticks) {
900000000800487c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004880:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004884:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004888:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800488c:	29c00078 	st.d	$r24,$r3,0
9000000008004890:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008004894:	00150097 	move	$r23,$r4
9000000008004898:	001500b8 	move	$r24,$r5
  while (ring_buffer_empty(rbuf)) {
900000000800489c:	001502e4 	move	$r4,$r23
90000000080048a0:	57ffb7ff 	bl	-76(0xfffffb4) # 9000000008004854 <ring_buffer_empty>
90000000080048a4:	40001880 	beqz	$r4,24(0x18) # 90000000080048bc <wait_ring_buffer_read+0x40>
  asm volatile(
90000000080048a8:	000069ac 	rdtime.d	$r12,$r13
    if (final_ticks < now_ticks)
90000000080048ac:	60000f0c 	blt	$r24,$r12,12(0xc) # 90000000080048b8 <wait_ring_buffer_read+0x3c>
    yield(); // give up CPU
90000000080048b0:	57d5e7ff 	bl	-10780(0xfffd5e4) # 9000000008001e94 <yield>
90000000080048b4:	53ffebff 	b	-24(0xfffffe8) # 900000000800489c <wait_ring_buffer_read+0x20>
      return 1;
90000000080048b8:	02800404 	addi.w	$r4,$r0,1(0x1)
}
90000000080048bc:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080048c0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080048c4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080048c8:	28c00078 	ld.d	$r24,$r3,0
90000000080048cc:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080048d0:	4c000020 	jirl	$r0,$r1,0

90000000080048d4 <ring_buffer_full>:

int ring_buffer_full(struct ring_buffer *rbuf) {
90000000080048d4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080048d8:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080048dc:	29c00076 	st.d	$r22,$r3,0
90000000080048e0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return ring_buffer_free(rbuf) == 0;
90000000080048e4:	57ff37ff 	bl	-204(0xfffff34) # 9000000008004818 <ring_buffer_free>
}
90000000080048e8:	02400484 	sltui	$r4,$r4,1(0x1)
90000000080048ec:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080048f0:	28c00076 	ld.d	$r22,$r3,0
90000000080048f4:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080048f8:	4c000020 	jirl	$r0,$r1,0

90000000080048fc <wait_ring_buffer_write>:
int wait_ring_buffer_write(struct ring_buffer *rbuf, time_t final_ticks) {
90000000080048fc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004900:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004904:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004908:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800490c:	29c00078 	st.d	$r24,$r3,0
9000000008004910:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008004914:	00150097 	move	$r23,$r4
9000000008004918:	001500b8 	move	$r24,$r5
  while (ring_buffer_full(rbuf)) {
900000000800491c:	001502e4 	move	$r4,$r23
9000000008004920:	57ffb7ff 	bl	-76(0xfffffb4) # 90000000080048d4 <ring_buffer_full>
9000000008004924:	40001880 	beqz	$r4,24(0x18) # 900000000800493c <wait_ring_buffer_write+0x40>
9000000008004928:	000069ac 	rdtime.d	$r12,$r13
    if (final_ticks < now_ticks)
900000000800492c:	60000f0c 	blt	$r24,$r12,12(0xc) # 9000000008004938 <wait_ring_buffer_write+0x3c>
    yield(); // give up CPU
9000000008004930:	57d567ff 	bl	-10908(0xfffd564) # 9000000008001e94 <yield>
9000000008004934:	53ffebff 	b	-24(0xfffffe8) # 900000000800491c <wait_ring_buffer_write+0x20>
      return 1;
9000000008004938:	02800404 	addi.w	$r4,$r0,1(0x1)
}
900000000800493c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004940:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008004944:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008004948:	28c00078 	ld.d	$r24,$r3,0
900000000800494c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008004950:	4c000020 	jirl	$r0,$r1,0

9000000008004954 <read_ring_buffer>:
#ifndef min
#define min(x, y) ((x) < (y) ? (x) : (y))
#endif

// buf是用户空间地址
uint read_ring_buffer(struct ring_buffer *rbuf, char *buf, uint size) {
9000000008004954:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008004958:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800495c:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008004960:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008004964:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008004968:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800496c:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008004970:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008004974:	29c0007c 	st.d	$r28,$r3,0
9000000008004978:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800497c:	00150098 	move	$r24,$r4
9000000008004980:	001500ba 	move	$r26,$r5
9000000008004984:	001500d9 	move	$r25,$r6
  acquire(&ring_buffer_lock);
9000000008004988:	1c000a04 	pcaddu12i	$r4,80(0x50)
900000000800498c:	02f3e084 	addi.d	$r4,$r4,-776(0xcf8)
9000000008004990:	57c523ff 	bl	-15072(0xfffc520) # 9000000008000eb0 <acquire>
  int len = min(ring_buffer_used(rbuf), size);
9000000008004994:	00150304 	move	$r4,$r24
9000000008004998:	57fe4bff 	bl	-440(0xffffe48) # 90000000080047e0 <ring_buffer_used>
900000000800499c:	0012e497 	sltu	$r23,$r4,$r25
90000000080049a0:	0013df39 	masknez	$r25,$r25,$r23
90000000080049a4:	00135c97 	maskeqz	$r23,$r4,$r23
90000000080049a8:	00155f37 	or	$r23,$r25,$r23
  if (len > 0) {
90000000080049ac:	6400cc17 	bge	$r0,$r23,204(0xcc) # 9000000008004a78 <read_ring_buffer+0x124>
    if (rbuf->head + len > rbuf->size) {
90000000080049b0:	28801319 	ld.w	$r25,$r24,4(0x4)
90000000080049b4:	2880030c 	ld.w	$r12,$r24,0
90000000080049b8:	00105f2d 	add.w	$r13,$r25,$r23
90000000080049bc:	6c00998d 	bgeu	$r12,$r13,152(0x98) # 9000000008004a54 <read_ring_buffer+0x100>
      int right = rbuf->size - rbuf->head, left = len - right;
90000000080049c0:	00116599 	sub.w	$r25,$r12,$r25
90000000080049c4:	001166fc 	sub.w	$r28,$r23,$r25
      // memcpy(buf, rbuf->buf + rbuf->head, right);
      copyout(myproc()->pagetable, (uint64)buf, rbuf->buf + rbuf->head, right);
90000000080049c8:	57cd63ff 	bl	-12960(0xfffcd60) # 9000000008001728 <myproc>
90000000080049cc:	02c0331b 	addi.d	$r27,$r24,12(0xc)
90000000080049d0:	28801306 	ld.w	$r6,$r24,4(0x4)
90000000080049d4:	00150327 	move	$r7,$r25
90000000080049d8:	00109b66 	add.d	$r6,$r27,$r6
90000000080049dc:	00150345 	move	$r5,$r26
90000000080049e0:	28c18084 	ld.d	$r4,$r4,96(0x60)
90000000080049e4:	57f4abff 	bl	-2904(0xffff4a8) # 9000000008003e8c <copyout>
      // memcpy(buf + right, rbuf->buf, left);
      copyout(myproc()->pagetable, (uint64)buf + right, rbuf->buf, left);
90000000080049e8:	57cd43ff 	bl	-12992(0xfffcd40) # 9000000008001728 <myproc>
90000000080049ec:	00150387 	move	$r7,$r28
90000000080049f0:	00150366 	move	$r6,$r27
90000000080049f4:	0010e745 	add.d	$r5,$r26,$r25
90000000080049f8:	28c18084 	ld.d	$r4,$r4,96(0x60)
90000000080049fc:	57f493ff 	bl	-2928(0xffff490) # 9000000008003e8c <copyout>
    } else {
      // memcpy(buf, rbuf->buf + rbuf->head, len);
      copyout(myproc()->pagetable, (uint64)buf, rbuf->buf + rbuf->head, len);
    }

    rbuf->head = (rbuf->head + len) % (rbuf->size);
9000000008004a00:	2880130c 	ld.w	$r12,$r24,4(0x4)
9000000008004a04:	00105d8c 	add.w	$r12,$r12,$r23
9000000008004a08:	2880030e 	ld.w	$r14,$r24,0
9000000008004a0c:	0021b98d 	mod.wu	$r13,$r12,$r14
9000000008004a10:	5c0009c0 	bne	$r14,$r0,8(0x8) # 9000000008004a18 <read_ring_buffer+0xc4>
9000000008004a14:	002a0007 	break	0x7
9000000008004a18:	2980130d 	st.w	$r13,$r24,4(0x4)
  } else if (len < 0)
    panic("read_ring_buffer: len < 0");
  release(&ring_buffer_lock);
9000000008004a1c:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004a20:	02f19084 	addi.d	$r4,$r4,-924(0xc64)
9000000008004a24:	57c4efff 	bl	-15124(0xfffc4ec) # 9000000008000f10 <release>
  return len;
}
9000000008004a28:	001502e4 	move	$r4,$r23
9000000008004a2c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008004a30:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008004a34:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008004a38:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008004a3c:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008004a40:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008004a44:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008004a48:	28c0007c 	ld.d	$r28,$r3,0
9000000008004a4c:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008004a50:	4c000020 	jirl	$r0,$r1,0
      copyout(myproc()->pagetable, (uint64)buf, rbuf->buf + rbuf->head, len);
9000000008004a54:	57ccd7ff 	bl	-13100(0xfffccd4) # 9000000008001728 <myproc>
9000000008004a58:	02c03306 	addi.d	$r6,$r24,12(0xc)
9000000008004a5c:	2880130c 	ld.w	$r12,$r24,4(0x4)
9000000008004a60:	001502e7 	move	$r7,$r23
9000000008004a64:	0010b0c6 	add.d	$r6,$r6,$r12
9000000008004a68:	00150345 	move	$r5,$r26
9000000008004a6c:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008004a70:	57f41fff 	bl	-3044(0xffff41c) # 9000000008003e8c <copyout>
9000000008004a74:	53ff8fff 	b	-116(0xfffff8c) # 9000000008004a00 <read_ring_buffer+0xac>
  } else if (len < 0)
9000000008004a78:	67ffa6e0 	bge	$r23,$r0,-92(0x3ffa4) # 9000000008004a1c <read_ring_buffer+0xc8>
    panic("read_ring_buffer: len < 0");
9000000008004a7c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008004a80:	02ec1084 	addi.d	$r4,$r4,-1276(0xb04)
9000000008004a84:	57b783ff 	bl	-18560(0xfffb780) # 9000000008000204 <panic>

9000000008004a88 <write_ring_buffer>:

// rbuf should have enough space for buf
// buf是用户空间地址
uint write_ring_buffer(struct ring_buffer *rbuf, char *buf, uint size) {
9000000008004a88:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008004a8c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008004a90:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008004a94:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008004a98:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008004a9c:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008004aa0:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008004aa4:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008004aa8:	29c0007c 	st.d	$r28,$r3,0
9000000008004aac:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008004ab0:	00150098 	move	$r24,$r4
9000000008004ab4:	001500ba 	move	$r26,$r5
9000000008004ab8:	001500d9 	move	$r25,$r6
  acquire(&ring_buffer_lock);
9000000008004abc:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004ac0:	02ef1084 	addi.d	$r4,$r4,-1084(0xbc4)
9000000008004ac4:	57c3efff 	bl	-15380(0xfffc3ec) # 9000000008000eb0 <acquire>
  int len = min(ring_buffer_free(rbuf), size);
9000000008004ac8:	00150304 	move	$r4,$r24
9000000008004acc:	57fd4fff 	bl	-692(0xffffd4c) # 9000000008004818 <ring_buffer_free>
9000000008004ad0:	0012e497 	sltu	$r23,$r4,$r25
9000000008004ad4:	0013df39 	masknez	$r25,$r25,$r23
9000000008004ad8:	00135c97 	maskeqz	$r23,$r4,$r23
9000000008004adc:	00155f37 	or	$r23,$r25,$r23
  if (len > 0) {
9000000008004ae0:	6400d017 	bge	$r0,$r23,208(0xd0) # 9000000008004bb0 <write_ring_buffer+0x128>
    // char tmp[RING_BUFFER_SIZE + 1];
    // memset(tmp, 0, RING_BUFFER_SIZE + 1);
    // copyin(myproc()->pagetable, tmp, (uint64)buf, len);
    // memcpy(tmp, buf, len);
    if (rbuf->tail + len > rbuf->size) {
9000000008004ae4:	28802319 	ld.w	$r25,$r24,8(0x8)
9000000008004ae8:	2880030c 	ld.w	$r12,$r24,0
9000000008004aec:	00105f2d 	add.w	$r13,$r25,$r23
9000000008004af0:	6c004d8d 	bgeu	$r12,$r13,76(0x4c) # 9000000008004b3c <write_ring_buffer+0xb4>
      int right = rbuf->size - rbuf->tail, left = len - right;
9000000008004af4:	00116599 	sub.w	$r25,$r12,$r25
9000000008004af8:	001166fc 	sub.w	$r28,$r23,$r25
      // memcpy(rbuf->buf + rbuf->tail, tmp, right);
      copyin(myproc()->pagetable, rbuf->buf + rbuf->tail, (uint64)buf, right);
9000000008004afc:	57cc2fff 	bl	-13268(0xfffcc2c) # 9000000008001728 <myproc>
9000000008004b00:	02c0331b 	addi.d	$r27,$r24,12(0xc)
9000000008004b04:	28802305 	ld.w	$r5,$r24,8(0x8)
9000000008004b08:	00150327 	move	$r7,$r25
9000000008004b0c:	00150346 	move	$r6,$r26
9000000008004b10:	00109765 	add.d	$r5,$r27,$r5
9000000008004b14:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008004b18:	57f4e3ff 	bl	-2848(0xffff4e0) # 9000000008003ff8 <copyin>
      if (left > 0)
9000000008004b1c:	6400401c 	bge	$r0,$r28,64(0x40) # 9000000008004b5c <write_ring_buffer+0xd4>
        // memcpy(rbuf->buf, tmp + right, left);
        copyin(myproc()->pagetable, rbuf->buf, (uint64)buf + right, left);
9000000008004b20:	57cc0bff 	bl	-13304(0xfffcc08) # 9000000008001728 <myproc>
9000000008004b24:	00150387 	move	$r7,$r28
9000000008004b28:	0010e746 	add.d	$r6,$r26,$r25
9000000008004b2c:	00150365 	move	$r5,$r27
9000000008004b30:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008004b34:	57f4c7ff 	bl	-2876(0xffff4c4) # 9000000008003ff8 <copyin>
9000000008004b38:	50002400 	b	36(0x24) # 9000000008004b5c <write_ring_buffer+0xd4>
    } else {
      // memcpy(rbuf->buf + rbuf->tail, tmp, len);
      copyin(myproc()->pagetable, rbuf->buf + rbuf->tail, (uint64)buf, len);
9000000008004b3c:	57cbefff 	bl	-13332(0xfffcbec) # 9000000008001728 <myproc>
9000000008004b40:	02c03305 	addi.d	$r5,$r24,12(0xc)
9000000008004b44:	2880230c 	ld.w	$r12,$r24,8(0x8)
9000000008004b48:	001502e7 	move	$r7,$r23
9000000008004b4c:	00150346 	move	$r6,$r26
9000000008004b50:	0010b0a5 	add.d	$r5,$r5,$r12
9000000008004b54:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008004b58:	57f4a3ff 	bl	-2912(0xffff4a0) # 9000000008003ff8 <copyin>
    }

    rbuf->tail = (rbuf->tail + len) % (rbuf->size);
9000000008004b5c:	2880230c 	ld.w	$r12,$r24,8(0x8)
9000000008004b60:	00105d8c 	add.w	$r12,$r12,$r23
9000000008004b64:	2880030e 	ld.w	$r14,$r24,0
9000000008004b68:	0021b98d 	mod.wu	$r13,$r12,$r14
9000000008004b6c:	5c0009c0 	bne	$r14,$r0,8(0x8) # 9000000008004b74 <write_ring_buffer+0xec>
9000000008004b70:	002a0007 	break	0x7
9000000008004b74:	2980230d 	st.w	$r13,$r24,8(0x8)
  } else if (len < 0)
    panic("read_ring_buffer: len < 0");
  release(&ring_buffer_lock);
9000000008004b78:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004b7c:	02ec2084 	addi.d	$r4,$r4,-1272(0xb08)
9000000008004b80:	57c393ff 	bl	-15472(0xfffc390) # 9000000008000f10 <release>
  return len;
}
9000000008004b84:	001502e4 	move	$r4,$r23
9000000008004b88:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008004b8c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008004b90:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008004b94:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008004b98:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008004b9c:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008004ba0:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008004ba4:	28c0007c 	ld.d	$r28,$r3,0
9000000008004ba8:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008004bac:	4c000020 	jirl	$r0,$r1,0
  } else if (len < 0)
9000000008004bb0:	67ffcae0 	bge	$r23,$r0,-56(0x3ffc8) # 9000000008004b78 <write_ring_buffer+0xf0>
    panic("read_ring_buffer: len < 0");
9000000008004bb4:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008004bb8:	02e73084 	addi.d	$r4,$r4,-1588(0x9cc)
9000000008004bbc:	57b64bff 	bl	-18872(0xfffb648) # 9000000008000204 <panic>

9000000008004bc0 <fileinit>:
    }
  }
  return hashvalue;
}

void fileinit(void) {
9000000008004bc0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004bc4:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004bc8:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004bcc:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008004bd0:	29c00078 	st.d	$r24,$r3,0
9000000008004bd4:	02c08076 	addi.d	$r22,$r3,32(0x20)
  initlock(&ftable.lock, "ftable");
9000000008004bd8:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008004bdc:	02e720a5 	addi.d	$r5,$r5,-1592(0x9c8)
9000000008004be0:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004be4:	02eae084 	addi.d	$r4,$r4,-1352(0xab8)
9000000008004be8:	57c25fff 	bl	-15780(0xfffc25c) # 9000000008000e44 <initlock>
  struct file *f;
  for (f = ftable.file; f < ftable.file + NFILE; f++) {
9000000008004bec:	1c000a17 	pcaddu12i	$r23,80(0x50)
9000000008004bf0:	02eab2f7 	addi.d	$r23,$r23,-1364(0xaac)
9000000008004bf4:	02c062f7 	addi.d	$r23,$r23,24(0x18)
9000000008004bf8:	1c000238 	pcaddu12i	$r24,17(0x11)
9000000008004bfc:	02eaa318 	addi.d	$r24,$r24,-1368(0xaa8)
    memset(f, 0, sizeof(struct file));
9000000008004c00:	02818006 	addi.w	$r6,$r0,96(0x60)
9000000008004c04:	00150005 	move	$r5,$r0
9000000008004c08:	001502e4 	move	$r4,$r23
9000000008004c0c:	57c35bff 	bl	-15528(0xfffc358) # 9000000008000f64 <memset>
  for (f = ftable.file; f < ftable.file + NFILE; f++) {
9000000008004c10:	02c182f7 	addi.d	$r23,$r23,96(0x60)
9000000008004c14:	28c0030c 	ld.d	$r12,$r24,0
9000000008004c18:	5fffeaec 	bne	$r23,$r12,-24(0x3ffe8) # 9000000008004c00 <fileinit+0x40>
  }
#ifdef DEBUG
  printf("fileinit\n");
9000000008004c1c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008004c20:	02e63084 	addi.d	$r4,$r4,-1652(0x98c)
9000000008004c24:	57b653ff 	bl	-18864(0xfffb650) # 9000000008000274 <printf>
#endif
}
9000000008004c28:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004c2c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008004c30:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008004c34:	28c00078 	ld.d	$r24,$r3,0
9000000008004c38:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008004c3c:	4c000020 	jirl	$r0,$r1,0

9000000008004c40 <filealloc>:

// Allocate a file structure.
struct file *filealloc(void) {
9000000008004c40:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004c44:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004c48:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004c4c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008004c50:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct file *f;

  acquire(&ftable.lock);
9000000008004c54:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004c58:	02e91084 	addi.d	$r4,$r4,-1468(0xa44)
9000000008004c5c:	57c257ff 	bl	-15788(0xfffc254) # 9000000008000eb0 <acquire>
  for (f = ftable.file; f < ftable.file + NFILE; f++) {
    if (f->ref == 0) {
9000000008004c60:	1c000a0c 	pcaddu12i	$r12,80(0x50)
9000000008004c64:	02e8e18c 	addi.d	$r12,$r12,-1480(0xa38)
9000000008004c68:	2880718c 	ld.w	$r12,$r12,28(0x1c)
9000000008004c6c:	40004180 	beqz	$r12,64(0x40) # 9000000008004cac <filealloc+0x6c>
  for (f = ftable.file; f < ftable.file + NFILE; f++) {
9000000008004c70:	1c000a17 	pcaddu12i	$r23,80(0x50)
9000000008004c74:	02e8a2f7 	addi.d	$r23,$r23,-1496(0xa28)
9000000008004c78:	02c1e2f7 	addi.d	$r23,$r23,120(0x78)
9000000008004c7c:	1c00022d 	pcaddu12i	$r13,17(0x11)
9000000008004c80:	02e891ad 	addi.d	$r13,$r13,-1500(0xa24)
    if (f->ref == 0) {
9000000008004c84:	288012ec 	ld.w	$r12,$r23,4(0x4)
9000000008004c88:	40003180 	beqz	$r12,48(0x30) # 9000000008004cb8 <filealloc+0x78>
  for (f = ftable.file; f < ftable.file + NFILE; f++) {
9000000008004c8c:	02c182f7 	addi.d	$r23,$r23,96(0x60)
9000000008004c90:	28c001ac 	ld.d	$r12,$r13,0
9000000008004c94:	5ffff2ec 	bne	$r23,$r12,-16(0x3fff0) # 9000000008004c84 <filealloc+0x44>
      f->ref = 1;
      release(&ftable.lock);
      return f;
    }
  }
  release(&ftable.lock);
9000000008004c98:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004c9c:	02e80084 	addi.d	$r4,$r4,-1536(0xa00)
9000000008004ca0:	57c273ff 	bl	-15760(0xfffc270) # 9000000008000f10 <release>
  return NULL;
9000000008004ca4:	00150017 	move	$r23,$r0
9000000008004ca8:	50002400 	b	36(0x24) # 9000000008004ccc <filealloc+0x8c>
  for (f = ftable.file; f < ftable.file + NFILE; f++) {
9000000008004cac:	1c000a17 	pcaddu12i	$r23,80(0x50)
9000000008004cb0:	02e7b2f7 	addi.d	$r23,$r23,-1556(0x9ec)
9000000008004cb4:	02c062f7 	addi.d	$r23,$r23,24(0x18)
      f->ref = 1;
9000000008004cb8:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008004cbc:	298012ec 	st.w	$r12,$r23,4(0x4)
      release(&ftable.lock);
9000000008004cc0:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004cc4:	02e76084 	addi.d	$r4,$r4,-1576(0x9d8)
9000000008004cc8:	57c24bff 	bl	-15800(0xfffc248) # 9000000008000f10 <release>
}
9000000008004ccc:	001502e4 	move	$r4,$r23
9000000008004cd0:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004cd4:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008004cd8:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008004cdc:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008004ce0:	4c000020 	jirl	$r0,$r1,0

9000000008004ce4 <filedup>:

// Increment ref count for file f.
struct file *filedup(struct file *f) {
9000000008004ce4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008004ce8:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008004cec:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008004cf0:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008004cf4:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008004cf8:	00150097 	move	$r23,$r4
  acquire(&ftable.lock);
9000000008004cfc:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004d00:	02e67084 	addi.d	$r4,$r4,-1636(0x99c)
9000000008004d04:	57c1afff 	bl	-15956(0xfffc1ac) # 9000000008000eb0 <acquire>
  if (f->ref < 1)
9000000008004d08:	288012ec 	ld.w	$r12,$r23,4(0x4)
9000000008004d0c:	6400300c 	bge	$r0,$r12,48(0x30) # 9000000008004d3c <filedup+0x58>
    panic("filedup");
  f->ref++;
9000000008004d10:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000008004d14:	298012ec 	st.w	$r12,$r23,4(0x4)
  release(&ftable.lock);
9000000008004d18:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004d1c:	02e60084 	addi.d	$r4,$r4,-1664(0x980)
9000000008004d20:	57c1f3ff 	bl	-15888(0xfffc1f0) # 9000000008000f10 <release>
  return f;
}
9000000008004d24:	001502e4 	move	$r4,$r23
9000000008004d28:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008004d2c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008004d30:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008004d34:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008004d38:	4c000020 	jirl	$r0,$r1,0
    panic("filedup");
9000000008004d3c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008004d40:	02e1f084 	addi.d	$r4,$r4,-1924(0x87c)
9000000008004d44:	57b4c3ff 	bl	-19264(0xfffb4c0) # 9000000008000204 <panic>

9000000008004d48 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void fileclose(struct file *f) {
9000000008004d48:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008004d4c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008004d50:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008004d54:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008004d58:	29c08078 	st.d	$r24,$r3,32(0x20)
9000000008004d5c:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008004d60:	29c0407a 	st.d	$r26,$r3,16(0x10)
9000000008004d64:	29c0207b 	st.d	$r27,$r3,8(0x8)
9000000008004d68:	02c10076 	addi.d	$r22,$r3,64(0x40)
9000000008004d6c:	00150097 	move	$r23,$r4
  struct file ff;

  acquire(&ftable.lock);
9000000008004d70:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004d74:	02e4a084 	addi.d	$r4,$r4,-1752(0x928)
9000000008004d78:	57c13bff 	bl	-16072(0xfffc138) # 9000000008000eb0 <acquire>
  if (f->ref < 1)
9000000008004d7c:	288012ec 	ld.w	$r12,$r23,4(0x4)
9000000008004d80:	6400500c 	bge	$r0,$r12,80(0x50) # 9000000008004dd0 <fileclose+0x88>
    panic("fileclose");
  if (--f->ref > 0) {
9000000008004d84:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
9000000008004d88:	298012ec 	st.w	$r12,$r23,4(0x4)
9000000008004d8c:	6000500c 	blt	$r0,$r12,80(0x50) # 9000000008004ddc <fileclose+0x94>
    release(&ftable.lock);
    return;
  }
  ff = *f;
9000000008004d90:	288002f8 	ld.w	$r24,$r23,0
9000000008004d94:	280026fa 	ld.b	$r26,$r23,9(0x9)
9000000008004d98:	28c042f9 	ld.d	$r25,$r23,16(0x10)
9000000008004d9c:	28c062fb 	ld.d	$r27,$r23,24(0x18)
  f->ref = 0;
9000000008004da0:	298012e0 	st.w	$r0,$r23,4(0x4)
  f->type = FD_NONE;
9000000008004da4:	298002e0 	st.w	$r0,$r23,0
  release(&ftable.lock);
9000000008004da8:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004dac:	02e3c084 	addi.d	$r4,$r4,-1808(0x8f0)
9000000008004db0:	57c163ff 	bl	-16032(0xfffc160) # 9000000008000f10 <release>

  if (ff.type == FD_PIPE) {
9000000008004db4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008004db8:	5800570c 	beq	$r24,$r12,84(0x54) # 9000000008004e0c <fileclose+0xc4>
    pipeclose(ff.pipe, ff.writable);
  } else if (ff.type == FD_ENTRY) {
9000000008004dbc:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008004dc0:	5c002b0c 	bne	$r24,$r12,40(0x28) # 9000000008004de8 <fileclose+0xa0>
    eput(ff.ep);
9000000008004dc4:	00150364 	move	$r4,$r27
9000000008004dc8:	548e5c00 	bl	36444(0x8e5c) # 900000000800dc24 <eput>
9000000008004dcc:	50001c00 	b	28(0x1c) # 9000000008004de8 <fileclose+0xa0>
    panic("fileclose");
9000000008004dd0:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000008004dd4:	02dfc084 	addi.d	$r4,$r4,2032(0x7f0)
9000000008004dd8:	57b42fff 	bl	-19412(0xfffb42c) # 9000000008000204 <panic>
    release(&ftable.lock);
9000000008004ddc:	1c000a04 	pcaddu12i	$r4,80(0x50)
9000000008004de0:	02e2f084 	addi.d	$r4,$r4,-1860(0x8bc)
9000000008004de4:	57c12fff 	bl	-16084(0xfffc12c) # 9000000008000f10 <release>

  } else if (ff.type == FD_SOCK) {
    //TODO: llh
    // close_socket(ff.socketnum);
  }
}
9000000008004de8:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008004dec:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008004df0:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008004df4:	28c08078 	ld.d	$r24,$r3,32(0x20)
9000000008004df8:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008004dfc:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008004e00:	28c0207b 	ld.d	$r27,$r3,8(0x8)
9000000008004e04:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008004e08:	4c000020 	jirl	$r0,$r1,0
    pipeclose(ff.pipe, ff.writable);
9000000008004e0c:	00150345 	move	$r5,$r26
9000000008004e10:	00150324 	move	$r4,$r25
9000000008004e14:	546bc800 	bl	27592(0x6bc8) # 900000000800b9dc <pipeclose>
9000000008004e18:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008004de8 <fileclose+0xa0>

9000000008004e1c <filestat>:

// Get metadata about file f.
// addr is a user virtual address, pointing to a struct stat.
int filestat(struct file *f, uint64 addr) {
9000000008004e1c:	02fd4063 	addi.d	$r3,$r3,-176(0xf50)
9000000008004e20:	29c2a061 	st.d	$r1,$r3,168(0xa8)
9000000008004e24:	29c28076 	st.d	$r22,$r3,160(0xa0)
9000000008004e28:	29c26077 	st.d	$r23,$r3,152(0x98)
9000000008004e2c:	29c24078 	st.d	$r24,$r3,144(0x90)
9000000008004e30:	29c22079 	st.d	$r25,$r3,136(0x88)
9000000008004e34:	29c2007a 	st.d	$r26,$r3,128(0x80)
9000000008004e38:	02c2c076 	addi.d	$r22,$r3,176(0xb0)
9000000008004e3c:	00150097 	move	$r23,$r4
9000000008004e40:	001500b9 	move	$r25,$r5
  // struct proc *p = myproc();
  struct kstat kst;

  if (f->type == FD_ENTRY) {
9000000008004e44:	2880008c 	ld.w	$r12,$r4,0
9000000008004e48:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008004e4c:	5801198d 	beq	$r12,$r13,280(0x118) # 9000000008004f64 <filestat+0x148>
    if (kst.st_mtime_nsec == 0x0000000100000000)
      kst.st_mtime_sec = 0x0000000100000000;
    if (kst.st_atime_nsec == 0x0000000100000000)
      kst.st_atime_sec = 0x0000000100000000;
    eunlock(f->ep);
  } else if (f->type == FD_DEVICE) {
9000000008004e50:	02800c0d 	addi.w	$r13,$r0,3(0x3)
9000000008004e54:	5c01c58d 	bne	$r12,$r13,452(0x1c4) # 9000000008005018 <filestat+0x1fc>
    // printf("maybe here?\n");
    if (f->major < 0 || !devsw[f->major].read)
9000000008004e58:	2840908c 	ld.h	$r12,$r4,36(0x24)
9000000008004e5c:	6001c580 	blt	$r12,$r0,452(0x1c4) # 9000000008005020 <filestat+0x204>
9000000008004e60:	0280e00d 	addi.w	$r13,$r0,56(0x38)
9000000008004e64:	001db58e 	mul.d	$r14,$r12,$r13
9000000008004e68:	1c000a4d 	pcaddu12i	$r13,82(0x52)
9000000008004e6c:	02f721ad 	addi.d	$r13,$r13,-568(0xdc8)
9000000008004e70:	0010b9ad 	add.d	$r13,$r13,$r14
9000000008004e74:	28c0a1ad 	ld.d	$r13,$r13,40(0x28)
9000000008004e78:	4001b1a0 	beqz	$r13,432(0x1b0) # 9000000008005028 <filestat+0x20c>
      return -1;
    struct devsw *mydev = devsw + f->major;
9000000008004e7c:	001501d7 	move	$r23,$r14
9000000008004e80:	1c000a4d 	pcaddu12i	$r13,82(0x52)
9000000008004e84:	02f6c1ad 	addi.d	$r13,$r13,-592(0xdb0)
9000000008004e88:	0010b9b8 	add.d	$r24,$r13,$r14
    acquire(&mydev->lk);
9000000008004e8c:	02c0431a 	addi.d	$r26,$r24,16(0x10)
9000000008004e90:	00150344 	move	$r4,$r26
9000000008004e94:	57c01fff 	bl	-16356(0xfffc01c) # 9000000008000eb0 <acquire>
    struct kstat *st = &kst;
    st->st_dev = mydev - devsw;
9000000008004e98:	00490eec 	srai.d	$r12,$r23,0x3
9000000008004e9c:	156db6d7 	lu12i.w	$r23,-299594(0xb6db6)
9000000008004ea0:	03b6def7 	ori	$r23,$r23,0xdb7
9000000008004ea4:	16db6db7 	lu32i.d	$r23,449389(0x6db6d)
9000000008004ea8:	031b6ef7 	lu52i.d	$r23,$r23,1755(0x6db)
9000000008004eac:	001ddd8c 	mul.d	$r12,$r12,$r23
9000000008004eb0:	29fd42cc 	st.d	$r12,$r22,-176(0xf50)
    st->st_size = 0;
9000000008004eb4:	29fe02c0 	st.d	$r0,$r22,-128(0xf80)
    st->st_blksize = 128;
9000000008004eb8:	0282000c 	addi.w	$r12,$r0,128(0x80)
9000000008004ebc:	29be22cc 	st.w	$r12,$r22,-120(0xf88)
    st->st_blocks = 0;
9000000008004ec0:	29fe42c0 	st.d	$r0,$r22,-112(0xf90)
    st->st_atime_nsec = 0;
9000000008004ec4:	29fe82c0 	st.d	$r0,$r22,-96(0xfa0)
    st->st_atime_sec = 0;
9000000008004ec8:	29fe62c0 	st.d	$r0,$r22,-104(0xf98)
    st->st_ctime_nsec = 0;
9000000008004ecc:	29ff02c0 	st.d	$r0,$r22,-64(0xfc0)
    st->st_ctime_sec = 0;
9000000008004ed0:	29fee2c0 	st.d	$r0,$r22,-72(0xfb8)
    st->st_mtime_nsec = 0;
9000000008004ed4:	29fec2c0 	st.d	$r0,$r22,-80(0xfb0)
    st->st_mtime_sec = 0;
9000000008004ed8:	29fea2c0 	st.d	$r0,$r22,-88(0xfa8)
    st->st_uid = 0;
9000000008004edc:	29bda2c0 	st.w	$r0,$r22,-152(0xf68)
    st->st_gid = 0;
9000000008004ee0:	29bdb2c0 	st.w	$r0,$r22,-148(0xf6c)
    st->st_rdev = 0;
9000000008004ee4:	29fdc2c0 	st.d	$r0,$r22,-144(0xf70)
    st->st_nlink = 1;
9000000008004ee8:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008004eec:	29bd92cc 	st.w	$r12,$r22,-156(0xf64)
  for (int i = 0; name[i]; i++) {
9000000008004ef0:	28000310 	ld.b	$r16,$r24,0
    hashvalue += name[i];
9000000008004ef4:	0015020c 	move	$r12,$r16
    if (hashvalue > 1000000) {
9000000008004ef8:	02c0070d 	addi.d	$r13,$r24,1(0x1)
9000000008004efc:	14001e8f 	lu12i.w	$r15,244(0xf4)
9000000008004f00:	038901ef 	ori	$r15,$r15,0x240
      hashvalue = hashvalue % 1000000;
9000000008004f04:	14001e8e 	lu12i.w	$r14,244(0xf4)
9000000008004f08:	038901ce 	ori	$r14,$r14,0x240
  for (int i = 0; name[i]; i++) {
9000000008004f0c:	4400f600 	bnez	$r16,244(0xf4) # 9000000008005000 <filestat+0x1e4>
  int hashvalue = 0;
9000000008004f10:	0015000c 	move	$r12,$r0
    st->st_ino = hashpath(mydev->name);
9000000008004f14:	29fd62cc 	st.d	$r12,$r22,-168(0xf58)
    st->st_mode = S_IFCHR;
9000000008004f18:	1400004c 	lu12i.w	$r12,2(0x2)
9000000008004f1c:	29bd82cc 	st.w	$r12,$r22,-160(0xf60)
    release(&mydev->lk);
9000000008004f20:	00150344 	move	$r4,$r26
9000000008004f24:	57bfefff 	bl	-16404(0xfffbfec) # 9000000008000f10 <release>
  } else {
    return -1;
  }
  if (copyout(myproc()->pagetable, addr, (char *)&kst, sizeof(kst)) < 0)
9000000008004f28:	57c803ff 	bl	-14336(0xfffc800) # 9000000008001728 <myproc>
9000000008004f2c:	02820007 	addi.w	$r7,$r0,128(0x80)
9000000008004f30:	02fd42c6 	addi.d	$r6,$r22,-176(0xf50)
9000000008004f34:	00150325 	move	$r5,$r25
9000000008004f38:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008004f3c:	57ef53ff 	bl	-4272(0xfffef50) # 9000000008003e8c <copyout>
9000000008004f40:	0048fc84 	srai.w	$r4,$r4,0x1f
    return -1;
  return 0;
  return -1;
}
9000000008004f44:	28c2a061 	ld.d	$r1,$r3,168(0xa8)
9000000008004f48:	28c28076 	ld.d	$r22,$r3,160(0xa0)
9000000008004f4c:	28c26077 	ld.d	$r23,$r3,152(0x98)
9000000008004f50:	28c24078 	ld.d	$r24,$r3,144(0x90)
9000000008004f54:	28c22079 	ld.d	$r25,$r3,136(0x88)
9000000008004f58:	28c2007a 	ld.d	$r26,$r3,128(0x80)
9000000008004f5c:	02c2c063 	addi.d	$r3,$r3,176(0xb0)
9000000008004f60:	4c000020 	jirl	$r0,$r1,0
    elock(f->ep);
9000000008004f64:	28c06084 	ld.d	$r4,$r4,24(0x18)
9000000008004f68:	548c1800 	bl	35864(0x8c18) # 900000000800db80 <elock>
    kstat(f->ep, &kst);
9000000008004f6c:	02fd42c5 	addi.d	$r5,$r22,-176(0xf50)
9000000008004f70:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008004f74:	548e5000 	bl	36432(0x8e50) # 900000000800ddc4 <kstat>
    kst.st_atime_sec = f->t0_nsec;
9000000008004f78:	28c102ec 	ld.d	$r12,$r23,64(0x40)
    kst.st_atime_nsec = f->t0_sec;
9000000008004f7c:	28c0e2ed 	ld.d	$r13,$r23,56(0x38)
9000000008004f80:	29fe82cd 	st.d	$r13,$r22,-96(0xfa0)
    kst.st_mtime_sec = f->t1_nsec;
9000000008004f84:	28c142ef 	ld.d	$r15,$r23,80(0x50)
    kst.st_mtime_nsec = f->t1_sec;
9000000008004f88:	28c122f0 	ld.d	$r16,$r23,72(0x48)
9000000008004f8c:	29fec2d0 	st.d	$r16,$r22,-80(0xfb0)
      kst.st_mtime_sec = 0;
9000000008004f90:	147ffff1 	lu12i.w	$r17,262143(0x3ffff)
9000000008004f94:	03bffa31 	ori	$r17,$r17,0xffe
9000000008004f98:	0015c5f1 	xor	$r17,$r15,$r17
      kst.st_atime_sec = 0;
9000000008004f9c:	147fffee 	lu12i.w	$r14,262143(0x3ffff)
9000000008004fa0:	03bff9ce 	ori	$r14,$r14,0xffe
9000000008004fa4:	0015b98e 	xor	$r14,$r12,$r14
    if (kst.st_mtime_nsec == 0x0000000100000000)
9000000008004fa8:	00150012 	move	$r18,$r0
9000000008004fac:	16000032 	lu32i.d	$r18,1(0x1)
      kst.st_mtime_sec = 0x0000000100000000;
9000000008004fb0:	001345f1 	maskeqz	$r17,$r15,$r17
9000000008004fb4:	0015ca10 	xor	$r16,$r16,$r18
9000000008004fb8:	0013c24f 	masknez	$r15,$r18,$r16
9000000008004fbc:	00134230 	maskeqz	$r16,$r17,$r16
9000000008004fc0:	001541ef 	or	$r15,$r15,$r16
9000000008004fc4:	29fea2cf 	st.d	$r15,$r22,-88(0xfa8)
      kst.st_atime_sec = 0x0000000100000000;
9000000008004fc8:	0013398e 	maskeqz	$r14,$r12,$r14
9000000008004fcc:	0015c9ad 	xor	$r13,$r13,$r18
9000000008004fd0:	0013b64c 	masknez	$r12,$r18,$r13
9000000008004fd4:	001335cd 	maskeqz	$r13,$r14,$r13
9000000008004fd8:	0015358c 	or	$r12,$r12,$r13
9000000008004fdc:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    eunlock(f->ep);
9000000008004fe0:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008004fe4:	548bdc00 	bl	35804(0x8bdc) # 900000000800dbc0 <eunlock>
9000000008004fe8:	53ff43ff 	b	-192(0xfffff40) # 9000000008004f28 <filestat+0x10c>
      hashvalue = hashvalue % 1000000;
9000000008004fec:	0020b990 	mod.w	$r16,$r12,$r14
9000000008004ff0:	5c0009c0 	bne	$r14,$r0,8(0x8) # 9000000008004ff8 <filestat+0x1dc>
9000000008004ff4:	002a0007 	break	0x7
9000000008004ff8:	0015020c 	move	$r12,$r16
9000000008004ffc:	02c005ad 	addi.d	$r13,$r13,1(0x1)
  for (int i = 0; name[i]; i++) {
9000000008005000:	280001b0 	ld.b	$r16,$r13,0
9000000008005004:	43ff121f 	beqz	$r16,-240(0x7fff10) # 9000000008004f14 <filestat+0xf8>
    hashvalue = hashvalue * 128;
9000000008005008:	00409d8c 	slli.w	$r12,$r12,0x7
    hashvalue += name[i];
900000000800500c:	0010320c 	add.w	$r12,$r16,$r12
    if (hashvalue > 1000000) {
9000000008005010:	63ffddec 	blt	$r15,$r12,-36(0x3ffdc) # 9000000008004fec <filestat+0x1d0>
9000000008005014:	53ffebff 	b	-24(0xfffffe8) # 9000000008004ffc <filestat+0x1e0>
    return -1;
9000000008005018:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800501c:	53ff2bff 	b	-216(0xfffff28) # 9000000008004f44 <filestat+0x128>
      return -1;
9000000008005020:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008005024:	53ff23ff 	b	-224(0xfffff20) # 9000000008004f44 <filestat+0x128>
9000000008005028:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800502c:	53ff1bff 	b	-232(0xfffff18) # 9000000008004f44 <filestat+0x128>

9000000008005030 <fileinput>:

uint64 fileinput(struct file *f, int user, uint64 addr, int n, uint64 off) {
9000000008005030:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008005034:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008005038:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800503c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008005040:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008005044:	001500af 	move	$r15,$r5
9000000008005048:	001500ce 	move	$r14,$r6
900000000800504c:	001500f7 	move	$r23,$r7
  uint64 r = 0;
  switch (f->type) {
9000000008005050:	2880008c 	ld.w	$r12,$r4,0
9000000008005054:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008005058:	5800918d 	beq	$r12,$r13,144(0x90) # 90000000080050e8 <fileinput+0xb8>
900000000800505c:	6c0031ac 	bgeu	$r13,$r12,48(0x30) # 900000000800508c <fileinput+0x5c>
9000000008005060:	02800c0d 	addi.w	$r13,$r0,3(0x3)
9000000008005064:	5800558d 	beq	$r12,$r13,84(0x54) # 90000000080050b8 <fileinput+0x88>
9000000008005068:	0280140d 	addi.w	$r13,$r0,5(0x5)
  case FD_NULL:
    memset((void *)addr, 0, n);
    r = n;
    break;
  case FD_NONE:
    return 0;
900000000800506c:	00150004 	move	$r4,$r0
  switch (f->type) {
9000000008005070:	5c00298d 	bne	$r12,$r13,40(0x28) # 9000000008005098 <fileinput+0x68>
    memset((void *)addr, 0, n);
9000000008005074:	001500e6 	move	$r6,$r7
9000000008005078:	00150005 	move	$r5,$r0
900000000800507c:	001501c4 	move	$r4,$r14
9000000008005080:	57bee7ff 	bl	-16668(0xfffbee4) # 9000000008000f64 <memset>
    r = n;
9000000008005084:	001502e4 	move	$r4,$r23
    break;
9000000008005088:	50001000 	b	16(0x10) # 9000000008005098 <fileinput+0x68>
  switch (f->type) {
900000000800508c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008005090:	58001d8d 	beq	$r12,$r13,28(0x1c) # 90000000080050ac <fileinput+0x7c>
    return 0;
9000000008005094:	00150004 	move	$r4,$r0
  }
  return r;
}
9000000008005098:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800509c:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080050a0:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080050a4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080050a8:	4c000020 	jirl	$r0,$r1,0
    r = piperead(f->pipe, user, addr, n);
90000000080050ac:	28c04084 	ld.d	$r4,$r4,16(0x10)
90000000080050b0:	546b2c00 	bl	27436(0x6b2c) # 900000000800bbdc <piperead>
    break;
90000000080050b4:	53ffe7ff 	b	-28(0xfffffe4) # 9000000008005098 <fileinput+0x68>
    r = (devsw + f->major)->read(user, addr, n);
90000000080050b8:	2840908c 	ld.h	$r12,$r4,36(0x24)
90000000080050bc:	0280e00d 	addi.w	$r13,$r0,56(0x38)
90000000080050c0:	001db58d 	mul.d	$r13,$r12,$r13
90000000080050c4:	1c000a4c 	pcaddu12i	$r12,82(0x52)
90000000080050c8:	02edb18c 	addi.d	$r12,$r12,-1172(0xb6c)
90000000080050cc:	0010b58c 	add.d	$r12,$r12,$r13
90000000080050d0:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
90000000080050d4:	001500e6 	move	$r6,$r7
90000000080050d8:	001501c5 	move	$r5,$r14
90000000080050dc:	001501e4 	move	$r4,$r15
90000000080050e0:	4c000181 	jirl	$r1,$r12,0
    break;
90000000080050e4:	53ffb7ff 	b	-76(0xfffffb4) # 9000000008005098 <fileinput+0x68>
    r = eread(f->ep, user, addr, off, n);
90000000080050e8:	00408107 	slli.w	$r7,$r8,0x0
90000000080050ec:	001502e8 	move	$r8,$r23
90000000080050f0:	28c06084 	ld.d	$r4,$r4,24(0x18)
90000000080050f4:	547e3800 	bl	32312(0x7e38) # 900000000800cf2c <eread>
    break;
90000000080050f8:	53ffa3ff 	b	-96(0xfffffa0) # 9000000008005098 <fileinput+0x68>

90000000080050fc <fileoutput>:

uint64 fileoutput(struct file *f, int user, uint64 addr, int n, uint64 off) {
  uint64 r = 0;
  switch (f->type) {
90000000080050fc:	2880008d 	ld.w	$r13,$r4,0
9000000008005100:	0280140c 	addi.w	$r12,$r0,5(0x5)
9000000008005104:	6800a58d 	bltu	$r12,$r13,164(0xa4) # 90000000080051a8 <fileoutput+0xac>
uint64 fileoutput(struct file *f, int user, uint64 addr, int n, uint64 off) {
9000000008005108:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800510c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005110:	29c00076 	st.d	$r22,$r3,0
9000000008005114:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008005118:	001500ce 	move	$r14,$r6
900000000800511c:	001500ad 	move	$r13,$r5
  switch (f->type) {
9000000008005120:	2a80008c 	ld.wu	$r12,$r4,0
9000000008005124:	1c00020f 	pcaddu12i	$r15,16(0x10)
9000000008005128:	02d531ef 	addi.d	$r15,$r15,1356(0x54c)
900000000800512c:	002d3d8c 	alsl.d	$r12,$r12,$r15,0x3
9000000008005130:	28c0018c 	ld.d	$r12,$r12,0
9000000008005134:	4c000180 	jirl	$r0,$r12,0
  case FD_PIPE:
    r = pipewrite(f->pipe, user, addr, n);
9000000008005138:	28c04084 	ld.d	$r4,$r4,16(0x10)
900000000800513c:	54692000 	bl	26912(0x6920) # 900000000800ba5c <pipewrite>
    break;
  case FD_NONE:
    return 0;
  }
  return r;
}
9000000008005140:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008005144:	28c00076 	ld.d	$r22,$r3,0
9000000008005148:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800514c:	4c000020 	jirl	$r0,$r1,0
    r = (devsw + f->major)->write(user, addr, n);
9000000008005150:	2840908c 	ld.h	$r12,$r4,36(0x24)
9000000008005154:	0280e00f 	addi.w	$r15,$r0,56(0x38)
9000000008005158:	001dbd8f 	mul.d	$r15,$r12,$r15
900000000800515c:	1c000a4c 	pcaddu12i	$r12,82(0x52)
9000000008005160:	02eb518c 	addi.d	$r12,$r12,-1324(0xad4)
9000000008005164:	0010bd8c 	add.d	$r12,$r12,$r15
9000000008005168:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
900000000800516c:	001500e6 	move	$r6,$r7
9000000008005170:	001501c5 	move	$r5,$r14
9000000008005174:	001501a4 	move	$r4,$r13
9000000008005178:	4c000181 	jirl	$r1,$r12,0
    break;
900000000800517c:	53ffc7ff 	b	-60(0xfffffc4) # 9000000008005140 <fileoutput+0x44>
    r = ewrite(f->ep, user, addr, off, n);
9000000008005180:	0040810c 	slli.w	$r12,$r8,0x0
9000000008005184:	001500e8 	move	$r8,$r7
9000000008005188:	00150187 	move	$r7,$r12
900000000800518c:	28c06084 	ld.d	$r4,$r4,24(0x18)
9000000008005190:	547efc00 	bl	32508(0x7efc) # 900000000800d08c <ewrite>
    break;
9000000008005194:	53ffafff 	b	-84(0xfffffac) # 9000000008005140 <fileoutput+0x44>
    r = n;
9000000008005198:	001500e4 	move	$r4,$r7
    break;
900000000800519c:	53ffa7ff 	b	-92(0xfffffa4) # 9000000008005140 <fileoutput+0x44>
    return 0;
90000000080051a0:	00150004 	move	$r4,$r0
90000000080051a4:	53ff9fff 	b	-100(0xfffff9c) # 9000000008005140 <fileoutput+0x44>
90000000080051a8:	00150004 	move	$r4,$r0
}
90000000080051ac:	4c000020 	jirl	$r0,$r1,0

90000000080051b0 <fileread>:

// Read from file f.
// addr is a user virtual address.
int fileread(struct file *f, uint64 addr, int n) {
90000000080051b0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000080051b4:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000080051b8:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000080051bc:	29c0a077 	st.d	$r23,$r3,40(0x28)
90000000080051c0:	29c08078 	st.d	$r24,$r3,32(0x20)
90000000080051c4:	29c06079 	st.d	$r25,$r3,24(0x18)
90000000080051c8:	29c0407a 	st.d	$r26,$r3,16(0x10)
90000000080051cc:	02c10076 	addi.d	$r22,$r3,64(0x40)
  int r = 0;

  if (f->readable == 0)
90000000080051d0:	2800208c 	ld.b	$r12,$r4,8(0x8)
90000000080051d4:	40021180 	beqz	$r12,528(0x210) # 90000000080053e4 <fileread+0x234>
90000000080051d8:	001500d8 	move	$r24,$r6
90000000080051dc:	001500b9 	move	$r25,$r5
90000000080051e0:	00150097 	move	$r23,$r4
    return -1;
  struct proc *p = myproc();
90000000080051e4:	57c547ff 	bl	-15036(0xfffc544) # 9000000008001728 <myproc>
90000000080051e8:	0015009a 	move	$r26,$r4
  switch (f->type) {
90000000080051ec:	288002ec 	ld.w	$r12,$r23,0
90000000080051f0:	0280080d 	addi.w	$r13,$r0,2(0x2)
90000000080051f4:	5800c18d 	beq	$r12,$r13,192(0xc0) # 90000000080052b4 <fileread+0x104>
90000000080051f8:	6c0051ac 	bgeu	$r13,$r12,80(0x50) # 9000000008005248 <fileread+0x98>
90000000080051fc:	02800c0d 	addi.w	$r13,$r0,3(0x3)
9000000008005200:	5c008d8d 	bne	$r12,$r13,140(0x8c) # 900000000800528c <fileread+0xdc>
  case FD_PIPE:
    r = piperead(f->pipe, 1, addr, n);
    break;
  case FD_DEVICE:
    if (f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
9000000008005204:	284092ec 	ld.h	$r12,$r23,36(0x24)
9000000008005208:	006f818e 	bstrpick.w	$r14,$r12,0xf,0x0
900000000800520c:	0280240d 	addi.w	$r13,$r0,9(0x9)
9000000008005210:	6801ddae 	bltu	$r13,$r14,476(0x1dc) # 90000000080053ec <fileread+0x23c>
9000000008005214:	0280e00d 	addi.w	$r13,$r0,56(0x38)
9000000008005218:	001db58c 	mul.d	$r12,$r12,$r13
900000000800521c:	1c000a4d 	pcaddu12i	$r13,82(0x52)
9000000008005220:	02e851ad 	addi.d	$r13,$r13,-1516(0xa14)
9000000008005224:	0010b1ac 	add.d	$r12,$r13,$r12
9000000008005228:	28c0a18c 	ld.d	$r12,$r12,40(0x28)
900000000800522c:	4001c980 	beqz	$r12,456(0x1c8) # 90000000080053f4 <fileread+0x244>
      return -1;
    r = devsw[f->major].read(1, addr, n);
9000000008005230:	00150306 	move	$r6,$r24
9000000008005234:	00150325 	move	$r5,$r25
9000000008005238:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800523c:	4c000181 	jirl	$r1,$r12,0
9000000008005240:	00150098 	move	$r24,$r4
    break;
9000000008005244:	50002400 	b	36(0x24) # 9000000008005268 <fileread+0xb8>
  switch (f->type) {
9000000008005248:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800524c:	5c005d8d 	bne	$r12,$r13,92(0x5c) # 90000000080052a8 <fileread+0xf8>
    r = piperead(f->pipe, 1, addr, n);
9000000008005250:	00150307 	move	$r7,$r24
9000000008005254:	00150326 	move	$r6,$r25
9000000008005258:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800525c:	28c042e4 	ld.d	$r4,$r23,16(0x10)
9000000008005260:	54697c00 	bl	27004(0x697c) # 900000000800bbdc <piperead>
9000000008005264:	00150098 	move	$r24,$r4
  default:
    panic("fileread");
  }

  return r;
}
9000000008005268:	00150304 	move	$r4,$r24
900000000800526c:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008005270:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008005274:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008005278:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800527c:	28c06079 	ld.d	$r25,$r3,24(0x18)
9000000008005280:	28c0407a 	ld.d	$r26,$r3,16(0x10)
9000000008005284:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008005288:	4c000020 	jirl	$r0,$r1,0
  switch (f->type) {
900000000800528c:	0280140d 	addi.w	$r13,$r0,5(0x5)
9000000008005290:	5c00198d 	bne	$r12,$r13,24(0x18) # 90000000080052a8 <fileread+0xf8>
    copyout_zero(myproc()->pagetable, addr, n);
9000000008005294:	57c497ff 	bl	-15212(0xfffc494) # 9000000008001728 <myproc>
9000000008005298:	00150306 	move	$r6,$r24
900000000800529c:	00150325 	move	$r5,$r25
90000000080052a0:	28c18084 	ld.d	$r4,$r4,96(0x60)
90000000080052a4:	57eb0bff 	bl	-5368(0xfffeb08) # 9000000008003dac <copyout_zero>
    panic("fileread");
90000000080052a8:	1c000204 	pcaddu12i	$r4,16(0x10)
90000000080052ac:	02cd6084 	addi.d	$r4,$r4,856(0x358)
90000000080052b0:	57af57ff 	bl	-20652(0xfffaf54) # 9000000008000204 <panic>
    elock(f->ep);
90000000080052b4:	28c062e4 	ld.d	$r4,$r23,24(0x18)
90000000080052b8:	5488c800 	bl	35016(0x88c8) # 900000000800db80 <elock>
    if (p->char_count > 0) {
90000000080052bc:	2894434c 	ld.w	$r12,$r26,1296(0x510)
90000000080052c0:	6000780c 	blt	$r0,$r12,120(0x78) # 9000000008005338 <fileread+0x188>
    } else if (0 == strncmp(myproc()->name, "libc-bench", 10) &&
90000000080052c4:	57c467ff 	bl	-15260(0xfffc464) # 9000000008001728 <myproc>
90000000080052c8:	02802806 	addi.w	$r6,$r0,10(0xa)
90000000080052cc:	1c000205 	pcaddu12i	$r5,16(0x10)
90000000080052d0:	02cc10a5 	addi.d	$r5,$r5,772(0x304)
90000000080052d4:	02d3a084 	addi.d	$r4,$r4,1256(0x4e8)
90000000080052d8:	57bddfff 	bl	-16932(0xfffbddc) # 90000000080010b4 <strncmp>
90000000080052dc:	44001c80 	bnez	$r4,28(0x1c) # 90000000080052f8 <fileread+0x148>
               0 == strncmp(f->ep->filename, "tmpfile_", 8)) {
90000000080052e0:	02802006 	addi.w	$r6,$r0,8(0x8)
90000000080052e4:	1c000205 	pcaddu12i	$r5,16(0x10)
90000000080052e8:	02cbf0a5 	addi.d	$r5,$r5,764(0x2fc)
90000000080052ec:	28c062e4 	ld.d	$r4,$r23,24(0x18)
90000000080052f0:	57bdc7ff 	bl	-16956(0xfffbdc4) # 90000000080010b4 <strncmp>
    } else if (0 == strncmp(myproc()->name, "libc-bench", 10) &&
90000000080052f4:	40005880 	beqz	$r4,88(0x58) # 900000000800534c <fileread+0x19c>
    if (0 == strncmp(f->ep->filename, "zero", 4)) {
90000000080052f8:	02801006 	addi.w	$r6,$r0,4(0x4)
90000000080052fc:	1c000205 	pcaddu12i	$r5,16(0x10)
9000000008005300:	02cbd0a5 	addi.d	$r5,$r5,756(0x2f4)
9000000008005304:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005308:	57bdafff 	bl	-16980(0xfffbdac) # 90000000080010b4 <strncmp>
900000000800530c:	44006c80 	bnez	$r4,108(0x6c) # 9000000008005378 <fileread+0x1c8>
      char tmp = 0;
9000000008005310:	293f3ec0 	st.b	$r0,$r22,-49(0xfcf)
      either_copyout(1, addr, (void *)&tmp, sizeof(char));
9000000008005314:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008005318:	02ff3ec6 	addi.d	$r6,$r22,-49(0xfcf)
900000000800531c:	00150325 	move	$r5,$r25
9000000008005320:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008005324:	57cf87ff 	bl	-12412(0xfffcf84) # 90000000080022a8 <either_copyout>
      r = 1;
9000000008005328:	02800418 	addi.w	$r24,$r0,1(0x1)
    eunlock(f->ep);
900000000800532c:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005330:	54889000 	bl	34960(0x8890) # 900000000800dbc0 <eunlock>
    break;
9000000008005334:	53ff37ff 	b	-204(0xfffff34) # 9000000008005268 <fileread+0xb8>
      p->char_count--;
9000000008005338:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000800533c:	2994434c 	st.w	$r12,$r26,1296(0x510)
      eunlock(f->ep);
9000000008005340:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005344:	54887c00 	bl	34940(0x887c) # 900000000800dbc0 <eunlock>
      return r;
9000000008005348:	53ff23ff 	b	-224(0xfffff20) # 9000000008005268 <fileread+0xb8>
      eunlock(f->ep);
900000000800534c:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005350:	54887000 	bl	34928(0x8870) # 900000000800dbc0 <eunlock>
      char tmp = 'x';
9000000008005354:	0281e00c 	addi.w	$r12,$r0,120(0x78)
9000000008005358:	293f3ecc 	st.b	$r12,$r22,-49(0xfcf)
      either_copyout(1, addr, (void *)&tmp, sizeof(char));
900000000800535c:	02800407 	addi.w	$r7,$r0,1(0x1)
9000000008005360:	02ff3ec6 	addi.d	$r6,$r22,-49(0xfcf)
9000000008005364:	00150325 	move	$r5,$r25
9000000008005368:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800536c:	57cf3fff 	bl	-12484(0xfffcf3c) # 90000000080022a8 <either_copyout>
      return r;
9000000008005370:	02800418 	addi.w	$r24,$r0,1(0x1)
9000000008005374:	53fef7ff 	b	-268(0xffffef4) # 9000000008005268 <fileread+0xb8>
    } else if (0 == strncmp(f->ep->filename, "urandom", 7)) {
9000000008005378:	02801c06 	addi.w	$r6,$r0,7(0x7)
900000000800537c:	1c000205 	pcaddu12i	$r5,16(0x10)
9000000008005380:	02c9f0a5 	addi.d	$r5,$r5,636(0x27c)
9000000008005384:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005388:	57bd2fff 	bl	-17108(0xfffbd2c) # 90000000080010b4 <strncmp>
900000000800538c:	44002880 	bnez	$r4,40(0x28) # 90000000080053b4 <fileread+0x204>
      char tmp = 114;
9000000008005390:	0281c80c 	addi.w	$r12,$r0,114(0x72)
9000000008005394:	293f3ecc 	st.b	$r12,$r22,-49(0xfcf)
      either_copyout(1, addr, (void *)&tmp, sizeof(char));
9000000008005398:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000800539c:	02ff3ec6 	addi.d	$r6,$r22,-49(0xfcf)
90000000080053a0:	00150325 	move	$r5,$r25
90000000080053a4:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080053a8:	57cf03ff 	bl	-12544(0xfffcf00) # 90000000080022a8 <either_copyout>
      r = 1;
90000000080053ac:	02800418 	addi.w	$r24,$r0,1(0x1)
90000000080053b0:	53ff7fff 	b	-132(0xfffff7c) # 900000000800532c <fileread+0x17c>
    } else if ((r = eread(f->ep, 1, addr, f->off, n)) > 0)
90000000080053b4:	00150308 	move	$r8,$r24
90000000080053b8:	288082e7 	ld.w	$r7,$r23,32(0x20)
90000000080053bc:	00150326 	move	$r6,$r25
90000000080053c0:	02800405 	addi.w	$r5,$r0,1(0x1)
90000000080053c4:	28c062e4 	ld.d	$r4,$r23,24(0x18)
90000000080053c8:	547b6400 	bl	31588(0x7b64) # 900000000800cf2c <eread>
90000000080053cc:	00150098 	move	$r24,$r4
90000000080053d0:	67ff5c04 	bge	$r0,$r4,-164(0x3ff5c) # 900000000800532c <fileread+0x17c>
      f->off += r;
90000000080053d4:	288082ec 	ld.w	$r12,$r23,32(0x20)
90000000080053d8:	0010118c 	add.w	$r12,$r12,$r4
90000000080053dc:	298082ec 	st.w	$r12,$r23,32(0x20)
90000000080053e0:	53ff4fff 	b	-180(0xfffff4c) # 900000000800532c <fileread+0x17c>
    return -1;
90000000080053e4:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
90000000080053e8:	53fe83ff 	b	-384(0xffffe80) # 9000000008005268 <fileread+0xb8>
      return -1;
90000000080053ec:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
90000000080053f0:	53fe7bff 	b	-392(0xffffe78) # 9000000008005268 <fileread+0xb8>
90000000080053f4:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
90000000080053f8:	53fe73ff 	b	-400(0xffffe70) # 9000000008005268 <fileread+0xb8>

90000000080053fc <filewrite>:

// Write to file f.
// addr is a user virtual address.
int filewrite(struct file *f, uint64 addr, int n) {
90000000080053fc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008005400:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008005404:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008005408:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800540c:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008005410:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008005414:	29c0007a 	st.d	$r26,$r3,0
9000000008005418:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  int ret = 0;

  if (f->writable == 0)
900000000800541c:	2800248c 	ld.b	$r12,$r4,9(0x9)
9000000008005420:	40017980 	beqz	$r12,376(0x178) # 9000000008005598 <filewrite+0x19c>
9000000008005424:	001500d8 	move	$r24,$r6
9000000008005428:	001500b9 	move	$r25,$r5
900000000800542c:	00150097 	move	$r23,$r4
    return -1;

  if (f->type == FD_PIPE) {
9000000008005430:	2880008c 	ld.w	$r12,$r4,0
9000000008005434:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008005438:	5800458d 	beq	$r12,$r13,68(0x44) # 900000000800547c <filewrite+0x80>
    ret = pipewrite(f->pipe, 1, addr, n);
  } else if (f->type == FD_DEVICE) {
900000000800543c:	02800c0d 	addi.w	$r13,$r0,3(0x3)
9000000008005440:	5800598d 	beq	$r12,$r13,88(0x58) # 9000000008005498 <filewrite+0x9c>
    if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
      return -1;
    ret = devsw[f->major].write(1, addr, n);
  } else if (f->type == FD_ENTRY) {
9000000008005444:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008005448:	58008d8d 	beq	$r12,$r13,140(0x8c) # 90000000080054d4 <filewrite+0xd8>
      f->off += n;
    } else {
      ret = -1;
    }
    eunlock(f->ep);
  } else if (f->type == FD_NULL) {
900000000800544c:	0280140d 	addi.w	$r13,$r0,5(0x5)
    // do nothing, just set ret
    ret = n;
9000000008005450:	001500d9 	move	$r25,$r6
  } else if (f->type == FD_NULL) {
9000000008005454:	5c01398d 	bne	$r12,$r13,312(0x138) # 900000000800558c <filewrite+0x190>
  } else {
    panic("filewrite");
  }

  return ret;
}
9000000008005458:	00150324 	move	$r4,$r25
900000000800545c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008005460:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008005464:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008005468:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800546c:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008005470:	28c0007a 	ld.d	$r26,$r3,0
9000000008005474:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008005478:	4c000020 	jirl	$r0,$r1,0
    ret = pipewrite(f->pipe, 1, addr, n);
900000000800547c:	001500c7 	move	$r7,$r6
9000000008005480:	001500a6 	move	$r6,$r5
9000000008005484:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008005488:	28c04084 	ld.d	$r4,$r4,16(0x10)
900000000800548c:	5465d000 	bl	26064(0x65d0) # 900000000800ba5c <pipewrite>
9000000008005490:	00150099 	move	$r25,$r4
9000000008005494:	53ffc7ff 	b	-60(0xfffffc4) # 9000000008005458 <filewrite+0x5c>
    if (f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
9000000008005498:	2840908c 	ld.h	$r12,$r4,36(0x24)
900000000800549c:	006f818e 	bstrpick.w	$r14,$r12,0xf,0x0
90000000080054a0:	0280240d 	addi.w	$r13,$r0,9(0x9)
90000000080054a4:	6800fdae 	bltu	$r13,$r14,252(0xfc) # 90000000080055a0 <filewrite+0x1a4>
90000000080054a8:	0280e00d 	addi.w	$r13,$r0,56(0x38)
90000000080054ac:	001db58c 	mul.d	$r12,$r12,$r13
90000000080054b0:	1c000a2d 	pcaddu12i	$r13,81(0x51)
90000000080054b4:	02de01ad 	addi.d	$r13,$r13,1920(0x780)
90000000080054b8:	0010b1ac 	add.d	$r12,$r13,$r12
90000000080054bc:	28c0c18c 	ld.d	$r12,$r12,48(0x30)
90000000080054c0:	4000e980 	beqz	$r12,232(0xe8) # 90000000080055a8 <filewrite+0x1ac>
    ret = devsw[f->major].write(1, addr, n);
90000000080054c4:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080054c8:	4c000181 	jirl	$r1,$r12,0
90000000080054cc:	00150099 	move	$r25,$r4
90000000080054d0:	53ff8bff 	b	-120(0xfffff88) # 9000000008005458 <filewrite+0x5c>
    elock(f->ep);
90000000080054d4:	28c06084 	ld.d	$r4,$r4,24(0x18)
90000000080054d8:	5486a800 	bl	34472(0x86a8) # 900000000800db80 <elock>
    struct proc *p = myproc();
90000000080054dc:	57c24fff 	bl	-15796(0xfffc24c) # 9000000008001728 <myproc>
90000000080054e0:	0015009a 	move	$r26,$r4
    if (p->char_count != 0) {
90000000080054e4:	2894408c 	ld.w	$r12,$r4,1296(0x510)
90000000080054e8:	44006580 	bnez	$r12,100(0x64) # 900000000800554c <filewrite+0x150>
    } else if (0 == strncmp(p->name, "libc-bench", 10) &&
90000000080054ec:	02802806 	addi.w	$r6,$r0,10(0xa)
90000000080054f0:	1c000205 	pcaddu12i	$r5,16(0x10)
90000000080054f4:	02c380a5 	addi.d	$r5,$r5,224(0xe0)
90000000080054f8:	02d3a084 	addi.d	$r4,$r4,1256(0x4e8)
90000000080054fc:	57bbbbff 	bl	-17480(0xfffbbb8) # 90000000080010b4 <strncmp>
9000000008005500:	44001c80 	bnez	$r4,28(0x1c) # 900000000800551c <filewrite+0x120>
               0 == strncmp(f->ep->filename, "tmpfile_", 8)) {
9000000008005504:	02802006 	addi.w	$r6,$r0,8(0x8)
9000000008005508:	1c000205 	pcaddu12i	$r5,16(0x10)
900000000800550c:	02c360a5 	addi.d	$r5,$r5,216(0xd8)
9000000008005510:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005514:	57bba3ff 	bl	-17504(0xfffbba0) # 90000000080010b4 <strncmp>
    } else if (0 == strncmp(p->name, "libc-bench", 10) &&
9000000008005518:	40004c80 	beqz	$r4,76(0x4c) # 9000000008005564 <filewrite+0x168>
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
900000000800551c:	0015031a 	move	$r26,$r24
9000000008005520:	00150348 	move	$r8,$r26
9000000008005524:	288082e7 	ld.w	$r7,$r23,32(0x20)
9000000008005528:	00150326 	move	$r6,$r25
900000000800552c:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008005530:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005534:	547b5800 	bl	31576(0x7b58) # 900000000800d08c <ewrite>
      ret = -1;
9000000008005538:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
    if (ewrite(f->ep, 1, addr, f->off, n) == n) {
900000000800553c:	58003c98 	beq	$r4,$r24,60(0x3c) # 9000000008005578 <filewrite+0x17c>
    eunlock(f->ep);
9000000008005540:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005544:	54867c00 	bl	34428(0x867c) # 900000000800dbc0 <eunlock>
9000000008005548:	53ff13ff 	b	-240(0xfffff10) # 9000000008005458 <filewrite+0x5c>
      p->char_count += n;
900000000800554c:	0010618c 	add.w	$r12,$r12,$r24
9000000008005550:	2994408c 	st.w	$r12,$r4,1296(0x510)
      eunlock(f->ep);
9000000008005554:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005558:	54866800 	bl	34408(0x8668) # 900000000800dbc0 <eunlock>
      return n;
900000000800555c:	00150319 	move	$r25,$r24
9000000008005560:	53fefbff 	b	-264(0xffffef8) # 9000000008005458 <filewrite+0x5c>
      p->char_count = n;
9000000008005564:	29944358 	st.w	$r24,$r26,1296(0x510)
      eunlock(f->ep);
9000000008005568:	28c062e4 	ld.d	$r4,$r23,24(0x18)
900000000800556c:	54865400 	bl	34388(0x8654) # 900000000800dbc0 <eunlock>
      return 1;
9000000008005570:	02800419 	addi.w	$r25,$r0,1(0x1)
9000000008005574:	53fee7ff 	b	-284(0xffffee4) # 9000000008005458 <filewrite+0x5c>
      f->off += n;
9000000008005578:	288082ec 	ld.w	$r12,$r23,32(0x20)
900000000800557c:	0010619a 	add.w	$r26,$r12,$r24
9000000008005580:	298082fa 	st.w	$r26,$r23,32(0x20)
      ret = n;
9000000008005584:	00150319 	move	$r25,$r24
9000000008005588:	53ffbbff 	b	-72(0xfffffb8) # 9000000008005540 <filewrite+0x144>
    panic("filewrite");
900000000800558c:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000008005590:	02c21084 	addi.d	$r4,$r4,132(0x84)
9000000008005594:	57ac73ff 	bl	-21392(0xfffac70) # 9000000008000204 <panic>
    return -1;
9000000008005598:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
900000000800559c:	53febfff 	b	-324(0xffffebc) # 9000000008005458 <filewrite+0x5c>
      return -1;
90000000080055a0:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
90000000080055a4:	53feb7ff 	b	-332(0xffffeb4) # 9000000008005458 <filewrite+0x5c>
90000000080055a8:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
90000000080055ac:	53feafff 	b	-340(0xffffeac) # 9000000008005458 <filewrite+0x5c>

90000000080055b0 <dirnext>:
// Read from dir f.
// addr is a user virtual address.
int dirnext(struct file *f, uint64 addr) {
  // struct proc *p = myproc();

  if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
90000000080055b0:	2800208c 	ld.b	$r12,$r4,8(0x8)
90000000080055b4:	4000fd80 	beqz	$r12,252(0xfc) # 90000000080056b0 <dirnext+0x100>
int dirnext(struct file *f, uint64 addr) {
90000000080055b8:	02f88063 	addi.d	$r3,$r3,-480(0xe20)
90000000080055bc:	29c76061 	st.d	$r1,$r3,472(0x1d8)
90000000080055c0:	29c74076 	st.d	$r22,$r3,464(0x1d0)
90000000080055c4:	29c72077 	st.d	$r23,$r3,456(0x1c8)
90000000080055c8:	29c70078 	st.d	$r24,$r3,448(0x1c0)
90000000080055cc:	29c6e079 	st.d	$r25,$r3,440(0x1b8)
90000000080055d0:	02c78076 	addi.d	$r22,$r3,480(0x1e0)
90000000080055d4:	00150097 	move	$r23,$r4
  if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
90000000080055d8:	28c0608d 	ld.d	$r13,$r4,24(0x18)
90000000080055dc:	2a0401ac 	ld.bu	$r12,$r13,256(0x100)
90000000080055e0:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
    return -1;
90000000080055e4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
90000000080055e8:	44002180 	bnez	$r12,32(0x20) # 9000000008005608 <dirnext+0x58>
  if (copyout(myproc()->pagetable, addr, (char *)&st, sizeof(st)) < 0)
    // if(copyout2(addr, (char *)&st, sizeof(st)) < 0)
    return -1;

  return 1;
}
90000000080055ec:	28c76061 	ld.d	$r1,$r3,472(0x1d8)
90000000080055f0:	28c74076 	ld.d	$r22,$r3,464(0x1d0)
90000000080055f4:	28c72077 	ld.d	$r23,$r3,456(0x1c8)
90000000080055f8:	28c70078 	ld.d	$r24,$r3,448(0x1c0)
90000000080055fc:	28c6e079 	ld.d	$r25,$r3,440(0x1b8)
9000000008005600:	02c78063 	addi.d	$r3,$r3,480(0x1e0)
9000000008005604:	4c000020 	jirl	$r0,$r1,0
9000000008005608:	001500b9 	move	$r25,$r5
  int count = 0;
900000000800560c:	29b8b2c0 	st.w	$r0,$r22,-468(0xe2c)
  elock(f->ep);
9000000008005610:	001501a4 	move	$r4,$r13
9000000008005614:	54856c00 	bl	34156(0x856c) # 900000000800db80 <elock>
  while ((ret = enext(f->ep, &de, f->off, &count)) == 0) { // skip empty entry
9000000008005618:	02f8b2c7 	addi.d	$r7,$r22,-468(0xe2c)
900000000800561c:	288082e6 	ld.w	$r6,$r23,32(0x20)
9000000008005620:	02f9a2c5 	addi.d	$r5,$r22,-408(0xe68)
9000000008005624:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005628:	54894400 	bl	35140(0x8944) # 900000000800df6c <enext>
900000000800562c:	00150098 	move	$r24,$r4
9000000008005630:	44001c80 	bnez	$r4,28(0x1c) # 900000000800564c <dirnext+0x9c>
    f->off += count * 32;
9000000008005634:	28b8b2cc 	ld.w	$r12,$r22,-468(0xe2c)
9000000008005638:	0040958d 	slli.w	$r13,$r12,0x5
900000000800563c:	288082ec 	ld.w	$r12,$r23,32(0x20)
9000000008005640:	0010358c 	add.w	$r12,$r12,$r13
9000000008005644:	298082ec 	st.w	$r12,$r23,32(0x20)
9000000008005648:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008005618 <dirnext+0x68>
  eunlock(f->ep);
900000000800564c:	28c062e4 	ld.d	$r4,$r23,24(0x18)
9000000008005650:	54857000 	bl	34160(0x8570) # 900000000800dbc0 <eunlock>
  if (ret == -1)
9000000008005654:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    return 0;
9000000008005658:	00150004 	move	$r4,$r0
  if (ret == -1)
900000000800565c:	5bff930c 	beq	$r24,$r12,-112(0x3ff90) # 90000000080055ec <dirnext+0x3c>
  f->off += count * 32;
9000000008005660:	28b8b2cc 	ld.w	$r12,$r22,-468(0xe2c)
9000000008005664:	0040958d 	slli.w	$r13,$r12,0x5
9000000008005668:	288082ec 	ld.w	$r12,$r23,32(0x20)
900000000800566c:	0010358c 	add.w	$r12,$r12,$r13
9000000008005670:	298082ec 	st.w	$r12,$r23,32(0x20)
  estat(&de, &st);
9000000008005674:	02f8c2c5 	addi.d	$r5,$r22,-464(0xe30)
9000000008005678:	02f9a2c4 	addi.d	$r4,$r22,-408(0xe68)
900000000800567c:	5486dc00 	bl	34524(0x86dc) # 900000000800dd58 <estat>
  if (copyout(myproc()->pagetable, addr, (char *)&st, sizeof(st)) < 0)
9000000008005680:	57c0abff 	bl	-16216(0xfffc0a8) # 9000000008001728 <myproc>
9000000008005684:	0280e007 	addi.w	$r7,$r0,56(0x38)
9000000008005688:	02f8c2c6 	addi.d	$r6,$r22,-464(0xe30)
900000000800568c:	00150325 	move	$r5,$r25
9000000008005690:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008005694:	57e7fbff 	bl	-6152(0xfffe7f8) # 9000000008003e8c <copyout>
    return -1;
9000000008005698:	02000084 	slti	$r4,$r4,0
900000000800569c:	03c0048c 	xori	$r12,$r4,0x1
90000000080056a0:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
90000000080056a4:	001311a4 	maskeqz	$r4,$r13,$r4
90000000080056a8:	00151184 	or	$r4,$r12,$r4
90000000080056ac:	53ff43ff 	b	-192(0xfffff40) # 90000000080055ec <dirnext+0x3c>
    return -1;
90000000080056b0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
90000000080056b4:	4c000020 	jirl	$r0,$r1,0

90000000080056b8 <findfile>:

struct file *findfile(char *path) {
90000000080056b8:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
90000000080056bc:	29c4a061 	st.d	$r1,$r3,296(0x128)
90000000080056c0:	29c48076 	st.d	$r22,$r3,288(0x120)
90000000080056c4:	29c46077 	st.d	$r23,$r3,280(0x118)
90000000080056c8:	29c44078 	st.d	$r24,$r3,272(0x110)
90000000080056cc:	29c42079 	st.d	$r25,$r3,264(0x108)
90000000080056d0:	02c4c076 	addi.d	$r22,$r3,304(0x130)
  char name[FAT32_MAX_FILENAME + 1];
  // struct dirent* ep = ename(NULL,path,&dev);
  struct dirent *ep = new_lookup_path(NULL, path, 0, name);
90000000080056d4:	02fb42c7 	addi.d	$r7,$r22,-304(0xed0)
90000000080056d8:	00150006 	move	$r6,$r0
90000000080056dc:	00150085 	move	$r5,$r4
90000000080056e0:	00150004 	move	$r4,$r0
90000000080056e4:	548d8400 	bl	36228(0x8d84) # 900000000800e468 <new_lookup_path>
90000000080056e8:	00150098 	move	$r24,$r4
  struct proc *p = myproc();
90000000080056ec:	57c03fff 	bl	-16324(0xfffc03c) # 9000000008001728 <myproc>
  if (ep == NULL)
90000000080056f0:	4000bb00 	beqz	$r24,184(0xb8) # 90000000080057a8 <findfile+0xf0>
90000000080056f4:	00150099 	move	$r25,$r4
    return NULL;
  elock(ep);
90000000080056f8:	00150304 	move	$r4,$r24
90000000080056fc:	54848400 	bl	33924(0x8484) # 900000000800db80 <elock>
  for (int i = 0; i < NOFILEMAX(p); i++) {
9000000008005700:	28c1232d 	ld.d	$r13,$r25,72(0x48)
9000000008005704:	024205ac 	sltui	$r12,$r13,129(0x81)
9000000008005708:	001331b0 	maskeqz	$r16,$r13,$r12
900000000800570c:	0282000e 	addi.w	$r14,$r0,128(0x80)
9000000008005710:	0013b1cc 	masknez	$r12,$r14,$r12
9000000008005714:	00153210 	or	$r16,$r16,$r12
9000000008005718:	40007da0 	beqz	$r13,124(0x7c) # 9000000008005794 <findfile+0xdc>
900000000800571c:	02c3632d 	addi.d	$r13,$r25,216(0xd8)
9000000008005720:	0015000c 	move	$r12,$r0
    if (p->ofile[i]->type == FD_ENTRY && p->ofile[i]->ep == ep) {
9000000008005724:	02800811 	addi.w	$r17,$r0,2(0x2)
      eunlock(ep);
      eput(ep);
      return p->ofile[i];
    }
    if (p->ofile[i]->type == FD_DEVICE) {
9000000008005728:	02800c12 	addi.w	$r18,$r0,3(0x3)
900000000800572c:	50001800 	b	24(0x18) # 9000000008005744 <findfile+0x8c>
    if (p->ofile[i]->type == FD_ENTRY && p->ofile[i]->ep == ep) {
9000000008005730:	28c061ee 	ld.d	$r14,$r15,24(0x18)
9000000008005734:	580045d8 	beq	$r14,$r24,68(0x44) # 9000000008005778 <findfile+0xc0>
9000000008005738:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800573c:	02c021ad 	addi.d	$r13,$r13,8(0x8)
  for (int i = 0; i < NOFILEMAX(p); i++) {
9000000008005740:	6c005590 	bgeu	$r12,$r16,84(0x54) # 9000000008005794 <findfile+0xdc>
9000000008005744:	0040818e 	slli.w	$r14,$r12,0x0
9000000008005748:	001501d7 	move	$r23,$r14
    if (p->ofile[i]->type == FD_ENTRY && p->ofile[i]->ep == ep) {
900000000800574c:	28c001af 	ld.d	$r15,$r13,0
9000000008005750:	288001ee 	ld.w	$r14,$r15,0
9000000008005754:	5bffddd1 	beq	$r14,$r17,-36(0x3ffdc) # 9000000008005730 <findfile+0x78>
    if (p->ofile[i]->type == FD_DEVICE) {
9000000008005758:	5fffe1d2 	bne	$r14,$r18,-32(0x3ffe0) # 9000000008005738 <findfile+0x80>
      eunlock(ep);
900000000800575c:	00150304 	move	$r4,$r24
9000000008005760:	54846000 	bl	33888(0x8460) # 900000000800dbc0 <eunlock>
      eput(ep);
9000000008005764:	00150304 	move	$r4,$r24
9000000008005768:	5484bc00 	bl	33980(0x84bc) # 900000000800dc24 <eput>
      return p->ofile[i];
900000000800576c:	002d66ee 	alsl.d	$r14,$r23,$r25,0x3
9000000008005770:	28c361d8 	ld.d	$r24,$r14,216(0xd8)
9000000008005774:	50003400 	b	52(0x34) # 90000000080057a8 <findfile+0xf0>
      eunlock(ep);
9000000008005778:	00150304 	move	$r4,$r24
900000000800577c:	54844400 	bl	33860(0x8444) # 900000000800dbc0 <eunlock>
      eput(ep);
9000000008005780:	00150304 	move	$r4,$r24
9000000008005784:	5484a000 	bl	33952(0x84a0) # 900000000800dc24 <eput>
      return p->ofile[i];
9000000008005788:	002d66ee 	alsl.d	$r14,$r23,$r25,0x3
900000000800578c:	28c361d8 	ld.d	$r24,$r14,216(0xd8)
9000000008005790:	50001800 	b	24(0x18) # 90000000080057a8 <findfile+0xf0>
    }
  }
  eunlock(ep);
9000000008005794:	00150304 	move	$r4,$r24
9000000008005798:	54842800 	bl	33832(0x8428) # 900000000800dbc0 <eunlock>
  eput(ep);
900000000800579c:	00150304 	move	$r4,$r24
90000000080057a0:	54848400 	bl	33924(0x8484) # 900000000800dc24 <eput>
  return NULL;
90000000080057a4:	00150018 	move	$r24,$r0
}
90000000080057a8:	00150304 	move	$r4,$r24
90000000080057ac:	28c4a061 	ld.d	$r1,$r3,296(0x128)
90000000080057b0:	28c48076 	ld.d	$r22,$r3,288(0x120)
90000000080057b4:	28c46077 	ld.d	$r23,$r3,280(0x118)
90000000080057b8:	28c44078 	ld.d	$r24,$r3,272(0x110)
90000000080057bc:	28c42079 	ld.d	$r25,$r3,264(0x108)
90000000080057c0:	02c4c063 	addi.d	$r3,$r3,304(0x130)
90000000080057c4:	4c000020 	jirl	$r0,$r1,0

90000000080057c8 <get_next_dirent>:

// 和dirnext不同，要新建一个类linux的目录结构
int get_next_dirent(struct file *f, uint64 addr, int n) {
90000000080057c8:	02f44063 	addi.d	$r3,$r3,-752(0xd10)
90000000080057cc:	29cba061 	st.d	$r1,$r3,744(0x2e8)
90000000080057d0:	29cb8076 	st.d	$r22,$r3,736(0x2e0)
90000000080057d4:	29cb6077 	st.d	$r23,$r3,728(0x2d8)
90000000080057d8:	29cb4078 	st.d	$r24,$r3,720(0x2d0)
90000000080057dc:	29cb2079 	st.d	$r25,$r3,712(0x2c8)
90000000080057e0:	29cb007a 	st.d	$r26,$r3,704(0x2c0)
90000000080057e4:	29cae07b 	st.d	$r27,$r3,696(0x2b8)
90000000080057e8:	29cac07c 	st.d	$r28,$r3,688(0x2b0)
90000000080057ec:	29caa07d 	st.d	$r29,$r3,680(0x2a8)
90000000080057f0:	29ca807e 	st.d	$r30,$r3,672(0x2a0)
90000000080057f4:	29ca607f 	st.d	$r31,$r3,664(0x298)
90000000080057f8:	02cbc076 	addi.d	$r22,$r3,752(0x2f0)
90000000080057fc:	00150098 	move	$r24,$r4
9000000008005800:	001500bb 	move	$r27,$r5
9000000008005804:	001500da 	move	$r26,$r6
  struct proc *p = myproc();
9000000008005808:	57bf23ff 	bl	-16608(0xfffbf20) # 9000000008001728 <myproc>
  if (f->readable == 0 || !(f->ep->attribute & ATTR_DIRECTORY))
900000000800580c:	2800230c 	ld.b	$r12,$r24,8(0x8)
9000000008005810:	40014980 	beqz	$r12,328(0x148) # 9000000008005958 <get_next_dirent+0x190>
9000000008005814:	0015009f 	move	$r31,$r4
9000000008005818:	28c06304 	ld.d	$r4,$r24,24(0x18)
900000000800581c:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
9000000008005820:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008005824:	40013d80 	beqz	$r12,316(0x13c) # 9000000008005960 <get_next_dirent+0x198>
    return -1;
  struct dirent de;
  struct dirent64 lde;
  int ret = 0, cnt = 0, copysize = 0;
9000000008005828:	29b472c0 	st.w	$r0,$r22,-740(0xd1c)
  elock(f->ep); // 锁住条目
900000000800582c:	54835400 	bl	33620(0x8354) # 900000000800db80 <elock>
  int ret = 0, cnt = 0, copysize = 0;
9000000008005830:	0015001c 	move	$r28,$r0
    // 如果当前的条目是一个空的
    if (0 == ret) {
      continue;
    }
    // 如果已经到了文件末尾了
    if (-1 == ret) {
9000000008005834:	02bffc1d 	addi.w	$r29,$r0,-1(0xfff)
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;

    // 计算大小，需要考虑内存对齐和可变长文件名
    int size = sizeof(struct dirent64) - sizeof(lde.d_name) +
               strlen(lde.d_name) + 1; // +1是因为字符串最后要保存一个0
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64);
9000000008005838:	02bf9c1e 	addi.w	$r30,$r0,-25(0xfe7)
900000000800583c:	50005000 	b	80(0x50) # 900000000800588c <get_next_dirent+0xc4>
      eunlock(f->ep);
9000000008005840:	28c06304 	ld.d	$r4,$r24,24(0x18)
9000000008005844:	54837c00 	bl	33660(0x837c) # 900000000800dbc0 <eunlock>
  eunlock(f->ep);

  f->off += (cnt << 5);

  return copysize;
}
9000000008005848:	00150384 	move	$r4,$r28
900000000800584c:	28cba061 	ld.d	$r1,$r3,744(0x2e8)
9000000008005850:	28cb8076 	ld.d	$r22,$r3,736(0x2e0)
9000000008005854:	28cb6077 	ld.d	$r23,$r3,728(0x2d8)
9000000008005858:	28cb4078 	ld.d	$r24,$r3,720(0x2d0)
900000000800585c:	28cb2079 	ld.d	$r25,$r3,712(0x2c8)
9000000008005860:	28cb007a 	ld.d	$r26,$r3,704(0x2c0)
9000000008005864:	28cae07b 	ld.d	$r27,$r3,696(0x2b8)
9000000008005868:	28cac07c 	ld.d	$r28,$r3,688(0x2b0)
900000000800586c:	28caa07d 	ld.d	$r29,$r3,680(0x2a8)
9000000008005870:	28ca807e 	ld.d	$r30,$r3,672(0x2a0)
9000000008005874:	28ca607f 	ld.d	$r31,$r3,664(0x298)
9000000008005878:	02cbc063 	addi.d	$r3,$r3,752(0x2f0)
900000000800587c:	4c000020 	jirl	$r0,$r1,0
    addr += cpsz;
9000000008005880:	0010e77b 	add.d	$r27,$r27,$r25
    n -= cpsz;
9000000008005884:	0011675a 	sub.w	$r26,$r26,$r25
    copysize += cpsz;
9000000008005888:	0010679c 	add.w	$r28,$r28,$r25
    lde.d_off = f->off;
900000000800588c:	28808306 	ld.w	$r6,$r24,32(0x20)
9000000008005890:	00df00cc 	bstrpick.d	$r12,$r6,0x1f,0x0
9000000008005894:	29f4a2cc 	st.d	$r12,$r22,-728(0xd28)
    ret = enext(f->ep, &de, f->off, &cnt);
9000000008005898:	02f472c7 	addi.d	$r7,$r22,-740(0xd1c)
900000000800589c:	02f8e2c5 	addi.d	$r5,$r22,-456(0xe38)
90000000080058a0:	28c06304 	ld.d	$r4,$r24,24(0x18)
90000000080058a4:	5486c800 	bl	34504(0x86c8) # 900000000800df6c <enext>
    f->off += (cnt << 5);
90000000080058a8:	28b472cc 	ld.w	$r12,$r22,-740(0xd1c)
90000000080058ac:	0040958d 	slli.w	$r13,$r12,0x5
90000000080058b0:	2880830c 	ld.w	$r12,$r24,32(0x20)
90000000080058b4:	0010358c 	add.w	$r12,$r12,$r13
90000000080058b8:	2980830c 	st.w	$r12,$r24,32(0x20)
    if (0 == ret) {
90000000080058bc:	43ffd09f 	beqz	$r4,-48(0x7fffd0) # 900000000800588c <get_next_dirent+0xc4>
    if (-1 == ret) {
90000000080058c0:	5bff809d 	beq	$r4,$r29,-128(0x3ff80) # 9000000008005840 <get_next_dirent+0x78>
    memcpy(lde.d_name, de.filename, sizeof(de.filename));
90000000080058c4:	02840006 	addi.w	$r6,$r0,256(0x100)
90000000080058c8:	02f8e2c5 	addi.d	$r5,$r22,-456(0xe38)
90000000080058cc:	02f4cec4 	addi.d	$r4,$r22,-717(0xd33)
90000000080058d0:	57b7c3ff 	bl	-18496(0xfffb7c0) # 9000000008001090 <memcpy>
    lde.d_ino = 0;
90000000080058d4:	29f482c0 	st.d	$r0,$r22,-736(0xd20)
    lde.d_type = (de.attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
90000000080058d8:	2a3ce2cc 	ld.bu	$r12,$r22,-200(0xf38)
90000000080058dc:	03c0418c 	xori	$r12,$r12,0x10
90000000080058e0:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
90000000080058e4:	02c0058c 	addi.d	$r12,$r12,1(0x1)
90000000080058e8:	2934cacc 	st.b	$r12,$r22,-718(0xd32)
               strlen(lde.d_name) + 1; // +1是因为字符串最后要保存一个0
90000000080058ec:	02f4cec4 	addi.d	$r4,$r22,-717(0xd33)
90000000080058f0:	57b8ebff 	bl	-18200(0xfffb8e8) # 90000000080011d8 <strlen>
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64);
90000000080058f4:	001113d7 	sub.w	$r23,$r30,$r4
90000000080058f8:	03401ef7 	andi	$r23,$r23,0x7
               strlen(lde.d_name) + 1; // +1是因为字符串最后要保存一个0
90000000080058fc:	02806484 	addi.w	$r4,$r4,25(0x19)
    size += (sizeof(uint64) - (size % sizeof(uint64))) % sizeof(uint64);
9000000008005900:	001012f7 	add.w	$r23,$r23,$r4
    lde.d_reclen = size;
9000000008005904:	006f82f9 	bstrpick.w	$r25,$r23,0xf,0x0
9000000008005908:	2974c2d9 	st.h	$r25,$r22,-720(0xd30)
    if (lde.d_reclen > n) {
900000000800590c:	60002f59 	blt	$r26,$r25,44(0x2c) # 9000000008005938 <get_next_dirent+0x170>
    if (copyout(p->pagetable, addr, (char *)&lde, cpsz) < 0) {
9000000008005910:	00150327 	move	$r7,$r25
9000000008005914:	02f482c6 	addi.d	$r6,$r22,-736(0xd20)
9000000008005918:	00150365 	move	$r5,$r27
900000000800591c:	28c183e4 	ld.d	$r4,$r31,96(0x60)
9000000008005920:	57e56fff 	bl	-6804(0xfffe56c) # 9000000008003e8c <copyout>
9000000008005924:	67ff5c80 	bge	$r4,$r0,-164(0x3ff5c) # 9000000008005880 <get_next_dirent+0xb8>
      eunlock(f->ep);
9000000008005928:	28c06304 	ld.d	$r4,$r24,24(0x18)
900000000800592c:	54829400 	bl	33428(0x8294) # 900000000800dbc0 <eunlock>
      return -1;
9000000008005930:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
9000000008005934:	53ff17ff 	b	-236(0xfffff14) # 9000000008005848 <get_next_dirent+0x80>
  eunlock(f->ep);
9000000008005938:	28c06304 	ld.d	$r4,$r24,24(0x18)
900000000800593c:	54828400 	bl	33412(0x8284) # 900000000800dbc0 <eunlock>
  f->off += (cnt << 5);
9000000008005940:	28b472cc 	ld.w	$r12,$r22,-740(0xd1c)
9000000008005944:	0040958d 	slli.w	$r13,$r12,0x5
9000000008005948:	2880830c 	ld.w	$r12,$r24,32(0x20)
900000000800594c:	0010358c 	add.w	$r12,$r12,$r13
9000000008005950:	2980830c 	st.w	$r12,$r24,32(0x20)
  return copysize;
9000000008005954:	53fef7ff 	b	-268(0xffffef4) # 9000000008005848 <get_next_dirent+0x80>
    return -1;
9000000008005958:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
900000000800595c:	53feefff 	b	-276(0xffffeec) # 9000000008005848 <get_next_dirent+0x80>
9000000008005960:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
9000000008005964:	53fee7ff 	b	-284(0xffffee4) # 9000000008005848 <get_next_dirent+0x80>

9000000008005968 <fileseek>:

uint64 fileseek(struct file *f, uint64 offset, int whence) {
9000000008005968:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800596c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008005970:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008005974:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008005978:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800597c:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008005980:	29c0007a 	st.d	$r26,$r3,0
9000000008005984:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008005988:	00150097 	move	$r23,$r4
900000000800598c:	001500b9 	move	$r25,$r5
9000000008005990:	001500da 	move	$r26,$r6
  uint64 ret = -1;
  if (f->type == FD_ENTRY) {
9000000008005994:	2880008c 	ld.w	$r12,$r4,0
9000000008005998:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000800599c:	5800358d 	beq	$r12,$r13,52(0x34) # 90000000080059d0 <fileseek+0x68>
      ret = (f->off += offset);
    } else if (whence == SEEK_END) {
      ret = f->off = f->ep->file_size + offset;
    }
    eunlock(f->ep);
  } else if (f->type == FD_PIPE) {
90000000080059a0:	0280040d 	addi.w	$r13,$r0,1(0x1)
  uint64 ret = -1;
90000000080059a4:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
  } else if (f->type == FD_PIPE) {
90000000080059a8:	5800918d 	beq	$r12,$r13,144(0x90) # 9000000008005a38 <fileseek+0xd0>
    }
    release(&f->pipe->lock);
  }

  return ret;
}
90000000080059ac:	00150304 	move	$r4,$r24
90000000080059b0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080059b4:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080059b8:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080059bc:	28c04078 	ld.d	$r24,$r3,16(0x10)
90000000080059c0:	28c02079 	ld.d	$r25,$r3,8(0x8)
90000000080059c4:	28c0007a 	ld.d	$r26,$r3,0
90000000080059c8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080059cc:	4c000020 	jirl	$r0,$r1,0
    elock(f->ep);
90000000080059d0:	28c06084 	ld.d	$r4,$r4,24(0x18)
90000000080059d4:	5481ac00 	bl	33196(0x81ac) # 900000000800db80 <elock>
    if (whence == SEEK_SET) {
90000000080059d8:	44001b40 	bnez	$r26,24(0x18) # 90000000080059f0 <fileseek+0x88>
      f->off = offset;
90000000080059dc:	298082f9 	st.w	$r25,$r23,32(0x20)
      ret = offset;
90000000080059e0:	00150338 	move	$r24,$r25
    eunlock(f->ep);
90000000080059e4:	28c062e4 	ld.d	$r4,$r23,24(0x18)
90000000080059e8:	5481d800 	bl	33240(0x81d8) # 900000000800dbc0 <eunlock>
90000000080059ec:	53ffc3ff 	b	-64(0xfffffc0) # 90000000080059ac <fileseek+0x44>
    } else if (whence == SEEK_CUR) {
90000000080059f0:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000080059f4:	58002f4c 	beq	$r26,$r12,44(0x2c) # 9000000008005a20 <fileseek+0xb8>
    } else if (whence == SEEK_END) {
90000000080059f8:	0280080c 	addi.w	$r12,$r0,2(0x2)
  uint64 ret = -1;
90000000080059fc:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
    } else if (whence == SEEK_END) {
9000000008005a00:	5fffe74c 	bne	$r26,$r12,-28(0x3ffe4) # 90000000080059e4 <fileseek+0x7c>
      ret = f->off = f->ep->file_size + offset;
9000000008005a04:	28c062ec 	ld.d	$r12,$r23,24(0x18)
9000000008005a08:	00408338 	slli.w	$r24,$r25,0x0
9000000008005a0c:	2884218c 	ld.w	$r12,$r12,264(0x108)
9000000008005a10:	00103318 	add.w	$r24,$r24,$r12
9000000008005a14:	298082f8 	st.w	$r24,$r23,32(0x20)
9000000008005a18:	00df0318 	bstrpick.d	$r24,$r24,0x1f,0x0
9000000008005a1c:	53ffcbff 	b	-56(0xfffffc8) # 90000000080059e4 <fileseek+0x7c>
      ret = (f->off += offset);
9000000008005a20:	00408338 	slli.w	$r24,$r25,0x0
9000000008005a24:	288082ec 	ld.w	$r12,$r23,32(0x20)
9000000008005a28:	00103318 	add.w	$r24,$r24,$r12
9000000008005a2c:	298082f8 	st.w	$r24,$r23,32(0x20)
9000000008005a30:	00df0318 	bstrpick.d	$r24,$r24,0x1f,0x0
9000000008005a34:	53ffb3ff 	b	-80(0xfffffb0) # 90000000080059e4 <fileseek+0x7c>
    acquire(&f->pipe->lock);
9000000008005a38:	28c04084 	ld.d	$r4,$r4,16(0x10)
9000000008005a3c:	57b477ff 	bl	-19340(0xfffb474) # 9000000008000eb0 <acquire>
    if (whence == SEEK_SET) {
9000000008005a40:	44001b40 	bnez	$r26,24(0x18) # 9000000008005a58 <fileseek+0xf0>
      f->off = offset;
9000000008005a44:	298082f9 	st.w	$r25,$r23,32(0x20)
      ret = offset;
9000000008005a48:	00150338 	move	$r24,$r25
    release(&f->pipe->lock);
9000000008005a4c:	28c042e4 	ld.d	$r4,$r23,16(0x10)
9000000008005a50:	57b4c3ff 	bl	-19264(0xfffb4c0) # 9000000008000f10 <release>
9000000008005a54:	53ff5bff 	b	-168(0xfffff58) # 90000000080059ac <fileseek+0x44>
    } else if (whence == SEEK_CUR) {
9000000008005a58:	0280040c 	addi.w	$r12,$r0,1(0x1)
  uint64 ret = -1;
9000000008005a5c:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
    } else if (whence == SEEK_CUR) {
9000000008005a60:	5fffef4c 	bne	$r26,$r12,-20(0x3ffec) # 9000000008005a4c <fileseek+0xe4>
      f->off += offset;
9000000008005a64:	00408338 	slli.w	$r24,$r25,0x0
9000000008005a68:	288082f9 	ld.w	$r25,$r23,32(0x20)
9000000008005a6c:	00106718 	add.w	$r24,$r24,$r25
9000000008005a70:	298082f8 	st.w	$r24,$r23,32(0x20)
      ret = f->off;
9000000008005a74:	00df0318 	bstrpick.d	$r24,$r24,0x1f,0x0
9000000008005a78:	53ffd7ff 	b	-44(0xfffffd4) # 9000000008005a4c <fileseek+0xe4>

9000000008005a7c <fileillegal>:

int fileillegal(struct file *f) {
  switch (f->type) {
9000000008005a7c:	2880008c 	ld.w	$r12,$r4,0
9000000008005a80:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008005a84:	5800718d 	beq	$r12,$r13,112(0x70) # 9000000008005af4 <fileillegal+0x78>
9000000008005a88:	02800c0d 	addi.w	$r13,$r0,3(0x3)
9000000008005a8c:	5800298d 	beq	$r12,$r13,40(0x28) # 9000000008005ab4 <fileillegal+0x38>
9000000008005a90:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008005a94:	5800218d 	beq	$r12,$r13,32(0x20) # 9000000008005ab4 <fileillegal+0x38>
int fileillegal(struct file *f) {
9000000008005a98:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008005a9c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005aa0:	29c00076 	st.d	$r22,$r3,0
9000000008005aa4:	02c04076 	addi.d	$r22,$r3,16(0x10)
    if (f->major < 0 || !devsw[f->major].read || !devsw[f->major].write)
      return 1;
  case FD_ENTRY:
    break;
  default:
    panic("fileillegal");
9000000008005aa8:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000008005aac:	02ede084 	addi.d	$r4,$r4,-1160(0xb78)
9000000008005ab0:	57a757ff 	bl	-22700(0xfffa754) # 9000000008000204 <panic>
    if (f->major < 0 || !devsw[f->major].read || !devsw[f->major].write)
9000000008005ab4:	2840908c 	ld.h	$r12,$r4,36(0x24)
      return 1;
9000000008005ab8:	02800404 	addi.w	$r4,$r0,1(0x1)
    if (f->major < 0 || !devsw[f->major].read || !devsw[f->major].write)
9000000008005abc:	60003d80 	blt	$r12,$r0,60(0x3c) # 9000000008005af8 <fileillegal+0x7c>
9000000008005ac0:	0280e00d 	addi.w	$r13,$r0,56(0x38)
9000000008005ac4:	001db58e 	mul.d	$r14,$r12,$r13
9000000008005ac8:	1c000a2d 	pcaddu12i	$r13,81(0x51)
9000000008005acc:	02c5a1ad 	addi.d	$r13,$r13,360(0x168)
9000000008005ad0:	0010b9ad 	add.d	$r13,$r13,$r14
9000000008005ad4:	28c0a1ad 	ld.d	$r13,$r13,40(0x28)
9000000008005ad8:	400021a0 	beqz	$r13,32(0x20) # 9000000008005af8 <fileillegal+0x7c>
9000000008005adc:	1c000a2d 	pcaddu12i	$r13,81(0x51)
9000000008005ae0:	02c551ad 	addi.d	$r13,$r13,340(0x154)
9000000008005ae4:	0010b9ac 	add.d	$r12,$r13,$r14
9000000008005ae8:	28c0c184 	ld.d	$r4,$r12,48(0x30)
      return 1;
9000000008005aec:	02400484 	sltui	$r4,$r4,1(0x1)
9000000008005af0:	4c000020 	jirl	$r0,$r1,0
    return 1;
  }
  return 0;
9000000008005af4:	00150004 	move	$r4,$r0
}
9000000008005af8:	4c000020 	jirl	$r0,$r1,0

9000000008005afc <fileiolock>:

void fileiolock(struct file *f) {
9000000008005afc:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008005b00:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005b04:	29c00076 	st.d	$r22,$r3,0
9000000008005b08:	02c04076 	addi.d	$r22,$r3,16(0x10)
  switch (f->type) {
9000000008005b0c:	2880008c 	ld.w	$r12,$r4,0
9000000008005b10:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008005b14:	58001d8d 	beq	$r12,$r13,28(0x1c) # 9000000008005b30 <fileiolock+0x34>
9000000008005b18:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008005b1c:	5800218d 	beq	$r12,$r13,32(0x20) # 9000000008005b3c <fileiolock+0x40>
                // instead
  case FD_NULL: // null io shouldn't be handled here
  case FD_NONE:
    return;
  }
}
9000000008005b20:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008005b24:	28c00076 	ld.d	$r22,$r3,0
9000000008005b28:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008005b2c:	4c000020 	jirl	$r0,$r1,0
    acquire(&f->pipe->lock);
9000000008005b30:	28c04084 	ld.d	$r4,$r4,16(0x10)
9000000008005b34:	57b37fff 	bl	-19588(0xfffb37c) # 9000000008000eb0 <acquire>
    break;
9000000008005b38:	53ffebff 	b	-24(0xfffffe8) # 9000000008005b20 <fileiolock+0x24>
    elock(f->ep);
9000000008005b3c:	28c06084 	ld.d	$r4,$r4,24(0x18)
9000000008005b40:	54804000 	bl	32832(0x8040) # 900000000800db80 <elock>
    break;
9000000008005b44:	53ffdfff 	b	-36(0xfffffdc) # 9000000008005b20 <fileiolock+0x24>

9000000008005b48 <fileiounlock>:

void fileiounlock(struct file *f) {
9000000008005b48:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008005b4c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005b50:	29c00076 	st.d	$r22,$r3,0
9000000008005b54:	02c04076 	addi.d	$r22,$r3,16(0x10)
  switch (f->type) {
9000000008005b58:	2880008c 	ld.w	$r12,$r4,0
9000000008005b5c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008005b60:	58001d8d 	beq	$r12,$r13,28(0x1c) # 9000000008005b7c <fileiounlock+0x34>
9000000008005b64:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008005b68:	5800218d 	beq	$r12,$r13,32(0x20) # 9000000008005b88 <fileiounlock+0x40>
                // instead
  case FD_NULL: // null io shouldn't be handled here
  case FD_NONE:
    return;
  }
}
9000000008005b6c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008005b70:	28c00076 	ld.d	$r22,$r3,0
9000000008005b74:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008005b78:	4c000020 	jirl	$r0,$r1,0
    release(&f->pipe->lock);
9000000008005b7c:	28c04084 	ld.d	$r4,$r4,16(0x10)
9000000008005b80:	57b393ff 	bl	-19568(0xfffb390) # 9000000008000f10 <release>
    break;
9000000008005b84:	53ffebff 	b	-24(0xfffffe8) # 9000000008005b6c <fileiounlock+0x24>
    eunlock(f->ep);
9000000008005b88:	28c06084 	ld.d	$r4,$r4,24(0x18)
9000000008005b8c:	54803400 	bl	32820(0x8034) # 900000000800dbc0 <eunlock>
    break;
9000000008005b90:	53ffdfff 	b	-36(0xfffffdc) # 9000000008005b6c <fileiounlock+0x24>

9000000008005b94 <file_send>:

// TODO
uint64 file_send(struct file *fin, struct file *fout, uint64 addr, uint64 n) {
9000000008005b94:	02f60063 	addi.d	$r3,$r3,-640(0xd80)
9000000008005b98:	29c9e061 	st.d	$r1,$r3,632(0x278)
9000000008005b9c:	29c9c076 	st.d	$r22,$r3,624(0x270)
9000000008005ba0:	29c9a077 	st.d	$r23,$r3,616(0x268)
9000000008005ba4:	29c98078 	st.d	$r24,$r3,608(0x260)
9000000008005ba8:	29c96079 	st.d	$r25,$r3,600(0x258)
9000000008005bac:	29c9407a 	st.d	$r26,$r3,592(0x250)
9000000008005bb0:	29c9207b 	st.d	$r27,$r3,584(0x248)
9000000008005bb4:	29c9007c 	st.d	$r28,$r3,576(0x240)
9000000008005bb8:	29c8e07d 	st.d	$r29,$r3,568(0x238)
9000000008005bbc:	29c8c07e 	st.d	$r30,$r3,560(0x230)
9000000008005bc0:	29c8a07f 	st.d	$r31,$r3,552(0x228)
9000000008005bc4:	02ca0076 	addi.d	$r22,$r3,640(0x280)
9000000008005bc8:	0015009a 	move	$r26,$r4
9000000008005bcc:	001500b8 	move	$r24,$r5
9000000008005bd0:	29f622c6 	st.d	$r6,$r22,-632(0xd88)
9000000008005bd4:	001500f9 	move	$r25,$r7
  uint64 off = 0;
9000000008005bd8:	29fe62c0 	st.d	$r0,$r22,-104(0xf98)
  uint64 rlen = 0;
  uint64 wlen = 0;
  uint64 ret = 0;
  if (addr) {
9000000008005bdc:	440028c0 	bnez	$r6,40(0x28) # 9000000008005c04 <file_send+0x70>
    if (either_copyin(&off, 1, addr, sizeof(uint64)) < 0) {
      return -1;
    }
  } else {
    off = fin->off;
9000000008005be0:	2a80808c 	ld.wu	$r12,$r4,32(0x20)
9000000008005be4:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
  // if(fileillegal(fin)||fileillegal(fout)){
  //     return -1;
  // }
  // fileiolock(fin);
  // fileiolock(fout);
  while (n) {
9000000008005be8:	400194e0 	beqz	$r7,404(0x194) # 9000000008005d7c <file_send+0x1e8>
uint64 file_send(struct file *fin, struct file *fout, uint64 addr, uint64 n) {
9000000008005bec:	0015001d 	move	$r29,$r0
9000000008005bf0:	0288001e 	addi.w	$r30,$r0,512(0x200)
    if (n > 512) {
      rlen = 512;
    } else {
      rlen = n;
    }
    if (fin->type != FD_PIPE)
9000000008005bf4:	0280041b 	addi.w	$r27,$r0,1(0x1)
      fileiolock(fin);
    rlen = fileinput(fin, 0, (uint64)&buf, rlen, off);
    if (fin->type != FD_PIPE)
      fileiounlock(fin);
    printf("[filesend] send rlen %p\n", rlen);
9000000008005bf8:	1c00021f 	pcaddu12i	$r31,16(0x10)
9000000008005bfc:	02e8e3ff 	addi.d	$r31,$r31,-1480(0xa38)
9000000008005c00:	5000a800 	b	168(0xa8) # 9000000008005ca8 <file_send+0x114>
    if (either_copyin(&off, 1, addr, sizeof(uint64)) < 0) {
9000000008005c04:	02802007 	addi.w	$r7,$r0,8(0x8)
9000000008005c08:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008005c0c:	02fe62c4 	addi.d	$r4,$r22,-104(0xf98)
9000000008005c10:	57c71fff 	bl	-14564(0xfffc71c) # 900000000800232c <either_copyin>
      return -1;
9000000008005c14:	02bffc1d 	addi.w	$r29,$r0,-1(0xfff)
    if (either_copyin(&off, 1, addr, sizeof(uint64)) < 0) {
9000000008005c18:	60012c80 	blt	$r4,$r0,300(0x12c) # 9000000008005d44 <file_send+0x1b0>
  while (n) {
9000000008005c1c:	0015033d 	move	$r29,$r25
9000000008005c20:	47ffcf3f 	bnez	$r25,-52(0x7fffcc) # 9000000008005bec <file_send+0x58>
  }
  // fileiounlock(fout);
  // fileiounlock(fin);
  // printf("[filesend]after send fout off:%p\n",fout->off);
  if (addr) {
    if (either_copyout(1, addr, &off, sizeof(uint64)) < 0) {
9000000008005c24:	02802007 	addi.w	$r7,$r0,8(0x8)
9000000008005c28:	02fe62c6 	addi.d	$r6,$r22,-104(0xf98)
9000000008005c2c:	28f622c5 	ld.d	$r5,$r22,-632(0xd88)
9000000008005c30:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008005c34:	57c677ff 	bl	-14732(0xfffc674) # 90000000080022a8 <either_copyout>
      return -1;
9000000008005c38:	02000084 	slti	$r4,$r4,0
9000000008005c3c:	001393bd 	masknez	$r29,$r29,$r4
9000000008005c40:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008005c44:	00131184 	maskeqz	$r4,$r12,$r4
9000000008005c48:	001513bd 	or	$r29,$r29,$r4
9000000008005c4c:	5000f800 	b	248(0xf8) # 9000000008005d44 <file_send+0x1b0>
      fileiolock(fin);
9000000008005c50:	00150344 	move	$r4,$r26
9000000008005c54:	57feabff 	bl	-344(0xffffea8) # 9000000008005afc <fileiolock>
9000000008005c58:	50006800 	b	104(0x68) # 9000000008005cc0 <file_send+0x12c>
      fileiounlock(fin);
9000000008005c5c:	00150344 	move	$r4,$r26
9000000008005c60:	57feebff 	bl	-280(0xffffee8) # 9000000008005b48 <fileiounlock>
9000000008005c64:	50008000 	b	128(0x80) # 9000000008005ce4 <file_send+0x150>
      fileiolock(fout);
9000000008005c68:	00150304 	move	$r4,$r24
9000000008005c6c:	57fe93ff 	bl	-368(0xffffe90) # 9000000008005afc <fileiolock>
9000000008005c70:	50009c00 	b	156(0x9c) # 9000000008005d0c <file_send+0x178>
      fileiounlock(fout);
9000000008005c74:	00150304 	move	$r4,$r24
9000000008005c78:	57fed3ff 	bl	-304(0xffffed0) # 9000000008005b48 <fileiounlock>
    printf("[filesend] send wlen:%p\n", rlen, wlen);
9000000008005c7c:	00150386 	move	$r6,$r28
9000000008005c80:	001502e5 	move	$r5,$r23
9000000008005c84:	1c000204 	pcaddu12i	$r4,16(0x10)
9000000008005c88:	02e73084 	addi.d	$r4,$r4,-1588(0x9cc)
9000000008005c8c:	57a5ebff 	bl	-23064(0xfffa5e8) # 9000000008000274 <printf>
    fout->off += wlen;
9000000008005c90:	0040838d 	slli.w	$r13,$r28,0x0
9000000008005c94:	2880830c 	ld.w	$r12,$r24,32(0x20)
9000000008005c98:	0010358c 	add.w	$r12,$r12,$r13
9000000008005c9c:	2980830c 	st.w	$r12,$r24,32(0x20)
    ret += wlen;
9000000008005ca0:	0010f3bd 	add.d	$r29,$r29,$r28
  while (n) {
9000000008005ca4:	40009320 	beqz	$r25,144(0x90) # 9000000008005d34 <file_send+0x1a0>
    if (n > 512) {
9000000008005ca8:	0248072c 	sltui	$r12,$r25,513(0x201)
9000000008005cac:	00133337 	maskeqz	$r23,$r25,$r12
9000000008005cb0:	0013b3cc 	masknez	$r12,$r30,$r12
9000000008005cb4:	001532f7 	or	$r23,$r23,$r12
    if (fin->type != FD_PIPE)
9000000008005cb8:	2880034c 	ld.w	$r12,$r26,0
9000000008005cbc:	5fff959b 	bne	$r12,$r27,-108(0x3ff94) # 9000000008005c50 <file_send+0xbc>
    rlen = fileinput(fin, 0, (uint64)&buf, rlen, off);
9000000008005cc0:	004082e7 	slli.w	$r7,$r23,0x0
9000000008005cc4:	28fe62c8 	ld.d	$r8,$r22,-104(0xf98)
9000000008005cc8:	02f662c6 	addi.d	$r6,$r22,-616(0xd98)
9000000008005ccc:	00150005 	move	$r5,$r0
9000000008005cd0:	00150344 	move	$r4,$r26
9000000008005cd4:	57f35fff 	bl	-3236(0xffff35c) # 9000000008005030 <fileinput>
9000000008005cd8:	00150097 	move	$r23,$r4
    if (fin->type != FD_PIPE)
9000000008005cdc:	2880034c 	ld.w	$r12,$r26,0
9000000008005ce0:	5fff7d9b 	bne	$r12,$r27,-132(0x3ff7c) # 9000000008005c5c <file_send+0xc8>
    printf("[filesend] send rlen %p\n", rlen);
9000000008005ce4:	001502e5 	move	$r5,$r23
9000000008005ce8:	001503e4 	move	$r4,$r31
9000000008005cec:	57a58bff 	bl	-23160(0xfffa588) # 9000000008000274 <printf>
    off += rlen;
9000000008005cf0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008005cf4:	0010dd8c 	add.d	$r12,$r12,$r23
9000000008005cf8:	29fe62cc 	st.d	$r12,$r22,-104(0xf98)
    n -= rlen;
9000000008005cfc:	0011df39 	sub.d	$r25,$r25,$r23
    if (!rlen) {
9000000008005d00:	400036e0 	beqz	$r23,52(0x34) # 9000000008005d34 <file_send+0x1a0>
    if (fout->type != FD_PIPE)
9000000008005d04:	2880030c 	ld.w	$r12,$r24,0
9000000008005d08:	5fff619b 	bne	$r12,$r27,-160(0x3ff60) # 9000000008005c68 <file_send+0xd4>
    wlen = fileoutput(fout, 0, (uint64)&buf, rlen, fout->off);
9000000008005d0c:	004082e7 	slli.w	$r7,$r23,0x0
9000000008005d10:	2a808308 	ld.wu	$r8,$r24,32(0x20)
9000000008005d14:	02f662c6 	addi.d	$r6,$r22,-616(0xd98)
9000000008005d18:	00150005 	move	$r5,$r0
9000000008005d1c:	00150304 	move	$r4,$r24
9000000008005d20:	57f3dfff 	bl	-3108(0xffff3dc) # 90000000080050fc <fileoutput>
9000000008005d24:	0015009c 	move	$r28,$r4
    if (fout->type != FD_PIPE)
9000000008005d28:	2880030c 	ld.w	$r12,$r24,0
9000000008005d2c:	5bff519b 	beq	$r12,$r27,-176(0x3ff50) # 9000000008005c7c <file_send+0xe8>
9000000008005d30:	53ff47ff 	b	-188(0xfffff44) # 9000000008005c74 <file_send+0xe0>
  if (addr) {
9000000008005d34:	28f622cc 	ld.d	$r12,$r22,-632(0xd88)
9000000008005d38:	47feed9f 	bnez	$r12,-276(0x7ffeec) # 9000000008005c24 <file_send+0x90>
    }
  } else {
    fin->off = off;
9000000008005d3c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008005d40:	2980834c 	st.w	$r12,$r26,32(0x20)
  }
  return ret;
9000000008005d44:	001503a4 	move	$r4,$r29
9000000008005d48:	28c9e061 	ld.d	$r1,$r3,632(0x278)
9000000008005d4c:	28c9c076 	ld.d	$r22,$r3,624(0x270)
9000000008005d50:	28c9a077 	ld.d	$r23,$r3,616(0x268)
9000000008005d54:	28c98078 	ld.d	$r24,$r3,608(0x260)
9000000008005d58:	28c96079 	ld.d	$r25,$r3,600(0x258)
9000000008005d5c:	28c9407a 	ld.d	$r26,$r3,592(0x250)
9000000008005d60:	28c9207b 	ld.d	$r27,$r3,584(0x248)
9000000008005d64:	28c9007c 	ld.d	$r28,$r3,576(0x240)
9000000008005d68:	28c8e07d 	ld.d	$r29,$r3,568(0x238)
9000000008005d6c:	28c8c07e 	ld.d	$r30,$r3,560(0x230)
9000000008005d70:	28c8a07f 	ld.d	$r31,$r3,552(0x228)
9000000008005d74:	02ca0063 	addi.d	$r3,$r3,640(0x280)
9000000008005d78:	4c000020 	jirl	$r0,$r1,0
  while (n) {
9000000008005d7c:	001500fd 	move	$r29,$r7
9000000008005d80:	53ffbfff 	b	-68(0xfffffbc) # 9000000008005d3c <file_send+0x1a8>

9000000008005d84 <trapinit>:

extern int devintr();

void
trapinit(void)
{
9000000008005d84:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008005d88:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005d8c:	29c00076 	st.d	$r22,$r3,0
9000000008005d90:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&tickslock, "time");
9000000008005d94:	1c000205 	pcaddu12i	$r5,16(0x10)
9000000008005d98:	02e450a5 	addi.d	$r5,$r5,-1772(0x914)
9000000008005d9c:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000008005da0:	28cd1084 	ld.d	$r4,$r4,836(0x344)
9000000008005da4:	57b0a3ff 	bl	-20320(0xfffb0a0) # 9000000008000e44 <initlock>
  asm volatile("csrwr %0, 0x4" : : "r" (x) );
9000000008005da8:	03aff00c 	ori	$r12,$r0,0xbfc
9000000008005dac:	0400102c 	csrwr	$r12,0x4
  asm volatile("csrwr %0, 0x41" : : "r" (x) );
9000000008005db0:	1402000c 	lu12i.w	$r12,4096(0x1000)
9000000008005db4:	03800d8c 	ori	$r12,$r12,0x3
9000000008005db8:	0401042c 	csrwr	$r12,0x41
  asm volatile("csrwr %0, 0xc" : : "r" (x) );
9000000008005dbc:	1c00034c 	pcaddu12i	$r12,26(0x1a)
9000000008005dc0:	28cbb18c 	ld.d	$r12,$r12,748(0x2ec)
9000000008005dc4:	0400302c 	csrwr	$r12,0xc
  asm volatile("csrwr %0, 0x88" : : "r" (x) );
9000000008005dc8:	1c00034c 	pcaddu12i	$r12,26(0x1a)
9000000008005dcc:	28cba18c 	ld.d	$r12,$r12,744(0x2e8)
9000000008005dd0:	0402202c 	csrwr	$r12,0x88
  asm volatile("csrwr %0, 0x93" : : "r" (x) );
9000000008005dd4:	1c00034c 	pcaddu12i	$r12,26(0x1a)
9000000008005dd8:	28cbb18c 	ld.d	$r12,$r12,748(0x2ec)
9000000008005ddc:	04024c2c 	csrwr	$r12,0x93
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008005de0:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() | CSR_CRMD_IE);
9000000008005de4:	0380118c 	ori	$r12,$r12,0x4
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008005de8:	0400002c 	csrwr	$r12,0x0
  // TLB重填exception
  w_csr_tlbrentry((uint64)handle_tlbr);
  // 机器exception
  w_csr_merrentry((uint64)handle_merr);
  intr_on();
}
9000000008005dec:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008005df0:	28c00076 	ld.d	$r22,$r3,0
9000000008005df4:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008005df8:	4c000020 	jirl	$r0,$r1,0

9000000008005dfc <usertrapret>:
//
// return to user space
//
void
usertrapret(void)
{
9000000008005dfc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008005e00:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008005e04:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008005e08:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct proc *p = myproc();
9000000008005e0c:	57b91fff 	bl	-18148(0xfffb91c) # 9000000008001728 <myproc>
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008005e10:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() & ~CSR_CRMD_IE);
9000000008005e14:	02bfec0d 	addi.w	$r13,$r0,-5(0xffb)
9000000008005e18:	0014b58c 	and	$r12,$r12,$r13
  asm volatile("csrwr %0, 0x0" : : "r" (x));
9000000008005e1c:	0400002c 	csrwr	$r12,0x0
  // kerneltrap() to usertrap(), so turn off interrupts until
  // we're back in user space, where usertrap() is correct.
  intr_off();

  // send syscalls, interrupts, and exceptions to uservec.S
  w_csr_eentry(TRAMPOLINE + (uservec - trampoline));  //maybe todo
9000000008005e20:	1c00034f 	pcaddu12i	$r15,26(0x1a)
9000000008005e24:	28c9a1ef 	ld.d	$r15,$r15,616(0x268)
9000000008005e28:	1c00034d 	pcaddu12i	$r13,26(0x1a)
9000000008005e2c:	28cb21ad 	ld.d	$r13,$r13,712(0x2c8)
9000000008005e30:	0011bdad 	sub.d	$r13,$r13,$r15
9000000008005e34:	14001fee 	lu12i.w	$r14,255(0xff)
9000000008005e38:	0010b9ad 	add.d	$r13,$r13,$r14
  asm volatile("csrwr %0, 0xc" : : "r" (x) );
9000000008005e3c:	0400302d 	csrwr	$r13,0xc

  // set up trapframe values that uservec will need when
  // the process next re-enters the kernel.
  p->trapframe->kernel_pgdl = r_csr_pgdl();         // kernel page table
9000000008005e40:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
  asm volatile("csrrd %0, 0x19" : "=r" (x) );
9000000008005e44:	0400640d 	csrrd	$r13,0x19
9000000008005e48:	29c4618d 	st.d	$r13,$r12,280(0x118)
  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
9000000008005e4c:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
9000000008005e50:	28c1408d 	ld.d	$r13,$r4,80(0x50)
9000000008005e54:	14000030 	lu12i.w	$r16,1(0x1)
9000000008005e58:	0010c1ad 	add.d	$r13,$r13,$r16
9000000008005e5c:	29c3e18d 	st.d	$r13,$r12,248(0xf8)
  p->trapframe->kernel_trap = (uint64)usertrap;
9000000008005e60:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
9000000008005e64:	1c00000d 	pcaddu12i	$r13,0
9000000008005e68:	02d231ad 	addi.d	$r13,$r13,1164(0x48c)
9000000008005e6c:	29c4018d 	st.d	$r13,$r12,256(0x100)
  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
9000000008005e70:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
  asm volatile("addi.d %0, $tp, 0" : "=r" (x) );
9000000008005e74:	02c0004d 	addi.d	$r13,$r2,0
9000000008005e78:	29c4418d 	st.d	$r13,$r12,272(0x110)
  asm volatile("csrrd %0, 0x1" : "=r" (x) );
9000000008005e7c:	0400040d 	csrrd	$r13,0x1
  // to get to user space.
  
  // set Previous Privilege mode to User Privilege3.
  uint32 x = r_csr_prmd();
  x |= PRMD_PPLV; // set PPLV to 3 for user mode
  x |= PRMD_PIE; // enable interrupts in user mode
9000000008005e80:	03801dad 	ori	$r13,$r13,0x7
  asm volatile("csrwr %0, 0x1" : : "r" (x));
9000000008005e84:	0400042d 	csrwr	$r13,0x1
  w_csr_prmd(x);

  // set S Exception Program Counter to the saved user pc.
  w_csr_era(p->trapframe->era);
9000000008005e88:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
  asm volatile("csrwr %0, 0x6" : : "r" (x));
9000000008005e8c:	28c4218c 	ld.d	$r12,$r12,264(0x108)
9000000008005e90:	0400182c 	csrwr	$r12,0x6

  // tell uservec.S the user page table to switch to.
  volatile uint64 pgdl = (uint64)(p->pagetable);
9000000008005e94:	28c1808c 	ld.d	$r12,$r4,96(0x60)
9000000008005e98:	29ffa2cc 	st.d	$r12,$r22,-24(0xfe8)

  // jump to uservec.S at the top of memory, which 
  // switches to the user page table, restores user registers,
  // and switches to user mode with ertn.
  uint64 fn = TRAMPOLINE + (userret - trampoline);
  ((void (*)(uint64, uint64))fn)(TRAPFRAME, pgdl);
9000000008005e9c:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
  uint64 fn = TRAMPOLINE + (userret - trampoline);
9000000008005ea0:	1c00034c 	pcaddu12i	$r12,26(0x1a)
9000000008005ea4:	28c8018c 	ld.d	$r12,$r12,512(0x200)
9000000008005ea8:	0011bd8c 	sub.d	$r12,$r12,$r15
9000000008005eac:	0010b98c 	add.d	$r12,$r12,$r14
  ((void (*)(uint64, uint64))fn)(TRAPFRAME, pgdl);
9000000008005eb0:	14001fc4 	lu12i.w	$r4,254(0xfe)
9000000008005eb4:	4c000181 	jirl	$r1,$r12,0
  // userret(TRAPFRAME, pgdl);
}
9000000008005eb8:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008005ebc:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008005ec0:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008005ec4:	4c000020 	jirl	$r0,$r1,0

9000000008005ec8 <machine_trap>:
  w_csr_prmd(prmd);
}

void 
machine_trap()
{
9000000008005ec8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008005ecc:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005ed0:	29c00076 	st.d	$r22,$r3,0
9000000008005ed4:	02c04076 	addi.d	$r22,$r3,16(0x10)
  panic("machine error");
9000000008005ed8:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008005edc:	02df6084 	addi.d	$r4,$r4,2008(0x7d8)
9000000008005ee0:	57a327ff 	bl	-23772(0xfffa324) # 9000000008000204 <panic>

9000000008005ee4 <clockintr>:
}

void
clockintr()
{
9000000008005ee4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008005ee8:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008005eec:	29c00076 	st.d	$r22,$r3,0
9000000008005ef0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  acquire(&tickslock);
9000000008005ef4:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000008005ef8:	28c7b084 	ld.d	$r4,$r4,492(0x1ec)
9000000008005efc:	57afb7ff 	bl	-20556(0xfffafb4) # 9000000008000eb0 <acquire>
  ticks++;
9000000008005f00:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000008005f04:	28c7e084 	ld.d	$r4,$r4,504(0x1f8)
9000000008005f08:	2880008c 	ld.w	$r12,$r4,0
9000000008005f0c:	0280058c 	addi.w	$r12,$r12,1(0x1)
9000000008005f10:	2980008c 	st.w	$r12,$r4,0
  wakeup(&ticks);
9000000008005f14:	57c1cfff 	bl	-15924(0xfffc1cc) # 90000000080020e0 <wakeup>
  release(&tickslock);
9000000008005f18:	1c000344 	pcaddu12i	$r4,26(0x1a)
9000000008005f1c:	28c72084 	ld.d	$r4,$r4,456(0x1c8)
9000000008005f20:	57aff3ff 	bl	-20496(0xfffaff0) # 9000000008000f10 <release>
}
9000000008005f24:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008005f28:	28c00076 	ld.d	$r22,$r3,0
9000000008005f2c:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008005f30:	4c000020 	jirl	$r0,$r1,0

9000000008005f34 <devintr>:
// returns 2 if timer interrupt,
// 1 if other device,
// 0 if not recognized.
int
devintr()
{
9000000008005f34:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008005f38:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008005f3c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008005f40:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008005f44:	02c08076 	addi.d	$r22,$r3,32(0x20)
  asm volatile("csrrd %0, 0x5" : "=r" (x) );
9000000008005f48:	0400140c 	csrrd	$r12,0x5
9000000008005f4c:	0015018d 	move	$r13,$r12
  asm volatile("csrrd %0, 0x4" : "=r" (x) );
9000000008005f50:	0400100c 	csrrd	$r12,0x4
  uint32 estat = r_csr_estat();
  uint32 ecfg = r_csr_ecfg();

  
  //CSR.ESTAT.IS & CSR.ECFG.LIE -> int_vec(13bits stand for irq type)
  if(estat & ecfg & HWI_VEC) {
9000000008005f54:	0014b58c 	and	$r12,$r12,$r13
9000000008005f58:	034ff18d 	andi	$r13,$r12,0x3fc
9000000008005f5c:	440025a0 	bnez	$r13,36(0x24) # 9000000008005f80 <devintr+0x4c>
      apic_complete(irq); 
      extioi_complete(irq);        
    }

    return 1;
  } else if(estat & ecfg & TI_VEC){
9000000008005f60:	00cb2d8c 	bstrpick.d	$r12,$r12,0xb,0xb
    // the TI bit in TICLR.
    w_csr_ticlr(r_csr_ticlr() | CSR_TICLR_CLR);

    return 2;
  } else {
    return 0;
9000000008005f64:	00150004 	move	$r4,$r0
  } else if(estat & ecfg & TI_VEC){
9000000008005f68:	44006d80 	bnez	$r12,108(0x6c) # 9000000008005fd4 <devintr+0xa0>
  }
}
9000000008005f6c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008005f70:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008005f74:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008005f78:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008005f7c:	4c000020 	jirl	$r0,$r1,0
    uint64 irq = extioi_claim();
9000000008005f80:	57a5bbff 	bl	-23112(0xfffa5b8) # 9000000008000538 <extioi_claim>
9000000008005f84:	00150097 	move	$r23,$r4
    if(irq & (1UL << UART0_IRQ)){
9000000008005f88:	0340108c 	andi	$r12,$r4,0x4
9000000008005f8c:	44003580 	bnez	$r12,52(0x34) # 9000000008005fc0 <devintr+0x8c>
    return 1;
9000000008005f90:	02800404 	addi.w	$r4,$r0,1(0x1)
    } else if(irq){
9000000008005f94:	43ffdaff 	beqz	$r23,-40(0x7fffd8) # 9000000008005f6c <devintr+0x38>
       printf("unexpected interrupt irq=%d\n", irq);
9000000008005f98:	001502e5 	move	$r5,$r23
9000000008005f9c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008005fa0:	02dc9084 	addi.d	$r4,$r4,1828(0x724)
9000000008005fa4:	57a2d3ff 	bl	-23856(0xfffa2d0) # 9000000008000274 <printf>
      apic_complete(irq); 
9000000008005fa8:	001502e4 	move	$r4,$r23
9000000008005fac:	57e7bbff 	bl	-6216(0xfffe7b8) # 9000000008004764 <apic_complete>
      extioi_complete(irq);        
9000000008005fb0:	001502e4 	move	$r4,$r23
9000000008005fb4:	57a5abff 	bl	-23128(0xfffa5a8) # 900000000800055c <extioi_complete>
    return 1;
9000000008005fb8:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008005fbc:	53ffb3ff 	b	-80(0xfffffb0) # 9000000008005f6c <devintr+0x38>
      uartintr();
9000000008005fc0:	57ad4fff 	bl	-21172(0xfffad4c) # 9000000008000d0c <uartintr>
      extioi_complete(1UL << UART0_IRQ);
9000000008005fc4:	02801004 	addi.w	$r4,$r0,4(0x4)
9000000008005fc8:	57a597ff 	bl	-23148(0xfffa594) # 900000000800055c <extioi_complete>
    return 1;
9000000008005fcc:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008005fd0:	53ff9fff 	b	-100(0xfffff9c) # 9000000008005f6c <devintr+0x38>
    if(cpuid() == 0){
9000000008005fd4:	57b703ff 	bl	-18688(0xfffb700) # 90000000080016d4 <cpuid>
9000000008005fd8:	40001880 	beqz	$r4,24(0x18) # 9000000008005ff0 <devintr+0xbc>
  asm volatile("csrrd %0, 0x44" : "=r" (x) );
9000000008005fdc:	0401100c 	csrrd	$r12,0x44
    w_csr_ticlr(r_csr_ticlr() | CSR_TICLR_CLR);
9000000008005fe0:	0380058c 	ori	$r12,$r12,0x1
  asm volatile("csrwr %0, 0x44" : : "r" (x) );
9000000008005fe4:	0401102c 	csrwr	$r12,0x44
    return 2;
9000000008005fe8:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008005fec:	53ff83ff 	b	-128(0xfffff80) # 9000000008005f6c <devintr+0x38>
      clockintr();
9000000008005ff0:	57fef7ff 	bl	-268(0xffffef4) # 9000000008005ee4 <clockintr>
9000000008005ff4:	53ffebff 	b	-24(0xfffffe8) # 9000000008005fdc <devintr+0xa8>

9000000008005ff8 <kerneltrap>:
{
9000000008005ff8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008005ffc:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008006000:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008006004:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008006008:	29c00078 	st.d	$r24,$r3,0
900000000800600c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  asm volatile("csrrd %0, 0x6" : "=r" (x) );
9000000008006010:	04001818 	csrrd	$r24,0x6
  asm volatile("csrrd %0, 0x1" : "=r" (x) );
9000000008006014:	04000417 	csrrd	$r23,0x1
  if((prmd & PRMD_PPLV) != 0)
9000000008006018:	03400eec 	andi	$r12,$r23,0x3
900000000800601c:	44004180 	bnez	$r12,64(0x40) # 900000000800605c <kerneltrap+0x64>
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
9000000008006020:	0400000c 	csrrd	$r12,0x0
  if(intr_get() != 0)
9000000008006024:	00c2098c 	bstrpick.d	$r12,$r12,0x2,0x2
9000000008006028:	44004180 	bnez	$r12,64(0x40) # 9000000008006068 <kerneltrap+0x70>
  if((which_dev = devintr()) == 0){
900000000800602c:	57ff0bff 	bl	-248(0xfffff08) # 9000000008005f34 <devintr>
9000000008006030:	40004480 	beqz	$r4,68(0x44) # 9000000008006074 <kerneltrap+0x7c>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
9000000008006034:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008006038:	58006c8c 	beq	$r4,$r12,108(0x6c) # 90000000080060a4 <kerneltrap+0xac>
  asm volatile("csrwr %0, 0x6" : : "r" (x));
900000000800603c:	04001838 	csrwr	$r24,0x6
  asm volatile("csrwr %0, 0x1" : : "r" (x));
9000000008006040:	04000437 	csrwr	$r23,0x1
}
9000000008006044:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008006048:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800604c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008006050:	28c00078 	ld.d	$r24,$r3,0
9000000008006054:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008006058:	4c000020 	jirl	$r0,$r1,0
    panic("kerneltrap: not from privilege0");
900000000800605c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006060:	02da1084 	addi.d	$r4,$r4,1668(0x684)
9000000008006064:	57a1a3ff 	bl	-24160(0xfffa1a0) # 9000000008000204 <panic>
    panic("kerneltrap: interrupts enabled");
9000000008006068:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800606c:	02da6084 	addi.d	$r4,$r4,1688(0x698)
9000000008006070:	57a197ff 	bl	-24172(0xfffa194) # 9000000008000204 <panic>
  asm volatile("csrrd %0, 0x5" : "=r" (x) );
9000000008006074:	04001405 	csrrd	$r5,0x5
    printf("estat %x\n", r_csr_estat());
9000000008006078:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800607c:	02daa084 	addi.d	$r4,$r4,1704(0x6a8)
9000000008006080:	57a1f7ff 	bl	-24076(0xfffa1f4) # 9000000008000274 <printf>
  asm volatile("csrrd %0, 0x6" : "=r" (x) );
9000000008006084:	04001805 	csrrd	$r5,0x6
  asm volatile("csrrd %0, 0xc" : "=r" (x) );
9000000008006088:	04003006 	csrrd	$r6,0xc
    printf("era=%p eentry=%p\n", r_csr_era(), r_csr_eentry());
900000000800608c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006090:	02da9084 	addi.d	$r4,$r4,1700(0x6a4)
9000000008006094:	57a1e3ff 	bl	-24096(0xfffa1e0) # 9000000008000274 <printf>
    panic("kerneltrap");
9000000008006098:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800609c:	02dac084 	addi.d	$r4,$r4,1712(0x6b0)
90000000080060a0:	57a167ff 	bl	-24220(0xfffa164) # 9000000008000204 <panic>
  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
90000000080060a4:	57b687ff 	bl	-18812(0xfffb684) # 9000000008001728 <myproc>
90000000080060a8:	43ff949f 	beqz	$r4,-108(0x7fff94) # 900000000800603c <kerneltrap+0x44>
90000000080060ac:	57b67fff 	bl	-18820(0xfffb67c) # 9000000008001728 <myproc>
90000000080060b0:	2880608d 	ld.w	$r13,$r4,24(0x18)
90000000080060b4:	0280100c 	addi.w	$r12,$r0,4(0x4)
90000000080060b8:	5fff85ac 	bne	$r13,$r12,-124(0x3ff84) # 900000000800603c <kerneltrap+0x44>
    yield();
90000000080060bc:	57bddbff 	bl	-16936(0xfffbdd8) # 9000000008001e94 <yield>
90000000080060c0:	53ff7fff 	b	-132(0xfffff7c) # 900000000800603c <kerneltrap+0x44>

90000000080060c4 <trapframedump>:

void trapframedump(struct trapframe *tf) {
90000000080060c4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080060c8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080060cc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080060d0:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080060d4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080060d8:	00150097 	move	$r23,$r4
  printf("a0: %p\t", tf->a0);
90000000080060dc:	28c06085 	ld.d	$r5,$r4,24(0x18)
90000000080060e0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080060e4:	02d9e084 	addi.d	$r4,$r4,1656(0x678)
90000000080060e8:	57a18fff 	bl	-24180(0xfffa18c) # 9000000008000274 <printf>
  printf("a1: %p\t", tf->a1);
90000000080060ec:	28c082e5 	ld.d	$r5,$r23,32(0x20)
90000000080060f0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080060f4:	02d9c084 	addi.d	$r4,$r4,1648(0x670)
90000000080060f8:	57a17fff 	bl	-24196(0xfffa17c) # 9000000008000274 <printf>
  printf("a2: %p\t", tf->a2);
90000000080060fc:	28c0a2e5 	ld.d	$r5,$r23,40(0x28)
9000000008006100:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006104:	02d9a084 	addi.d	$r4,$r4,1640(0x668)
9000000008006108:	57a16fff 	bl	-24212(0xfffa16c) # 9000000008000274 <printf>
  printf("a3: %p\n", tf->a3);
900000000800610c:	28c0c2e5 	ld.d	$r5,$r23,48(0x30)
9000000008006110:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006114:	02d98084 	addi.d	$r4,$r4,1632(0x660)
9000000008006118:	57a15fff 	bl	-24228(0xfffa15c) # 9000000008000274 <printf>
  printf("a4: %p\t", tf->a4);
900000000800611c:	28c0e2e5 	ld.d	$r5,$r23,56(0x38)
9000000008006120:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006124:	02d96084 	addi.d	$r4,$r4,1624(0x658)
9000000008006128:	57a14fff 	bl	-24244(0xfffa14c) # 9000000008000274 <printf>
  printf("a5: %p\t", tf->a5);
900000000800612c:	28c102e5 	ld.d	$r5,$r23,64(0x40)
9000000008006130:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006134:	02d94084 	addi.d	$r4,$r4,1616(0x650)
9000000008006138:	57a13fff 	bl	-24260(0xfffa13c) # 9000000008000274 <printf>
  printf("a6: %p\t", tf->a6);
900000000800613c:	28c122e5 	ld.d	$r5,$r23,72(0x48)
9000000008006140:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006144:	02d92084 	addi.d	$r4,$r4,1608(0x648)
9000000008006148:	57a12fff 	bl	-24276(0xfffa12c) # 9000000008000274 <printf>
  printf("a7: %p\n", tf->a7);
900000000800614c:	28c142e5 	ld.d	$r5,$r23,80(0x50)
9000000008006150:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006154:	02d90084 	addi.d	$r4,$r4,1600(0x640)
9000000008006158:	57a11fff 	bl	-24292(0xfffa11c) # 9000000008000274 <printf>
  printf("t0: %p\t", tf->t0);
900000000800615c:	28c162e5 	ld.d	$r5,$r23,88(0x58)
9000000008006160:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006164:	02d8e084 	addi.d	$r4,$r4,1592(0x638)
9000000008006168:	57a10fff 	bl	-24308(0xfffa10c) # 9000000008000274 <printf>
  printf("t1: %p\t", tf->t1);
900000000800616c:	28c182e5 	ld.d	$r5,$r23,96(0x60)
9000000008006170:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006174:	02d8c084 	addi.d	$r4,$r4,1584(0x630)
9000000008006178:	57a0ffff 	bl	-24324(0xfffa0fc) # 9000000008000274 <printf>
  printf("t2: %p\t", tf->t2);
900000000800617c:	28c1a2e5 	ld.d	$r5,$r23,104(0x68)
9000000008006180:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006184:	02d8a084 	addi.d	$r4,$r4,1576(0x628)
9000000008006188:	57a0efff 	bl	-24340(0xfffa0ec) # 9000000008000274 <printf>
  printf("t3: %p\n", tf->t3);
900000000800618c:	28c1c2e5 	ld.d	$r5,$r23,112(0x70)
9000000008006190:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006194:	02d88084 	addi.d	$r4,$r4,1568(0x620)
9000000008006198:	57a0dfff 	bl	-24356(0xfffa0dc) # 9000000008000274 <printf>
  printf("t4: %p\t", tf->t4);
900000000800619c:	28c1e2e5 	ld.d	$r5,$r23,120(0x78)
90000000080061a0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080061a4:	02d86084 	addi.d	$r4,$r4,1560(0x618)
90000000080061a8:	57a0cfff 	bl	-24372(0xfffa0cc) # 9000000008000274 <printf>
  printf("t5: %p\t", tf->t5);
90000000080061ac:	28c202e5 	ld.d	$r5,$r23,128(0x80)
90000000080061b0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080061b4:	02d84084 	addi.d	$r4,$r4,1552(0x610)
90000000080061b8:	57a0bfff 	bl	-24388(0xfffa0bc) # 9000000008000274 <printf>
  printf("t6: %p\t", tf->t6);
90000000080061bc:	28c222e5 	ld.d	$r5,$r23,136(0x88)
90000000080061c0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080061c4:	02d82084 	addi.d	$r4,$r4,1544(0x608)
90000000080061c8:	57a0afff 	bl	-24404(0xfffa0ac) # 9000000008000274 <printf>
  printf("t7: %p\n", tf->t7);
90000000080061cc:	28c242e5 	ld.d	$r5,$r23,144(0x90)
90000000080061d0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080061d4:	02d80084 	addi.d	$r4,$r4,1536(0x600)
90000000080061d8:	57a09fff 	bl	-24420(0xfffa09c) # 9000000008000274 <printf>
  printf("t8: %p\t", tf->t8);
90000000080061dc:	28c262e5 	ld.d	$r5,$r23,152(0x98)
90000000080061e0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080061e4:	02d7e084 	addi.d	$r4,$r4,1528(0x5f8)
90000000080061e8:	57a08fff 	bl	-24436(0xfffa08c) # 9000000008000274 <printf>
  printf("s0: %p\n", tf->s0);
90000000080061ec:	28c2c2e5 	ld.d	$r5,$r23,176(0xb0)
90000000080061f0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080061f4:	02d7c084 	addi.d	$r4,$r4,1520(0x5f0)
90000000080061f8:	57a07fff 	bl	-24452(0xfffa07c) # 9000000008000274 <printf>
  printf("s1: %p\t", tf->s1);
90000000080061fc:	28c2e2e5 	ld.d	$r5,$r23,184(0xb8)
9000000008006200:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006204:	02d7a084 	addi.d	$r4,$r4,1512(0x5e8)
9000000008006208:	57a06fff 	bl	-24468(0xfffa06c) # 9000000008000274 <printf>
  printf("s2: %p\t", tf->s2);
900000000800620c:	28c302e5 	ld.d	$r5,$r23,192(0xc0)
9000000008006210:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006214:	02d78084 	addi.d	$r4,$r4,1504(0x5e0)
9000000008006218:	57a05fff 	bl	-24484(0xfffa05c) # 9000000008000274 <printf>
  printf("s3: %p\t", tf->s3);
900000000800621c:	28c322e5 	ld.d	$r5,$r23,200(0xc8)
9000000008006220:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006224:	02d76084 	addi.d	$r4,$r4,1496(0x5d8)
9000000008006228:	57a04fff 	bl	-24500(0xfffa04c) # 9000000008000274 <printf>
  printf("s4: %p\n", tf->s4);
900000000800622c:	28c342e5 	ld.d	$r5,$r23,208(0xd0)
9000000008006230:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006234:	02d74084 	addi.d	$r4,$r4,1488(0x5d0)
9000000008006238:	57a03fff 	bl	-24516(0xfffa03c) # 9000000008000274 <printf>
  printf("s5: %p\t", tf->s5);
900000000800623c:	28c362e5 	ld.d	$r5,$r23,216(0xd8)
9000000008006240:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006244:	02d72084 	addi.d	$r4,$r4,1480(0x5c8)
9000000008006248:	57a02fff 	bl	-24532(0xfffa02c) # 9000000008000274 <printf>
  printf("s6: %p\t", tf->s6);
900000000800624c:	28c382e5 	ld.d	$r5,$r23,224(0xe0)
9000000008006250:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006254:	02d70084 	addi.d	$r4,$r4,1472(0x5c0)
9000000008006258:	57a01fff 	bl	-24548(0xfffa01c) # 9000000008000274 <printf>
  printf("s7: %p\t", tf->s7);
900000000800625c:	28c3a2e5 	ld.d	$r5,$r23,232(0xe8)
9000000008006260:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006264:	02d6e084 	addi.d	$r4,$r4,1464(0x5b8)
9000000008006268:	57a00fff 	bl	-24564(0xfffa00c) # 9000000008000274 <printf>
  printf("s8: %p\n", tf->s8);
900000000800626c:	28c3c2e5 	ld.d	$r5,$r23,240(0xf0)
9000000008006270:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006274:	02d6c084 	addi.d	$r4,$r4,1456(0x5b0)
9000000008006278:	579fffff 	bl	-24580(0xfff9ffc) # 9000000008000274 <printf>
  printf("ra: %p\n", tf->ra);
900000000800627c:	28c002e5 	ld.d	$r5,$r23,0
9000000008006280:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006284:	02d6a084 	addi.d	$r4,$r4,1448(0x5a8)
9000000008006288:	579fefff 	bl	-24596(0xfff9fec) # 9000000008000274 <printf>
  printf("sp: %p\t", tf->sp);
900000000800628c:	28c042e5 	ld.d	$r5,$r23,16(0x10)
9000000008006290:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006294:	02d68084 	addi.d	$r4,$r4,1440(0x5a0)
9000000008006298:	579fdfff 	bl	-24612(0xfff9fdc) # 9000000008000274 <printf>
  printf("tp: %p\t", tf->tp);
900000000800629c:	28c022e5 	ld.d	$r5,$r23,8(0x8)
90000000080062a0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080062a4:	02d66084 	addi.d	$r4,$r4,1432(0x598)
90000000080062a8:	579fcfff 	bl	-24628(0xfff9fcc) # 9000000008000274 <printf>
  printf("fp: %p\n", tf->fp);
90000000080062ac:	28c2a2e5 	ld.d	$r5,$r23,168(0xa8)
90000000080062b0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080062b4:	02d64084 	addi.d	$r4,$r4,1424(0x590)
90000000080062b8:	579fbfff 	bl	-24644(0xfff9fbc) # 9000000008000274 <printf>
  printf("r21: %p\n", tf->r21);
90000000080062bc:	28c282e5 	ld.d	$r5,$r23,160(0xa0)
90000000080062c0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080062c4:	02d62084 	addi.d	$r4,$r4,1416(0x588)
90000000080062c8:	579fafff 	bl	-24660(0xfff9fac) # 9000000008000274 <printf>
  printf("era: %p\n", tf->era);
90000000080062cc:	28c422e5 	ld.d	$r5,$r23,264(0x108)
90000000080062d0:	1c0001e4 	pcaddu12i	$r4,15(0xf)
90000000080062d4:	02d62084 	addi.d	$r4,$r4,1416(0x588)
90000000080062d8:	579f9fff 	bl	-24676(0xfff9f9c) # 9000000008000274 <printf>
90000000080062dc:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080062e0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080062e4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080062e8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080062ec:	4c000020 	jirl	$r0,$r1,0

90000000080062f0 <usertrap>:
{
90000000080062f0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080062f4:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080062f8:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080062fc:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008006300:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008006304:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  asm volatile("csrrd %0, 0x1" : "=r" (x) );
9000000008006308:	0400040c 	csrrd	$r12,0x1
  if((r_csr_prmd() & PRMD_PPLV) == 0)
900000000800630c:	03400d8c 	andi	$r12,$r12,0x3
9000000008006310:	40008580 	beqz	$r12,132(0x84) # 9000000008006394 <usertrap+0xa4>
  asm volatile("csrwr %0, 0xc" : : "r" (x) );
9000000008006314:	1c00034c 	pcaddu12i	$r12,26(0x1a)
9000000008006318:	28f6518c 	ld.d	$r12,$r12,-620(0xd94)
900000000800631c:	0400302c 	csrwr	$r12,0xc
  struct proc *p = myproc();
9000000008006320:	57b40bff 	bl	-19448(0xfffb408) # 9000000008001728 <myproc>
9000000008006324:	00150097 	move	$r23,$r4
  p->trapframe->era = r_csr_era();
9000000008006328:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
  asm volatile("csrrd %0, 0x6" : "=r" (x) );
900000000800632c:	0400180d 	csrrd	$r13,0x6
9000000008006330:	29c4218d 	st.d	$r13,$r12,264(0x108)
  asm volatile("csrrd %0, 0x5" : "=r" (x) );
9000000008006334:	0400140c 	csrrd	$r12,0x5
  if( ((r_csr_estat() & CSR_ESTAT_ECODE) >> 16) == 0xb){
9000000008006338:	00d5418c 	bstrpick.d	$r12,$r12,0x15,0x10
900000000800633c:	02802c0d 	addi.w	$r13,$r0,11(0xb)
9000000008006340:	5800618d 	beq	$r12,$r13,96(0x60) # 90000000080063a0 <usertrap+0xb0>
9000000008006344:	0400140c 	csrrd	$r12,0x5
  }else if((r_csr_estat() & CSR_ESTAT_ECODE) >> 16 == 0x1 || (r_csr_estat() & CSR_ESTAT_ECODE) >> 16 == 0x2  ){
9000000008006348:	00d5418c 	bstrpick.d	$r12,$r12,0x15,0x10
900000000800634c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008006350:	5800158d 	beq	$r12,$r13,20(0x14) # 9000000008006364 <usertrap+0x74>
9000000008006354:	0400140c 	csrrd	$r12,0x5
9000000008006358:	00d5418c 	bstrpick.d	$r12,$r12,0x15,0x10
900000000800635c:	0280080d 	addi.w	$r13,$r0,2(0x2)
9000000008006360:	5c00798d 	bne	$r12,$r13,120(0x78) # 90000000080063d8 <usertrap+0xe8>
    printf("handle stack page fault\n");
9000000008006364:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006368:	02d49084 	addi.d	$r4,$r4,1316(0x524)
900000000800636c:	579f0bff 	bl	-24824(0xfff9f08) # 9000000008000274 <printf>
  if(p->killed)
9000000008006370:	2880c2ec 	ld.w	$r12,$r23,48(0x30)
9000000008006374:	4400d580 	bnez	$r12,212(0xd4) # 9000000008006448 <usertrap+0x158>
  usertrapret();
9000000008006378:	57fa87ff 	bl	-1404(0xffffa84) # 9000000008005dfc <usertrapret>
}
900000000800637c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008006380:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008006384:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008006388:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800638c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008006390:	4c000020 	jirl	$r0,$r1,0
    panic("usertrap: not from user mode");
9000000008006394:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006398:	02d35084 	addi.d	$r4,$r4,1236(0x4d4)
900000000800639c:	579e6bff 	bl	-24984(0xfff9e68) # 9000000008000204 <panic>
    if(p->killed)
90000000080063a0:	2880c08c 	ld.w	$r12,$r4,48(0x30)
90000000080063a4:	44002980 	bnez	$r12,40(0x28) # 90000000080063cc <usertrap+0xdc>
    p->trapframe->era += 4;
90000000080063a8:	28c1c2ed 	ld.d	$r13,$r23,112(0x70)
90000000080063ac:	28c421ac 	ld.d	$r12,$r13,264(0x108)
90000000080063b0:	02c0118c 	addi.d	$r12,$r12,4(0x4)
90000000080063b4:	29c421ac 	st.d	$r12,$r13,264(0x108)
  asm volatile("csrrd %0, 0x0" : "=r" (x) );
90000000080063b8:	0400000c 	csrrd	$r12,0x0
  w_csr_crmd(r_csr_crmd() | CSR_CRMD_IE);
90000000080063bc:	0380118c 	ori	$r12,$r12,0x4
  asm volatile("csrwr %0, 0x0" : : "r" (x));
90000000080063c0:	0400002c 	csrwr	$r12,0x0
    syscall();
90000000080063c4:	5403dc00 	bl	988(0x3dc) # 90000000080067a0 <syscall>
90000000080063c8:	53ffabff 	b	-88(0xfffffa8) # 9000000008006370 <usertrap+0x80>
      exit(-1);
90000000080063cc:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080063d0:	57b9b7ff 	bl	-17996(0xfffb9b4) # 9000000008001d84 <exit>
90000000080063d4:	53ffd7ff 	b	-44(0xfffffd4) # 90000000080063a8 <usertrap+0xb8>
  else if((which_dev = devintr()) != 0){
90000000080063d8:	57fb5fff 	bl	-1188(0xffffb5c) # 9000000008005f34 <devintr>
90000000080063dc:	00150098 	move	$r24,$r4
90000000080063e0:	40001080 	beqz	$r4,16(0x10) # 90000000080063f0 <usertrap+0x100>
  if(p->killed)
90000000080063e4:	2880c2ec 	ld.w	$r12,$r23,48(0x30)
90000000080063e8:	40006d80 	beqz	$r12,108(0x6c) # 9000000008006454 <usertrap+0x164>
90000000080063ec:	50006000 	b	96(0x60) # 900000000800644c <usertrap+0x15c>
    uint64 ir = 0;
90000000080063f0:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
    copyin(myproc()->pagetable, (char *)&ir, r_csr_era(), 8);
90000000080063f4:	57b337ff 	bl	-19660(0xfffb334) # 9000000008001728 <myproc>
  asm volatile("csrrd %0, 0x6" : "=r" (x) );
90000000080063f8:	04001806 	csrrd	$r6,0x6
90000000080063fc:	02802007 	addi.w	$r7,$r0,8(0x8)
9000000008006400:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008006404:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008006408:	57dbf3ff 	bl	-9232(0xfffdbf0) # 9000000008003ff8 <copyin>
  asm volatile("csrrd %0, 0x5" : "=r" (x) );
900000000800640c:	04001405 	csrrd	$r5,0x5
    printf("usertrap(): unexpected trapcause %x pid=%d\n", r_csr_estat(), p->pid);
9000000008006410:	2880e2e6 	ld.w	$r6,$r23,56(0x38)
9000000008006414:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006418:	02d25084 	addi.d	$r4,$r4,1172(0x494)
900000000800641c:	579e5bff 	bl	-25000(0xfff9e58) # 9000000008000274 <printf>
  asm volatile("csrrd %0, 0x6" : "=r" (x) );
9000000008006420:	04001805 	csrrd	$r5,0x6
  asm volatile("csrrd %0, 0x8" : "=r" (x) );
9000000008006424:	04002006 	csrrd	$r6,0x8
    printf("            era=%p badi=%x\n", r_csr_era(), r_csr_badi());
9000000008006428:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800642c:	02d2c084 	addi.d	$r4,$r4,1200(0x4b0)
9000000008006430:	579e47ff 	bl	-25020(0xfff9e44) # 9000000008000274 <printf>
    trapframedump(p->trapframe);
9000000008006434:	28c1c2e4 	ld.d	$r4,$r23,112(0x70)
9000000008006438:	57fc8fff 	bl	-884(0xffffc8c) # 90000000080060c4 <trapframedump>
    p->killed = 1;
900000000800643c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008006440:	2980c2ec 	st.w	$r12,$r23,48(0x30)
  if(p->killed)
9000000008006444:	50000800 	b	8(0x8) # 900000000800644c <usertrap+0x15c>
9000000008006448:	00150018 	move	$r24,$r0
    exit(-1);
900000000800644c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006450:	57b937ff 	bl	-18124(0xfffb934) # 9000000008001d84 <exit>
  if(which_dev == 2)
9000000008006454:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008006458:	5fff230c 	bne	$r24,$r12,-224(0x3ff20) # 9000000008006378 <usertrap+0x88>
    yield();
900000000800645c:	57ba3bff 	bl	-17864(0xfffba38) # 9000000008001e94 <yield>
9000000008006460:	53ff1bff 	b	-232(0xfffff18) # 9000000008006378 <usertrap+0x88>

9000000008006464 <argraw>:
  return strlen(buf);
}

static uint64
argraw(int n)//todo
{
9000000008006464:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008006468:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800646c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008006470:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008006474:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008006478:	00150097 	move	$r23,$r4
  struct proc *p = myproc();
900000000800647c:	57b2afff 	bl	-19796(0xfffb2ac) # 9000000008001728 <myproc>
  switch (n) {
9000000008006480:	0280180c 	addi.w	$r12,$r0,6(0x6)
9000000008006484:	68008597 	bltu	$r12,$r23,132(0x84) # 9000000008006508 <argraw+0xa4>
9000000008006488:	00df02f7 	bstrpick.d	$r23,$r23,0x1f,0x0
900000000800648c:	002d02f7 	alsl.d	$r23,$r23,$r0,0x3
9000000008006490:	1c00020c 	pcaddu12i	$r12,16(0x10)
9000000008006494:	02e1818c 	addi.d	$r12,$r12,-1952(0x860)
9000000008006498:	0010dd97 	add.d	$r23,$r12,$r23
900000000800649c:	28c002ec 	ld.d	$r12,$r23,0
90000000080064a0:	4c000180 	jirl	$r0,$r12,0
  case 0:
    return p->trapframe->a0;
90000000080064a4:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
90000000080064a8:	28c06184 	ld.d	$r4,$r12,24(0x18)
  case 6:
    return p->trapframe->a6;
  }
  panic("argraw");
  return -1;
}
90000000080064ac:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080064b0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080064b4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080064b8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080064bc:	4c000020 	jirl	$r0,$r1,0
    return p->trapframe->a1;
90000000080064c0:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
90000000080064c4:	28c08184 	ld.d	$r4,$r12,32(0x20)
90000000080064c8:	53ffe7ff 	b	-28(0xfffffe4) # 90000000080064ac <argraw+0x48>
    return p->trapframe->a2;
90000000080064cc:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
90000000080064d0:	28c0a184 	ld.d	$r4,$r12,40(0x28)
90000000080064d4:	53ffdbff 	b	-40(0xfffffd8) # 90000000080064ac <argraw+0x48>
    return p->trapframe->a3;
90000000080064d8:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
90000000080064dc:	28c0c184 	ld.d	$r4,$r12,48(0x30)
90000000080064e0:	53ffcfff 	b	-52(0xfffffcc) # 90000000080064ac <argraw+0x48>
    return p->trapframe->a4;
90000000080064e4:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
90000000080064e8:	28c0e184 	ld.d	$r4,$r12,56(0x38)
90000000080064ec:	53ffc3ff 	b	-64(0xfffffc0) # 90000000080064ac <argraw+0x48>
    return p->trapframe->a5;
90000000080064f0:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
90000000080064f4:	28c10184 	ld.d	$r4,$r12,64(0x40)
90000000080064f8:	53ffb7ff 	b	-76(0xfffffb4) # 90000000080064ac <argraw+0x48>
    return p->trapframe->a6;
90000000080064fc:	28c1c08c 	ld.d	$r12,$r4,112(0x70)
9000000008006500:	28c12184 	ld.d	$r4,$r12,72(0x48)
9000000008006504:	53ffabff 	b	-88(0xfffffa8) # 90000000080064ac <argraw+0x48>
  panic("argraw");
9000000008006508:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800650c:	02cfc084 	addi.d	$r4,$r4,1008(0x3f0)
9000000008006510:	579cf7ff 	bl	-25356(0xfff9cf4) # 9000000008000204 <panic>

9000000008006514 <sys_sysinfo>:
  printf("hello world from proc %d, hart %d, arg %d\n", myproc()->pid, r_tp(),
         n);
  return 0;
}

uint64 sys_sysinfo(void) {
9000000008006514:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
9000000008006518:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000800651c:	29c20076 	st.d	$r22,$r3,128(0x80)
9000000008006520:	29c1e077 	st.d	$r23,$r3,120(0x78)
9000000008006524:	02c24076 	addi.d	$r22,$r3,144(0x90)
  *ip = argraw(n);
9000000008006528:	00150004 	move	$r4,$r0
900000000800652c:	57ff3bff 	bl	-200(0xfffff38) # 9000000008006464 <argraw>
9000000008006530:	00150097 	move	$r23,$r4
  uint64 addr;
  if (argaddr(0, &addr) < 0) {
    return -1;
  }
  struct sysinfo info;
  memset(&info, 0, sizeof(info));
9000000008006534:	0281c006 	addi.w	$r6,$r0,112(0x70)
9000000008006538:	00150005 	move	$r5,$r0
900000000800653c:	02fdc2c4 	addi.d	$r4,$r22,-144(0xf70)
9000000008006540:	57aa27ff 	bl	-21980(0xfffaa24) # 9000000008000f64 <memset>
  asm volatile(
9000000008006544:	0000698d 	rdtime.d	$r13,$r12

  info.uptime = r_time() / CLK_FREQ;
9000000008006548:	15af6c6c 	lu12i.w	$r12,-165021(0xd7b63)
900000000800654c:	03936d8c 	ori	$r12,$r12,0x4db
9000000008006550:	177bd04c 	lu32i.d	$r12,-270718(0xbde82)
9000000008006554:	0310c58c 	lu52i.d	$r12,$r12,1073(0x431)
9000000008006558:	001eb1ac 	mulh.du	$r12,$r13,$r12
900000000800655c:	0045518c 	srli.d	$r12,$r12,0x14
9000000008006560:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
  info.totalram = RAMSTOP - RAMBASE;
9000000008006564:	1410000c 	lu12i.w	$r12,32768(0x8000)
9000000008006568:	29fe42cc 	st.d	$r12,$r22,-112(0xf90)
  info.freemem = freemem_amount();
900000000800656c:	57c9fbff 	bl	-13832(0xfffc9f8) # 9000000008002f64 <freemem_amount>
9000000008006570:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
  info.bufferram = 512 * 2500; // attention
9000000008006574:	1400270c 	lu12i.w	$r12,312(0x138)
9000000008006578:	03a0018c 	ori	$r12,$r12,0x800
900000000800657c:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
  info.nproc = procnum();
9000000008006580:	57bf3bff 	bl	-16584(0xfffbf38) # 90000000080024b8 <procnum>
9000000008006584:	297f02c4 	st.h	$r4,$r22,-64(0xfc0)
  info.mem_unit = PGSIZE;
9000000008006588:	1400002c 	lu12i.w	$r12,1(0x1)
900000000800658c:	29bf62cc 	st.w	$r12,$r22,-40(0xfd8)

  if (either_copyout(1, addr, (char *)&info, sizeof(info)) < 0)
9000000008006590:	0281c007 	addi.w	$r7,$r0,112(0x70)
9000000008006594:	02fdc2c6 	addi.d	$r6,$r22,-144(0xf70)
9000000008006598:	001502e5 	move	$r5,$r23
900000000800659c:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080065a0:	57bd0bff 	bl	-17144(0xfffbd08) # 90000000080022a8 <either_copyout>
    return -1;
  }
  */

  return 0;
90000000080065a4:	0049fc84 	srai.d	$r4,$r4,0x3f
90000000080065a8:	28c22061 	ld.d	$r1,$r3,136(0x88)
90000000080065ac:	28c20076 	ld.d	$r22,$r3,128(0x80)
90000000080065b0:	28c1e077 	ld.d	$r23,$r3,120(0x78)
90000000080065b4:	02c24063 	addi.d	$r3,$r3,144(0x90)
90000000080065b8:	4c000020 	jirl	$r0,$r1,0

90000000080065bc <fetchaddr>:
{
90000000080065bc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080065c0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080065c4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080065c8:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080065cc:	29c00078 	st.d	$r24,$r3,0
90000000080065d0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080065d4:	00150097 	move	$r23,$r4
90000000080065d8:	001500b8 	move	$r24,$r5
  struct proc *p = myproc();
90000000080065dc:	57b14fff 	bl	-20148(0xfffb14c) # 9000000008001728 <myproc>
  if(addr >= p->sz || addr+sizeof(uint64) > p->sz)
90000000080065e0:	28c1608c 	ld.d	$r12,$r4,88(0x58)
90000000080065e4:	6c0042ec 	bgeu	$r23,$r12,64(0x40) # 9000000008006624 <fetchaddr+0x68>
90000000080065e8:	02c022ed 	addi.d	$r13,$r23,8(0x8)
90000000080065ec:	6800418d 	bltu	$r12,$r13,64(0x40) # 900000000800662c <fetchaddr+0x70>
  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
90000000080065f0:	02802007 	addi.w	$r7,$r0,8(0x8)
90000000080065f4:	001502e6 	move	$r6,$r23
90000000080065f8:	00150305 	move	$r5,$r24
90000000080065fc:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008006600:	57d9fbff 	bl	-9736(0xfffd9f8) # 9000000008003ff8 <copyin>
9000000008006604:	00129004 	sltu	$r4,$r0,$r4
9000000008006608:	00119004 	sub.d	$r4,$r0,$r4
}
900000000800660c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008006610:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008006614:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008006618:	28c00078 	ld.d	$r24,$r3,0
900000000800661c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008006620:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008006624:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006628:	53ffe7ff 	b	-28(0xfffffe4) # 900000000800660c <fetchaddr+0x50>
900000000800662c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006630:	53ffdfff 	b	-36(0xfffffdc) # 900000000800660c <fetchaddr+0x50>

9000000008006634 <fetchstr>:
{
9000000008006634:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008006638:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800663c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008006640:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008006644:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008006648:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800664c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008006650:	00150098 	move	$r24,$r4
9000000008006654:	001500b7 	move	$r23,$r5
9000000008006658:	001500d9 	move	$r25,$r6
  struct proc *p = myproc();
900000000800665c:	57b0cfff 	bl	-20276(0xfffb0cc) # 9000000008001728 <myproc>
  int err = copyinstr(p->pagetable, buf, addr, max);
9000000008006660:	00150327 	move	$r7,$r25
9000000008006664:	00150306 	move	$r6,$r24
9000000008006668:	001502e5 	move	$r5,$r23
900000000800666c:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008006670:	57db03ff 	bl	-9472(0xfffdb00) # 9000000008004170 <copyinstr>
  if(err < 0)
9000000008006674:	60000c80 	blt	$r4,$r0,12(0xc) # 9000000008006680 <fetchstr+0x4c>
  return strlen(buf);
9000000008006678:	001502e4 	move	$r4,$r23
900000000800667c:	57ab5fff 	bl	-21668(0xfffab5c) # 90000000080011d8 <strlen>
}
9000000008006680:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008006684:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008006688:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800668c:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008006690:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008006694:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008006698:	4c000020 	jirl	$r0,$r1,0

900000000800669c <argint>:
{
900000000800669c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080066a0:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080066a4:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080066a8:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080066ac:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080066b0:	001500b7 	move	$r23,$r5
  *ip = argraw(n);
90000000080066b4:	57fdb3ff 	bl	-592(0xffffdb0) # 9000000008006464 <argraw>
90000000080066b8:	298002e4 	st.w	$r4,$r23,0
}
90000000080066bc:	00150004 	move	$r4,$r0
90000000080066c0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080066c4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080066c8:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080066cc:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080066d0:	4c000020 	jirl	$r0,$r1,0

90000000080066d4 <sys_test_proc>:
uint64 sys_test_proc(void) {
90000000080066d4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080066d8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080066dc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080066e0:	02c08076 	addi.d	$r22,$r3,32(0x20)
  argint(0, &n);
90000000080066e4:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
90000000080066e8:	00150004 	move	$r4,$r0
90000000080066ec:	57ffb3ff 	bl	-80(0xfffffb0) # 900000000800669c <argint>
  printf("hello world from proc %d, hart %d, arg %d\n", myproc()->pid, r_tp(),
90000000080066f0:	57b03bff 	bl	-20424(0xfffb038) # 9000000008001728 <myproc>
  asm volatile("addi.d %0, $tp, 0" : "=r" (x) );
90000000080066f4:	02c00046 	addi.d	$r6,$r2,0
90000000080066f8:	28bfb2c7 	ld.w	$r7,$r22,-20(0xfec)
90000000080066fc:	2880e085 	ld.w	$r5,$r4,56(0x38)
9000000008006700:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006704:	02c80084 	addi.d	$r4,$r4,512(0x200)
9000000008006708:	579b6fff 	bl	-25748(0xfff9b6c) # 9000000008000274 <printf>
}
900000000800670c:	00150004 	move	$r4,$r0
9000000008006710:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008006714:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008006718:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800671c:	4c000020 	jirl	$r0,$r1,0

9000000008006720 <argaddr>:
{
9000000008006720:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008006724:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008006728:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800672c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008006730:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008006734:	001500b7 	move	$r23,$r5
  *ip = argraw(n);
9000000008006738:	57fd2fff 	bl	-724(0xffffd2c) # 9000000008006464 <argraw>
900000000800673c:	29c002e4 	st.d	$r4,$r23,0
}
9000000008006740:	00150004 	move	$r4,$r0
9000000008006744:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008006748:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800674c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008006750:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008006754:	4c000020 	jirl	$r0,$r1,0

9000000008006758 <argstr>:
{
9000000008006758:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800675c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008006760:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008006764:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008006768:	29c00078 	st.d	$r24,$r3,0
900000000800676c:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008006770:	001500b7 	move	$r23,$r5
9000000008006774:	001500d8 	move	$r24,$r6
  *ip = argraw(n);
9000000008006778:	57fcefff 	bl	-788(0xffffcec) # 9000000008006464 <argraw>
  return fetchstr(addr, buf, max);
900000000800677c:	00150306 	move	$r6,$r24
9000000008006780:	001502e5 	move	$r5,$r23
9000000008006784:	57feb3ff 	bl	-336(0xffffeb0) # 9000000008006634 <fetchstr>
}
9000000008006788:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800678c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008006790:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008006794:	28c00078 	ld.d	$r24,$r3,0
9000000008006798:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800679c:	4c000020 	jirl	$r0,$r1,0

90000000080067a0 <syscall>:
void syscall(void) {
90000000080067a0:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
90000000080067a4:	29c0e061 	st.d	$r1,$r3,56(0x38)
90000000080067a8:	29c0c076 	st.d	$r22,$r3,48(0x30)
90000000080067ac:	29c0a077 	st.d	$r23,$r3,40(0x28)
90000000080067b0:	29c08078 	st.d	$r24,$r3,32(0x20)
90000000080067b4:	29c06079 	st.d	$r25,$r3,24(0x18)
90000000080067b8:	29c0407a 	st.d	$r26,$r3,16(0x10)
90000000080067bc:	29c0207b 	st.d	$r27,$r3,8(0x8)
90000000080067c0:	02c10076 	addi.d	$r22,$r3,64(0x40)
  struct proc *p = myproc();
90000000080067c4:	57af67ff 	bl	-20636(0xfffaf64) # 9000000008001728 <myproc>
90000000080067c8:	00150098 	move	$r24,$r4
  num = p->trapframe->a7;
90000000080067cc:	28c1c099 	ld.d	$r25,$r4,112(0x70)
90000000080067d0:	28814337 	ld.w	$r23,$r25,80(0x50)
  if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
90000000080067d4:	02bffeed 	addi.w	$r13,$r23,-1(0xfff)
90000000080067d8:	0290140c 	addi.w	$r12,$r0,1029(0x405)
90000000080067dc:	6800a18d 	bltu	$r12,$r13,160(0xa0) # 900000000800687c <syscall+0xdc>
90000000080067e0:	1c0001ec 	pcaddu12i	$r12,15(0xf)
90000000080067e4:	02d5218c 	addi.d	$r12,$r12,1352(0x548)
90000000080067e8:	002d32ec 	alsl.d	$r12,$r23,$r12,0x3
90000000080067ec:	28c0019a 	ld.d	$r26,$r12,0
90000000080067f0:	40008f40 	beqz	$r26,140(0x8c) # 900000000800687c <syscall+0xdc>
    if (num != 64 && num != 63 && num != SYS_writev &&
90000000080067f4:	02bf06fb 	addi.w	$r27,$r23,-63(0xfc1)
90000000080067f8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000080067fc:	6c01119b 	bgeu	$r12,$r27,272(0x110) # 900000000800690c <syscall+0x16c>
9000000008006800:	0281080c 	addi.w	$r12,$r0,66(0x42)
9000000008006804:	5800c2ec 	beq	$r23,$r12,192(0xc0) # 90000000080068c4 <syscall+0x124>
9000000008006808:	0281c40c 	addi.w	$r12,$r0,113(0x71)
900000000800680c:	5800baec 	beq	$r23,$r12,184(0xb8) # 90000000080068c4 <syscall+0x124>
        num != SYS_clock_gettime && num != SYS_sendto && num != SYS_recvfrom)
9000000008006810:	02bccaec 	addi.w	$r12,$r23,-206(0xf32)
9000000008006814:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008006818:	6c00adac 	bgeu	$r13,$r12,172(0xac) # 90000000080068c4 <syscall+0x124>
      printf("pid %d call %d: %s\n", p->pid, num, sysnames[num]);
900000000800681c:	1c00022c 	pcaddu12i	$r12,17(0x11)
9000000008006820:	02d5118c 	addi.d	$r12,$r12,1348(0x544)
9000000008006824:	002d32ec 	alsl.d	$r12,$r23,$r12,0x3
9000000008006828:	28c00187 	ld.d	$r7,$r12,0
900000000800682c:	001502e6 	move	$r6,$r23
9000000008006830:	2880e085 	ld.w	$r5,$r4,56(0x38)
9000000008006834:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006838:	02c3f084 	addi.d	$r4,$r4,252(0xfc)
900000000800683c:	579a3bff 	bl	-26056(0xfff9a38) # 9000000008000274 <printf>
    p->trapframe->a0 = syscalls[num]();
9000000008006840:	28c1c319 	ld.d	$r25,$r24,112(0x70)
9000000008006844:	4c000341 	jirl	$r1,$r26,0
9000000008006848:	29c06324 	st.d	$r4,$r25,24(0x18)
    if (num == SYS_openat && p->trapframe->a0 == -1) {
900000000800684c:	0280e00c 	addi.w	$r12,$r0,56(0x38)
9000000008006850:	5c0092ec 	bne	$r23,$r12,144(0x90) # 90000000080068e0 <syscall+0x140>
9000000008006854:	28c1c30c 	ld.d	$r12,$r24,112(0x70)
9000000008006858:	28c0618d 	ld.d	$r13,$r12,24(0x18)
900000000800685c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008006860:	5c0081ac 	bne	$r13,$r12,128(0x80) # 90000000080068e0 <syscall+0x140>
      printf("");
9000000008006864:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006868:	02d6f084 	addi.d	$r4,$r4,1468(0x5bc)
900000000800686c:	579a0bff 	bl	-26104(0xfff9a08) # 9000000008000274 <printf>
    if (num != SYS_read && num != SYS_write && num != SYS_writev &&
9000000008006870:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008006874:	68006d9b 	bltu	$r12,$r27,108(0x6c) # 90000000080068e0 <syscall+0x140>
9000000008006878:	5000b400 	b	180(0xb4) # 900000000800692c <syscall+0x18c>
    printf("pid %d %s: unknown sys call %d\n", p->pid, p->name, num);
900000000800687c:	001502e7 	move	$r7,$r23
9000000008006880:	02d3a306 	addi.d	$r6,$r24,1256(0x4e8)
9000000008006884:	2880e305 	ld.w	$r5,$r24,56(0x38)
9000000008006888:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800688c:	02c36084 	addi.d	$r4,$r4,216(0xd8)
9000000008006890:	5799e7ff 	bl	-26140(0xfff99e4) # 9000000008000274 <printf>
    p->trapframe->a0 = -1;
9000000008006894:	28c1c30c 	ld.d	$r12,$r24,112(0x70)
9000000008006898:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
900000000800689c:	29c0618d 	st.d	$r13,$r12,24(0x18)
}
90000000080068a0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000080068a4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000080068a8:	28c0a077 	ld.d	$r23,$r3,40(0x28)
90000000080068ac:	28c08078 	ld.d	$r24,$r3,32(0x20)
90000000080068b0:	28c06079 	ld.d	$r25,$r3,24(0x18)
90000000080068b4:	28c0407a 	ld.d	$r26,$r3,16(0x10)
90000000080068b8:	28c0207b 	ld.d	$r27,$r3,8(0x8)
90000000080068bc:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000080068c0:	4c000020 	jirl	$r0,$r1,0
    p->trapframe->a0 = syscalls[num]();
90000000080068c4:	4c000341 	jirl	$r1,$r26,0
90000000080068c8:	29c06324 	st.d	$r4,$r25,24(0x18)
    if (num != SYS_read && num != SYS_write && num != SYS_writev &&
90000000080068cc:	0281080c 	addi.w	$r12,$r0,66(0x42)
90000000080068d0:	58005eec 	beq	$r23,$r12,92(0x5c) # 900000000800692c <syscall+0x18c>
90000000080068d4:	02bccaec 	addi.w	$r12,$r23,-206(0xf32)
90000000080068d8:	0280040d 	addi.w	$r13,$r0,1(0x1)
90000000080068dc:	6c0051ac 	bgeu	$r13,$r12,80(0x50) # 900000000800692c <syscall+0x18c>
      printf("pid %d: %s -> %d\n", p->pid, sysnames[num],
90000000080068e0:	28c1c30d 	ld.d	$r13,$r24,112(0x70)
90000000080068e4:	1c00022c 	pcaddu12i	$r12,17(0x11)
90000000080068e8:	02d1f18c 	addi.d	$r12,$r12,1148(0x47c)
90000000080068ec:	002d32ec 	alsl.d	$r12,$r23,$r12,0x3
90000000080068f0:	28c061a7 	ld.d	$r7,$r13,24(0x18)
90000000080068f4:	28c00186 	ld.d	$r6,$r12,0
90000000080068f8:	2880e305 	ld.w	$r5,$r24,56(0x38)
90000000080068fc:	1c0001e4 	pcaddu12i	$r4,15(0xf)
9000000008006900:	02c13084 	addi.d	$r4,$r4,76(0x4c)
9000000008006904:	579973ff 	bl	-26256(0xfff9970) # 9000000008000274 <printf>
9000000008006908:	50002400 	b	36(0x24) # 900000000800692c <syscall+0x18c>
    p->trapframe->a0 = syscalls[num]();
900000000800690c:	4c000341 	jirl	$r1,$r26,0
9000000008006910:	29c06324 	st.d	$r4,$r25,24(0x18)
    if (num == SYS_openat && p->trapframe->a0 == -1) {
9000000008006914:	0280e00c 	addi.w	$r12,$r0,56(0x38)
9000000008006918:	5c0016ec 	bne	$r23,$r12,20(0x14) # 900000000800692c <syscall+0x18c>
900000000800691c:	28c1c30c 	ld.d	$r12,$r24,112(0x70)
9000000008006920:	28c0618d 	ld.d	$r13,$r12,24(0x18)
9000000008006924:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008006928:	5bff3dac 	beq	$r13,$r12,-196(0x3ff3c) # 9000000008006864 <syscall+0xc4>
    if ((p->tmask & (1 << num)) != 0) {
900000000800692c:	2893e30c 	ld.w	$r12,$r24,1272(0x4f8)
9000000008006930:	00185d8c 	sra.w	$r12,$r12,$r23
9000000008006934:	0340058c 	andi	$r12,$r12,0x1
9000000008006938:	43ff699f 	beqz	$r12,-152(0x7fff68) # 90000000080068a0 <syscall+0x100>
      printf("pid %d: %s -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
900000000800693c:	28c1c30d 	ld.d	$r13,$r24,112(0x70)
9000000008006940:	1c00022c 	pcaddu12i	$r12,17(0x11)
9000000008006944:	02d0818c 	addi.d	$r12,$r12,1056(0x420)
9000000008006948:	002d32f7 	alsl.d	$r23,$r23,$r12,0x3
900000000800694c:	28c061a7 	ld.d	$r7,$r13,24(0x18)
9000000008006950:	28c002e6 	ld.d	$r6,$r23,0
9000000008006954:	2880e305 	ld.w	$r5,$r24,56(0x38)
9000000008006958:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800695c:	02ffc084 	addi.d	$r4,$r4,-16(0xff0)
9000000008006960:	579917ff 	bl	-26348(0xfff9914) # 9000000008000274 <printf>
9000000008006964:	53ff3fff 	b	-196(0xfffff3c) # 90000000080068a0 <syscall+0x100>

9000000008006968 <sys_clone>:
#include "include/uname.h"
#include "include/vm.h"

extern int exec(char *path, char **argv, char **env);

uint64 sys_clone(void) {
9000000008006968:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800696c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008006970:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008006974:	02c10076 	addi.d	$r22,$r3,64(0x40)
  printf("sys_clone: start\n");
9000000008006978:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000800697c:	02d08084 	addi.d	$r4,$r4,1056(0x420)
9000000008006980:	5798f7ff 	bl	-26380(0xfff98f4) # 9000000008000274 <printf>
  uint64 new_stack, new_fn;
  uint64 ptid, tls, ctid;
  argaddr(1, &new_stack);
9000000008006984:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008006988:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800698c:	57fd97ff 	bl	-620(0xffffd94) # 9000000008006720 <argaddr>
  if (argaddr(0, &new_fn) < 0) {
9000000008006990:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008006994:	00150004 	move	$r4,$r0
9000000008006998:	57fd8bff 	bl	-632(0xffffd88) # 9000000008006720 <argaddr>
900000000800699c:	60007480 	blt	$r4,$r0,116(0x74) # 9000000008006a10 <sys_clone+0xa8>
    printf("sys_clone: argaddr(0, &new_fn) < 0\n");
    return -1;
  }
  if (argaddr(2, &ptid) < 0) {
90000000080069a0:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
90000000080069a4:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000080069a8:	57fd7bff 	bl	-648(0xffffd78) # 9000000008006720 <argaddr>
90000000080069ac:	60007880 	blt	$r4,$r0,120(0x78) # 9000000008006a24 <sys_clone+0xbc>
    printf("sys_clone: argaddr(2, &ptid) < 0\n");
    return -1;
  }
  if (argaddr(3, &tls) < 0) {
90000000080069b0:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
90000000080069b4:	02800c04 	addi.w	$r4,$r0,3(0x3)
90000000080069b8:	57fd6bff 	bl	-664(0xffffd68) # 9000000008006720 <argaddr>
90000000080069bc:	60007c80 	blt	$r4,$r0,124(0x7c) # 9000000008006a38 <sys_clone+0xd0>
    printf("sys_clone: argaddr(3, &tls) < 0\n");
    return -1;
  }
  if (argaddr(4, &ctid) < 0) {
90000000080069c0:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
90000000080069c4:	02801004 	addi.w	$r4,$r0,4(0x4)
90000000080069c8:	57fd5bff 	bl	-680(0xffffd58) # 9000000008006720 <argaddr>
90000000080069cc:	60008080 	blt	$r4,$r0,128(0x80) # 9000000008006a4c <sys_clone+0xe4>
    printf("sys_clone: argaddr(4, &ctid) < 0\n");
    return -1;
  }
  printf("sys_clone: new_stack = %p, new_fn = %p, ptid = %p, tls = %p, "
90000000080069d0:	28ff22c9 	ld.d	$r9,$r22,-56(0xfc8)
90000000080069d4:	28ff42c8 	ld.d	$r8,$r22,-48(0xfd0)
90000000080069d8:	28ff62c7 	ld.d	$r7,$r22,-40(0xfd8)
90000000080069dc:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
90000000080069e0:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
90000000080069e4:	1c000264 	pcaddu12i	$r4,19(0x13)
90000000080069e8:	02d1b084 	addi.d	$r4,$r4,1132(0x46c)
90000000080069ec:	57988bff 	bl	-26488(0xfff9888) # 9000000008000274 <printf>
              "ctid = %p\n",
              new_stack, new_fn, ptid, tls, ctid);
  if (new_stack == 0) {
90000000080069f0:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000080069f4:	40006c80 	beqz	$r4,108(0x6c) # 9000000008006a60 <sys_clone+0xf8>
  }
  // if (new_fn & CLONE_VM)
  //   return thread_clone(new_stack, ptid, tls, ctid);
  // else
  //   return clone(new_stack, new_fn);
  return clone(new_stack, new_fn);
90000000080069f8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
90000000080069fc:	57c187ff 	bl	-15996(0xfffc184) # 9000000008002b80 <clone>
}
9000000008006a00:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008006a04:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008006a08:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008006a0c:	4c000020 	jirl	$r0,$r1,0
    printf("sys_clone: argaddr(0, &new_fn) < 0\n");
9000000008006a10:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006a14:	02ce8084 	addi.d	$r4,$r4,928(0x3a0)
9000000008006a18:	57985fff 	bl	-26532(0xfff985c) # 9000000008000274 <printf>
    return -1;
9000000008006a1c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006a20:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008006a00 <sys_clone+0x98>
    printf("sys_clone: argaddr(2, &ptid) < 0\n");
9000000008006a24:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006a28:	02ced084 	addi.d	$r4,$r4,948(0x3b4)
9000000008006a2c:	57984bff 	bl	-26552(0xfff9848) # 9000000008000274 <printf>
    return -1;
9000000008006a30:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006a34:	53ffcfff 	b	-52(0xfffffcc) # 9000000008006a00 <sys_clone+0x98>
    printf("sys_clone: argaddr(3, &tls) < 0\n");
9000000008006a38:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006a3c:	02cf2084 	addi.d	$r4,$r4,968(0x3c8)
9000000008006a40:	579837ff 	bl	-26572(0xfff9834) # 9000000008000274 <printf>
    return -1;
9000000008006a44:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006a48:	53ffbbff 	b	-72(0xfffffb8) # 9000000008006a00 <sys_clone+0x98>
    printf("sys_clone: argaddr(4, &ctid) < 0\n");
9000000008006a4c:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006a50:	02cf7084 	addi.d	$r4,$r4,988(0x3dc)
9000000008006a54:	579823ff 	bl	-26592(0xfff9820) # 9000000008000274 <printf>
    return -1;
9000000008006a58:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006a5c:	53ffa7ff 	b	-92(0xfffffa4) # 9000000008006a00 <sys_clone+0x98>
    return fork();
9000000008006a60:	57bf8bff 	bl	-16504(0xfffbf88) # 90000000080029e8 <fork>
9000000008006a64:	53ff9fff 	b	-100(0xfffff9c) # 9000000008006a00 <sys_clone+0x98>

9000000008006a68 <sys_prlimit64>:

uint64 sys_prlimit64() {
9000000008006a68:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008006a6c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008006a70:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008006a74:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  uint64 addr;
  int opt;
  rlimit r;
  if (argint(1, &opt) < 0 || argaddr(2, &addr) < 0) {
9000000008006a78:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
9000000008006a7c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008006a80:	57fc1fff 	bl	-996(0xffffc1c) # 900000000800669c <argint>
    return -1;
9000000008006a84:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(1, &opt) < 0 || argaddr(2, &addr) < 0) {
9000000008006a88:	60004480 	blt	$r4,$r0,68(0x44) # 9000000008006acc <sys_prlimit64+0x64>
9000000008006a8c:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008006a90:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008006a94:	57fc8fff 	bl	-884(0xffffc8c) # 9000000008006720 <argaddr>
    return -1;
9000000008006a98:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(1, &opt) < 0 || argaddr(2, &addr) < 0) {
9000000008006a9c:	60003080 	blt	$r4,$r0,48(0x30) # 9000000008006acc <sys_prlimit64+0x64>
  }
  if (either_copyin((void *)&r, 1, addr, sizeof(rlimit)) < 0) {
9000000008006aa0:	02804007 	addi.w	$r7,$r0,16(0x10)
9000000008006aa4:	28ffa2c6 	ld.d	$r6,$r22,-24(0xfe8)
9000000008006aa8:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008006aac:	02ff42c4 	addi.d	$r4,$r22,-48(0xfd0)
9000000008006ab0:	57b87fff 	bl	-18308(0xfffb87c) # 900000000800232c <either_copyin>
    return -1;
9000000008006ab4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (either_copyin((void *)&r, 1, addr, sizeof(rlimit)) < 0) {
9000000008006ab8:	60001480 	blt	$r4,$r0,20(0x14) # 9000000008006acc <sys_prlimit64+0x64>
  }
  if (opt == 7 && r.rlim_cur == 42) {
9000000008006abc:	28bf92ce 	ld.w	$r14,$r22,-28(0xfe4)
9000000008006ac0:	02801c0d 	addi.w	$r13,$r0,7(0x7)
    myproc()->filelimit = 42;
  }

  return 0;
9000000008006ac4:	0015000c 	move	$r12,$r0
  if (opt == 7 && r.rlim_cur == 42) {
9000000008006ac8:	580019cd 	beq	$r14,$r13,24(0x18) # 9000000008006ae0 <sys_prlimit64+0x78>
}
9000000008006acc:	00150184 	move	$r4,$r12
9000000008006ad0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008006ad4:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008006ad8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008006adc:	4c000020 	jirl	$r0,$r1,0
  if (opt == 7 && r.rlim_cur == 42) {
9000000008006ae0:	28ff42ce 	ld.d	$r14,$r22,-48(0xfd0)
9000000008006ae4:	0280a80d 	addi.w	$r13,$r0,42(0x2a)
9000000008006ae8:	5fffe5cd 	bne	$r14,$r13,-28(0x3ffe4) # 9000000008006acc <sys_prlimit64+0x64>
    myproc()->filelimit = 42;
9000000008006aec:	57ac3fff 	bl	-21444(0xfffac3c) # 9000000008001728 <myproc>
9000000008006af0:	0280a80c 	addi.w	$r12,$r0,42(0x2a)
9000000008006af4:	29c1208c 	st.d	$r12,$r4,72(0x48)
  return 0;
9000000008006af8:	0015000c 	move	$r12,$r0
9000000008006afc:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008006acc <sys_prlimit64+0x64>

9000000008006b00 <sys_wait4>:

uint64 sys_wait4() {
9000000008006b00:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008006b04:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008006b08:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008006b0c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint64 addr;
  int pid, options;
  if (argint(0, &pid) < 0) {
9000000008006b10:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
9000000008006b14:	00150004 	move	$r4,$r0
9000000008006b18:	57fb87ff 	bl	-1148(0xffffb84) # 900000000800669c <argint>
    return -1;
9000000008006b1c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0) {
9000000008006b20:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008006b60 <sys_wait4+0x60>
  }
  if (argaddr(1, &addr) < 0) {
9000000008006b24:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008006b28:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008006b2c:	57fbf7ff 	bl	-1036(0xffffbf4) # 9000000008006720 <argaddr>
    return -1;
9000000008006b30:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(1, &addr) < 0) {
9000000008006b34:	60002c80 	blt	$r4,$r0,44(0x2c) # 9000000008006b60 <sys_wait4+0x60>
  }
  if (argint(2, &options) < 0) {
9000000008006b38:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008006b3c:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008006b40:	57fb5fff 	bl	-1188(0xffffb5c) # 900000000800669c <argint>
    return -1;
9000000008006b44:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(2, &options) < 0) {
9000000008006b48:	60001880 	blt	$r4,$r0,24(0x18) # 9000000008006b60 <sys_wait4+0x60>
  }

  return wait4pid(pid, addr, options);
9000000008006b4c:	28bf82c6 	ld.w	$r6,$r22,-32(0xfe0)
9000000008006b50:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
9000000008006b54:	28bf92c4 	ld.w	$r4,$r22,-28(0xfe4)
9000000008006b58:	57baabff 	bl	-17752(0xfffbaa8) # 9000000008002600 <wait4pid>
9000000008006b5c:	0015008c 	move	$r12,$r4
}
9000000008006b60:	00150184 	move	$r4,$r12
9000000008006b64:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008006b68:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008006b6c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008006b70:	4c000020 	jirl	$r0,$r1,0

9000000008006b74 <sys_exec>:

uint64 sys_exec(void) {
9000000008006b74:	02f68063 	addi.d	$r3,$r3,-608(0xda0)
9000000008006b78:	29c96061 	st.d	$r1,$r3,600(0x258)
9000000008006b7c:	29c94076 	st.d	$r22,$r3,592(0x250)
9000000008006b80:	29c92077 	st.d	$r23,$r3,584(0x248)
9000000008006b84:	29c90078 	st.d	$r24,$r3,576(0x240)
9000000008006b88:	29c8e079 	st.d	$r25,$r3,568(0x238)
9000000008006b8c:	29c8c07a 	st.d	$r26,$r3,560(0x230)
9000000008006b90:	29c8a07b 	st.d	$r27,$r3,552(0x228)
9000000008006b94:	02c98076 	addi.d	$r22,$r3,608(0x260)
  char path[FAT32_MAX_PATH], *argv[MAXARG];
  int i;
  uint64 uargv, uarg;

  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &uargv) < 0) {
9000000008006b98:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008006b9c:	02fae2c5 	addi.d	$r5,$r22,-328(0xeb8)
9000000008006ba0:	00150004 	move	$r4,$r0
9000000008006ba4:	57fbb7ff 	bl	-1100(0xffffbb4) # 9000000008006758 <argstr>
9000000008006ba8:	6000cc80 	blt	$r4,$r0,204(0xcc) # 9000000008006c74 <sys_exec+0x100>
9000000008006bac:	02f6c2c5 	addi.d	$r5,$r22,-592(0xdb0)
9000000008006bb0:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008006bb4:	57fb6fff 	bl	-1172(0xffffb6c) # 9000000008006720 <argaddr>
9000000008006bb8:	6000bc80 	blt	$r4,$r0,188(0xbc) # 9000000008006c74 <sys_exec+0x100>
    printf("[sys_exec] fetch arg error\n");
    return -1;
  }
  memset(argv, 0, sizeof(argv));
9000000008006bbc:	02f6e2d7 	addi.d	$r23,$r22,-584(0xdb8)
9000000008006bc0:	02840006 	addi.w	$r6,$r0,256(0x100)
9000000008006bc4:	00150005 	move	$r5,$r0
9000000008006bc8:	001502e4 	move	$r4,$r23
9000000008006bcc:	57a39bff 	bl	-23656(0xfffa398) # 9000000008000f64 <memset>
  for (i = 0;; i++) {
    if (i >= NELEM(argv)) {
9000000008006bd0:	001502fa 	move	$r26,$r23
  memset(argv, 0, sizeof(argv));
9000000008006bd4:	00150019 	move	$r25,$r0
  for (i = 0;; i++) {
9000000008006bd8:	00150018 	move	$r24,$r0
    if (i >= NELEM(argv)) {
9000000008006bdc:	0280801b 	addi.w	$r27,$r0,32(0x20)
      printf("[sys_exec] too many arguments\n");
      goto bad;
    }
    if (fetchaddr(uargv + sizeof(uint64) * i, (uint64 *)&uarg) < 0) {
9000000008006be0:	02f6a2c5 	addi.d	$r5,$r22,-600(0xda8)
9000000008006be4:	28f6c2c4 	ld.d	$r4,$r22,-592(0xdb0)
9000000008006be8:	00109324 	add.d	$r4,$r25,$r4
9000000008006bec:	57f9d3ff 	bl	-1584(0xffff9d0) # 90000000080065bc <fetchaddr>
9000000008006bf0:	6000b880 	blt	$r4,$r0,184(0xb8) # 9000000008006ca8 <sys_exec+0x134>
      printf("[sys_exec] fetch %d addr error uargv:%p\n", i, uargv);
      goto bad;
    }
    if (uarg == 0) {
9000000008006bf4:	28f6a2cc 	ld.d	$r12,$r22,-600(0xda8)
9000000008006bf8:	4000c980 	beqz	$r12,200(0xc8) # 9000000008006cc0 <sys_exec+0x14c>
      argv[i] = 0;
      break;
    }
    argv[i] = kalloc();
9000000008006bfc:	57c2d7ff 	bl	-15660(0xfffc2d4) # 9000000008002ed0 <kalloc>
9000000008006c00:	29c002e4 	st.d	$r4,$r23,0
    if (argv[i] == 0) {
9000000008006c04:	40010c80 	beqz	$r4,268(0x10c) # 9000000008006d10 <sys_exec+0x19c>
      printf("[sys_exec] kalloc error\n");
      goto bad;
    }
    if (fetchstr(uarg, argv[i], PGSIZE) < 0) {
9000000008006c08:	14000026 	lu12i.w	$r6,1(0x1)
9000000008006c0c:	00150085 	move	$r5,$r4
9000000008006c10:	28f6a2c4 	ld.d	$r4,$r22,-600(0xda8)
9000000008006c14:	57fa23ff 	bl	-1504(0xffffa20) # 9000000008006634 <fetchstr>
9000000008006c18:	60010880 	blt	$r4,$r0,264(0x108) # 9000000008006d20 <sys_exec+0x1ac>
  for (i = 0;; i++) {
9000000008006c1c:	02800718 	addi.w	$r24,$r24,1(0x1)
    if (i >= NELEM(argv)) {
9000000008006c20:	02c02339 	addi.d	$r25,$r25,8(0x8)
9000000008006c24:	02c022f7 	addi.d	$r23,$r23,8(0x8)
9000000008006c28:	5fffbb1b 	bne	$r24,$r27,-72(0x3ffb8) # 9000000008006be0 <sys_exec+0x6c>
      printf("[sys_exec] too many arguments\n");
9000000008006c2c:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006c30:	02ca3084 	addi.d	$r4,$r4,652(0x28c)
9000000008006c34:	579643ff 	bl	-27072(0xfff9640) # 9000000008000274 <printf>
    kfree(argv[i]);

  return ret;

bad:
  printf("[sys_exec]: bad\n");
9000000008006c38:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006c3c:	02cc4084 	addi.d	$r4,$r4,784(0x310)
9000000008006c40:	579637ff 	bl	-27084(0xfff9634) # 9000000008000274 <printf>
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006c44:	28f6e2c4 	ld.d	$r4,$r22,-584(0xdb8)
9000000008006c48:	4000e880 	beqz	$r4,232(0xe8) # 9000000008006d30 <sys_exec+0x1bc>
    kfree(argv[i]);
9000000008006c4c:	57c0f7ff 	bl	-16140(0xfffc0f4) # 9000000008002d40 <kfree>
9000000008006c50:	02f702d7 	addi.d	$r23,$r22,-576(0xdc0)
9000000008006c54:	02c4035a 	addi.d	$r26,$r26,256(0x100)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006c58:	28c002e4 	ld.d	$r4,$r23,0
9000000008006c5c:	4000dc80 	beqz	$r4,220(0xdc) # 9000000008006d38 <sys_exec+0x1c4>
    kfree(argv[i]);
9000000008006c60:	57c0e3ff 	bl	-16160(0xfffc0e0) # 9000000008002d40 <kfree>
9000000008006c64:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006c68:	5ffff2fa 	bne	$r23,$r26,-16(0x3fff0) # 9000000008006c58 <sys_exec+0xe4>
  return -1;
9000000008006c6c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006c70:	50001400 	b	20(0x14) # 9000000008006c84 <sys_exec+0x110>
    printf("[sys_exec] fetch arg error\n");
9000000008006c74:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006c78:	02c89084 	addi.d	$r4,$r4,548(0x224)
9000000008006c7c:	5795fbff 	bl	-27144(0xfff95f8) # 9000000008000274 <printf>
    return -1;
9000000008006c80:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008006c84:	28c96061 	ld.d	$r1,$r3,600(0x258)
9000000008006c88:	28c94076 	ld.d	$r22,$r3,592(0x250)
9000000008006c8c:	28c92077 	ld.d	$r23,$r3,584(0x248)
9000000008006c90:	28c90078 	ld.d	$r24,$r3,576(0x240)
9000000008006c94:	28c8e079 	ld.d	$r25,$r3,568(0x238)
9000000008006c98:	28c8c07a 	ld.d	$r26,$r3,560(0x230)
9000000008006c9c:	28c8a07b 	ld.d	$r27,$r3,552(0x228)
9000000008006ca0:	02c98063 	addi.d	$r3,$r3,608(0x260)
9000000008006ca4:	4c000020 	jirl	$r0,$r1,0
      printf("[sys_exec] fetch %d addr error uargv:%p\n", i, uargv);
9000000008006ca8:	28f6c2c6 	ld.d	$r6,$r22,-592(0xdb0)
9000000008006cac:	00150305 	move	$r5,$r24
9000000008006cb0:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006cb4:	02c8a084 	addi.d	$r4,$r4,552(0x228)
9000000008006cb8:	5795bfff 	bl	-27204(0xfff95bc) # 9000000008000274 <printf>
      goto bad;
9000000008006cbc:	53ff7fff 	b	-132(0xfffff7c) # 9000000008006c38 <sys_exec+0xc4>
      argv[i] = 0;
9000000008006cc0:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
9000000008006cc4:	002d3318 	alsl.d	$r24,$r24,$r12,0x3
9000000008006cc8:	29f7e300 	st.d	$r0,$r24,-520(0xdf8)
  int ret = exec(path, argv, 0);
9000000008006ccc:	00150006 	move	$r6,$r0
9000000008006cd0:	02f6e2c5 	addi.d	$r5,$r22,-584(0xdb8)
9000000008006cd4:	02fae2c4 	addi.d	$r4,$r22,-328(0xeb8)
9000000008006cd8:	54439400 	bl	17300(0x4394) # 900000000800b06c <exec>
9000000008006cdc:	00150098 	move	$r24,$r4
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006ce0:	28f6e2c4 	ld.d	$r4,$r22,-584(0xdb8)
9000000008006ce4:	40002480 	beqz	$r4,36(0x24) # 9000000008006d08 <sys_exec+0x194>
    kfree(argv[i]);
9000000008006ce8:	57c05bff 	bl	-16296(0xfffc058) # 9000000008002d40 <kfree>
9000000008006cec:	02f702d7 	addi.d	$r23,$r22,-576(0xdc0)
9000000008006cf0:	02c4035a 	addi.d	$r26,$r26,256(0x100)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006cf4:	28c002e4 	ld.d	$r4,$r23,0
9000000008006cf8:	40001080 	beqz	$r4,16(0x10) # 9000000008006d08 <sys_exec+0x194>
    kfree(argv[i]);
9000000008006cfc:	57c047ff 	bl	-16316(0xfffc044) # 9000000008002d40 <kfree>
9000000008006d00:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006d04:	5ffff2fa 	bne	$r23,$r26,-16(0x3fff0) # 9000000008006cf4 <sys_exec+0x180>
  return ret;
9000000008006d08:	00150304 	move	$r4,$r24
9000000008006d0c:	53ff7bff 	b	-136(0xfffff78) # 9000000008006c84 <sys_exec+0x110>
      printf("[sys_exec] kalloc error\n");
9000000008006d10:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006d14:	02c7e084 	addi.d	$r4,$r4,504(0x1f8)
9000000008006d18:	57955fff 	bl	-27300(0xfff955c) # 9000000008000274 <printf>
      goto bad;
9000000008006d1c:	53ff1fff 	b	-228(0xfffff1c) # 9000000008006c38 <sys_exec+0xc4>
      printf("[sys_exec] fetchstr error\n");
9000000008006d20:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006d24:	02c82084 	addi.d	$r4,$r4,520(0x208)
9000000008006d28:	57954fff 	bl	-27316(0xfff954c) # 9000000008000274 <printf>
      goto bad;
9000000008006d2c:	53ff0fff 	b	-244(0xfffff0c) # 9000000008006c38 <sys_exec+0xc4>
  return -1;
9000000008006d30:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006d34:	53ff53ff 	b	-176(0xfffff50) # 9000000008006c84 <sys_exec+0x110>
9000000008006d38:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008006d3c:	53ff4bff 	b	-184(0xfffff48) # 9000000008006c84 <sys_exec+0x110>

9000000008006d40 <sys_execve>:

// 标准syscall参数相比于exec多了一个环境变量数组指针，因此新建了一个execve系统调用
// 该函数相比于exec只是接收了环境变量数组参数，但还没有进行任何处理
uint64 sys_execve(void) {
9000000008006d40:	02f68063 	addi.d	$r3,$r3,-608(0xda0)
9000000008006d44:	29c96061 	st.d	$r1,$r3,600(0x258)
9000000008006d48:	29c94076 	st.d	$r22,$r3,592(0x250)
9000000008006d4c:	29c92077 	st.d	$r23,$r3,584(0x248)
9000000008006d50:	29c90078 	st.d	$r24,$r3,576(0x240)
9000000008006d54:	29c8e079 	st.d	$r25,$r3,568(0x238)
9000000008006d58:	29c8c07a 	st.d	$r26,$r3,560(0x230)
9000000008006d5c:	29c8a07b 	st.d	$r27,$r3,552(0x228)
9000000008006d60:	02c98076 	addi.d	$r22,$r3,608(0x260)
  char path[FAT32_MAX_PATH], *argv[MAXARG];
  // char *env[MAXARG];
  int i;
  uint64 uargv, uarg, uenv;

  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &uargv) < 0 ||
9000000008006d64:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008006d68:	02fae2c5 	addi.d	$r5,$r22,-328(0xeb8)
9000000008006d6c:	00150004 	move	$r4,$r0
9000000008006d70:	57f9ebff 	bl	-1560(0xffff9e8) # 9000000008006758 <argstr>
      argaddr(2, &uenv)) {
    return -1;
9000000008006d74:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &uargv) < 0 ||
9000000008006d78:	60013080 	blt	$r4,$r0,304(0x130) # 9000000008006ea8 <sys_execve+0x168>
9000000008006d7c:	02f6c2c5 	addi.d	$r5,$r22,-592(0xdb0)
9000000008006d80:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008006d84:	57f99fff 	bl	-1636(0xffff99c) # 9000000008006720 <argaddr>
9000000008006d88:	60012080 	blt	$r4,$r0,288(0x120) # 9000000008006ea8 <sys_execve+0x168>
      argaddr(2, &uenv)) {
9000000008006d8c:	02f682c5 	addi.d	$r5,$r22,-608(0xda0)
9000000008006d90:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008006d94:	57f98fff 	bl	-1652(0xffff98c) # 9000000008006720 <argaddr>
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &uargv) < 0 ||
9000000008006d98:	44011080 	bnez	$r4,272(0x110) # 9000000008006ea8 <sys_execve+0x168>
  }
  printf("[sys_execve] path:%s, uargv:%p, uenv:%p\n", path, uargv, uenv);
9000000008006d9c:	28f682c7 	ld.d	$r7,$r22,-608(0xda0)
9000000008006da0:	28f6c2c6 	ld.d	$r6,$r22,-592(0xdb0)
9000000008006da4:	02fae2c5 	addi.d	$r5,$r22,-328(0xeb8)
9000000008006da8:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006dac:	02c6e084 	addi.d	$r4,$r4,440(0x1b8)
9000000008006db0:	5794c7ff 	bl	-27452(0xfff94c4) # 9000000008000274 <printf>
  memset(argv, 0, sizeof(argv));
9000000008006db4:	02f6e2d8 	addi.d	$r24,$r22,-584(0xdb8)
9000000008006db8:	02840006 	addi.w	$r6,$r0,256(0x100)
9000000008006dbc:	00150005 	move	$r5,$r0
9000000008006dc0:	00150304 	move	$r4,$r24
9000000008006dc4:	57a1a3ff 	bl	-24160(0xfffa1a0) # 9000000008000f64 <memset>
  for (i = 0;; i++) {
    if (i >= NELEM(argv)) {
9000000008006dc8:	0015031a 	move	$r26,$r24
  memset(argv, 0, sizeof(argv));
9000000008006dcc:	00150017 	move	$r23,$r0
    if (i >= NELEM(argv)) {
9000000008006dd0:	0280801b 	addi.w	$r27,$r0,32(0x20)
9000000008006dd4:	004082ec 	slli.w	$r12,$r23,0x0
9000000008006dd8:	00150199 	move	$r25,$r12
      goto bad;
    }
    if (fetchaddr(uargv + sizeof(uint64) * i, (uint64 *)&uarg) < 0) {
9000000008006ddc:	02f6a2c5 	addi.d	$r5,$r22,-600(0xda8)
9000000008006de0:	28f6c2c4 	ld.d	$r4,$r22,-592(0xdb0)
9000000008006de4:	002d12e4 	alsl.d	$r4,$r23,$r4,0x3
9000000008006de8:	57f7d7ff 	bl	-2092(0xffff7d4) # 90000000080065bc <fetchaddr>
9000000008006dec:	60003880 	blt	$r4,$r0,56(0x38) # 9000000008006e24 <sys_execve+0xe4>
      goto bad;
    }
    if (uarg == 0) {
9000000008006df0:	28f6a2cc 	ld.d	$r12,$r22,-600(0xda8)
9000000008006df4:	40006580 	beqz	$r12,100(0x64) # 9000000008006e58 <sys_execve+0x118>
      argv[i] = 0;
      break;
    }
    argv[i] = kalloc();
9000000008006df8:	57c0dbff 	bl	-16168(0xfffc0d8) # 9000000008002ed0 <kalloc>
9000000008006dfc:	29c00304 	st.d	$r4,$r24,0
    if (argv[i] == 0)
9000000008006e00:	40002480 	beqz	$r4,36(0x24) # 9000000008006e24 <sys_execve+0xe4>
      goto bad;
    if (fetchstr(uarg, argv[i], PGSIZE) < 0)
9000000008006e04:	14000026 	lu12i.w	$r6,1(0x1)
9000000008006e08:	00150085 	move	$r5,$r4
9000000008006e0c:	28f6a2c4 	ld.d	$r4,$r22,-600(0xda8)
9000000008006e10:	57f827ff 	bl	-2012(0xffff824) # 9000000008006634 <fetchstr>
9000000008006e14:	60001080 	blt	$r4,$r0,16(0x10) # 9000000008006e24 <sys_execve+0xe4>
    if (i >= NELEM(argv)) {
9000000008006e18:	02c006f7 	addi.d	$r23,$r23,1(0x1)
9000000008006e1c:	02c02318 	addi.d	$r24,$r24,8(0x8)
9000000008006e20:	5fffb6fb 	bne	$r23,$r27,-76(0x3ffb4) # 9000000008006dd4 <sys_execve+0x94>
    kfree(argv[i]);

  return ret;

bad:
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e24:	28f6e2c4 	ld.d	$r4,$r22,-584(0xdb8)
    kfree(argv[i]);
  return -1;
9000000008006e28:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e2c:	40007c80 	beqz	$r4,124(0x7c) # 9000000008006ea8 <sys_execve+0x168>
    kfree(argv[i]);
9000000008006e30:	57bf13ff 	bl	-16624(0xfffbf10) # 9000000008002d40 <kfree>
9000000008006e34:	02f702d7 	addi.d	$r23,$r22,-576(0xdc0)
9000000008006e38:	02c4035a 	addi.d	$r26,$r26,256(0x100)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e3c:	28c002e4 	ld.d	$r4,$r23,0
9000000008006e40:	40006480 	beqz	$r4,100(0x64) # 9000000008006ea4 <sys_execve+0x164>
    kfree(argv[i]);
9000000008006e44:	57beffff 	bl	-16644(0xfffbefc) # 9000000008002d40 <kfree>
9000000008006e48:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e4c:	5ffff2fa 	bne	$r23,$r26,-16(0x3fff0) # 9000000008006e3c <sys_execve+0xfc>
  return -1;
9000000008006e50:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
9000000008006e54:	50005400 	b	84(0x54) # 9000000008006ea8 <sys_execve+0x168>
      argv[i] = 0;
9000000008006e58:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
9000000008006e5c:	002d332c 	alsl.d	$r12,$r25,$r12,0x3
9000000008006e60:	29f7e180 	st.d	$r0,$r12,-520(0xdf8)
  int ret = exec(path, argv, 0);
9000000008006e64:	00150006 	move	$r6,$r0
9000000008006e68:	02f6e2c5 	addi.d	$r5,$r22,-584(0xdb8)
9000000008006e6c:	02fae2c4 	addi.d	$r4,$r22,-328(0xeb8)
9000000008006e70:	5441fc00 	bl	16892(0x41fc) # 900000000800b06c <exec>
9000000008006e74:	00150097 	move	$r23,$r4
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e78:	28f6e2c4 	ld.d	$r4,$r22,-584(0xdb8)
9000000008006e7c:	40002c80 	beqz	$r4,44(0x2c) # 9000000008006ea8 <sys_execve+0x168>
    kfree(argv[i]);
9000000008006e80:	57bec3ff 	bl	-16704(0xfffbec0) # 9000000008002d40 <kfree>
9000000008006e84:	02f702d8 	addi.d	$r24,$r22,-576(0xdc0)
9000000008006e88:	02c4035a 	addi.d	$r26,$r26,256(0x100)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e8c:	28c00304 	ld.d	$r4,$r24,0
9000000008006e90:	40001880 	beqz	$r4,24(0x18) # 9000000008006ea8 <sys_execve+0x168>
    kfree(argv[i]);
9000000008006e94:	57beafff 	bl	-16724(0xfffbeac) # 9000000008002d40 <kfree>
9000000008006e98:	02c02318 	addi.d	$r24,$r24,8(0x8)
  for (i = 0; i < NELEM(argv) && argv[i] != 0; i++)
9000000008006e9c:	5ffff31a 	bne	$r24,$r26,-16(0x3fff0) # 9000000008006e8c <sys_execve+0x14c>
9000000008006ea0:	50000800 	b	8(0x8) # 9000000008006ea8 <sys_execve+0x168>
  return -1;
9000000008006ea4:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
}
9000000008006ea8:	001502e4 	move	$r4,$r23
9000000008006eac:	28c96061 	ld.d	$r1,$r3,600(0x258)
9000000008006eb0:	28c94076 	ld.d	$r22,$r3,592(0x250)
9000000008006eb4:	28c92077 	ld.d	$r23,$r3,584(0x248)
9000000008006eb8:	28c90078 	ld.d	$r24,$r3,576(0x240)
9000000008006ebc:	28c8e079 	ld.d	$r25,$r3,568(0x238)
9000000008006ec0:	28c8c07a 	ld.d	$r26,$r3,560(0x230)
9000000008006ec4:	28c8a07b 	ld.d	$r27,$r3,552(0x228)
9000000008006ec8:	02c98063 	addi.d	$r3,$r3,608(0x260)
9000000008006ecc:	4c000020 	jirl	$r0,$r1,0

9000000008006ed0 <sys_exit>:

uint64 sys_exit(void) {
9000000008006ed0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008006ed4:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008006ed8:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008006edc:	02c08076 	addi.d	$r22,$r3,32(0x20)
  printf("sys_exit\n");
9000000008006ee0:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008006ee4:	02c2c084 	addi.d	$r4,$r4,176(0xb0)
9000000008006ee8:	57938fff 	bl	-27764(0xfff938c) # 9000000008000274 <printf>
  int n;
  if (argint(0, &n) < 0)
9000000008006eec:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008006ef0:	00150004 	move	$r4,$r0
9000000008006ef4:	57f7abff 	bl	-2136(0xffff7a8) # 900000000800669c <argint>
    return -1;
9000000008006ef8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &n) < 0)
9000000008006efc:	60001080 	blt	$r4,$r0,16(0x10) # 9000000008006f0c <sys_exit+0x3c>
  exit(n);
9000000008006f00:	28bfb2c4 	ld.w	$r4,$r22,-20(0xfec)
9000000008006f04:	57ae83ff 	bl	-20864(0xfffae80) # 9000000008001d84 <exit>
  return 0; // not reached
9000000008006f08:	0015000c 	move	$r12,$r0
}
9000000008006f0c:	00150184 	move	$r4,$r12
9000000008006f10:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008006f14:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008006f18:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008006f1c:	4c000020 	jirl	$r0,$r1,0

9000000008006f20 <sys_sched_getscheduler>:

uint64 sys_sched_getscheduler(void) {
9000000008006f20:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008006f24:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008006f28:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // TODO
  return 0;
}
9000000008006f2c:	00150004 	move	$r4,$r0
9000000008006f30:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008006f34:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008006f38:	4c000020 	jirl	$r0,$r1,0

9000000008006f3c <sys_sched_getparam>:

uint64 sys_sched_getparam(void) {
9000000008006f3c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008006f40:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008006f44:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // TODO
  return 0;
}
9000000008006f48:	00150004 	move	$r4,$r0
9000000008006f4c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008006f50:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008006f54:	4c000020 	jirl	$r0,$r1,0

9000000008006f58 <sys_sched_getaffinity>:

uint64 sys_sched_getaffinity(void) {
9000000008006f58:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008006f5c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008006f60:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008006f64:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  int pid;
  uint64 cpuset_size;
  uint64 addr;
  if (argint(0, &pid) < 0 || argaddr(1, &cpuset_size) < 0 ||
9000000008006f68:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008006f6c:	00150004 	move	$r4,$r0
9000000008006f70:	57f72fff 	bl	-2260(0xffff72c) # 900000000800669c <argint>
      argaddr(2, &addr) < 0) {
    return -1;
9000000008006f74:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0 || argaddr(1, &cpuset_size) < 0 ||
9000000008006f78:	60004c80 	blt	$r4,$r0,76(0x4c) # 9000000008006fc4 <sys_sched_getaffinity+0x6c>
9000000008006f7c:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008006f80:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008006f84:	57f79fff 	bl	-2148(0xffff79c) # 9000000008006720 <argaddr>
    return -1;
9000000008006f88:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0 || argaddr(1, &cpuset_size) < 0 ||
9000000008006f8c:	60003880 	blt	$r4,$r0,56(0x38) # 9000000008006fc4 <sys_sched_getaffinity+0x6c>
      argaddr(2, &addr) < 0) {
9000000008006f90:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008006f94:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008006f98:	57f78bff 	bl	-2168(0xffff788) # 9000000008006720 <argaddr>
    return -1;
9000000008006f9c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0 || argaddr(1, &cpuset_size) < 0 ||
9000000008006fa0:	60002480 	blt	$r4,$r0,36(0x24) # 9000000008006fc4 <sys_sched_getaffinity+0x6c>
  }
  // printf("%p %p %p\n",pid,cpuset_size,addr);
  uint64 affinity = 1;
9000000008006fa4:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008006fa8:	29ff42cc 	st.d	$r12,$r22,-48(0xfd0)
  if (either_copyout(1, addr, (void *)&affinity, sizeof(uint64)) < 0)
9000000008006fac:	02802007 	addi.w	$r7,$r0,8(0x8)
9000000008006fb0:	02ff42c6 	addi.d	$r6,$r22,-48(0xfd0)
9000000008006fb4:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000008006fb8:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008006fbc:	57b2efff 	bl	-19732(0xfffb2ec) # 90000000080022a8 <either_copyout>
9000000008006fc0:	0049fc8c 	srai.d	$r12,$r4,0x3f
    return -1;

  return 0;
}
9000000008006fc4:	00150184 	move	$r4,$r12
9000000008006fc8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008006fcc:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008006fd0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008006fd4:	4c000020 	jirl	$r0,$r1,0

9000000008006fd8 <sys_sched_setscheduler>:

uint64 sys_sched_setscheduler(void) {
9000000008006fd8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008006fdc:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008006fe0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // TODO
  return 0;
}
9000000008006fe4:	00150004 	move	$r4,$r0
9000000008006fe8:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008006fec:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008006ff0:	4c000020 	jirl	$r0,$r1,0

9000000008006ff4 <sys_nanosleep>:

uint64 sys_nanosleep(void) {
9000000008006ff4:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
9000000008006ff8:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008006ffc:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008007000:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008007004:	29c10078 	st.d	$r24,$r3,64(0x40)
9000000008007008:	29c0e079 	st.d	$r25,$r3,56(0x38)
900000000800700c:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008007010:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008007014:	02c18076 	addi.d	$r22,$r3,96(0x60)
  uint64 addr_sec, addr_usec;

  if (argaddr(0, &addr_sec) < 0)
9000000008007018:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
900000000800701c:	00150004 	move	$r4,$r0
9000000008007020:	57f703ff 	bl	-2304(0xffff700) # 9000000008006720 <argaddr>
    return -1;
9000000008007024:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &addr_sec) < 0)
9000000008007028:	60011480 	blt	$r4,$r0,276(0x114) # 900000000800713c <sys_nanosleep+0x148>
  if (argaddr(1, &addr_usec) < 0)
900000000800702c:	02fec2c5 	addi.d	$r5,$r22,-80(0xfb0)
9000000008007030:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007034:	57f6efff 	bl	-2324(0xffff6ec) # 9000000008006720 <argaddr>
    return -1;
9000000008007038:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(1, &addr_usec) < 0)
900000000800703c:	60010080 	blt	$r4,$r0,256(0x100) # 900000000800713c <sys_nanosleep+0x148>

  struct proc *p = myproc();
9000000008007040:	57a6ebff 	bl	-22808(0xfffa6e8) # 9000000008001728 <myproc>
9000000008007044:	00150098 	move	$r24,$r4
  uint64 sec, usec;
  if (copyin(p->pagetable, (char *)&sec, addr_sec, sizeof(sec)) < 0)
9000000008007048:	02802007 	addi.w	$r7,$r0,8(0x8)
900000000800704c:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
9000000008007050:	02fea2c5 	addi.d	$r5,$r22,-88(0xfa8)
9000000008007054:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008007058:	57cfa3ff 	bl	-12384(0xfffcfa0) # 9000000008003ff8 <copyin>
    return -1;
900000000800705c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (copyin(p->pagetable, (char *)&sec, addr_sec, sizeof(sec)) < 0)
9000000008007060:	6000dc80 	blt	$r4,$r0,220(0xdc) # 900000000800713c <sys_nanosleep+0x148>
  if (copyin(p->pagetable, (char *)&usec, addr_usec, sizeof(usec)) < 0)
9000000008007064:	02802007 	addi.w	$r7,$r0,8(0x8)
9000000008007068:	28fec2c6 	ld.d	$r6,$r22,-80(0xfb0)
900000000800706c:	02fe82c5 	addi.d	$r5,$r22,-96(0xfa0)
9000000008007070:	28c18304 	ld.d	$r4,$r24,96(0x60)
9000000008007074:	57cf87ff 	bl	-12412(0xfffcf84) # 9000000008003ff8 <copyin>
    return -1;
9000000008007078:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (copyin(p->pagetable, (char *)&usec, addr_usec, sizeof(usec)) < 0)
900000000800707c:	6000c080 	blt	$r4,$r0,192(0xc0) # 900000000800713c <sys_nanosleep+0x148>
  int n = sec * 20 + usec / 50000000;
9000000008007080:	28fea2d7 	ld.d	$r23,$r22,-88(0xfa8)
9000000008007084:	0280500c 	addi.w	$r12,$r0,20(0x14)
9000000008007088:	001db2f7 	mul.d	$r23,$r23,$r12
900000000800708c:	1508c38c 	lu12i.w	$r12,-506340(0x8461c)
9000000008007090:	03bbf58c 	ori	$r12,$r12,0xefd
9000000008007094:	178ee22c 	lu32i.d	$r12,-231663(0xc7711)
9000000008007098:	032af18c 	lu52i.d	$r12,$r12,-1348(0xabc)
900000000800709c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
90000000080070a0:	001eb1ac 	mulh.du	$r12,$r13,$r12
90000000080070a4:	0045658c 	srli.d	$r12,$r12,0x19
90000000080070a8:	0010b2f7 	add.d	$r23,$r23,$r12
90000000080070ac:	004082f7 	slli.w	$r23,$r23,0x0

  int mask = p->tmask;
  if (mask) {
90000000080070b0:	2893e30c 	ld.w	$r12,$r24,1272(0x4f8)
90000000080070b4:	44006d80 	bnez	$r12,108(0x6c) # 9000000008007120 <sys_nanosleep+0x12c>
    printf(") ...\n");
  }
  acquire(&p->lock);
90000000080070b8:	0015031a 	move	$r26,$r24
90000000080070bc:	00150304 	move	$r4,$r24
90000000080070c0:	579df3ff 	bl	-25104(0xfff9df0) # 9000000008000eb0 <acquire>
  uint64 tick0 = ticks;
90000000080070c4:	1c00032c 	pcaddu12i	$r12,25(0x19)
90000000080070c8:	28c0d18c 	ld.d	$r12,$r12,52(0x34)
90000000080070cc:	2a80019b 	ld.wu	$r27,$r12,0
  while (ticks - tick0 < n / 10) {
90000000080070d0:	0280280c 	addi.w	$r12,$r0,10(0xa)
90000000080070d4:	002032f9 	div.w	$r25,$r23,$r12
90000000080070d8:	5c000980 	bne	$r12,$r0,8(0x8) # 90000000080070e0 <sys_nanosleep+0xec>
90000000080070dc:	002a0007 	break	0x7
90000000080070e0:	40005320 	beqz	$r25,80(0x50) # 9000000008007130 <sys_nanosleep+0x13c>
    if (p->killed) {
90000000080070e4:	2880c30d 	ld.w	$r13,$r24,48(0x30)
      return -1;
90000000080070e8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    }
    sleep(&ticks, &p->lock);
90000000080070ec:	1c000337 	pcaddu12i	$r23,25(0x19)
90000000080070f0:	28c032f7 	ld.d	$r23,$r23,12(0xc)
    if (p->killed) {
90000000080070f4:	440049a0 	bnez	$r13,72(0x48) # 900000000800713c <sys_nanosleep+0x148>
    sleep(&ticks, &p->lock);
90000000080070f8:	00150345 	move	$r5,$r26
90000000080070fc:	001502e4 	move	$r4,$r23
9000000008007100:	57adf7ff 	bl	-21004(0xfffadf4) # 9000000008001ef4 <sleep>
  while (ticks - tick0 < n / 10) {
9000000008007104:	2a8002ec 	ld.wu	$r12,$r23,0
9000000008007108:	0011ed8c 	sub.d	$r12,$r12,$r27
900000000800710c:	6c002599 	bgeu	$r12,$r25,36(0x24) # 9000000008007130 <sys_nanosleep+0x13c>
    if (p->killed) {
9000000008007110:	2880c30c 	ld.w	$r12,$r24,48(0x30)
9000000008007114:	43ffe59f 	beqz	$r12,-28(0x7fffe4) # 90000000080070f8 <sys_nanosleep+0x104>
      return -1;
9000000008007118:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800711c:	50002000 	b	32(0x20) # 900000000800713c <sys_nanosleep+0x148>
    printf(") ...\n");
9000000008007120:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008007124:	02fa0084 	addi.d	$r4,$r4,-384(0xe80)
9000000008007128:	57914fff 	bl	-28340(0xfff914c) # 9000000008000274 <printf>
900000000800712c:	53ff8fff 	b	-116(0xfffff8c) # 90000000080070b8 <sys_nanosleep+0xc4>
  }
  release(&p->lock);
9000000008007130:	00150304 	move	$r4,$r24
9000000008007134:	579ddfff 	bl	-25124(0xfff9ddc) # 9000000008000f10 <release>

  return 0;
9000000008007138:	0015000c 	move	$r12,$r0
}
900000000800713c:	00150184 	move	$r4,$r12
9000000008007140:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000008007144:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000008007148:	28c12077 	ld.d	$r23,$r3,72(0x48)
900000000800714c:	28c10078 	ld.d	$r24,$r3,64(0x40)
9000000008007150:	28c0e079 	ld.d	$r25,$r3,56(0x38)
9000000008007154:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
9000000008007158:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
900000000800715c:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000008007160:	4c000020 	jirl	$r0,$r1,0

9000000008007164 <sys_getpid>:

uint64 sys_getpid(void) { return myproc()->pid; }
9000000008007164:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008007168:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800716c:	29c00076 	st.d	$r22,$r3,0
9000000008007170:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008007174:	57a5b7ff 	bl	-23116(0xfffa5b4) # 9000000008001728 <myproc>
9000000008007178:	2880e084 	ld.w	$r4,$r4,56(0x38)
900000000800717c:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008007180:	28c00076 	ld.d	$r22,$r3,0
9000000008007184:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008007188:	4c000020 	jirl	$r0,$r1,0

900000000800718c <sys_getppid>:

uint64 sys_getppid(void) {
900000000800718c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008007190:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008007194:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007198:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800719c:	29c00078 	st.d	$r24,$r3,0
90000000080071a0:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct proc *p = myproc();
90000000080071a4:	57a587ff 	bl	-23164(0xfffa584) # 9000000008001728 <myproc>
90000000080071a8:	00150097 	move	$r23,$r4
  acquire(&p->lock);
90000000080071ac:	579d07ff 	bl	-25340(0xfff9d04) # 9000000008000eb0 <acquire>
  uint64 ppid = p->parent->pid;
90000000080071b0:	28c082ec 	ld.d	$r12,$r23,32(0x20)
90000000080071b4:	2880e198 	ld.w	$r24,$r12,56(0x38)
  release(&p->lock);
90000000080071b8:	001502e4 	move	$r4,$r23
90000000080071bc:	579d57ff 	bl	-25260(0xfff9d54) # 9000000008000f10 <release>

  return ppid;
}
90000000080071c0:	00150304 	move	$r4,$r24
90000000080071c4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080071c8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080071cc:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080071d0:	28c00078 	ld.d	$r24,$r3,0
90000000080071d4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080071d8:	4c000020 	jirl	$r0,$r1,0

90000000080071dc <sys_fork>:

uint64 sys_fork(void) { return fork(); }
90000000080071dc:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080071e0:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080071e4:	29c00076 	st.d	$r22,$r3,0
90000000080071e8:	02c04076 	addi.d	$r22,$r3,16(0x10)
90000000080071ec:	57b7ffff 	bl	-18436(0xfffb7fc) # 90000000080029e8 <fork>
90000000080071f0:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080071f4:	28c00076 	ld.d	$r22,$r3,0
90000000080071f8:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080071fc:	4c000020 	jirl	$r0,$r1,0

9000000008007200 <sys_wait>:

uint64 sys_wait(void) {
9000000008007200:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008007204:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008007208:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800720c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint64 p;
  if (argaddr(0, &p) < 0)
9000000008007210:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008007214:	00150004 	move	$r4,$r0
9000000008007218:	57f50bff 	bl	-2808(0xffff508) # 9000000008006720 <argaddr>
    return -1;
900000000800721c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &p) < 0)
9000000008007220:	60001080 	blt	$r4,$r0,16(0x10) # 9000000008007230 <sys_wait+0x30>
  return wait(p);
9000000008007224:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000008007228:	57ad63ff 	bl	-21152(0xfffad60) # 9000000008001f88 <wait>
900000000800722c:	0015008c 	move	$r12,$r4
}
9000000008007230:	00150184 	move	$r4,$r12
9000000008007234:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008007238:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800723c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007240:	4c000020 	jirl	$r0,$r1,0

9000000008007244 <sys_sbrk>:

uint64 sys_sbrk(void) {
9000000008007244:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008007248:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800724c:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008007250:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008007254:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  int addr;
  int n;
  // printf("sbrk param n: %d\n", n);
  if (argint(0, &n) < 0)
9000000008007258:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
900000000800725c:	00150004 	move	$r4,$r0
9000000008007260:	57f43fff 	bl	-3012(0xffff43c) # 900000000800669c <argint>
    return -1;
9000000008007264:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argint(0, &n) < 0)
9000000008007268:	60002880 	blt	$r4,$r0,40(0x28) # 9000000008007290 <sys_sbrk+0x4c>
  addr = myproc()->sz;
900000000800726c:	57a4bfff 	bl	-23364(0xfffa4bc) # 9000000008001728 <myproc>
9000000008007270:	28816097 	ld.w	$r23,$r4,88(0x58)
  if (growproc(n) < 0)
9000000008007274:	28bf72c4 	ld.w	$r4,$r22,-36(0xfdc)
9000000008007278:	57a7dfff 	bl	-22564(0xfffa7dc) # 9000000008001a54 <growproc>
    return -1;
  return addr;
900000000800727c:	02000084 	slti	$r4,$r4,0
9000000008007280:	001392f7 	masknez	$r23,$r23,$r4
9000000008007284:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008007288:	00131184 	maskeqz	$r4,$r12,$r4
900000000800728c:	001512f7 	or	$r23,$r23,$r4
}
9000000008007290:	001502e4 	move	$r4,$r23
9000000008007294:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008007298:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800729c:	28c06077 	ld.d	$r23,$r3,24(0x18)
90000000080072a0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080072a4:	4c000020 	jirl	$r0,$r1,0

90000000080072a8 <sys_brk>:

uint64 sys_brk(void) {
90000000080072a8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080072ac:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080072b0:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080072b4:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint64 addr;
  uint64 n;

  if (argaddr(0, &n) < 0)
90000000080072b8:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
90000000080072bc:	00150004 	move	$r4,$r0
90000000080072c0:	57f463ff 	bl	-2976(0xffff460) # 9000000008006720 <argaddr>
    return -1;
90000000080072c4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &n) < 0)
90000000080072c8:	60001c80 	blt	$r4,$r0,28(0x1c) # 90000000080072e4 <sys_brk+0x3c>

  addr = myproc()->sz;
90000000080072cc:	57a45fff 	bl	-23460(0xfffa45c) # 9000000008001728 <myproc>
90000000080072d0:	28c1608c 	ld.d	$r12,$r4,88(0x58)
  if (n == 0) {
90000000080072d4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000080072d8:	40000c80 	beqz	$r4,12(0xc) # 90000000080072e4 <sys_brk+0x3c>
    return addr;
  }
  if (n >= addr) {
90000000080072dc:	6c001c8c 	bgeu	$r4,$r12,28(0x1c) # 90000000080072f8 <sys_brk+0x50>
    if (growproc(n - addr) < 0)
      return -1;
    else
      return myproc()->sz;
  }
  return 0;
90000000080072e0:	0015000c 	move	$r12,$r0
  // if (growproc(n) < 0)
  // {
  //   return -1;
  // }
  // return myproc()->sz;
}
90000000080072e4:	00150184 	move	$r4,$r12
90000000080072e8:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080072ec:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080072f0:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080072f4:	4c000020 	jirl	$r0,$r1,0
    if (growproc(n - addr) < 0)
90000000080072f8:	0011b084 	sub.d	$r4,$r4,$r12
90000000080072fc:	00408084 	slli.w	$r4,$r4,0x0
9000000008007300:	57a757ff 	bl	-22700(0xfffa754) # 9000000008001a54 <growproc>
      return -1;
9000000008007304:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    if (growproc(n - addr) < 0)
9000000008007308:	63ffdc80 	blt	$r4,$r0,-36(0x3ffdc) # 90000000080072e4 <sys_brk+0x3c>
      return myproc()->sz;
900000000800730c:	57a41fff 	bl	-23524(0xfffa41c) # 9000000008001728 <myproc>
9000000008007310:	28c1608c 	ld.d	$r12,$r4,88(0x58)
9000000008007314:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080072e4 <sys_brk+0x3c>

9000000008007318 <sys_sleep>:

uint64 sys_sleep(void) {
9000000008007318:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800731c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008007320:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008007324:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008007328:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800732c:	29c06079 	st.d	$r25,$r3,24(0x18)
9000000008007330:	02c10076 	addi.d	$r22,$r3,64(0x40)
  int n;
  uint ticks0;

  if (argint(0, &n) < 0)
9000000008007334:	02ff32c5 	addi.d	$r5,$r22,-52(0xfcc)
9000000008007338:	00150004 	move	$r4,$r0
900000000800733c:	57f363ff 	bl	-3232(0xffff360) # 900000000800669c <argint>
    return -1;
9000000008007340:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &n) < 0)
9000000008007344:	60007c80 	blt	$r4,$r0,124(0x7c) # 90000000080073c0 <sys_sleep+0xa8>
  n *= ticks_per_second;
9000000008007348:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000800734c:	0280140d 	addi.w	$r13,$r0,5(0x5)
9000000008007350:	001c358c 	mul.w	$r12,$r12,$r13
9000000008007354:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  acquire(&tickslock);
9000000008007358:	1c000324 	pcaddu12i	$r4,25(0x19)
900000000800735c:	28f62084 	ld.d	$r4,$r4,-632(0xd88)
9000000008007360:	579b53ff 	bl	-25776(0xfff9b50) # 9000000008000eb0 <acquire>
  ticks0 = ticks;
9000000008007364:	1c00032c 	pcaddu12i	$r12,25(0x19)
9000000008007368:	28f6518c 	ld.d	$r12,$r12,-620(0xd94)
900000000800736c:	28800198 	ld.w	$r24,$r12,0
  while (ticks - ticks0 < n) {
9000000008007370:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000008007374:	40003d80 	beqz	$r12,60(0x3c) # 90000000080073b0 <sys_sleep+0x98>
    if (myproc()->killed) {
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
9000000008007378:	1c000339 	pcaddu12i	$r25,25(0x19)
900000000800737c:	28f5a339 	ld.d	$r25,$r25,-664(0xd68)
9000000008007380:	1c000337 	pcaddu12i	$r23,25(0x19)
9000000008007384:	28f5e2f7 	ld.d	$r23,$r23,-648(0xd78)
    if (myproc()->killed) {
9000000008007388:	57a3a3ff 	bl	-23648(0xfffa3a0) # 9000000008001728 <myproc>
900000000800738c:	2880c08c 	ld.w	$r12,$r4,48(0x30)
9000000008007390:	44005180 	bnez	$r12,80(0x50) # 90000000080073e0 <sys_sleep+0xc8>
    sleep(&ticks, &tickslock);
9000000008007394:	00150325 	move	$r5,$r25
9000000008007398:	001502e4 	move	$r4,$r23
900000000800739c:	57ab5bff 	bl	-21672(0xfffab58) # 9000000008001ef4 <sleep>
  while (ticks - ticks0 < n) {
90000000080073a0:	288002ec 	ld.w	$r12,$r23,0
90000000080073a4:	0011618c 	sub.w	$r12,$r12,$r24
90000000080073a8:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
90000000080073ac:	6bffdd8d 	bltu	$r12,$r13,-36(0x3ffdc) # 9000000008007388 <sys_sleep+0x70>
  }
  release(&tickslock);
90000000080073b0:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000080073b4:	28f4c084 	ld.d	$r4,$r4,-720(0xd30)
90000000080073b8:	579b5bff 	bl	-25768(0xfff9b58) # 9000000008000f10 <release>
  return 0;
90000000080073bc:	0015000c 	move	$r12,$r0
}
90000000080073c0:	00150184 	move	$r4,$r12
90000000080073c4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
90000000080073c8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
90000000080073cc:	28c0a077 	ld.d	$r23,$r3,40(0x28)
90000000080073d0:	28c08078 	ld.d	$r24,$r3,32(0x20)
90000000080073d4:	28c06079 	ld.d	$r25,$r3,24(0x18)
90000000080073d8:	02c10063 	addi.d	$r3,$r3,64(0x40)
90000000080073dc:	4c000020 	jirl	$r0,$r1,0
      release(&tickslock);
90000000080073e0:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000080073e4:	28f40084 	ld.d	$r4,$r4,-768(0xd00)
90000000080073e8:	579b2bff 	bl	-25816(0xfff9b28) # 9000000008000f10 <release>
      return -1;
90000000080073ec:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000080073f0:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080073c0 <sys_sleep+0xa8>

90000000080073f4 <sys_kill>:

uint64 sys_kill(void) {
90000000080073f4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080073f8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080073fc:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007400:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int pid, sig;

  if (argint(0, &pid) < 0)
9000000008007404:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008007408:	00150004 	move	$r4,$r0
900000000800740c:	57f293ff 	bl	-3440(0xffff290) # 900000000800669c <argint>
    return -1;
9000000008007410:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0)
9000000008007414:	60004480 	blt	$r4,$r0,68(0x44) # 9000000008007458 <sys_kill+0x64>
  if (argint(1, &sig) < 0)
9000000008007418:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
900000000800741c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007420:	57f27fff 	bl	-3460(0xffff27c) # 900000000800669c <argint>
    return -1;
9000000008007424:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(1, &sig) < 0)
9000000008007428:	60003080 	blt	$r4,$r0,48(0x30) # 9000000008007458 <sys_kill+0x64>
  if (pid <= 0) {
900000000800742c:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
9000000008007430:	64003c0c 	bge	$r0,$r12,60(0x3c) # 900000000800746c <sys_kill+0x78>
    printf("[kill]pid <= 0 do not implement\n");
    return -1;
  }
  if (sig < 0 || sig >= SIGRTMAX) {
9000000008007434:	28bfa2cd 	ld.w	$r13,$r22,-24(0xfe8)
9000000008007438:	0280fc0c 	addi.w	$r12,$r0,63(0x3f)
900000000800743c:	6800458d 	bltu	$r12,$r13,68(0x44) # 9000000008007480 <sys_kill+0x8c>
    printf("[kill]sig < 0 || sig >= SIGRTMAX\n");
    return -1;
  }
  pid = myproc()->pid;
9000000008007440:	57a2ebff 	bl	-23832(0xfffa2e8) # 9000000008001728 <myproc>
9000000008007444:	2880e084 	ld.w	$r4,$r4,56(0x38)
9000000008007448:	29bfb2c4 	st.w	$r4,$r22,-20(0xfec)
  // printf("kill pid %d, sig: %d\n", pid, sig);
  if (sig == 0) {
900000000800744c:	28bfa2c5 	ld.w	$r5,$r22,-24(0xfe8)
    return 0;
9000000008007450:	0015000c 	move	$r12,$r0
  if (sig == 0) {
9000000008007454:	440040a0 	bnez	$r5,64(0x40) # 9000000008007494 <sys_kill+0xa0>
  }
  return kill(pid, sig);
}
9000000008007458:	00150184 	move	$r4,$r12
900000000800745c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008007460:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008007464:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007468:	4c000020 	jirl	$r0,$r1,0
    printf("[kill]pid <= 0 do not implement\n");
900000000800746c:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008007470:	02ecf084 	addi.d	$r4,$r4,-1220(0xb3c)
9000000008007474:	578e03ff 	bl	-29184(0xfff8e00) # 9000000008000274 <printf>
    return -1;
9000000008007478:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800747c:	53ffdfff 	b	-36(0xfffffdc) # 9000000008007458 <sys_kill+0x64>
    printf("[kill]sig < 0 || sig >= SIGRTMAX\n");
9000000008007480:	1c000264 	pcaddu12i	$r4,19(0x13)
9000000008007484:	02ed4084 	addi.d	$r4,$r4,-1200(0xb50)
9000000008007488:	578defff 	bl	-29204(0xfff8dec) # 9000000008000274 <printf>
    return -1;
900000000800748c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008007490:	53ffcbff 	b	-56(0xfffffc8) # 9000000008007458 <sys_kill+0x64>
  return kill(pid, sig);
9000000008007494:	57acf7ff 	bl	-21260(0xfffacf4) # 9000000008002188 <kill>
9000000008007498:	0015008c 	move	$r12,$r4
900000000800749c:	53ffbfff 	b	-68(0xfffffbc) # 9000000008007458 <sys_kill+0x64>

90000000080074a0 <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
uint64 sys_uptime(void) {
90000000080074a0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080074a4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080074a8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080074ac:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080074b0:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint xticks;

  acquire(&tickslock);
90000000080074b4:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000080074b8:	28f0b084 	ld.d	$r4,$r4,-980(0xc2c)
90000000080074bc:	5799f7ff 	bl	-26124(0xfff99f4) # 9000000008000eb0 <acquire>
  xticks = ticks;
90000000080074c0:	1c00032c 	pcaddu12i	$r12,25(0x19)
90000000080074c4:	28f0e18c 	ld.d	$r12,$r12,-968(0xc38)
90000000080074c8:	28800197 	ld.w	$r23,$r12,0
  release(&tickslock);
90000000080074cc:	1c000324 	pcaddu12i	$r4,25(0x19)
90000000080074d0:	28f05084 	ld.d	$r4,$r4,-1004(0xc14)
90000000080074d4:	579a3fff 	bl	-26052(0xfff9a3c) # 9000000008000f10 <release>
  return xticks;
}
90000000080074d8:	00df02e4 	bstrpick.d	$r4,$r23,0x1f,0x0
90000000080074dc:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080074e0:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080074e4:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080074e8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080074ec:	4c000020 	jirl	$r0,$r1,0

90000000080074f0 <sys_trace>:

uint64 sys_trace(void) {
90000000080074f0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080074f4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080074f8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080074fc:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int mask;
  if (argint(0, &mask) < 0) {
9000000008007500:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008007504:	00150004 	move	$r4,$r0
9000000008007508:	57f197ff 	bl	-3692(0xffff194) # 900000000800669c <argint>
    return -1;
900000000800750c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &mask) < 0) {
9000000008007510:	60001480 	blt	$r4,$r0,20(0x14) # 9000000008007524 <sys_trace+0x34>
  }
  myproc()->tmask = mask;
9000000008007514:	57a217ff 	bl	-24044(0xfffa214) # 9000000008001728 <myproc>
9000000008007518:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000800751c:	2993e08c 	st.w	$r12,$r4,1272(0x4f8)
  return 0;
9000000008007520:	0015000c 	move	$r12,$r0
}
9000000008007524:	00150184 	move	$r4,$r12
9000000008007528:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800752c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008007530:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007534:	4c000020 	jirl	$r0,$r1,0

9000000008007538 <sys_getuid>:

uint64 sys_getuid(void) { return myproc()->uid; }
9000000008007538:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800753c:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008007540:	29c00076 	st.d	$r22,$r3,0
9000000008007544:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008007548:	57a1e3ff 	bl	-24096(0xfffa1e0) # 9000000008001728 <myproc>
900000000800754c:	2880f084 	ld.w	$r4,$r4,60(0x3c)
9000000008007550:	28c02061 	ld.d	$r1,$r3,8(0x8)
9000000008007554:	28c00076 	ld.d	$r22,$r3,0
9000000008007558:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800755c:	4c000020 	jirl	$r0,$r1,0

9000000008007560 <sys_geteuid>:

uint64 sys_geteuid(void) { return myproc()->uid; }
9000000008007560:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008007564:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008007568:	29c00076 	st.d	$r22,$r3,0
900000000800756c:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008007570:	57a1bbff 	bl	-24136(0xfffa1b8) # 9000000008001728 <myproc>
9000000008007574:	2880f084 	ld.w	$r4,$r4,60(0x3c)
9000000008007578:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800757c:	28c00076 	ld.d	$r22,$r3,0
9000000008007580:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008007584:	4c000020 	jirl	$r0,$r1,0

9000000008007588 <sys_setuid>:

uint64 sys_setuid(void) {
9000000008007588:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800758c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008007590:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007594:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int uid;
  if (argint(0, &uid) < 0)
9000000008007598:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
900000000800759c:	00150004 	move	$r4,$r0
90000000080075a0:	57f0ffff 	bl	-3844(0xffff0fc) # 900000000800669c <argint>
    return -1;
90000000080075a4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &uid) < 0)
90000000080075a8:	60001480 	blt	$r4,$r0,20(0x14) # 90000000080075bc <sys_setuid+0x34>
  myproc()->uid = uid;
90000000080075ac:	57a17fff 	bl	-24196(0xfffa17c) # 9000000008001728 <myproc>
90000000080075b0:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000080075b4:	2980f08c 	st.w	$r12,$r4,60(0x3c)

  return 0;
90000000080075b8:	0015000c 	move	$r12,$r0
}
90000000080075bc:	00150184 	move	$r4,$r12
90000000080075c0:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080075c4:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080075c8:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080075cc:	4c000020 	jirl	$r0,$r1,0

90000000080075d0 <sys_setgid>:

uint64 sys_setgid(void) {
90000000080075d0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080075d4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080075d8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080075dc:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int gid;
  if (argint(0, &gid) < 0)
90000000080075e0:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
90000000080075e4:	00150004 	move	$r4,$r0
90000000080075e8:	57f0b7ff 	bl	-3916(0xffff0b4) # 900000000800669c <argint>
    return -1;
90000000080075ec:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &gid) < 0)
90000000080075f0:	60001480 	blt	$r4,$r0,20(0x14) # 9000000008007604 <sys_setgid+0x34>
  myproc()->gid = gid;
90000000080075f4:	57a137ff 	bl	-24268(0xfffa134) # 9000000008001728 <myproc>
90000000080075f8:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
90000000080075fc:	2981008c 	st.w	$r12,$r4,64(0x40)

  return 0;
9000000008007600:	0015000c 	move	$r12,$r0
}
9000000008007604:	00150184 	move	$r4,$r12
9000000008007608:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800760c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008007610:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007614:	4c000020 	jirl	$r0,$r1,0

9000000008007618 <sys_setpgid>:

uint64 sys_setpgid(void) {
9000000008007618:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800761c:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008007620:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007624:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int pid, pgid;
  if (argint(0, &pid) < 0 || argint(1, &pgid) < 0)
9000000008007628:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
900000000800762c:	00150004 	move	$r4,$r0
9000000008007630:	57f06fff 	bl	-3988(0xffff06c) # 900000000800669c <argint>
    return -1;
9000000008007634:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0 || argint(1, &pgid) < 0)
9000000008007638:	60002880 	blt	$r4,$r0,40(0x28) # 9000000008007660 <sys_setpgid+0x48>
900000000800763c:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008007640:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007644:	57f05bff 	bl	-4008(0xffff058) # 900000000800669c <argint>
    return -1;
9000000008007648:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0 || argint(1, &pgid) < 0)
900000000800764c:	60001480 	blt	$r4,$r0,20(0x14) # 9000000008007660 <sys_setpgid+0x48>
  myproc()->pgid = pgid;
9000000008007650:	57a0dbff 	bl	-24360(0xfffa0d8) # 9000000008001728 <myproc>
9000000008007654:	28bfa2cc 	ld.w	$r12,$r22,-24(0xfe8)
9000000008007658:	2981108c 	st.w	$r12,$r4,68(0x44)

  return 0;
900000000800765c:	0015000c 	move	$r12,$r0
}
9000000008007660:	00150184 	move	$r4,$r12
9000000008007664:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008007668:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800766c:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007670:	4c000020 	jirl	$r0,$r1,0

9000000008007674 <sys_getpgid>:

uint64 sys_getpgid(void) {
9000000008007674:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008007678:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800767c:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007680:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int pid;
  if (argint(0, &pid) < 0)
9000000008007684:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008007688:	00150004 	move	$r4,$r0
900000000800768c:	57f013ff 	bl	-4080(0xffff010) # 900000000800669c <argint>
    return -1;
9000000008007690:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &pid) < 0)
9000000008007694:	60000c80 	blt	$r4,$r0,12(0xc) # 90000000080076a0 <sys_getpgid+0x2c>

  return myproc()->pgid;
9000000008007698:	57a093ff 	bl	-24432(0xfffa090) # 9000000008001728 <myproc>
900000000800769c:	2881108c 	ld.w	$r12,$r4,68(0x44)
}
90000000080076a0:	00150184 	move	$r4,$r12
90000000080076a4:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080076a8:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080076ac:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080076b0:	4c000020 	jirl	$r0,$r1,0

90000000080076b4 <sys_getgid>:

uint64 sys_getgid(void) { return myproc()->gid; }
90000000080076b4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080076b8:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080076bc:	29c00076 	st.d	$r22,$r3,0
90000000080076c0:	02c04076 	addi.d	$r22,$r3,16(0x10)
90000000080076c4:	57a067ff 	bl	-24476(0xfffa064) # 9000000008001728 <myproc>
90000000080076c8:	28810084 	ld.w	$r4,$r4,64(0x40)
90000000080076cc:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080076d0:	28c00076 	ld.d	$r22,$r3,0
90000000080076d4:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080076d8:	4c000020 	jirl	$r0,$r1,0

90000000080076dc <sys_getegid>:

uint64 sys_getegid(void) { return myproc()->gid; }
90000000080076dc:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080076e0:	29c02061 	st.d	$r1,$r3,8(0x8)
90000000080076e4:	29c00076 	st.d	$r22,$r3,0
90000000080076e8:	02c04076 	addi.d	$r22,$r3,16(0x10)
90000000080076ec:	57a03fff 	bl	-24516(0xfffa03c) # 9000000008001728 <myproc>
90000000080076f0:	28810084 	ld.w	$r4,$r4,64(0x40)
90000000080076f4:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080076f8:	28c00076 	ld.d	$r22,$r3,0
90000000080076fc:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008007700:	4c000020 	jirl	$r0,$r1,0

9000000008007704 <sys_chroot>:

uint64 sys_chroot(void) { return 0; }
9000000008007704:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008007708:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800770c:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008007710:	00150004 	move	$r4,$r0
9000000008007714:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008007718:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800771c:	4c000020 	jirl	$r0,$r1,0

9000000008007720 <sys_exit_group>:

uint64 sys_exit_group(void) { return 0; }
9000000008007720:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008007724:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008007728:	02c04076 	addi.d	$r22,$r3,16(0x10)
900000000800772c:	00150004 	move	$r4,$r0
9000000008007730:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008007734:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008007738:	4c000020 	jirl	$r0,$r1,0

900000000800773c <sys_uname>:
//   copyout(myproc()->pagetable, address, (char *)&tid, sizeof(int));

//   return tid;
// }

uint64 sys_uname(void) {
900000000800773c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008007740:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008007744:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008007748:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800774c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  uint64 addr;
  if (argaddr(0, &addr) < 0)
9000000008007750:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008007754:	00150004 	move	$r4,$r0
9000000008007758:	57efcbff 	bl	-4152(0xfffefc8) # 9000000008006720 <argaddr>
    return -1;
900000000800775c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &addr) < 0)
9000000008007760:	6000c480 	blt	$r4,$r0,196(0xc4) # 9000000008007824 <sys_uname+0xe8>
  strncpy(utsname.release, release, sizeof(release));
  strncpy(utsname.version, version, sizeof(version));
  strncpy(utsname.machine, machine, sizeof(machine));
  return copyout2(addr, (char*) &utsname, sizeof(UtsName));
  */
  struct utsname *uts = (struct utsname *)addr;
9000000008007764:	28ff62d7 	ld.d	$r23,$r22,-40(0xfd8)
  const char *nodename = "none";
  const char *release = "5.0";
  const char *version = __DATE__ " "__TIME__;
  const char *machine = "QEMU";
  const char *domain = "none";
  if (either_copyout(1, (uint64)uts->sysname, (void *)sysname,
9000000008007768:	02802007 	addi.w	$r7,$r0,8(0x8)
900000000800776c:	1c000266 	pcaddu12i	$r6,19(0x13)
9000000008007770:	02e230c6 	addi.d	$r6,$r6,-1908(0x88c)
9000000008007774:	001502e5 	move	$r5,$r23
9000000008007778:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800777c:	57ab2fff 	bl	-21716(0xfffab2c) # 90000000080022a8 <either_copyout>
                     sizeof(sysname)) < 0) {
    return -1;
9000000008007780:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (either_copyout(1, (uint64)uts->sysname, (void *)sysname,
9000000008007784:	6000a080 	blt	$r4,$r0,160(0xa0) # 9000000008007824 <sys_uname+0xe8>
  }

  if (either_copyout(1, (uint64)uts->nodename, (void *)nodename,
9000000008007788:	02802007 	addi.w	$r7,$r0,8(0x8)
900000000800778c:	1c000266 	pcaddu12i	$r6,19(0x13)
9000000008007790:	02e1d0c6 	addi.d	$r6,$r6,-1932(0x874)
9000000008007794:	02c106e5 	addi.d	$r5,$r23,65(0x41)
9000000008007798:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800779c:	57ab0fff 	bl	-21748(0xfffab0c) # 90000000080022a8 <either_copyout>
                     sizeof(nodename)) < 0) {
    return -1;
90000000080077a0:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (either_copyout(1, (uint64)uts->nodename, (void *)nodename,
90000000080077a4:	60008080 	blt	$r4,$r0,128(0x80) # 9000000008007824 <sys_uname+0xe8>
  }

  if (either_copyout(1, (uint64)uts->release, (void *)release,
90000000080077a8:	02802007 	addi.w	$r7,$r0,8(0x8)
90000000080077ac:	1c000266 	pcaddu12i	$r6,19(0x13)
90000000080077b0:	02e170c6 	addi.d	$r6,$r6,-1956(0x85c)
90000000080077b4:	02c20ae5 	addi.d	$r5,$r23,130(0x82)
90000000080077b8:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080077bc:	57aaefff 	bl	-21780(0xfffaaec) # 90000000080022a8 <either_copyout>
                     sizeof(release)) < 0) {
    return -1;
90000000080077c0:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (either_copyout(1, (uint64)uts->release, (void *)release,
90000000080077c4:	60006080 	blt	$r4,$r0,96(0x60) # 9000000008007824 <sys_uname+0xe8>
  }

  if (either_copyout(1, (uint64)uts->version, (void *)version,
90000000080077c8:	02802007 	addi.w	$r7,$r0,8(0x8)
90000000080077cc:	1c000266 	pcaddu12i	$r6,19(0x13)
90000000080077d0:	02e110c6 	addi.d	$r6,$r6,-1980(0x844)
90000000080077d4:	02c30ee5 	addi.d	$r5,$r23,195(0xc3)
90000000080077d8:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080077dc:	57aacfff 	bl	-21812(0xfffaacc) # 90000000080022a8 <either_copyout>
                     sizeof(version)) < 0) {
    return -1;
90000000080077e0:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (either_copyout(1, (uint64)uts->version, (void *)version,
90000000080077e4:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008007824 <sys_uname+0xe8>
  }

  if (either_copyout(1, (uint64)uts->machine, (void *)machine,
90000000080077e8:	02802007 	addi.w	$r7,$r0,8(0x8)
90000000080077ec:	1c000266 	pcaddu12i	$r6,19(0x13)
90000000080077f0:	02e0f0c6 	addi.d	$r6,$r6,-1988(0x83c)
90000000080077f4:	02c412e5 	addi.d	$r5,$r23,260(0x104)
90000000080077f8:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080077fc:	57aaafff 	bl	-21844(0xfffaaac) # 90000000080022a8 <either_copyout>
                     sizeof(machine)) < 0) {
    return -1;
9000000008007800:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (either_copyout(1, (uint64)uts->machine, (void *)machine,
9000000008007804:	60002080 	blt	$r4,$r0,32(0x20) # 9000000008007824 <sys_uname+0xe8>
  }

  if (either_copyout(1, (uint64)uts->domainname, (void *)domain,
9000000008007808:	02802007 	addi.w	$r7,$r0,8(0x8)
900000000800780c:	1c000246 	pcaddu12i	$r6,18(0x12)
9000000008007810:	02dfd0c6 	addi.d	$r6,$r6,2036(0x7f4)
9000000008007814:	02c516e5 	addi.d	$r5,$r23,325(0x145)
9000000008007818:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800781c:	57aa8fff 	bl	-21876(0xfffaa8c) # 90000000080022a8 <either_copyout>
9000000008007820:	0049fc8c 	srai.d	$r12,$r4,0x3f
                     sizeof(domain)) < 0) {
    return -1;
  }

  return 0;
}
9000000008007824:	00150184 	move	$r4,$r12
9000000008007828:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800782c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008007830:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008007834:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008007838:	4c000020 	jirl	$r0,$r1,0

900000000800783c <sys_umask>:

//   return p->main_thread->tid;
// }

// TODO
uint64 sys_umask(void) { return 0; }
900000000800783c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008007840:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008007844:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008007848:	00150004 	move	$r4,$r0
900000000800784c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008007850:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008007854:	4c000020 	jirl	$r0,$r1,0

9000000008007858 <sys_mprotect>:

uint64 sys_mprotect() {
9000000008007858:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800785c:	29c16061 	st.d	$r1,$r3,88(0x58)
9000000008007860:	29c14076 	st.d	$r22,$r3,80(0x50)
9000000008007864:	29c12077 	st.d	$r23,$r3,72(0x48)
9000000008007868:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800786c:	29c0e079 	st.d	$r25,$r3,56(0x38)
9000000008007870:	29c0c07a 	st.d	$r26,$r3,48(0x30)
9000000008007874:	29c0a07b 	st.d	$r27,$r3,40(0x28)
9000000008007878:	02c18076 	addi.d	$r22,$r3,96(0x60)
  uint64 addr, len;
  int prot;
  if (argaddr(0, &addr) < 0 || argaddr(1, &len) < 0 || argint(2, &prot) < 0)
900000000800787c:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
9000000008007880:	00150004 	move	$r4,$r0
9000000008007884:	57ee9fff 	bl	-4452(0xfffee9c) # 9000000008006720 <argaddr>
    return -1;
9000000008007888:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
  if (argaddr(0, &addr) < 0 || argaddr(1, &len) < 0 || argint(2, &prot) < 0)
900000000800788c:	6000c080 	blt	$r4,$r0,192(0xc0) # 900000000800794c <sys_mprotect+0xf4>
9000000008007890:	02fec2c5 	addi.d	$r5,$r22,-80(0xfb0)
9000000008007894:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007898:	57ee8bff 	bl	-4472(0xfffee88) # 9000000008006720 <argaddr>
    return -1;
900000000800789c:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
  if (argaddr(0, &addr) < 0 || argaddr(1, &len) < 0 || argint(2, &prot) < 0)
90000000080078a0:	6000ac80 	blt	$r4,$r0,172(0xac) # 900000000800794c <sys_mprotect+0xf4>
90000000080078a4:	02feb2c5 	addi.d	$r5,$r22,-84(0xfac)
90000000080078a8:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000080078ac:	57edf3ff 	bl	-4624(0xfffedf0) # 900000000800669c <argint>
    return -1;
90000000080078b0:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
  if (argaddr(0, &addr) < 0 || argaddr(1, &len) < 0 || argint(2, &prot) < 0)
90000000080078b4:	60009880 	blt	$r4,$r0,152(0x98) # 900000000800794c <sys_mprotect+0xf4>
  struct proc *p = myproc();
90000000080078b8:	579e73ff 	bl	-24976(0xfff9e70) # 9000000008001728 <myproc>
90000000080078bc:	0015009a 	move	$r26,$r4
  int perm = PTE_PLV | PTE_MAT | PTE_D;

  if (prot & PROT_READ)
90000000080078c0:	28beb2cc 	ld.w	$r12,$r22,-84(0xfac)
    //LA64  架构下，0表示可读
    perm &= ~PTE_NR;
  if (prot & PROT_WRITE)
90000000080078c4:	0340098d 	andi	$r13,$r12,0x2
    // 1 表示可写
    perm |= PTE_W;
90000000080078c8:	02807819 	addi.w	$r25,$r0,30(0x1e)
90000000080078cc:	0013b739 	masknez	$r25,$r25,$r13
90000000080078d0:	0284780e 	addi.w	$r14,$r0,286(0x11e)
90000000080078d4:	001335cd 	maskeqz	$r13,$r14,$r13
90000000080078d8:	00153739 	or	$r25,$r25,$r13
    // 表示可以执行
  if (prot & PROT_EXEC){
90000000080078dc:	0340118c 	andi	$r12,$r12,0x4
    perm |= PTE_MAT | PTE_P;
90000000080078e0:	0382432d 	ori	$r13,$r25,0x90
90000000080078e4:	001331ad 	maskeqz	$r13,$r13,$r12
90000000080078e8:	0013b339 	masknez	$r25,$r25,$r12
90000000080078ec:	001565b9 	or	$r25,$r13,$r25
    perm &= ~PTE_NX;
  }
  int page_n = PGROUNDUP(len) >> PGSHIFT;
90000000080078f0:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000080078f4:	03bffc0d 	ori	$r13,$r0,0xfff
90000000080078f8:	0010b58c 	add.d	$r12,$r12,$r13
90000000080078fc:	0045318c 	srli.d	$r12,$r12,0xc
  uint64 va = addr;
9000000008007900:	28fee2d7 	ld.d	$r23,$r22,-72(0xfb8)
  int page_n = PGROUNDUP(len) >> PGSHIFT;
9000000008007904:	0040818e 	slli.w	$r14,$r12,0x0
  for (int i = 0; i < page_n; i++) {
    experm(p->pagetable, va, perm); // TODO:错误处理
    va += PGSIZE;
  }

  return 0;
9000000008007908:	0015000d 	move	$r13,$r0
  for (int i = 0; i < page_n; i++) {
900000000800790c:	6400400e 	bge	$r0,$r14,64(0x40) # 900000000800794c <sys_mprotect+0xf4>
9000000008007910:	00408198 	slli.w	$r24,$r12,0x0
9000000008007914:	02bfff18 	addi.w	$r24,$r24,-1(0xfff)
9000000008007918:	00df0318 	bstrpick.d	$r24,$r24,0x1f,0x0
900000000800791c:	00413318 	slli.d	$r24,$r24,0xc
9000000008007920:	1400002c 	lu12i.w	$r12,1(0x1)
9000000008007924:	0010b2ec 	add.d	$r12,$r23,$r12
9000000008007928:	0010b318 	add.d	$r24,$r24,$r12
    va += PGSIZE;
900000000800792c:	1400003b 	lu12i.w	$r27,1(0x1)
    experm(p->pagetable, va, perm); // TODO:错误处理
9000000008007930:	00150326 	move	$r6,$r25
9000000008007934:	001502e5 	move	$r5,$r23
9000000008007938:	28c18344 	ld.d	$r4,$r26,96(0x60)
900000000800793c:	57ccf7ff 	bl	-13068(0xfffccf4) # 9000000008004630 <experm>
    va += PGSIZE;
9000000008007940:	0010eef7 	add.d	$r23,$r23,$r27
  for (int i = 0; i < page_n; i++) {
9000000008007944:	5fffef17 	bne	$r24,$r23,-20(0x3ffec) # 9000000008007930 <sys_mprotect+0xd8>
  return 0;
9000000008007948:	0015000d 	move	$r13,$r0
}
900000000800794c:	001501a4 	move	$r4,$r13
9000000008007950:	28c16061 	ld.d	$r1,$r3,88(0x58)
9000000008007954:	28c14076 	ld.d	$r22,$r3,80(0x50)
9000000008007958:	28c12077 	ld.d	$r23,$r3,72(0x48)
900000000800795c:	28c10078 	ld.d	$r24,$r3,64(0x40)
9000000008007960:	28c0e079 	ld.d	$r25,$r3,56(0x38)
9000000008007964:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
9000000008007968:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
900000000800796c:	02c18063 	addi.d	$r3,$r3,96(0x60)
9000000008007970:	4c000020 	jirl	$r0,$r1,0

9000000008007974 <sys_madvise>:

// TODO
//  该系统调用用于向内核提供对于起始地址为addr，长度为length的内存空间的操作建议或者指示
//  主要用于提高系统性能
uint64 sys_madvise(void) { return 0; }
9000000008007974:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008007978:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800797c:	02c04076 	addi.d	$r22,$r3,16(0x10)
9000000008007980:	00150004 	move	$r4,$r0
9000000008007984:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008007988:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800798c:	4c000020 	jirl	$r0,$r1,0

9000000008007990 <sys_getrusage>:

uint64 sys_getrusage(void) {
9000000008007990:	02fd0063 	addi.d	$r3,$r3,-192(0xf40)
9000000008007994:	29c2e061 	st.d	$r1,$r3,184(0xb8)
9000000008007998:	29c2c076 	st.d	$r22,$r3,176(0xb0)
900000000800799c:	29c2a078 	st.d	$r24,$r3,168(0xa8)
90000000080079a0:	29c28079 	st.d	$r25,$r3,160(0xa0)
90000000080079a4:	02c30076 	addi.d	$r22,$r3,192(0xc0)
  int who;
  uint64 addr;
  struct rusage rs;

  if (argint(0, &who) < 0) {
90000000080079a8:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
90000000080079ac:	00150004 	move	$r4,$r0
90000000080079b0:	57ecefff 	bl	-4884(0xfffecec) # 900000000800669c <argint>
    return -1;
90000000080079b4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &who) < 0) {
90000000080079b8:	60008880 	blt	$r4,$r0,136(0x88) # 9000000008007a40 <sys_getrusage+0xb0>
  }

  if (argaddr(1, &addr) < 0) {
90000000080079bc:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
90000000080079c0:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080079c4:	57ed5fff 	bl	-4772(0xfffed5c) # 9000000008006720 <argaddr>
    return -1;
90000000080079c8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(1, &addr) < 0) {
90000000080079cc:	60007480 	blt	$r4,$r0,116(0x74) # 9000000008007a40 <sys_getrusage+0xb0>
  }

  rs = (struct rusage){
      .ru_utime = get_timeval(),
90000000080079d0:	5472b000 	bl	29360(0x72b0) # 900000000800ec80 <get_timeval>
90000000080079d4:	00150098 	move	$r24,$r4
90000000080079d8:	001500b9 	move	$r25,$r5
      .ru_stime = get_timeval(),
90000000080079dc:	5472a400 	bl	29348(0x72a4) # 900000000800ec80 <get_timeval>
  rs = (struct rusage){
90000000080079e0:	29fd82c0 	st.d	$r0,$r22,-160(0xf60)
90000000080079e4:	29fda2c0 	st.d	$r0,$r22,-152(0xf68)
90000000080079e8:	29fdc2c0 	st.d	$r0,$r22,-144(0xf70)
90000000080079ec:	29fde2c0 	st.d	$r0,$r22,-136(0xf78)
90000000080079f0:	29fe02c0 	st.d	$r0,$r22,-128(0xf80)
90000000080079f4:	29fe22c0 	st.d	$r0,$r22,-120(0xf88)
90000000080079f8:	29fe42c0 	st.d	$r0,$r22,-112(0xf90)
90000000080079fc:	29fe62c0 	st.d	$r0,$r22,-104(0xf98)
9000000008007a00:	29fe82c0 	st.d	$r0,$r22,-96(0xfa0)
9000000008007a04:	29fea2c0 	st.d	$r0,$r22,-88(0xfa8)
9000000008007a08:	29fec2c0 	st.d	$r0,$r22,-80(0xfb0)
9000000008007a0c:	29fee2c0 	st.d	$r0,$r22,-72(0xfb8)
9000000008007a10:	29ff02c0 	st.d	$r0,$r22,-64(0xfc0)
9000000008007a14:	29ff22c0 	st.d	$r0,$r22,-56(0xfc8)
9000000008007a18:	29fd02d8 	st.d	$r24,$r22,-192(0xf40)
9000000008007a1c:	29fd22d9 	st.d	$r25,$r22,-184(0xf48)
9000000008007a20:	29fd42c4 	st.d	$r4,$r22,-176(0xf50)
9000000008007a24:	29fd62c5 	st.d	$r5,$r22,-168(0xf58)
  };

  if (either_copyout(1, addr, (void *)&rs, sizeof(rs)) < 0) {
9000000008007a28:	02824007 	addi.w	$r7,$r0,144(0x90)
9000000008007a2c:	02fd02c6 	addi.d	$r6,$r22,-192(0xf40)
9000000008007a30:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
9000000008007a34:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007a38:	57a873ff 	bl	-22416(0xfffa870) # 90000000080022a8 <either_copyout>
9000000008007a3c:	0049fc8c 	srai.d	$r12,$r4,0x3f
    return -1;
  }
  return 0;
9000000008007a40:	00150184 	move	$r4,$r12
9000000008007a44:	28c2e061 	ld.d	$r1,$r3,184(0xb8)
9000000008007a48:	28c2c076 	ld.d	$r22,$r3,176(0xb0)
9000000008007a4c:	28c2a078 	ld.d	$r24,$r3,168(0xa8)
9000000008007a50:	28c28079 	ld.d	$r25,$r3,160(0xa0)
9000000008007a54:	02c30063 	addi.d	$r3,$r3,192(0xc0)
9000000008007a58:	4c000020 	jirl	$r0,$r1,0

9000000008007a5c <create>:
  }
  int len2 = strlen(pname);
  strncpy(name, path + len2 + 1, len - len2 + 1);
}

static struct dirent *create(char *path, short type, int mode) {
9000000008007a5c:	02f74063 	addi.d	$r3,$r3,-560(0xdd0)
9000000008007a60:	29c8a061 	st.d	$r1,$r3,552(0x228)
9000000008007a64:	29c88076 	st.d	$r22,$r3,544(0x220)
9000000008007a68:	29c86077 	st.d	$r23,$r3,536(0x218)
9000000008007a6c:	29c84078 	st.d	$r24,$r3,528(0x210)
9000000008007a70:	29c82079 	st.d	$r25,$r3,520(0x208)
9000000008007a74:	29c8007a 	st.d	$r26,$r3,512(0x200)
9000000008007a78:	02c8c076 	addi.d	$r22,$r3,560(0x230)
9000000008007a7c:	00150099 	move	$r25,$r4
9000000008007a80:	001500ba 	move	$r26,$r5
  if (type == T_DIR) {
    mode = ATTR_DIRECTORY;
  } else if (mode & O_RDONLY) {
    mode = ATTR_READ_ONLY;
  } else {
    mode = 0;
9000000008007a84:	03c004b8 	xori	$r24,$r5,0x1
9000000008007a88:	02400718 	sltui	$r24,$r24,1(0x1)
9000000008007a8c:	00411318 	slli.d	$r24,$r24,0x4
  }

  if ((dp = enameparent(path, name)) == NULL) {
9000000008007a90:	02fb42c5 	addi.d	$r5,$r22,-304(0xed0)
9000000008007a94:	546cc400 	bl	27844(0x6cc4) # 900000000800e758 <enameparent>
9000000008007a98:	40008080 	beqz	$r4,128(0x80) # 9000000008007b18 <create+0xbc>
9000000008007a9c:	00150097 	move	$r23,$r4
    dp = create(pname, T_DIR, O_RDWR);
    if (dp == NULL) {
      return NULL;
    }
  } else {
    elock(dp);
9000000008007aa0:	5460e000 	bl	24800(0x60e0) # 900000000800db80 <elock>
  }

  if ((ep = ealloc(dp, name, mode)) == NULL) {
9000000008007aa4:	00150306 	move	$r6,$r24
9000000008007aa8:	02fb42c5 	addi.d	$r5,$r22,-304(0xed0)
9000000008007aac:	001502e4 	move	$r4,$r23
9000000008007ab0:	54684800 	bl	26696(0x6848) # 900000000800e2f8 <ealloc>
9000000008007ab4:	00150099 	move	$r25,$r4
9000000008007ab8:	40012480 	beqz	$r4,292(0x124) # 9000000008007bdc <create+0x180>
    eunlock(dp);
    eput(dp);
    return NULL;
  }

  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
9000000008007abc:	0015034c 	move	$r12,$r26
9000000008007ac0:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008007ac4:	58012d8d 	beq	$r12,$r13,300(0x12c) # 9000000008007bf0 <create+0x194>
9000000008007ac8:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008007acc:	5c00134c 	bne	$r26,$r12,16(0x10) # 9000000008007adc <create+0x80>
      (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
9000000008007ad0:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
9000000008007ad4:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008007ad8:	44012580 	bnez	$r12,292(0x124) # 9000000008007bfc <create+0x1a0>
    eput(dp);
    // printf("here1!\n");
    return NULL;
  }

  eunlock(dp);
9000000008007adc:	001502e4 	move	$r4,$r23
9000000008007ae0:	5460e000 	bl	24800(0x60e0) # 900000000800dbc0 <eunlock>
  eput(dp);
9000000008007ae4:	001502e4 	move	$r4,$r23
9000000008007ae8:	54613c00 	bl	24892(0x613c) # 900000000800dc24 <eput>
  elock(ep);
9000000008007aec:	00150324 	move	$r4,$r25
9000000008007af0:	54609000 	bl	24720(0x6090) # 900000000800db80 <elock>
  // printf("here2!\n");
  return ep;
}
9000000008007af4:	00150324 	move	$r4,$r25
9000000008007af8:	28c8a061 	ld.d	$r1,$r3,552(0x228)
9000000008007afc:	28c88076 	ld.d	$r22,$r3,544(0x220)
9000000008007b00:	28c86077 	ld.d	$r23,$r3,536(0x218)
9000000008007b04:	28c84078 	ld.d	$r24,$r3,528(0x210)
9000000008007b08:	28c82079 	ld.d	$r25,$r3,520(0x208)
9000000008007b0c:	28c8007a 	ld.d	$r26,$r3,512(0x200)
9000000008007b10:	02c8c063 	addi.d	$r3,$r3,560(0x230)
9000000008007b14:	4c000020 	jirl	$r0,$r1,0
  int len = strlen(path);
9000000008007b18:	00150324 	move	$r4,$r25
9000000008007b1c:	5796bfff 	bl	-26948(0xfff96bc) # 90000000080011d8 <strlen>
9000000008007b20:	00150097 	move	$r23,$r4
  strncpy(pname, path, len + 1);
9000000008007b24:	02800486 	addi.w	$r6,$r4,1(0x1)
9000000008007b28:	00150325 	move	$r5,$r25
9000000008007b2c:	02f742c4 	addi.d	$r4,$r22,-560(0xdd0)
9000000008007b30:	5795fbff 	bl	-27144(0xfff95f8) # 9000000008001128 <strncpy>
  int i = len - 1;
9000000008007b34:	02bffeed 	addi.w	$r13,$r23,-1(0xfff)
  if (pname[i] == '/') {
9000000008007b38:	02ff42cc 	addi.d	$r12,$r22,-48(0xfd0)
9000000008007b3c:	0010b58c 	add.d	$r12,$r12,$r13
9000000008007b40:	2838018e 	ld.b	$r14,$r12,-512(0xe00)
9000000008007b44:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008007b48:	580075cc 	beq	$r14,$r12,116(0x74) # 9000000008007bbc <create+0x160>
  for (; i >= 0; --i) {
9000000008007b4c:	600031a0 	blt	$r13,$r0,48(0x30) # 9000000008007b7c <create+0x120>
9000000008007b50:	02ff42cc 	addi.d	$r12,$r22,-48(0xfd0)
9000000008007b54:	0010b58c 	add.d	$r12,$r12,$r13
9000000008007b58:	02f7fd8c 	addi.d	$r12,$r12,-513(0xdff)
    if (pname[i] == '/') {
9000000008007b5c:	0280bc10 	addi.w	$r16,$r0,47(0x2f)
  for (; i >= 0; --i) {
9000000008007b60:	02bffdad 	addi.w	$r13,$r13,-1(0xfff)
9000000008007b64:	600019a0 	blt	$r13,$r0,24(0x18) # 9000000008007b7c <create+0x120>
    if (pname[i] == '/') {
9000000008007b68:	0015018f 	move	$r15,$r12
9000000008007b6c:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000008007b70:	2800058e 	ld.b	$r14,$r12,1(0x1)
9000000008007b74:	5fffedd0 	bne	$r14,$r16,-20(0x3ffec) # 9000000008007b60 <create+0x104>
      pname[i] = 0;
9000000008007b78:	290001e0 	st.b	$r0,$r15,0
  int len2 = strlen(pname);
9000000008007b7c:	02f742c4 	addi.d	$r4,$r22,-560(0xdd0)
9000000008007b80:	57965bff 	bl	-27048(0xfff9658) # 90000000080011d8 <strlen>
  strncpy(name, path + len2 + 1, len - len2 + 1);
9000000008007b84:	001112e6 	sub.w	$r6,$r23,$r4
9000000008007b88:	02c00484 	addi.d	$r4,$r4,1(0x1)
9000000008007b8c:	028004c6 	addi.w	$r6,$r6,1(0x1)
9000000008007b90:	00109325 	add.d	$r5,$r25,$r4
9000000008007b94:	02fb42c4 	addi.d	$r4,$r22,-304(0xed0)
9000000008007b98:	579593ff 	bl	-27248(0xfff9590) # 9000000008001128 <strncpy>
    dp = create(pname, T_DIR, O_RDWR);
9000000008007b9c:	02800806 	addi.w	$r6,$r0,2(0x2)
9000000008007ba0:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008007ba4:	02f742c4 	addi.d	$r4,$r22,-560(0xdd0)
9000000008007ba8:	57feb7ff 	bl	-332(0xffffeb4) # 9000000008007a5c <create>
9000000008007bac:	00150097 	move	$r23,$r4
      return NULL;
9000000008007bb0:	00150099 	move	$r25,$r4
    if (dp == NULL) {
9000000008007bb4:	47fef09f 	bnez	$r4,-272(0x7ffef0) # 9000000008007aa4 <create+0x48>
9000000008007bb8:	53ff3fff 	b	-196(0xfffff3c) # 9000000008007af4 <create+0x98>
    i--;
9000000008007bbc:	02bffaed 	addi.w	$r13,$r23,-2(0xffe)
  for (; i >= 0; --i) {
9000000008007bc0:	63ffbda0 	blt	$r13,$r0,-68(0x3ffbc) # 9000000008007b7c <create+0x120>
    if (pname[i] == '/') {
9000000008007bc4:	02f742cc 	addi.d	$r12,$r22,-560(0xdd0)
9000000008007bc8:	0010b58f 	add.d	$r15,$r12,$r13
9000000008007bcc:	280001ee 	ld.b	$r14,$r15,0
9000000008007bd0:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008007bd4:	5fff7dcc 	bne	$r14,$r12,-132(0x3ff7c) # 9000000008007b50 <create+0xf4>
9000000008007bd8:	53ffa3ff 	b	-96(0xfffffa0) # 9000000008007b78 <create+0x11c>
    eunlock(dp);
9000000008007bdc:	001502e4 	move	$r4,$r23
9000000008007be0:	545fe000 	bl	24544(0x5fe0) # 900000000800dbc0 <eunlock>
    eput(dp);
9000000008007be4:	001502e4 	move	$r4,$r23
9000000008007be8:	54603c00 	bl	24636(0x603c) # 900000000800dc24 <eput>
    return NULL;
9000000008007bec:	53ff0bff 	b	-248(0xfffff08) # 9000000008007af4 <create+0x98>
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
9000000008007bf0:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
9000000008007bf4:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008007bf8:	47fee59f 	bnez	$r12,-284(0x7ffee4) # 9000000008007adc <create+0x80>
    eunlock(dp);
9000000008007bfc:	001502e4 	move	$r4,$r23
9000000008007c00:	545fc000 	bl	24512(0x5fc0) # 900000000800dbc0 <eunlock>
    eput(ep);
9000000008007c04:	00150324 	move	$r4,$r25
9000000008007c08:	54601c00 	bl	24604(0x601c) # 900000000800dc24 <eput>
    eput(dp);
9000000008007c0c:	001502e4 	move	$r4,$r23
9000000008007c10:	54601400 	bl	24596(0x6014) # 900000000800dc24 <eput>
    return NULL;
9000000008007c14:	00150019 	move	$r25,$r0
9000000008007c18:	53fedfff 	b	-292(0xffffedc) # 9000000008007af4 <create+0x98>

9000000008007c1c <argfd>:
static int argfd(int n, int *pfd, struct file **pf) {
9000000008007c1c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008007c20:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008007c24:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008007c28:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008007c2c:	29c04078 	st.d	$r24,$r3,16(0x10)
9000000008007c30:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008007c34:	001500b7 	move	$r23,$r5
9000000008007c38:	001500d8 	move	$r24,$r6
  if (argint(n, &fd) < 0) {
9000000008007c3c:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
9000000008007c40:	57ea5fff 	bl	-5540(0xfffea5c) # 900000000800669c <argint>
9000000008007c44:	60006080 	blt	$r4,$r0,96(0x60) # 9000000008007ca4 <argfd+0x88>
  if (fd == -1) {
9000000008007c48:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000008007c4c:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
9000000008007c50:	5800918d 	beq	$r12,$r13,144(0x90) # 9000000008007ce0 <argfd+0xc4>
  if (fd == -100) {
9000000008007c54:	02be700d 	addi.w	$r13,$r0,-100(0xf9c)
9000000008007c58:	5800618d 	beq	$r12,$r13,96(0x60) # 9000000008007cb8 <argfd+0x9c>
  if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == NULL) {
9000000008007c5c:	0281fc0d 	addi.w	$r13,$r0,127(0x7f)
9000000008007c60:	680069ac 	bltu	$r13,$r12,104(0x68) # 9000000008007cc8 <argfd+0xac>
9000000008007c64:	579ac7ff 	bl	-25916(0xfff9ac4) # 9000000008001728 <myproc>
9000000008007c68:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
9000000008007c6c:	002d11a4 	alsl.d	$r4,$r13,$r4,0x3
9000000008007c70:	28c3608c 	ld.d	$r12,$r4,216(0xd8)
9000000008007c74:	40005580 	beqz	$r12,84(0x54) # 9000000008007cc8 <argfd+0xac>
  if (pfd)
9000000008007c78:	40000ae0 	beqz	$r23,8(0x8) # 9000000008007c80 <argfd+0x64>
    *pfd = fd;
9000000008007c7c:	298002ed 	st.w	$r13,$r23,0
  return 0;
9000000008007c80:	00150004 	move	$r4,$r0
  if (pf)
9000000008007c84:	40000b00 	beqz	$r24,8(0x8) # 9000000008007c8c <argfd+0x70>
    *pf = f;
9000000008007c88:	29c0030c 	st.d	$r12,$r24,0
}
9000000008007c8c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008007c90:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008007c94:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008007c98:	28c04078 	ld.d	$r24,$r3,16(0x10)
9000000008007c9c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008007ca0:	4c000020 	jirl	$r0,$r1,0
    printf("argfd: argint error\n");
9000000008007ca4:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008007ca8:	02ce3084 	addi.d	$r4,$r4,908(0x38c)
9000000008007cac:	5785cbff 	bl	-31288(0xfff85c8) # 9000000008000274 <printf>
    return -1;
9000000008007cb0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008007cb4:	53ffdbff 	b	-40(0xfffffd8) # 9000000008007c8c <argfd+0x70>
    *pfd = fd;
9000000008007cb8:	02be700c 	addi.w	$r12,$r0,-100(0xf9c)
9000000008007cbc:	298002ec 	st.w	$r12,$r23,0
    return -1;
9000000008007cc0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008007cc4:	53ffcbff 	b	-56(0xfffffc8) # 9000000008007c8c <argfd+0x70>
    printf("fd: %d argfd: fd error\n", fd);
9000000008007cc8:	28bf72c5 	ld.w	$r5,$r22,-36(0xfdc)
9000000008007ccc:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008007cd0:	02cdf084 	addi.d	$r4,$r4,892(0x37c)
9000000008007cd4:	5785a3ff 	bl	-31328(0xfff85a0) # 9000000008000274 <printf>
    return -1;
9000000008007cd8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008007cdc:	53ffb3ff 	b	-80(0xfffffb0) # 9000000008007c8c <argfd+0x70>
    return -2;
9000000008007ce0:	02bff804 	addi.w	$r4,$r0,-2(0xffe)
9000000008007ce4:	53ffabff 	b	-88(0xfffffa8) # 9000000008007c8c <argfd+0x70>

9000000008007ce8 <fdalloc>:
static int fdalloc(struct file *f) {
9000000008007ce8:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008007cec:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008007cf0:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007cf4:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008007cf8:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008007cfc:	00150097 	move	$r23,$r4
  struct proc *p = myproc();
9000000008007d00:	579a2bff 	bl	-26072(0xfff9a28) # 9000000008001728 <myproc>
  for (fd = 0; fd < NOFILEMAX(p); fd++) {
9000000008007d04:	28c1208d 	ld.d	$r13,$r4,72(0x48)
9000000008007d08:	024205ac 	sltui	$r12,$r13,129(0x81)
9000000008007d0c:	001331af 	maskeqz	$r15,$r13,$r12
9000000008007d10:	0282000e 	addi.w	$r14,$r0,128(0x80)
9000000008007d14:	0013b1cc 	masknez	$r12,$r14,$r12
9000000008007d18:	001531ef 	or	$r15,$r15,$r12
9000000008007d1c:	40005da0 	beqz	$r13,92(0x5c) # 9000000008007d78 <fdalloc+0x90>
9000000008007d20:	00150090 	move	$r16,$r4
    if (p->ofile[fd] == 0) {
9000000008007d24:	28c3608c 	ld.d	$r12,$r4,216(0xd8)
9000000008007d28:	40004180 	beqz	$r12,64(0x40) # 9000000008007d68 <fdalloc+0x80>
9000000008007d2c:	02c3808d 	addi.d	$r13,$r4,224(0xe0)
9000000008007d30:	0280040c 	addi.w	$r12,$r0,1(0x1)
  for (fd = 0; fd < NOFILEMAX(p); fd++) {
9000000008007d34:	00408184 	slli.w	$r4,$r12,0x0
9000000008007d38:	6c00398f 	bgeu	$r12,$r15,56(0x38) # 9000000008007d70 <fdalloc+0x88>
    if (p->ofile[fd] == 0) {
9000000008007d3c:	28c001ae 	ld.d	$r14,$r13,0
9000000008007d40:	02c0058c 	addi.d	$r12,$r12,1(0x1)
9000000008007d44:	02c021ad 	addi.d	$r13,$r13,8(0x8)
9000000008007d48:	47ffeddf 	bnez	$r14,-20(0x7fffec) # 9000000008007d34 <fdalloc+0x4c>
      p->ofile[fd] = f;
9000000008007d4c:	002d4090 	alsl.d	$r16,$r4,$r16,0x3
9000000008007d50:	29c36217 	st.d	$r23,$r16,216(0xd8)
}
9000000008007d54:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008007d58:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008007d5c:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008007d60:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007d64:	4c000020 	jirl	$r0,$r1,0
  for (fd = 0; fd < NOFILEMAX(p); fd++) {
9000000008007d68:	00150004 	move	$r4,$r0
9000000008007d6c:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008007d4c <fdalloc+0x64>
  return -1;
9000000008007d70:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008007d74:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008007d54 <fdalloc+0x6c>
9000000008007d78:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008007d7c:	53ffdbff 	b	-40(0xfffffd8) # 9000000008007d54 <fdalloc+0x6c>

9000000008007d80 <isdirempty>:

  return addr;
}

// Is the directory dp empty except for "." and ".." ?
static int isdirempty(struct dirent *dp) {
9000000008007d80:	02fa0063 	addi.d	$r3,$r3,-384(0xe80)
9000000008007d84:	29c5e061 	st.d	$r1,$r3,376(0x178)
9000000008007d88:	29c5c076 	st.d	$r22,$r3,368(0x170)
9000000008007d8c:	02c60076 	addi.d	$r22,$r3,384(0x180)
  struct dirent ep;
  int count;
  int ret;
  ep.valid = 0;
9000000008007d90:	297e7ac0 	st.h	$r0,$r22,-98(0xf9e)
  ret = enext(dp, &ep, 2 * 32, &count); // skip the "." and ".."
9000000008007d94:	02fa12c7 	addi.d	$r7,$r22,-380(0xe84)
9000000008007d98:	02810006 	addi.w	$r6,$r0,64(0x40)
9000000008007d9c:	02fa22c5 	addi.d	$r5,$r22,-376(0xe88)
9000000008007da0:	5461cc00 	bl	25036(0x61cc) # 900000000800df6c <enext>
  return ret == -1;
9000000008007da4:	02c00484 	addi.d	$r4,$r4,1(0x1)
}
9000000008007da8:	02400484 	sltui	$r4,$r4,1(0x1)
9000000008007dac:	28c5e061 	ld.d	$r1,$r3,376(0x178)
9000000008007db0:	28c5c076 	ld.d	$r22,$r3,368(0x170)
9000000008007db4:	02c60063 	addi.d	$r3,$r3,384(0x180)
9000000008007db8:	4c000020 	jirl	$r0,$r1,0

9000000008007dbc <initlogbuffer>:
void initlogbuffer() {
9000000008007dbc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008007dc0:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008007dc4:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008007dc8:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008007dcc:	02c08076 	addi.d	$r22,$r3,32(0x20)
  bufferlength = 0;
9000000008007dd0:	1c0009f7 	pcaddu12i	$r23,79(0x4f)
9000000008007dd4:	02c242f7 	addi.d	$r23,$r23,144(0x90)
9000000008007dd8:	298002e0 	st.w	$r0,$r23,0
  strncpy(syslogbuffer, "[log]init done\n", 1024);
9000000008007ddc:	02900006 	addi.w	$r6,$r0,1024(0x400)
9000000008007de0:	1c000245 	pcaddu12i	$r5,18(0x12)
9000000008007de4:	02ca00a5 	addi.d	$r5,$r5,640(0x280)
9000000008007de8:	1c0009e4 	pcaddu12i	$r4,79(0x4f)
9000000008007dec:	02c20084 	addi.d	$r4,$r4,128(0x80)
9000000008007df0:	57933bff 	bl	-27848(0xfff9338) # 9000000008001128 <strncpy>
  bufferlength += strlen(syslogbuffer);
9000000008007df4:	1c0009e4 	pcaddu12i	$r4,79(0x4f)
9000000008007df8:	02c1d084 	addi.d	$r4,$r4,116(0x74)
9000000008007dfc:	5793dfff 	bl	-27684(0xfff93dc) # 90000000080011d8 <strlen>
9000000008007e00:	288002ec 	ld.w	$r12,$r23,0
9000000008007e04:	00101184 	add.w	$r4,$r12,$r4
9000000008007e08:	298002e4 	st.w	$r4,$r23,0
}
9000000008007e0c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008007e10:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008007e14:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008007e18:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008007e1c:	4c000020 	jirl	$r0,$r1,0

9000000008007e20 <sys_mkdirat>:
uint64 sys_mkdirat(void) {
9000000008007e20:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
9000000008007e24:	29c4a061 	st.d	$r1,$r3,296(0x128)
9000000008007e28:	29c48076 	st.d	$r22,$r3,288(0x120)
9000000008007e2c:	29c46077 	st.d	$r23,$r3,280(0x118)
9000000008007e30:	02c4c076 	addi.d	$r22,$r3,304(0x130)
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argint(2, &mode) < 0) {
9000000008007e34:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008007e38:	02fb62c5 	addi.d	$r5,$r22,-296(0xed8)
9000000008007e3c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007e40:	57e91bff 	bl	-5864(0xfffe918) # 9000000008006758 <argstr>
    return -1;
9000000008007e44:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argint(2, &mode) < 0) {
9000000008007e48:	60005880 	blt	$r4,$r0,88(0x58) # 9000000008007ea0 <sys_mkdirat+0x80>
9000000008007e4c:	02fb52c5 	addi.d	$r5,$r22,-300(0xed4)
9000000008007e50:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008007e54:	57e84bff 	bl	-6072(0xfffe848) # 900000000800669c <argint>
    return -1;
9000000008007e58:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argint(2, &mode) < 0) {
9000000008007e5c:	60004480 	blt	$r4,$r0,68(0x44) # 9000000008007ea0 <sys_mkdirat+0x80>
  if (strlen(path) == 1) {
9000000008007e60:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008007e64:	579377ff 	bl	-27788(0xfff9374) # 90000000080011d8 <strlen>
9000000008007e68:	0280040d 	addi.w	$r13,$r0,1(0x1)
    return 0;
9000000008007e6c:	0015000c 	move	$r12,$r0
  if (strlen(path) == 1) {
9000000008007e70:	5800308d 	beq	$r4,$r13,48(0x30) # 9000000008007ea0 <sys_mkdirat+0x80>
  if ((ep = create(path, T_DIR, 0)) == 0) {
9000000008007e74:	00150006 	move	$r6,$r0
9000000008007e78:	02800405 	addi.w	$r5,$r0,1(0x1)
9000000008007e7c:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008007e80:	57fbdfff 	bl	-1060(0xffffbdc) # 9000000008007a5c <create>
9000000008007e84:	00150097 	move	$r23,$r4
    return -1;
9000000008007e88:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if ((ep = create(path, T_DIR, 0)) == 0) {
9000000008007e8c:	40001480 	beqz	$r4,20(0x14) # 9000000008007ea0 <sys_mkdirat+0x80>
  eunlock(ep);
9000000008007e90:	545d3000 	bl	23856(0x5d30) # 900000000800dbc0 <eunlock>
  eput(ep);
9000000008007e94:	001502e4 	move	$r4,$r23
9000000008007e98:	545d8c00 	bl	23948(0x5d8c) # 900000000800dc24 <eput>
  return 0;
9000000008007e9c:	0015000c 	move	$r12,$r0
}
9000000008007ea0:	00150184 	move	$r4,$r12
9000000008007ea4:	28c4a061 	ld.d	$r1,$r3,296(0x128)
9000000008007ea8:	28c48076 	ld.d	$r22,$r3,288(0x120)
9000000008007eac:	28c46077 	ld.d	$r23,$r3,280(0x118)
9000000008007eb0:	02c4c063 	addi.d	$r3,$r3,304(0x130)
9000000008007eb4:	4c000020 	jirl	$r0,$r1,0

9000000008007eb8 <sys_dup>:
uint64 sys_dup(void) {
9000000008007eb8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008007ebc:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008007ec0:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008007ec4:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008007ec8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  if (argfd(0, 0, &f) < 0)
9000000008007ecc:	02ff62c6 	addi.d	$r6,$r22,-40(0xfd8)
9000000008007ed0:	00150005 	move	$r5,$r0
9000000008007ed4:	00150004 	move	$r4,$r0
9000000008007ed8:	57fd47ff 	bl	-700(0xffffd44) # 9000000008007c1c <argfd>
    return -1;
9000000008007edc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0)
9000000008007ee0:	60002480 	blt	$r4,$r0,36(0x24) # 9000000008007f04 <sys_dup+0x4c>
  if ((fd = fdalloc(f)) < 0)
9000000008007ee4:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000008007ee8:	57fe03ff 	bl	-512(0xffffe00) # 9000000008007ce8 <fdalloc>
9000000008007eec:	00150097 	move	$r23,$r4
    return -24;
9000000008007ef0:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
  if ((fd = fdalloc(f)) < 0)
9000000008007ef4:	60001080 	blt	$r4,$r0,16(0x10) # 9000000008007f04 <sys_dup+0x4c>
  filedup(f);
9000000008007ef8:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000008007efc:	57cdebff 	bl	-12824(0xfffcde8) # 9000000008004ce4 <filedup>
  return fd;
9000000008007f00:	001502ec 	move	$r12,$r23
}
9000000008007f04:	00150184 	move	$r4,$r12
9000000008007f08:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008007f0c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008007f10:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008007f14:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008007f18:	4c000020 	jirl	$r0,$r1,0

9000000008007f1c <sys_dup3>:
uint64 sys_dup3(void) {
9000000008007f1c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008007f20:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008007f24:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008007f28:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008007f2c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  struct proc *p = myproc();
9000000008007f30:	5797fbff 	bl	-26632(0xfff97f8) # 9000000008001728 <myproc>
9000000008007f34:	00150097 	move	$r23,$r4
  if (argfd(0, 0, &f) < 0 || argint(1, &newfd) < 0 || newfd < 0)
9000000008007f38:	02ff62c6 	addi.d	$r6,$r22,-40(0xfd8)
9000000008007f3c:	00150005 	move	$r5,$r0
9000000008007f40:	00150004 	move	$r4,$r0
9000000008007f44:	57fcdbff 	bl	-808(0xffffcd8) # 9000000008007c1c <argfd>
    return -1;
9000000008007f48:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(1, &newfd) < 0 || newfd < 0)
9000000008007f4c:	60005c80 	blt	$r4,$r0,92(0x5c) # 9000000008007fa8 <sys_dup3+0x8c>
9000000008007f50:	02ff52c5 	addi.d	$r5,$r22,-44(0xfd4)
9000000008007f54:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008007f58:	57e747ff 	bl	-6332(0xfffe744) # 900000000800669c <argint>
    return -1;
9000000008007f5c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(1, &newfd) < 0 || newfd < 0)
9000000008007f60:	60004880 	blt	$r4,$r0,72(0x48) # 9000000008007fa8 <sys_dup3+0x8c>
9000000008007f64:	28bf52c4 	ld.w	$r4,$r22,-44(0xfd4)
9000000008007f68:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008007fa8 <sys_dup3+0x8c>
  if (newfd >= NOFILEMAX(p))
9000000008007f6c:	28c122ec 	ld.d	$r12,$r23,72(0x48)
9000000008007f70:	0242058d 	sltui	$r13,$r12,129(0x81)
9000000008007f74:	0013358c 	maskeqz	$r12,$r12,$r13
9000000008007f78:	0282000e 	addi.w	$r14,$r0,128(0x80)
9000000008007f7c:	0013b5cd 	masknez	$r13,$r14,$r13
9000000008007f80:	0015358d 	or	$r13,$r12,$r13
    return -24;
9000000008007f84:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
  if (newfd >= NOFILEMAX(p))
9000000008007f88:	6c00208d 	bgeu	$r4,$r13,32(0x20) # 9000000008007fa8 <sys_dup3+0x8c>
  if (p->ofile[newfd] != f)
9000000008007f8c:	002d5c97 	alsl.d	$r23,$r4,$r23,0x3
9000000008007f90:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
9000000008007f94:	28c362ec 	ld.d	$r12,$r23,216(0xd8)
9000000008007f98:	58000d84 	beq	$r12,$r4,12(0xc) # 9000000008007fa4 <sys_dup3+0x88>
    p->ofile[newfd] = filedup(f);
9000000008007f9c:	57cd4bff 	bl	-12984(0xfffcd48) # 9000000008004ce4 <filedup>
9000000008007fa0:	29c362e4 	st.d	$r4,$r23,216(0xd8)
  return newfd;
9000000008007fa4:	28bf52cc 	ld.w	$r12,$r22,-44(0xfd4)
}
9000000008007fa8:	00150184 	move	$r4,$r12
9000000008007fac:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008007fb0:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008007fb4:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008007fb8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008007fbc:	4c000020 	jirl	$r0,$r1,0

9000000008007fc0 <sys_read>:
uint64 sys_read(void) {
9000000008007fc0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008007fc4:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008007fc8:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008007fcc:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
9000000008007fd0:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
9000000008007fd4:	00150005 	move	$r5,$r0
9000000008007fd8:	00150004 	move	$r4,$r0
9000000008007fdc:	57fc43ff 	bl	-960(0xffffc40) # 9000000008007c1c <argfd>
    return -1;
9000000008007fe0:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
9000000008007fe4:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008008024 <sys_read+0x64>
9000000008007fe8:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
9000000008007fec:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008007ff0:	57e6afff 	bl	-6484(0xfffe6ac) # 900000000800669c <argint>
    return -1;
9000000008007ff4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
9000000008007ff8:	60002c80 	blt	$r4,$r0,44(0x2c) # 9000000008008024 <sys_read+0x64>
9000000008007ffc:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008000:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008004:	57e71fff 	bl	-6372(0xfffe71c) # 9000000008006720 <argaddr>
    return -1;
9000000008008008:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
900000000800800c:	60001880 	blt	$r4,$r0,24(0x18) # 9000000008008024 <sys_read+0x64>
  return fileread(f, p, n);
9000000008008010:	28bf92c6 	ld.w	$r6,$r22,-28(0xfe4)
9000000008008014:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000008008018:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
900000000800801c:	57d197ff 	bl	-11884(0xfffd194) # 90000000080051b0 <fileread>
9000000008008020:	0015008c 	move	$r12,$r4
}
9000000008008024:	00150184 	move	$r4,$r12
9000000008008028:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800802c:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008008030:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008008034:	4c000020 	jirl	$r0,$r1,0

9000000008008038 <sys_pread>:
uint64 sys_pread(void) {
9000000008008038:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800803c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008008040:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008008044:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0 || argint(2, &count) < 0 ||
9000000008008048:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
900000000800804c:	00150005 	move	$r5,$r0
9000000008008050:	00150004 	move	$r4,$r0
9000000008008054:	57fbcbff 	bl	-1080(0xffffbc8) # 9000000008007c1c <argfd>
    return -1;
9000000008008058:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0 || argint(2, &count) < 0 ||
900000000800805c:	60006480 	blt	$r4,$r0,100(0x64) # 90000000080080c0 <sys_pread+0x88>
9000000008008060:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008064:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008068:	57e6bbff 	bl	-6472(0xfffe6b8) # 9000000008006720 <argaddr>
    return -1;
900000000800806c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0 || argint(2, &count) < 0 ||
9000000008008070:	60005080 	blt	$r4,$r0,80(0x50) # 90000000080080c0 <sys_pread+0x88>
9000000008008074:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008008078:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800807c:	57e623ff 	bl	-6624(0xfffe620) # 900000000800669c <argint>
    return -1;
9000000008008080:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0 || argint(2, &count) < 0 ||
9000000008008084:	60003c80 	blt	$r4,$r0,60(0x3c) # 90000000080080c0 <sys_pread+0x88>
      argint(3, &off) < 0) {
9000000008008088:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
900000000800808c:	02800c04 	addi.w	$r4,$r0,3(0x3)
9000000008008090:	57e60fff 	bl	-6644(0xfffe60c) # 900000000800669c <argint>
    return -1;
9000000008008094:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0 || argint(2, &count) < 0 ||
9000000008008098:	60002880 	blt	$r4,$r0,40(0x28) # 90000000080080c0 <sys_pread+0x88>
  fileseek(f, off, SEEK_SET);
900000000800809c:	00150006 	move	$r6,$r0
90000000080080a0:	28bf92c5 	ld.w	$r5,$r22,-28(0xfe4)
90000000080080a4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000080080a8:	57d8c3ff 	bl	-10048(0xfffd8c0) # 9000000008005968 <fileseek>
  return fileread(f, p, count);
90000000080080ac:	28bf82c6 	ld.w	$r6,$r22,-32(0xfe0)
90000000080080b0:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
90000000080080b4:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000080080b8:	57d0fbff 	bl	-12040(0xfffd0f8) # 90000000080051b0 <fileread>
90000000080080bc:	0015008c 	move	$r12,$r4
}
90000000080080c0:	00150184 	move	$r4,$r12
90000000080080c4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080080c8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080080cc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080080d0:	4c000020 	jirl	$r0,$r1,0

90000000080080d4 <sys_write>:
uint64 sys_write(void) {
90000000080080d4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080080d8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080080dc:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080080e0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
90000000080080e4:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
90000000080080e8:	00150005 	move	$r5,$r0
90000000080080ec:	00150004 	move	$r4,$r0
90000000080080f0:	57fb2fff 	bl	-1236(0xffffb2c) # 9000000008007c1c <argfd>
    return -1;
90000000080080f4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
90000000080080f8:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008008138 <sys_write+0x64>
90000000080080fc:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
9000000008008100:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008008104:	57e59bff 	bl	-6760(0xfffe598) # 900000000800669c <argint>
    return -1;
9000000008008108:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
900000000800810c:	60002c80 	blt	$r4,$r0,44(0x2c) # 9000000008008138 <sys_write+0x64>
9000000008008110:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008114:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008118:	57e60bff 	bl	-6648(0xfffe608) # 9000000008006720 <argaddr>
    return -1;
900000000800811c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argaddr(1, &p) < 0)
9000000008008120:	60001880 	blt	$r4,$r0,24(0x18) # 9000000008008138 <sys_write+0x64>
  return filewrite(f, p, n);
9000000008008124:	28bf92c6 	ld.w	$r6,$r22,-28(0xfe4)
9000000008008128:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000800812c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000008008130:	57d2cfff 	bl	-11572(0xfffd2cc) # 90000000080053fc <filewrite>
9000000008008134:	0015008c 	move	$r12,$r4
}
9000000008008138:	00150184 	move	$r4,$r12
900000000800813c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008008140:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008008144:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008008148:	4c000020 	jirl	$r0,$r1,0

900000000800814c <sys_close>:
uint64 sys_close(void) {
900000000800814c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008008150:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008008154:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008008158:	02c08076 	addi.d	$r22,$r3,32(0x20)
  if (argfd(0, &fd, &f) < 0)
900000000800815c:	02ff82c6 	addi.d	$r6,$r22,-32(0xfe0)
9000000008008160:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008008164:	00150004 	move	$r4,$r0
9000000008008168:	57fab7ff 	bl	-1356(0xffffab4) # 9000000008007c1c <argfd>
    return -1;
900000000800816c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0)
9000000008008170:	60002080 	blt	$r4,$r0,32(0x20) # 9000000008008190 <sys_close+0x44>
  myproc()->ofile[fd] = 0;
9000000008008174:	5795b7ff 	bl	-27212(0xfff95b4) # 9000000008001728 <myproc>
9000000008008178:	28bfb2cc 	ld.w	$r12,$r22,-20(0xfec)
900000000800817c:	002d1184 	alsl.d	$r4,$r12,$r4,0x3
9000000008008180:	29c36080 	st.d	$r0,$r4,216(0xd8)
  fileclose(f);
9000000008008184:	28ff82c4 	ld.d	$r4,$r22,-32(0xfe0)
9000000008008188:	57cbc3ff 	bl	-13376(0xfffcbc0) # 9000000008004d48 <fileclose>
  return 0;
900000000800818c:	0015000c 	move	$r12,$r0
}
9000000008008190:	00150184 	move	$r4,$r12
9000000008008194:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008008198:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800819c:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080081a0:	4c000020 	jirl	$r0,$r1,0

90000000080081a4 <sys_readv>:
uint64 sys_readv(void) {
90000000080081a4:	02eec063 	addi.d	$r3,$r3,-1104(0xbb0)
90000000080081a8:	29d12061 	st.d	$r1,$r3,1096(0x448)
90000000080081ac:	29d10076 	st.d	$r22,$r3,1088(0x440)
90000000080081b0:	29d0e077 	st.d	$r23,$r3,1080(0x438)
90000000080081b4:	29d0c078 	st.d	$r24,$r3,1072(0x430)
90000000080081b8:	29d0a079 	st.d	$r25,$r3,1064(0x428)
90000000080081bc:	02d14076 	addi.d	$r22,$r3,1104(0x450)
  struct proc *p = myproc();
90000000080081c0:	57956bff 	bl	-27288(0xfff9568) # 9000000008001728 <myproc>
90000000080081c4:	00150097 	move	$r23,$r4
  if (argfd(0, &fd, &f) < 0)
90000000080081c8:	02ff22c6 	addi.d	$r6,$r22,-56(0xfc8)
90000000080081cc:	02ff12c5 	addi.d	$r5,$r22,-60(0xfc4)
90000000080081d0:	00150004 	move	$r4,$r0
90000000080081d4:	57fa4bff 	bl	-1464(0xffffa48) # 9000000008007c1c <argfd>
    return -1;
90000000080081d8:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0)
90000000080081dc:	60007480 	blt	$r4,$r0,116(0x74) # 9000000008008250 <sys_readv+0xac>
  if (argaddr(1, &iov) < 0)
90000000080081e0:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
90000000080081e4:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080081e8:	57e53bff 	bl	-6856(0xfffe538) # 9000000008006720 <argaddr>
90000000080081ec:	60006480 	blt	$r4,$r0,100(0x64) # 9000000008008250 <sys_readv+0xac>
  if (argint(2, &iovcnt) < 0)
90000000080081f0:	02fed2c5 	addi.d	$r5,$r22,-76(0xfb4)
90000000080081f4:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000080081f8:	57e4a7ff 	bl	-7004(0xfffe4a4) # 900000000800669c <argint>
90000000080081fc:	60005480 	blt	$r4,$r0,84(0x54) # 9000000008008250 <sys_readv+0xac>
  if (iov) {
9000000008008200:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
9000000008008204:	40004cc0 	beqz	$r6,76(0x4c) # 9000000008008250 <sys_readv+0xac>
    copyin(p->pagetable, (char *)v, iov, sizeof(v));
9000000008008208:	02900007 	addi.w	$r7,$r0,1024(0x400)
900000000800820c:	02eec2c5 	addi.d	$r5,$r22,-1104(0xbb0)
9000000008008210:	28c182e4 	ld.d	$r4,$r23,96(0x60)
9000000008008214:	57bde7ff 	bl	-16924(0xfffbde4) # 9000000008003ff8 <copyin>
  for (int i = 0; i < iovcnt; i++) {
9000000008008218:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
  uint64 len = 0;
900000000800821c:	00150018 	move	$r24,$r0
  for (int i = 0; i < iovcnt; i++) {
9000000008008220:	6400300c 	bge	$r0,$r12,48(0x30) # 9000000008008250 <sys_readv+0xac>
9000000008008224:	02eec2d7 	addi.d	$r23,$r22,-1104(0xbb0)
9000000008008228:	00150019 	move	$r25,$r0
    len += fileread(f, (uint64)(v[i].iov_base), v[i].iov_len);
900000000800822c:	288022e6 	ld.w	$r6,$r23,8(0x8)
9000000008008230:	28c002e5 	ld.d	$r5,$r23,0
9000000008008234:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000008008238:	57cf7bff 	bl	-12424(0xfffcf78) # 90000000080051b0 <fileread>
900000000800823c:	00109318 	add.d	$r24,$r24,$r4
  for (int i = 0; i < iovcnt; i++) {
9000000008008240:	02800739 	addi.w	$r25,$r25,1(0x1)
9000000008008244:	02c042f7 	addi.d	$r23,$r23,16(0x10)
9000000008008248:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
900000000800824c:	63ffe32c 	blt	$r25,$r12,-32(0x3ffe0) # 900000000800822c <sys_readv+0x88>
}
9000000008008250:	00150304 	move	$r4,$r24
9000000008008254:	28d12061 	ld.d	$r1,$r3,1096(0x448)
9000000008008258:	28d10076 	ld.d	$r22,$r3,1088(0x440)
900000000800825c:	28d0e077 	ld.d	$r23,$r3,1080(0x438)
9000000008008260:	28d0c078 	ld.d	$r24,$r3,1072(0x430)
9000000008008264:	28d0a079 	ld.d	$r25,$r3,1064(0x428)
9000000008008268:	02d14063 	addi.d	$r3,$r3,1104(0x450)
900000000800826c:	4c000020 	jirl	$r0,$r1,0

9000000008008270 <sys_writev>:
uint64 sys_writev(void) {
9000000008008270:	02eec063 	addi.d	$r3,$r3,-1104(0xbb0)
9000000008008274:	29d12061 	st.d	$r1,$r3,1096(0x448)
9000000008008278:	29d10076 	st.d	$r22,$r3,1088(0x440)
900000000800827c:	29d0e077 	st.d	$r23,$r3,1080(0x438)
9000000008008280:	29d0c078 	st.d	$r24,$r3,1072(0x430)
9000000008008284:	29d0a079 	st.d	$r25,$r3,1064(0x428)
9000000008008288:	02d14076 	addi.d	$r22,$r3,1104(0x450)
  struct proc *p = myproc();
900000000800828c:	57949fff 	bl	-27492(0xfff949c) # 9000000008001728 <myproc>
9000000008008290:	00150097 	move	$r23,$r4
  if (argfd(0, &fd, &f) < 0)
9000000008008294:	02ff22c6 	addi.d	$r6,$r22,-56(0xfc8)
9000000008008298:	02ff12c5 	addi.d	$r5,$r22,-60(0xfc4)
900000000800829c:	00150004 	move	$r4,$r0
90000000080082a0:	57f97fff 	bl	-1668(0xffff97c) # 9000000008007c1c <argfd>
    return -1;
90000000080082a4:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0)
90000000080082a8:	60007880 	blt	$r4,$r0,120(0x78) # 9000000008008320 <sys_writev+0xb0>
  if (argaddr(1, &iov) < 0)
90000000080082ac:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
90000000080082b0:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080082b4:	57e46fff 	bl	-7060(0xfffe46c) # 9000000008006720 <argaddr>
90000000080082b8:	60006880 	blt	$r4,$r0,104(0x68) # 9000000008008320 <sys_writev+0xb0>
  if (argint(2, &iovcnt) < 0)
90000000080082bc:	02fed2c5 	addi.d	$r5,$r22,-76(0xfb4)
90000000080082c0:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000080082c4:	57e3dbff 	bl	-7208(0xfffe3d8) # 900000000800669c <argint>
90000000080082c8:	60005880 	blt	$r4,$r0,88(0x58) # 9000000008008320 <sys_writev+0xb0>
  if (iov) {
90000000080082cc:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
90000000080082d0:	400050c0 	beqz	$r6,80(0x50) # 9000000008008320 <sys_writev+0xb0>
    copyin(p->pagetable, (char *)v, iov, sizeof(iovec) * iovcnt);
90000000080082d4:	28bed2c7 	ld.w	$r7,$r22,-76(0xfb4)
90000000080082d8:	004110e7 	slli.d	$r7,$r7,0x4
90000000080082dc:	02eec2c5 	addi.d	$r5,$r22,-1104(0xbb0)
90000000080082e0:	28c182e4 	ld.d	$r4,$r23,96(0x60)
90000000080082e4:	57bd17ff 	bl	-17132(0xfffbd14) # 9000000008003ff8 <copyin>
  for (int i = 0; i < iovcnt; i++) {
90000000080082e8:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
  uint64 len = 0;
90000000080082ec:	00150018 	move	$r24,$r0
  for (int i = 0; i < iovcnt; i++) {
90000000080082f0:	6400300c 	bge	$r0,$r12,48(0x30) # 9000000008008320 <sys_writev+0xb0>
90000000080082f4:	02eec2d7 	addi.d	$r23,$r22,-1104(0xbb0)
90000000080082f8:	00150019 	move	$r25,$r0
    len += filewrite(f, (uint64)(v[i].iov_base), v[i].iov_len);
90000000080082fc:	288022e6 	ld.w	$r6,$r23,8(0x8)
9000000008008300:	28c002e5 	ld.d	$r5,$r23,0
9000000008008304:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000008008308:	57d0f7ff 	bl	-12044(0xfffd0f4) # 90000000080053fc <filewrite>
900000000800830c:	00109318 	add.d	$r24,$r24,$r4
  for (int i = 0; i < iovcnt; i++) {
9000000008008310:	02800739 	addi.w	$r25,$r25,1(0x1)
9000000008008314:	02c042f7 	addi.d	$r23,$r23,16(0x10)
9000000008008318:	28bed2cc 	ld.w	$r12,$r22,-76(0xfb4)
900000000800831c:	63ffe32c 	blt	$r25,$r12,-32(0x3ffe0) # 90000000080082fc <sys_writev+0x8c>
}
9000000008008320:	00150304 	move	$r4,$r24
9000000008008324:	28d12061 	ld.d	$r1,$r3,1096(0x448)
9000000008008328:	28d10076 	ld.d	$r22,$r3,1088(0x440)
900000000800832c:	28d0e077 	ld.d	$r23,$r3,1080(0x438)
9000000008008330:	28d0c078 	ld.d	$r24,$r3,1072(0x430)
9000000008008334:	28d0a079 	ld.d	$r25,$r3,1064(0x428)
9000000008008338:	02d14063 	addi.d	$r3,$r3,1104(0x450)
900000000800833c:	4c000020 	jirl	$r0,$r1,0

9000000008008340 <sys_fstat>:
uint64 sys_fstat(void) {
9000000008008340:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008008344:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008008348:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800834c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
9000000008008350:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
9000000008008354:	00150005 	move	$r5,$r0
9000000008008358:	00150004 	move	$r4,$r0
900000000800835c:	57f8c3ff 	bl	-1856(0xffff8c0) # 9000000008007c1c <argfd>
    return -1;
9000000008008360:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
9000000008008364:	60002880 	blt	$r4,$r0,40(0x28) # 900000000800838c <sys_fstat+0x4c>
9000000008008368:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
900000000800836c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008370:	57e3b3ff 	bl	-7248(0xfffe3b0) # 9000000008006720 <argaddr>
    return -1;
9000000008008374:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &st) < 0)
9000000008008378:	60001480 	blt	$r4,$r0,20(0x14) # 900000000800838c <sys_fstat+0x4c>
  return filestat(f, st);
900000000800837c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000008008380:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000008008384:	57ca9bff 	bl	-13672(0xfffca98) # 9000000008004e1c <filestat>
9000000008008388:	0015008c 	move	$r12,$r4
}
900000000800838c:	00150184 	move	$r4,$r12
9000000008008390:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008008394:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008008398:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800839c:	4c000020 	jirl	$r0,$r1,0

90000000080083a0 <print_kstat>:
void print_kstat(struct kstat *st) {
90000000080083a0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080083a4:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080083a8:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080083ac:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080083b0:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080083b4:	00150097 	move	$r23,$r4
  printf("st_dev: %d\n", st->st_dev);
90000000080083b8:	28c00085 	ld.d	$r5,$r4,0
90000000080083bc:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080083c0:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
90000000080083c4:	577eb3ff 	bl	-33104(0xfff7eb0) # 9000000008000274 <printf>
  printf("st_ino: %d\n", st->st_ino);
90000000080083c8:	28c022e5 	ld.d	$r5,$r23,8(0x8)
90000000080083cc:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080083d0:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
90000000080083d4:	577ea3ff 	bl	-33120(0xfff7ea0) # 9000000008000274 <printf>
  printf("st_mode: %d\n", st->st_mode);
90000000080083d8:	288042e5 	ld.w	$r5,$r23,16(0x10)
90000000080083dc:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080083e0:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
90000000080083e4:	577e93ff 	bl	-33136(0xfff7e90) # 9000000008000274 <printf>
  printf("st_nlink: %d\n", st->st_nlink);
90000000080083e8:	288052e5 	ld.w	$r5,$r23,20(0x14)
90000000080083ec:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080083f0:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
90000000080083f4:	577e83ff 	bl	-33152(0xfff7e80) # 9000000008000274 <printf>
  printf("st_uid: %d\n", st->st_uid);
90000000080083f8:	288062e5 	ld.w	$r5,$r23,24(0x18)
90000000080083fc:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008400:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008404:	577e73ff 	bl	-33168(0xfff7e70) # 9000000008000274 <printf>
  printf("st_gid: %d\n", st->st_gid);
9000000008008408:	288072e5 	ld.w	$r5,$r23,28(0x1c)
900000000800840c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008410:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008414:	577e63ff 	bl	-33184(0xfff7e60) # 9000000008000274 <printf>
  printf("st_rdev: %d\n", st->st_rdev);
9000000008008418:	28c082e5 	ld.d	$r5,$r23,32(0x20)
900000000800841c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008420:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008424:	577e53ff 	bl	-33200(0xfff7e50) # 9000000008000274 <printf>
  printf("st_size: %d\n", st->st_size);
9000000008008428:	28c0c2e5 	ld.d	$r5,$r23,48(0x30)
900000000800842c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008430:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008434:	577e43ff 	bl	-33216(0xfff7e40) # 9000000008000274 <printf>
  printf("st_blksize: %d\n", st->st_blksize);
9000000008008438:	2880e2e5 	ld.w	$r5,$r23,56(0x38)
900000000800843c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008440:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008444:	577e33ff 	bl	-33232(0xfff7e30) # 9000000008000274 <printf>
  printf("st_blocks: %d\n", st->st_blocks);
9000000008008448:	28c102e5 	ld.d	$r5,$r23,64(0x40)
900000000800844c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008450:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008454:	577e23ff 	bl	-33248(0xfff7e20) # 9000000008000274 <printf>
  printf("st_atime_sec: %d\n", st->st_atime_sec);
9000000008008458:	28c122e5 	ld.d	$r5,$r23,72(0x48)
900000000800845c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008460:	02f2d084 	addi.d	$r4,$r4,-844(0xcb4)
9000000008008464:	577e13ff 	bl	-33264(0xfff7e10) # 9000000008000274 <printf>
  printf("st_atime_nsec: %d\n", st->st_atime_nsec);
9000000008008468:	28c142e5 	ld.d	$r5,$r23,80(0x50)
900000000800846c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008470:	02f2f084 	addi.d	$r4,$r4,-836(0xcbc)
9000000008008474:	577e03ff 	bl	-33280(0xfff7e00) # 9000000008000274 <printf>
  printf("st_mtime_sec: %d\n", st->st_mtime_sec);
9000000008008478:	28c162e5 	ld.d	$r5,$r23,88(0x58)
900000000800847c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008480:	02f31084 	addi.d	$r4,$r4,-828(0xcc4)
9000000008008484:	577df3ff 	bl	-33296(0xfff7df0) # 9000000008000274 <printf>
  printf("st_mtime_nsec: %d\n", st->st_mtime_nsec);
9000000008008488:	28c182e5 	ld.d	$r5,$r23,96(0x60)
900000000800848c:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008490:	02f33084 	addi.d	$r4,$r4,-820(0xccc)
9000000008008494:	577de3ff 	bl	-33312(0xfff7de0) # 9000000008000274 <printf>
  printf("st_ctime_sec: %d\n", st->st_ctime_sec);
9000000008008498:	28c1a2e5 	ld.d	$r5,$r23,104(0x68)
900000000800849c:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080084a0:	02f35084 	addi.d	$r4,$r4,-812(0xcd4)
90000000080084a4:	577dd3ff 	bl	-33328(0xfff7dd0) # 9000000008000274 <printf>
  printf("st_ctime_nsec: %d\n", st->st_ctime_nsec);
90000000080084a8:	28c1c2e5 	ld.d	$r5,$r23,112(0x70)
90000000080084ac:	1c000244 	pcaddu12i	$r4,18(0x12)
90000000080084b0:	02f37084 	addi.d	$r4,$r4,-804(0xcdc)
90000000080084b4:	577dc3ff 	bl	-33344(0xfff7dc0) # 9000000008000274 <printf>
}
90000000080084b8:	28c06061 	ld.d	$r1,$r3,24(0x18)
90000000080084bc:	28c04076 	ld.d	$r22,$r3,16(0x10)
90000000080084c0:	28c02077 	ld.d	$r23,$r3,8(0x8)
90000000080084c4:	02c08063 	addi.d	$r3,$r3,32(0x20)
90000000080084c8:	4c000020 	jirl	$r0,$r1,0

90000000080084cc <sys_fstatat>:
uint64 sys_fstatat(void) {
90000000080084cc:	02f8c063 	addi.d	$r3,$r3,-464(0xe30)
90000000080084d0:	29c72061 	st.d	$r1,$r3,456(0x1c8)
90000000080084d4:	29c70076 	st.d	$r22,$r3,448(0x1c0)
90000000080084d8:	29c6e077 	st.d	$r23,$r3,440(0x1b8)
90000000080084dc:	29c6c078 	st.d	$r24,$r3,432(0x1b0)
90000000080084e0:	29c6a079 	st.d	$r25,$r3,424(0x1a8)
90000000080084e4:	02c74076 	addi.d	$r22,$r3,464(0x1d0)
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD)
90000000080084e8:	02fae2c6 	addi.d	$r6,$r22,-328(0xeb8)
90000000080084ec:	02ff32c5 	addi.d	$r5,$r22,-52(0xfcc)
90000000080084f0:	00150004 	move	$r4,$r0
90000000080084f4:	57f72bff 	bl	-2264(0xffff728) # 9000000008007c1c <argfd>
90000000080084f8:	64001480 	bge	$r4,$r0,20(0x14) # 900000000800850c <sys_fstatat+0x40>
90000000080084fc:	28bf32ce 	ld.w	$r14,$r22,-52(0xfcc)
9000000008008500:	02be700d 	addi.w	$r13,$r0,-100(0xf9c)
    return -24; // 打开文件太多
9000000008008504:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD)
9000000008008508:	5c00ddcd 	bne	$r14,$r13,220(0xdc) # 90000000080085e4 <sys_fstatat+0x118>
  if (argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0 || argaddr(2, &st) < 0 ||
900000000800850c:	02840006 	addi.w	$r6,$r0,256(0x100)
9000000008008510:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
9000000008008514:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008518:	57e243ff 	bl	-7616(0xfffe240) # 9000000008006758 <argstr>
    return -1;
900000000800851c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0 || argaddr(2, &st) < 0 ||
9000000008008520:	6000c480 	blt	$r4,$r0,196(0xc4) # 90000000080085e4 <sys_fstatat+0x118>
9000000008008524:	02ff02c5 	addi.d	$r5,$r22,-64(0xfc0)
9000000008008528:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800852c:	57e1f7ff 	bl	-7692(0xfffe1f4) # 9000000008006720 <argaddr>
    return -1;
9000000008008530:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0 || argaddr(2, &st) < 0 ||
9000000008008534:	6000b080 	blt	$r4,$r0,176(0xb0) # 90000000080085e4 <sys_fstatat+0x118>
      argint(3, &flags) < 0)
9000000008008538:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
900000000800853c:	02800c04 	addi.w	$r4,$r0,3(0x3)
9000000008008540:	57e15fff 	bl	-7844(0xfffe15c) # 900000000800669c <argint>
    return -1;
9000000008008544:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(1, pathname, FAT32_MAX_FILENAME + 1) < 0 || argaddr(2, &st) < 0 ||
9000000008008548:	60009c80 	blt	$r4,$r0,156(0x9c) # 90000000080085e4 <sys_fstatat+0x118>
  struct proc *p = myproc();
900000000800854c:	5791dfff 	bl	-28196(0xfff91dc) # 9000000008001728 <myproc>
9000000008008550:	00150098 	move	$r24,$r4
  if (AT_FDCWD == fd)
9000000008008554:	28bf32cd 	ld.w	$r13,$r22,-52(0xfcc)
9000000008008558:	02be700c 	addi.w	$r12,$r0,-100(0xf9c)
900000000800855c:	5800b5ac 	beq	$r13,$r12,180(0xb4) # 9000000008008610 <sys_fstatat+0x144>
    if (pathname[0] != '/' && fp == NULL)
9000000008008560:	283b02cd 	ld.b	$r13,$r22,-320(0xec0)
9000000008008564:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008008568:	58009dac 	beq	$r13,$r12,156(0x9c) # 9000000008008604 <sys_fstatat+0x138>
900000000800856c:	28fae2d7 	ld.d	$r23,$r22,-328(0xeb8)
      return -24;
9000000008008570:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
    if (pathname[0] != '/' && fp == NULL)
9000000008008574:	400072e0 	beqz	$r23,112(0x70) # 90000000080085e4 <sys_fstatat+0x118>
    dp = fp ? fp->ep : NULL;
9000000008008578:	28c062f7 	ld.d	$r23,$r23,24(0x18)
    if (dp && !(dp->attribute & ATTR_DIRECTORY))
900000000800857c:	400016e0 	beqz	$r23,20(0x14) # 9000000008008590 <sys_fstatat+0xc4>
9000000008008580:	2a0402ed 	ld.bu	$r13,$r23,256(0x100)
9000000008008584:	00c411ad 	bstrpick.d	$r13,$r13,0x4,0x4
      return -1;
9000000008008588:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    if (dp && !(dp->attribute & ATTR_DIRECTORY))
900000000800858c:	400059a0 	beqz	$r13,88(0x58) # 90000000080085e4 <sys_fstatat+0x118>
  if (strncmp(pathname, "/dev/null", 9) == 0)
9000000008008590:	02802406 	addi.w	$r6,$r0,9(0x9)
9000000008008594:	1c000245 	pcaddu12i	$r5,18(0x12)
9000000008008598:	02f030a5 	addi.d	$r5,$r5,-1012(0xc0c)
900000000800859c:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
90000000080085a0:	578b17ff 	bl	-29932(0xfff8b14) # 90000000080010b4 <strncmp>
90000000080085a4:	00150099 	move	$r25,$r4
  ep = new_ename(dp, pathname);
90000000080085a8:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
90000000080085ac:	001502e4 	move	$r4,$r23
90000000080085b0:	54615000 	bl	24912(0x6150) # 900000000800e700 <new_ename>
90000000080085b4:	00150097 	move	$r23,$r4
  if (NULL == ep && t1 == -1)
90000000080085b8:	40006080 	beqz	$r4,96(0x60) # 9000000008008618 <sys_fstatat+0x14c>
  if (t1 == -1) {
90000000080085bc:	44006b20 	bnez	$r25,104(0x68) # 9000000008008624 <sys_fstatat+0x158>
    ekstat(ep, &kst);
90000000080085c0:	02f8e2c5 	addi.d	$r5,$r22,-456(0xe38)
90000000080085c4:	001502e4 	move	$r4,$r23
90000000080085c8:	54586800 	bl	22632(0x5868) # 900000000800de30 <ekstat>
  if (copyout(p->pagetable, st, (char *)&kst, sizeof(kst)) < 0)
90000000080085cc:	02820007 	addi.w	$r7,$r0,128(0x80)
90000000080085d0:	02f8e2c6 	addi.d	$r6,$r22,-456(0xe38)
90000000080085d4:	28ff02c5 	ld.d	$r5,$r22,-64(0xfc0)
90000000080085d8:	28c18304 	ld.d	$r4,$r24,96(0x60)
90000000080085dc:	57b8b3ff 	bl	-18256(0xfffb8b0) # 9000000008003e8c <copyout>
90000000080085e0:	0049fc8c 	srai.d	$r12,$r4,0x3f
}
90000000080085e4:	00150184 	move	$r4,$r12
90000000080085e8:	28c72061 	ld.d	$r1,$r3,456(0x1c8)
90000000080085ec:	28c70076 	ld.d	$r22,$r3,448(0x1c0)
90000000080085f0:	28c6e077 	ld.d	$r23,$r3,440(0x1b8)
90000000080085f4:	28c6c078 	ld.d	$r24,$r3,432(0x1b0)
90000000080085f8:	28c6a079 	ld.d	$r25,$r3,424(0x1a8)
90000000080085fc:	02c74063 	addi.d	$r3,$r3,464(0x1d0)
9000000008008600:	4c000020 	jirl	$r0,$r1,0
    dp = fp ? fp->ep : NULL;
9000000008008604:	28fae2d7 	ld.d	$r23,$r22,-328(0xeb8)
9000000008008608:	43ff8aff 	beqz	$r23,-120(0x7fff88) # 9000000008008590 <sys_fstatat+0xc4>
900000000800860c:	53ff6fff 	b	-148(0xfffff6c) # 9000000008008578 <sys_fstatat+0xac>
    dp = NULL;
9000000008008610:	00150017 	move	$r23,$r0
9000000008008614:	53ff7fff 	b	-132(0xfffff7c) # 9000000008008590 <sys_fstatat+0xc4>
    return -2;
9000000008008618:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
  if (NULL == ep && t1 == -1)
900000000800861c:	43ffa73f 	beqz	$r25,-92(0x7fffa4) # 90000000080085c0 <sys_fstatat+0xf4>
9000000008008620:	53ffc7ff 	b	-60(0xfffffc4) # 90000000080085e4 <sys_fstatat+0x118>
    elock(ep);
9000000008008624:	54555c00 	bl	21852(0x555c) # 900000000800db80 <elock>
    ekstat(ep, &kst);
9000000008008628:	02f8e2c5 	addi.d	$r5,$r22,-456(0xe38)
900000000800862c:	001502e4 	move	$r4,$r23
9000000008008630:	54580000 	bl	22528(0x5800) # 900000000800de30 <ekstat>
    eunlock(ep);
9000000008008634:	001502e4 	move	$r4,$r23
9000000008008638:	54558800 	bl	21896(0x5588) # 900000000800dbc0 <eunlock>
    eput(ep);
900000000800863c:	001502e4 	move	$r4,$r23
9000000008008640:	5455e400 	bl	21988(0x55e4) # 900000000800dc24 <eput>
9000000008008644:	53ff8bff 	b	-120(0xfffff88) # 90000000080085cc <sys_fstatat+0x100>

9000000008008648 <open>:
uint64 open(char *path, int omode) {
9000000008008648:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800864c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008008650:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008008654:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008008658:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800865c:	29c02079 	st.d	$r25,$r3,8(0x8)
9000000008008660:	29c0007a 	st.d	$r26,$r3,0
9000000008008664:	02c0c076 	addi.d	$r22,$r3,48(0x30)
9000000008008668:	001500b7 	move	$r23,$r5
  if (omode & O_CREATE) {
900000000800866c:	00c618ac 	bstrpick.d	$r12,$r5,0x6,0x6
9000000008008670:	4000ad80 	beqz	$r12,172(0xac) # 900000000800871c <open+0xd4>
    ep = create(path, T_FILE, omode);
9000000008008674:	001500a6 	move	$r6,$r5
9000000008008678:	02800805 	addi.w	$r5,$r0,2(0x2)
900000000800867c:	57f3e3ff 	bl	-3104(0xffff3e0) # 9000000008007a5c <create>
9000000008008680:	00150098 	move	$r24,$r4
      return -1;
9000000008008684:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
    if (ep == NULL) {
9000000008008688:	40007700 	beqz	$r24,116(0x74) # 90000000080086fc <open+0xb4>
  if ((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0) {
900000000800868c:	57c5b7ff 	bl	-14924(0xfffc5b4) # 9000000008004c40 <filealloc>
9000000008008690:	00150099 	move	$r25,$r4
9000000008008694:	4000dc80 	beqz	$r4,220(0xdc) # 9000000008008770 <open+0x128>
9000000008008698:	57f653ff 	bl	-2480(0xffff650) # 9000000008007ce8 <fdalloc>
900000000800869c:	0015009a 	move	$r26,$r4
90000000080086a0:	6000c880 	blt	$r4,$r0,200(0xc8) # 9000000008008768 <open+0x120>
  if (!(ep->attribute & ATTR_DIRECTORY) && (omode & O_TRUNC)) {
90000000080086a4:	2a04030c 	ld.bu	$r12,$r24,256(0x100)
90000000080086a8:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
90000000080086ac:	44000d80 	bnez	$r12,12(0xc) # 90000000080086b8 <open+0x70>
90000000080086b0:	00c926ec 	bstrpick.d	$r12,$r23,0x9,0x9
90000000080086b4:	4400a980 	bnez	$r12,168(0xa8) # 900000000800875c <open+0x114>
  f->type = FD_ENTRY;
90000000080086b8:	0280080c 	addi.w	$r12,$r0,2(0x2)
90000000080086bc:	2980032c 	st.w	$r12,$r25,0
  f->off = (omode & O_APPEND) ? ep->file_size : 0;
90000000080086c0:	00ca2aec 	bstrpick.d	$r12,$r23,0xa,0xa
90000000080086c4:	0015000d 	move	$r13,$r0
90000000080086c8:	40000980 	beqz	$r12,8(0x8) # 90000000080086d0 <open+0x88>
90000000080086cc:	2884230d 	ld.w	$r13,$r24,264(0x108)
90000000080086d0:	2980832d 	st.w	$r13,$r25,32(0x20)
  f->ep = ep;
90000000080086d4:	29c06338 	st.d	$r24,$r25,24(0x18)
  f->readable = !(omode & O_WRONLY);
90000000080086d8:	03c006ec 	xori	$r12,$r23,0x1
90000000080086dc:	0340058c 	andi	$r12,$r12,0x1
90000000080086e0:	2900232c 	st.b	$r12,$r25,8(0x8)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
90000000080086e4:	03400ef7 	andi	$r23,$r23,0x3
90000000080086e8:	0012dc17 	sltu	$r23,$r0,$r23
90000000080086ec:	29002737 	st.b	$r23,$r25,9(0x9)
  eunlock(ep);
90000000080086f0:	00150304 	move	$r4,$r24
90000000080086f4:	5454cc00 	bl	21708(0x54cc) # 900000000800dbc0 <eunlock>
  return fd;
90000000080086f8:	00150344 	move	$r4,$r26
}
90000000080086fc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008008700:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008008704:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008008708:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800870c:	28c02079 	ld.d	$r25,$r3,8(0x8)
9000000008008710:	28c0007a 	ld.d	$r26,$r3,0
9000000008008714:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008008718:	4c000020 	jirl	$r0,$r1,0
    if ((ep = ename(path)) == NULL) {
900000000800871c:	54601000 	bl	24592(0x6010) # 900000000800e72c <ename>
9000000008008720:	00150098 	move	$r24,$r4
      return -1;
9000000008008724:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
    if ((ep = ename(path)) == NULL) {
9000000008008728:	43ffd71f 	beqz	$r24,-44(0x7fffd4) # 90000000080086fc <open+0xb4>
    elock(ep);
900000000800872c:	00150304 	move	$r4,$r24
9000000008008730:	54545000 	bl	21584(0x5450) # 900000000800db80 <elock>
    if ((ep->attribute & ATTR_DIRECTORY) && omode != O_RDONLY) {
9000000008008734:	2a04030c 	ld.bu	$r12,$r24,256(0x100)
9000000008008738:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800873c:	43ff519f 	beqz	$r12,-176(0x7fff50) # 900000000800868c <open+0x44>
9000000008008740:	43ff4eff 	beqz	$r23,-180(0x7fff4c) # 900000000800868c <open+0x44>
      eunlock(ep);
9000000008008744:	00150304 	move	$r4,$r24
9000000008008748:	54547800 	bl	21624(0x5478) # 900000000800dbc0 <eunlock>
      eput(ep);
900000000800874c:	00150304 	move	$r4,$r24
9000000008008750:	5454d400 	bl	21716(0x54d4) # 900000000800dc24 <eput>
      return -1;
9000000008008754:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008008758:	53ffa7ff 	b	-92(0xfffffa4) # 90000000080086fc <open+0xb4>
    etrunc(ep);
900000000800875c:	00150304 	move	$r4,$r24
9000000008008760:	54528c00 	bl	21132(0x528c) # 900000000800d9ec <etrunc>
9000000008008764:	53ff57ff 	b	-172(0xfffff54) # 90000000080086b8 <open+0x70>
      fileclose(f);
9000000008008768:	00150324 	move	$r4,$r25
900000000800876c:	57c5dfff 	bl	-14884(0xfffc5dc) # 9000000008004d48 <fileclose>
    eunlock(ep);
9000000008008770:	00150304 	move	$r4,$r24
9000000008008774:	54544c00 	bl	21580(0x544c) # 900000000800dbc0 <eunlock>
    eput(ep);
9000000008008778:	00150304 	move	$r4,$r24
900000000800877c:	5454a800 	bl	21672(0x54a8) # 900000000800dc24 <eput>
    return -1;
9000000008008780:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008008784:	53ff7bff 	b	-136(0xfffff78) # 90000000080086fc <open+0xb4>

9000000008008788 <sys_open>:
uint64 sys_open(void) {
9000000008008788:	02fb8063 	addi.d	$r3,$r3,-288(0xee0)
900000000800878c:	29c46061 	st.d	$r1,$r3,280(0x118)
9000000008008790:	29c44076 	st.d	$r22,$r3,272(0x110)
9000000008008794:	02c48076 	addi.d	$r22,$r3,288(0x120)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argint(1, &omode) < 0)
9000000008008798:	02841006 	addi.w	$r6,$r0,260(0x104)
900000000800879c:	02fba2c5 	addi.d	$r5,$r22,-280(0xee8)
90000000080087a0:	00150004 	move	$r4,$r0
90000000080087a4:	57dfb7ff 	bl	-8268(0xfffdfb4) # 9000000008006758 <argstr>
    return -1;
90000000080087a8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argint(1, &omode) < 0)
90000000080087ac:	60002880 	blt	$r4,$r0,40(0x28) # 90000000080087d4 <sys_open+0x4c>
90000000080087b0:	02fb92c5 	addi.d	$r5,$r22,-284(0xee4)
90000000080087b4:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080087b8:	57dee7ff 	bl	-8476(0xfffdee4) # 900000000800669c <argint>
    return -1;
90000000080087bc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argint(1, &omode) < 0)
90000000080087c0:	60001480 	blt	$r4,$r0,20(0x14) # 90000000080087d4 <sys_open+0x4c>
  return open(path, omode);
90000000080087c4:	28bb92c5 	ld.w	$r5,$r22,-284(0xee4)
90000000080087c8:	02fba2c4 	addi.d	$r4,$r22,-280(0xee8)
90000000080087cc:	57fe7fff 	bl	-388(0xffffe7c) # 9000000008008648 <open>
90000000080087d0:	0015008c 	move	$r12,$r4
}
90000000080087d4:	00150184 	move	$r4,$r12
90000000080087d8:	28c46061 	ld.d	$r1,$r3,280(0x118)
90000000080087dc:	28c44076 	ld.d	$r22,$r3,272(0x110)
90000000080087e0:	02c48063 	addi.d	$r3,$r3,288(0x120)
90000000080087e4:	4c000020 	jirl	$r0,$r1,0

90000000080087e8 <sys_mkdir>:
uint64 sys_mkdir(void) {
90000000080087e8:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
90000000080087ec:	29c4a061 	st.d	$r1,$r3,296(0x128)
90000000080087f0:	29c48076 	st.d	$r22,$r3,288(0x120)
90000000080087f4:	29c46077 	st.d	$r23,$r3,280(0x118)
90000000080087f8:	02c4c076 	addi.d	$r22,$r3,304(0x130)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 ||
90000000080087fc:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008008800:	02fb62c5 	addi.d	$r5,$r22,-296(0xed8)
9000000008008804:	00150004 	move	$r4,$r0
9000000008008808:	57df53ff 	bl	-8368(0xfffdf50) # 9000000008006758 <argstr>
    return -1;
900000000800880c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 ||
9000000008008810:	60003080 	blt	$r4,$r0,48(0x30) # 9000000008008840 <sys_mkdir+0x58>
      (ep = create(path, T_DIR, 0)) == 0) {
9000000008008814:	00150006 	move	$r6,$r0
9000000008008818:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800881c:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008008820:	57f23fff 	bl	-3524(0xffff23c) # 9000000008007a5c <create>
9000000008008824:	00150097 	move	$r23,$r4
    return -1;
9000000008008828:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 ||
900000000800882c:	40001480 	beqz	$r4,20(0x14) # 9000000008008840 <sys_mkdir+0x58>
  eunlock(ep);
9000000008008830:	54539000 	bl	21392(0x5390) # 900000000800dbc0 <eunlock>
  eput(ep);
9000000008008834:	001502e4 	move	$r4,$r23
9000000008008838:	5453ec00 	bl	21484(0x53ec) # 900000000800dc24 <eput>
  return 0;
900000000800883c:	0015000c 	move	$r12,$r0
}
9000000008008840:	00150184 	move	$r4,$r12
9000000008008844:	28c4a061 	ld.d	$r1,$r3,296(0x128)
9000000008008848:	28c48076 	ld.d	$r22,$r3,288(0x120)
900000000800884c:	28c46077 	ld.d	$r23,$r3,280(0x118)
9000000008008850:	02c4c063 	addi.d	$r3,$r3,304(0x130)
9000000008008854:	4c000020 	jirl	$r0,$r1,0

9000000008008858 <sys_chdir>:
uint64 sys_chdir(void) {
9000000008008858:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
900000000800885c:	29c4a061 	st.d	$r1,$r3,296(0x128)
9000000008008860:	29c48076 	st.d	$r22,$r3,288(0x120)
9000000008008864:	29c46077 	st.d	$r23,$r3,280(0x118)
9000000008008868:	29c44078 	st.d	$r24,$r3,272(0x110)
900000000800886c:	02c4c076 	addi.d	$r22,$r3,304(0x130)
  struct proc *p = myproc();
9000000008008870:	578ebbff 	bl	-29000(0xfff8eb8) # 9000000008001728 <myproc>
9000000008008874:	00150098 	move	$r24,$r4
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || (ep = ename(path)) == NULL) {
9000000008008878:	02841006 	addi.w	$r6,$r0,260(0x104)
900000000800887c:	02fb62c5 	addi.d	$r5,$r22,-296(0xed8)
9000000008008880:	00150004 	move	$r4,$r0
9000000008008884:	57ded7ff 	bl	-8492(0xfffded4) # 9000000008006758 <argstr>
    return -1;
9000000008008888:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || (ep = ename(path)) == NULL) {
900000000800888c:	60004080 	blt	$r4,$r0,64(0x40) # 90000000080088cc <sys_chdir+0x74>
9000000008008890:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008008894:	545e9800 	bl	24216(0x5e98) # 900000000800e72c <ename>
9000000008008898:	00150097 	move	$r23,$r4
    return -1;
900000000800889c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || (ep = ename(path)) == NULL) {
90000000080088a0:	40002c80 	beqz	$r4,44(0x2c) # 90000000080088cc <sys_chdir+0x74>
  elock(ep);
90000000080088a4:	5452dc00 	bl	21212(0x52dc) # 900000000800db80 <elock>
  if (!(ep->attribute & ATTR_DIRECTORY)) {
90000000080088a8:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
90000000080088ac:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
90000000080088b0:	40003980 	beqz	$r12,56(0x38) # 90000000080088e8 <sys_chdir+0x90>
  eunlock(ep);
90000000080088b4:	001502e4 	move	$r4,$r23
90000000080088b8:	54530800 	bl	21256(0x5308) # 900000000800dbc0 <eunlock>
  eput(p->cwd);
90000000080088bc:	28d38304 	ld.d	$r4,$r24,1248(0x4e0)
90000000080088c0:	54536400 	bl	21348(0x5364) # 900000000800dc24 <eput>
  p->cwd = ep;
90000000080088c4:	29d38317 	st.d	$r23,$r24,1248(0x4e0)
  return 0;
90000000080088c8:	0015000c 	move	$r12,$r0
}
90000000080088cc:	00150184 	move	$r4,$r12
90000000080088d0:	28c4a061 	ld.d	$r1,$r3,296(0x128)
90000000080088d4:	28c48076 	ld.d	$r22,$r3,288(0x120)
90000000080088d8:	28c46077 	ld.d	$r23,$r3,280(0x118)
90000000080088dc:	28c44078 	ld.d	$r24,$r3,272(0x110)
90000000080088e0:	02c4c063 	addi.d	$r3,$r3,304(0x130)
90000000080088e4:	4c000020 	jirl	$r0,$r1,0
    eunlock(ep);
90000000080088e8:	001502e4 	move	$r4,$r23
90000000080088ec:	5452d400 	bl	21204(0x52d4) # 900000000800dbc0 <eunlock>
    eput(ep);
90000000080088f0:	001502e4 	move	$r4,$r23
90000000080088f4:	54533000 	bl	21296(0x5330) # 900000000800dc24 <eput>
    return -1;
90000000080088f8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000080088fc:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080088cc <sys_chdir+0x74>

9000000008008900 <sys_pipe>:
uint64 sys_pipe(void) {
9000000008008900:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008008904:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008008908:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800890c:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008008910:	02c10076 	addi.d	$r22,$r3,64(0x40)
  struct proc *p = myproc();
9000000008008914:	578e17ff 	bl	-29164(0xfff8e14) # 9000000008001728 <myproc>
9000000008008918:	00150097 	move	$r23,$r4
  if (argaddr(0, &fdarray) < 0)
900000000800891c:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008920:	00150004 	move	$r4,$r0
9000000008008924:	57ddffff 	bl	-8708(0xfffddfc) # 9000000008006720 <argaddr>
    return -1;
9000000008008928:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &fdarray) < 0)
900000000800892c:	6000e480 	blt	$r4,$r0,228(0xe4) # 9000000008008a10 <sys_pipe+0x110>
  if (pipealloc(&rf, &wf) < 0)
9000000008008930:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
9000000008008934:	02ff42c4 	addi.d	$r4,$r22,-48(0xfd0)
9000000008008938:	542f9000 	bl	12176(0x2f90) # 900000000800b8c8 <pipealloc>
    return -1;
900000000800893c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (pipealloc(&rf, &wf) < 0)
9000000008008940:	6000d080 	blt	$r4,$r0,208(0xd0) # 9000000008008a10 <sys_pipe+0x110>
  printf("pip get arg success\n");
9000000008008944:	1c000244 	pcaddu12i	$r4,18(0x12)
9000000008008948:	02e1b084 	addi.d	$r4,$r4,-1940(0x86c)
900000000800894c:	57792bff 	bl	-34520(0xfff7928) # 9000000008000274 <printf>
  fd0 = -1;
9000000008008950:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008008954:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
  if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
9000000008008958:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
900000000800895c:	57f38fff 	bl	-3188(0xffff38c) # 9000000008007ce8 <fdalloc>
9000000008008960:	29bf12c4 	st.w	$r4,$r22,-60(0xfc4)
9000000008008964:	60008c80 	blt	$r4,$r0,140(0x8c) # 90000000080089f0 <sys_pipe+0xf0>
9000000008008968:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
900000000800896c:	57f37fff 	bl	-3204(0xffff37c) # 9000000008007ce8 <fdalloc>
9000000008008970:	29bf02c4 	st.w	$r4,$r22,-64(0xfc0)
9000000008008974:	60006c80 	blt	$r4,$r0,108(0x6c) # 90000000080089e0 <sys_pipe+0xe0>
  if (copyout(p->pagetable, fdarray, (char *)&fd0, sizeof(fd0)) < 0 ||
9000000008008978:	02801007 	addi.w	$r7,$r0,4(0x4)
900000000800897c:	02ff12c6 	addi.d	$r6,$r22,-60(0xfc4)
9000000008008980:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000008008984:	28c182e4 	ld.d	$r4,$r23,96(0x60)
9000000008008988:	57b507ff 	bl	-19196(0xfffb504) # 9000000008003e8c <copyout>
900000000800898c:	60002480 	blt	$r4,$r0,36(0x24) # 90000000080089b0 <sys_pipe+0xb0>
      copyout(p->pagetable, fdarray + sizeof(fd0), (char *)&fd1, sizeof(fd1)) <
9000000008008990:	02801007 	addi.w	$r7,$r0,4(0x4)
9000000008008994:	02ff02c6 	addi.d	$r6,$r22,-64(0xfc0)
9000000008008998:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000800899c:	02c010a5 	addi.d	$r5,$r5,4(0x4)
90000000080089a0:	28c182e4 	ld.d	$r4,$r23,96(0x60)
90000000080089a4:	57b4ebff 	bl	-19224(0xfffb4e8) # 9000000008003e8c <copyout>
  return 0;
90000000080089a8:	0015000c 	move	$r12,$r0
  if (copyout(p->pagetable, fdarray, (char *)&fd0, sizeof(fd0)) < 0 ||
90000000080089ac:	64006480 	bge	$r4,$r0,100(0x64) # 9000000008008a10 <sys_pipe+0x110>
    p->ofile[fd0] = 0;
90000000080089b0:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
90000000080089b4:	002d5d8c 	alsl.d	$r12,$r12,$r23,0x3
90000000080089b8:	29c36180 	st.d	$r0,$r12,216(0xd8)
    p->ofile[fd1] = 0;
90000000080089bc:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
90000000080089c0:	002d5d97 	alsl.d	$r23,$r12,$r23,0x3
90000000080089c4:	29c362e0 	st.d	$r0,$r23,216(0xd8)
    fileclose(rf);
90000000080089c8:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
90000000080089cc:	57c37fff 	bl	-15492(0xfffc37c) # 9000000008004d48 <fileclose>
    fileclose(wf);
90000000080089d0:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000080089d4:	57c377ff 	bl	-15500(0xfffc374) # 9000000008004d48 <fileclose>
    return -1;
90000000080089d8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
90000000080089dc:	50003400 	b	52(0x34) # 9000000008008a10 <sys_pipe+0x110>
    if (fd0 >= 0)
90000000080089e0:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
90000000080089e4:	60000d80 	blt	$r12,$r0,12(0xc) # 90000000080089f0 <sys_pipe+0xf0>
      p->ofile[fd0] = 0;
90000000080089e8:	002d5d97 	alsl.d	$r23,$r12,$r23,0x3
90000000080089ec:	29c362e0 	st.d	$r0,$r23,216(0xd8)
    fileclose(rf);
90000000080089f0:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
90000000080089f4:	57c357ff 	bl	-15532(0xfffc354) # 9000000008004d48 <fileclose>
    fileclose(wf);
90000000080089f8:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
90000000080089fc:	57c34fff 	bl	-15540(0xfffc34c) # 9000000008004d48 <fileclose>
    printf("pip fdalloc fail\n");
9000000008008a00:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008008a04:	02df2084 	addi.d	$r4,$r4,1992(0x7c8)
9000000008008a08:	57786fff 	bl	-34708(0xfff786c) # 9000000008000274 <printf>
    return -1;
9000000008008a0c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
}
9000000008008a10:	00150184 	move	$r4,$r12
9000000008008a14:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008008a18:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008008a1c:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008008a20:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008008a24:	4c000020 	jirl	$r0,$r1,0

9000000008008a28 <sys_pipe2>:
uint64 sys_pipe2(void) {
9000000008008a28:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008008a2c:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008008a30:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008008a34:	29c0a077 	st.d	$r23,$r3,40(0x28)
9000000008008a38:	02c10076 	addi.d	$r22,$r3,64(0x40)
  struct proc *p = myproc();
9000000008008a3c:	578cefff 	bl	-29460(0xfff8cec) # 9000000008001728 <myproc>
9000000008008a40:	00150097 	move	$r23,$r4
  if (argaddr(0, &fdarray) < 0)
9000000008008a44:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008a48:	00150004 	move	$r4,$r0
9000000008008a4c:	57dcd7ff 	bl	-9004(0xfffdcd4) # 9000000008006720 <argaddr>
    return -1;
9000000008008a50:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &fdarray) < 0)
9000000008008a54:	6000cc80 	blt	$r4,$r0,204(0xcc) # 9000000008008b20 <sys_pipe2+0xf8>
  if (pipealloc(&rf, &wf) < 0)
9000000008008a58:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
9000000008008a5c:	02ff42c4 	addi.d	$r4,$r22,-48(0xfd0)
9000000008008a60:	542e6800 	bl	11880(0x2e68) # 900000000800b8c8 <pipealloc>
    return -1;
9000000008008a64:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (pipealloc(&rf, &wf) < 0)
9000000008008a68:	6000b880 	blt	$r4,$r0,184(0xb8) # 9000000008008b20 <sys_pipe2+0xf8>
  fd0 = -1;
9000000008008a6c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008008a70:	29bf12cc 	st.w	$r12,$r22,-60(0xfc4)
  if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
9000000008008a74:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000008008a78:	57f273ff 	bl	-3472(0xffff270) # 9000000008007ce8 <fdalloc>
9000000008008a7c:	29bf12c4 	st.w	$r4,$r22,-60(0xfc4)
9000000008008a80:	60008c80 	blt	$r4,$r0,140(0x8c) # 9000000008008b0c <sys_pipe2+0xe4>
9000000008008a84:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000008008a88:	57f263ff 	bl	-3488(0xffff260) # 9000000008007ce8 <fdalloc>
9000000008008a8c:	29bf02c4 	st.w	$r4,$r22,-64(0xfc0)
9000000008008a90:	60006c80 	blt	$r4,$r0,108(0x6c) # 9000000008008afc <sys_pipe2+0xd4>
  if (copyout(p->pagetable, fdarray, (char *)&fd0, sizeof(fd0)) < 0 ||
9000000008008a94:	02801007 	addi.w	$r7,$r0,4(0x4)
9000000008008a98:	02ff12c6 	addi.d	$r6,$r22,-60(0xfc4)
9000000008008a9c:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000008008aa0:	28c182e4 	ld.d	$r4,$r23,96(0x60)
9000000008008aa4:	57b3ebff 	bl	-19480(0xfffb3e8) # 9000000008003e8c <copyout>
9000000008008aa8:	60002480 	blt	$r4,$r0,36(0x24) # 9000000008008acc <sys_pipe2+0xa4>
      copyout(p->pagetable, fdarray + sizeof(fd0), (char *)&fd1, sizeof(fd1)) <
9000000008008aac:	02801007 	addi.w	$r7,$r0,4(0x4)
9000000008008ab0:	02ff02c6 	addi.d	$r6,$r22,-64(0xfc0)
9000000008008ab4:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
9000000008008ab8:	02c010a5 	addi.d	$r5,$r5,4(0x4)
9000000008008abc:	28c182e4 	ld.d	$r4,$r23,96(0x60)
9000000008008ac0:	57b3cfff 	bl	-19508(0xfffb3cc) # 9000000008003e8c <copyout>
  return 0;
9000000008008ac4:	0015000c 	move	$r12,$r0
  if (copyout(p->pagetable, fdarray, (char *)&fd0, sizeof(fd0)) < 0 ||
9000000008008ac8:	64005880 	bge	$r4,$r0,88(0x58) # 9000000008008b20 <sys_pipe2+0xf8>
    p->ofile[fd0] = 0;
9000000008008acc:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000008008ad0:	002d5d8c 	alsl.d	$r12,$r12,$r23,0x3
9000000008008ad4:	29c36180 	st.d	$r0,$r12,216(0xd8)
    p->ofile[fd1] = 0;
9000000008008ad8:	28bf02cc 	ld.w	$r12,$r22,-64(0xfc0)
9000000008008adc:	002d5d97 	alsl.d	$r23,$r12,$r23,0x3
9000000008008ae0:	29c362e0 	st.d	$r0,$r23,216(0xd8)
    fileclose(rf);
9000000008008ae4:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000008008ae8:	57c263ff 	bl	-15776(0xfffc260) # 9000000008004d48 <fileclose>
    fileclose(wf);
9000000008008aec:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000008008af0:	57c25bff 	bl	-15784(0xfffc258) # 9000000008004d48 <fileclose>
    return -1;
9000000008008af4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008008af8:	50002800 	b	40(0x28) # 9000000008008b20 <sys_pipe2+0xf8>
    if (fd0 >= 0)
9000000008008afc:	28bf12cc 	ld.w	$r12,$r22,-60(0xfc4)
9000000008008b00:	60000d80 	blt	$r12,$r0,12(0xc) # 9000000008008b0c <sys_pipe2+0xe4>
      p->ofile[fd0] = 0;
9000000008008b04:	002d5d97 	alsl.d	$r23,$r12,$r23,0x3
9000000008008b08:	29c362e0 	st.d	$r0,$r23,216(0xd8)
    fileclose(rf);
9000000008008b0c:	28ff42c4 	ld.d	$r4,$r22,-48(0xfd0)
9000000008008b10:	57c23bff 	bl	-15816(0xfffc238) # 9000000008004d48 <fileclose>
    fileclose(wf);
9000000008008b14:	28ff22c4 	ld.d	$r4,$r22,-56(0xfc8)
9000000008008b18:	57c233ff 	bl	-15824(0xfffc230) # 9000000008004d48 <fileclose>
    return -1;
9000000008008b1c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
}
9000000008008b20:	00150184 	move	$r4,$r12
9000000008008b24:	28c0e061 	ld.d	$r1,$r3,56(0x38)
9000000008008b28:	28c0c076 	ld.d	$r22,$r3,48(0x30)
9000000008008b2c:	28c0a077 	ld.d	$r23,$r3,40(0x28)
9000000008008b30:	02c10063 	addi.d	$r3,$r3,64(0x40)
9000000008008b34:	4c000020 	jirl	$r0,$r1,0

9000000008008b38 <sys_dev>:
uint64 sys_dev(void) {
9000000008008b38:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008008b3c:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008008b40:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008008b44:	29c06077 	st.d	$r23,$r3,24(0x18)
9000000008008b48:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  if (argint(0, &omode) < 0 || argint(1, &major) < 0 || argint(2, &minor) < 0) {
9000000008008b4c:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
9000000008008b50:	00150004 	move	$r4,$r0
9000000008008b54:	57db4bff 	bl	-9400(0xfffdb48) # 900000000800669c <argint>
9000000008008b58:	6000a080 	blt	$r4,$r0,160(0xa0) # 9000000008008bf8 <sys_dev+0xc0>
9000000008008b5c:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008b60:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008b64:	57db3bff 	bl	-9416(0xfffdb38) # 900000000800669c <argint>
9000000008008b68:	6000a880 	blt	$r4,$r0,168(0xa8) # 9000000008008c10 <sys_dev+0xd8>
9000000008008b6c:	02ff52c5 	addi.d	$r5,$r22,-44(0xfd4)
9000000008008b70:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008008b74:	57db2bff 	bl	-9432(0xfffdb28) # 900000000800669c <argint>
9000000008008b78:	6000a080 	blt	$r4,$r0,160(0xa0) # 9000000008008c18 <sys_dev+0xe0>
  if (omode & O_CREATE) {
9000000008008b7c:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000008008b80:	00c6198c 	bstrpick.d	$r12,$r12,0x6,0x6
9000000008008b84:	44006980 	bnez	$r12,104(0x68) # 9000000008008bec <sys_dev+0xb4>
  if (major < 0 || major >= NDEV)
9000000008008b88:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
9000000008008b8c:	0280240c 	addi.w	$r12,$r0,9(0x9)
    return -1;
9000000008008b90:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (major < 0 || major >= NDEV)
9000000008008b94:	6800698d 	bltu	$r12,$r13,104(0x68) # 9000000008008bfc <sys_dev+0xc4>
  if ((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0) {
9000000008008b98:	57c0abff 	bl	-16216(0xfffc0a8) # 9000000008004c40 <filealloc>
9000000008008b9c:	00150097 	move	$r23,$r4
    return -1;
9000000008008ba0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if ((f = filealloc()) == NULL || (fd = fdalloc(f)) < 0) {
9000000008008ba4:	40005ae0 	beqz	$r23,88(0x58) # 9000000008008bfc <sys_dev+0xc4>
9000000008008ba8:	001502e4 	move	$r4,$r23
9000000008008bac:	57f13fff 	bl	-3780(0xffff13c) # 9000000008007ce8 <fdalloc>
9000000008008bb0:	60007080 	blt	$r4,$r0,112(0x70) # 9000000008008c20 <sys_dev+0xe8>
  f->type = FD_DEVICE;
9000000008008bb4:	02800c0c 	addi.w	$r12,$r0,3(0x3)
9000000008008bb8:	298002ec 	st.w	$r12,$r23,0
  f->off = 0;
9000000008008bbc:	298082e0 	st.w	$r0,$r23,32(0x20)
  f->ep = 0;
9000000008008bc0:	29c062e0 	st.d	$r0,$r23,24(0x18)
  f->major = major;
9000000008008bc4:	28bf62cc 	ld.w	$r12,$r22,-40(0xfd8)
9000000008008bc8:	294092ec 	st.h	$r12,$r23,36(0x24)
  f->readable = !(omode & O_WRONLY);
9000000008008bcc:	28bf72cc 	ld.w	$r12,$r22,-36(0xfdc)
9000000008008bd0:	03c0058d 	xori	$r13,$r12,0x1
9000000008008bd4:	034005ad 	andi	$r13,$r13,0x1
9000000008008bd8:	290022ed 	st.b	$r13,$r23,8(0x8)
  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
9000000008008bdc:	03400d8c 	andi	$r12,$r12,0x3
9000000008008be0:	0012b00c 	sltu	$r12,$r0,$r12
9000000008008be4:	290026ec 	st.b	$r12,$r23,9(0x9)
  return fd;
9000000008008be8:	50001400 	b	20(0x14) # 9000000008008bfc <sys_dev+0xc4>
    panic("dev file on FAT");
9000000008008bec:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008008bf0:	02d7d084 	addi.d	$r4,$r4,1524(0x5f4)
9000000008008bf4:	577613ff 	bl	-35312(0xfff7610) # 9000000008000204 <panic>
    return -1;
9000000008008bf8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
9000000008008bfc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008008c00:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008008c04:	28c06077 	ld.d	$r23,$r3,24(0x18)
9000000008008c08:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008008c0c:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008008c10:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008008c14:	53ffebff 	b	-24(0xfffffe8) # 9000000008008bfc <sys_dev+0xc4>
9000000008008c18:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008008c1c:	53ffe3ff 	b	-32(0xfffffe0) # 9000000008008bfc <sys_dev+0xc4>
      fileclose(f);
9000000008008c20:	001502e4 	move	$r4,$r23
9000000008008c24:	57c127ff 	bl	-16092(0xfffc124) # 9000000008004d48 <fileclose>
    return -1;
9000000008008c28:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008008c2c:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008008bfc <sys_dev+0xc4>

9000000008008c30 <sys_readdir>:
uint64 sys_readdir(void) {
9000000008008c30:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008008c34:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008008c38:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008008c3c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0)
9000000008008c40:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
9000000008008c44:	00150005 	move	$r5,$r0
9000000008008c48:	00150004 	move	$r4,$r0
9000000008008c4c:	57efd3ff 	bl	-4144(0xfffefd0) # 9000000008007c1c <argfd>
    return -1;
9000000008008c50:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0)
9000000008008c54:	60002880 	blt	$r4,$r0,40(0x28) # 9000000008008c7c <sys_readdir+0x4c>
9000000008008c58:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008008c5c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008c60:	57dac3ff 	bl	-9536(0xfffdac0) # 9000000008006720 <argaddr>
    return -1;
9000000008008c64:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, 0, &f) < 0 || argaddr(1, &p) < 0)
9000000008008c68:	60001480 	blt	$r4,$r0,20(0x14) # 9000000008008c7c <sys_readdir+0x4c>
  return dirnext(f, p);
9000000008008c6c:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000008008c70:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000008008c74:	57c93fff 	bl	-14020(0xfffc93c) # 90000000080055b0 <dirnext>
9000000008008c78:	0015008c 	move	$r12,$r4
}
9000000008008c7c:	00150184 	move	$r4,$r12
9000000008008c80:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008008c84:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008008c88:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008008c8c:	4c000020 	jirl	$r0,$r1,0

9000000008008c90 <sys_getcwd>:
uint64 sys_getcwd(void) {
9000000008008c90:	02fac063 	addi.d	$r3,$r3,-336(0xeb0)
9000000008008c94:	29c52061 	st.d	$r1,$r3,328(0x148)
9000000008008c98:	29c50076 	st.d	$r22,$r3,320(0x140)
9000000008008c9c:	29c4e077 	st.d	$r23,$r3,312(0x138)
9000000008008ca0:	29c4c078 	st.d	$r24,$r3,304(0x130)
9000000008008ca4:	29c4a079 	st.d	$r25,$r3,296(0x128)
9000000008008ca8:	29c4807a 	st.d	$r26,$r3,288(0x120)
9000000008008cac:	29c4607b 	st.d	$r27,$r3,280(0x118)
9000000008008cb0:	02c54076 	addi.d	$r22,$r3,336(0x150)
  if (argaddr(0, &addr) < 0)
9000000008008cb4:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
9000000008008cb8:	00150004 	move	$r4,$r0
9000000008008cbc:	57da67ff 	bl	-9628(0xfffda64) # 9000000008006720 <argaddr>
    return -1;
9000000008008cc0:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &addr) < 0)
9000000008008cc4:	60009880 	blt	$r4,$r0,152(0x98) # 9000000008008d5c <sys_getcwd+0xcc>
  struct dirent *de = myproc()->cwd;
9000000008008cc8:	578a63ff 	bl	-30112(0xfff8a60) # 9000000008001728 <myproc>
9000000008008ccc:	28d38097 	ld.d	$r23,$r4,1248(0x4e0)
  if (de->parent == NULL) {
9000000008008cd0:	28c482ec 	ld.d	$r12,$r23,288(0x120)
9000000008008cd4:	4000b180 	beqz	$r12,176(0xb0) # 9000000008008d84 <sys_getcwd+0xf4>
    *s = '\0';
9000000008008cd8:	293ecec0 	st.b	$r0,$r22,-77(0xfb3)
    s = path + FAT32_MAX_PATH - 1;
9000000008008cdc:	02feced9 	addi.d	$r25,$r22,-77(0xfb3)
      if (s <= path) // can't reach root "/"
9000000008008ce0:	02fac2da 	addi.d	$r26,$r22,-336(0xeb0)
      *--s = '/';
9000000008008ce4:	0280bc1b 	addi.w	$r27,$r0,47(0x2f)
      len = strlen(de->filename);
9000000008008ce8:	001502e4 	move	$r4,$r23
9000000008008cec:	5784efff 	bl	-31508(0xfff84ec) # 90000000080011d8 <strlen>
      s -= len;
9000000008008cf0:	00119338 	sub.d	$r24,$r25,$r4
      if (s <= path) // can't reach root "/"
9000000008008cf4:	6c009f58 	bgeu	$r26,$r24,156(0x9c) # 9000000008008d90 <sys_getcwd+0x100>
      strncpy(s, de->filename, len);
9000000008008cf8:	00150086 	move	$r6,$r4
9000000008008cfc:	001502e5 	move	$r5,$r23
9000000008008d00:	00150304 	move	$r4,$r24
9000000008008d04:	578427ff 	bl	-31708(0xfff8424) # 9000000008001128 <strncpy>
      *--s = '/';
9000000008008d08:	02ffff19 	addi.d	$r25,$r24,-1(0xfff)
9000000008008d0c:	293fff1b 	st.b	$r27,$r24,-1(0xfff)
      de = de->parent;
9000000008008d10:	28c482f7 	ld.d	$r23,$r23,288(0x120)
    while (de->parent) {
9000000008008d14:	28c482ec 	ld.d	$r12,$r23,288(0x120)
9000000008008d18:	47ffd19f 	bnez	$r12,-48(0x7fffd0) # 9000000008008ce8 <sys_getcwd+0x58>
  if (copyout(myproc()->pagetable, addr, s, strlen(s) + 1) < 0)
9000000008008d1c:	578a0fff 	bl	-30196(0xfff8a0c) # 9000000008001728 <myproc>
9000000008008d20:	28c18097 	ld.d	$r23,$r4,96(0x60)
9000000008008d24:	28fee2d8 	ld.d	$r24,$r22,-72(0xfb8)
9000000008008d28:	00150324 	move	$r4,$r25
9000000008008d2c:	5784afff 	bl	-31572(0xfff84ac) # 90000000080011d8 <strlen>
9000000008008d30:	02800487 	addi.w	$r7,$r4,1(0x1)
9000000008008d34:	00150326 	move	$r6,$r25
9000000008008d38:	00150305 	move	$r5,$r24
9000000008008d3c:	001502e4 	move	$r4,$r23
9000000008008d40:	57b14fff 	bl	-20148(0xfffb14c) # 9000000008003e8c <copyout>
  return addr;
9000000008008d44:	02000084 	slti	$r4,$r4,0
9000000008008d48:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
9000000008008d4c:	0013918c 	masknez	$r12,$r12,$r4
9000000008008d50:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
9000000008008d54:	001311a4 	maskeqz	$r4,$r13,$r4
9000000008008d58:	0015118c 	or	$r12,$r12,$r4
}
9000000008008d5c:	00150184 	move	$r4,$r12
9000000008008d60:	28c52061 	ld.d	$r1,$r3,328(0x148)
9000000008008d64:	28c50076 	ld.d	$r22,$r3,320(0x140)
9000000008008d68:	28c4e077 	ld.d	$r23,$r3,312(0x138)
9000000008008d6c:	28c4c078 	ld.d	$r24,$r3,304(0x130)
9000000008008d70:	28c4a079 	ld.d	$r25,$r3,296(0x128)
9000000008008d74:	28c4807a 	ld.d	$r26,$r3,288(0x120)
9000000008008d78:	28c4607b 	ld.d	$r27,$r3,280(0x118)
9000000008008d7c:	02c54063 	addi.d	$r3,$r3,336(0x150)
9000000008008d80:	4c000020 	jirl	$r0,$r1,0
    s = "/";
9000000008008d84:	1c000199 	pcaddu12i	$r25,12(0xc)
9000000008008d88:	02ceb339 	addi.d	$r25,$r25,940(0x3ac)
9000000008008d8c:	53ff93ff 	b	-112(0xfffff90) # 9000000008008d1c <sys_getcwd+0x8c>
        return -1;
9000000008008d90:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008008d94:	53ffcbff 	b	-56(0xfffffc8) # 9000000008008d5c <sys_getcwd+0xcc>

9000000008008d98 <sys_unlinkat>:

// 只考虑sys_unlinkat(AT_FDCWD, path, 0);借鉴sys_remove
uint64 sys_unlinkat(void) {
9000000008008d98:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
9000000008008d9c:	29c4a061 	st.d	$r1,$r3,296(0x128)
9000000008008da0:	29c48076 	st.d	$r22,$r3,288(0x120)
9000000008008da4:	29c46077 	st.d	$r23,$r3,280(0x118)
9000000008008da8:	29c44078 	st.d	$r24,$r3,272(0x110)
9000000008008dac:	02c4c076 	addi.d	$r22,$r3,304(0x130)
  char path[FAT32_MAX_PATH];
  struct dirent *ep;
  int len;
  if ((len = argstr(1, path, FAT32_MAX_PATH)) <= 0)
9000000008008db0:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008008db4:	02fb62c5 	addi.d	$r5,$r22,-296(0xed8)
9000000008008db8:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008dbc:	57d99fff 	bl	-9828(0xfffd99c) # 9000000008006758 <argstr>
9000000008008dc0:	0015008d 	move	$r13,$r4
    return -1;
9000000008008dc4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if ((len = argstr(1, path, FAT32_MAX_PATH)) <= 0)
9000000008008dc8:	6400d00d 	bge	$r0,$r13,208(0xd0) # 9000000008008e98 <sys_unlinkat+0x100>

  char *s = path + len - 1;
9000000008008dcc:	02fb62cc 	addi.d	$r12,$r22,-296(0xed8)
9000000008008dd0:	02fffdad 	addi.d	$r13,$r13,-1(0xfff)
9000000008008dd4:	0010b58d 	add.d	$r13,$r12,$r13
  while (s >= path && *s == '/') {
9000000008008dd8:	68003dac 	bltu	$r13,$r12,60(0x3c) # 9000000008008e14 <sys_unlinkat+0x7c>
9000000008008ddc:	280001ae 	ld.b	$r14,$r13,0
9000000008008de0:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008008de4:	5c0025cc 	bne	$r14,$r12,36(0x24) # 9000000008008e08 <sys_unlinkat+0x70>
9000000008008de8:	02fffdac 	addi.d	$r12,$r13,-1(0xfff)
9000000008008dec:	02fb5ecf 	addi.d	$r15,$r22,-297(0xed7)
9000000008008df0:	0280bc10 	addi.w	$r16,$r0,47(0x2f)
    s--;
9000000008008df4:	0015018d 	move	$r13,$r12
  while (s >= path && *s == '/') {
9000000008008df8:	58001d8f 	beq	$r12,$r15,28(0x1c) # 9000000008008e14 <sys_unlinkat+0x7c>
9000000008008dfc:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000008008e00:	2800058e 	ld.b	$r14,$r12,1(0x1)
9000000008008e04:	5bfff1d0 	beq	$r14,$r16,-16(0x3fff0) # 9000000008008df4 <sys_unlinkat+0x5c>
  }
  if (s >= path && *s == '.' && (s == path || *--s == '/')) {
9000000008008e08:	280001ae 	ld.b	$r14,$r13,0
9000000008008e0c:	0280b80c 	addi.w	$r12,$r0,46(0x2e)
9000000008008e10:	5800a1cc 	beq	$r14,$r12,160(0xa0) # 9000000008008eb0 <sys_unlinkat+0x118>
    return -1;
  }
  int t1 = 0;
  if (strncmp(path, "/tmp/testsuite-", 15) == 0)
9000000008008e14:	02803c06 	addi.w	$r6,$r0,15(0xf)
9000000008008e18:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008008e1c:	02cf60a5 	addi.d	$r5,$r5,984(0x3d8)
9000000008008e20:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008008e24:	578293ff 	bl	-32112(0xfff8290) # 90000000080010b4 <strncmp>
9000000008008e28:	00150098 	move	$r24,$r4
    t1 = 1;

  if ((ep = ename(path)) == NULL && t1 == 0) {
9000000008008e2c:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008008e30:	5458fc00 	bl	22780(0x58fc) # 900000000800e72c <ename>
9000000008008e34:	00150097 	move	$r23,$r4
9000000008008e38:	0012e004 	sltu	$r4,$r0,$r24
9000000008008e3c:	00119004 	sub.d	$r4,$r0,$r4
9000000008008e40:	40005ae0 	beqz	$r23,88(0x58) # 9000000008008e98 <sys_unlinkat+0x100>
    return -1;
  }

  if (t1 == 1)
    return 0;
9000000008008e44:	00150004 	move	$r4,$r0
  if (t1 == 1)
9000000008008e48:	40005300 	beqz	$r24,80(0x50) # 9000000008008e98 <sys_unlinkat+0x100>

  elock(ep);
9000000008008e4c:	001502e4 	move	$r4,$r23
9000000008008e50:	544d3000 	bl	19760(0x4d30) # 900000000800db80 <elock>
  if ((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)) {
9000000008008e54:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
9000000008008e58:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008008e5c:	40001180 	beqz	$r12,16(0x10) # 9000000008008e6c <sys_unlinkat+0xd4>
9000000008008e60:	001502e4 	move	$r4,$r23
9000000008008e64:	57ef1fff 	bl	-4324(0xfffef1c) # 9000000008007d80 <isdirempty>
9000000008008e68:	40006480 	beqz	$r4,100(0x64) # 9000000008008ecc <sys_unlinkat+0x134>
    eunlock(ep);
    eput(ep);
    return -1;
  }
  elock(ep->parent); // Will this lead to deadlock?
9000000008008e6c:	28c482e4 	ld.d	$r4,$r23,288(0x120)
9000000008008e70:	544d1000 	bl	19728(0x4d10) # 900000000800db80 <elock>
  eremove(ep);
9000000008008e74:	001502e4 	move	$r4,$r23
9000000008008e78:	544a7c00 	bl	19068(0x4a7c) # 900000000800d8f4 <eremove>
  eunlock(ep->parent);
9000000008008e7c:	28c482e4 	ld.d	$r4,$r23,288(0x120)
9000000008008e80:	544d4000 	bl	19776(0x4d40) # 900000000800dbc0 <eunlock>
  eunlock(ep);
9000000008008e84:	001502e4 	move	$r4,$r23
9000000008008e88:	544d3800 	bl	19768(0x4d38) # 900000000800dbc0 <eunlock>
  eput(ep);
9000000008008e8c:	001502e4 	move	$r4,$r23
9000000008008e90:	544d9400 	bl	19860(0x4d94) # 900000000800dc24 <eput>

  return 0;
9000000008008e94:	00150004 	move	$r4,$r0
}
9000000008008e98:	28c4a061 	ld.d	$r1,$r3,296(0x128)
9000000008008e9c:	28c48076 	ld.d	$r22,$r3,288(0x120)
9000000008008ea0:	28c46077 	ld.d	$r23,$r3,280(0x118)
9000000008008ea4:	28c44078 	ld.d	$r24,$r3,272(0x110)
9000000008008ea8:	02c4c063 	addi.d	$r3,$r3,304(0x130)
9000000008008eac:	4c000020 	jirl	$r0,$r1,0
  if (s >= path && *s == '.' && (s == path || *--s == '/')) {
9000000008008eb0:	02fb62cc 	addi.d	$r12,$r22,-296(0xed8)
    return -1;
9000000008008eb4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (s >= path && *s == '.' && (s == path || *--s == '/')) {
9000000008008eb8:	5bffe1ac 	beq	$r13,$r12,-32(0x3ffe0) # 9000000008008e98 <sys_unlinkat+0x100>
9000000008008ebc:	283ffdad 	ld.b	$r13,$r13,-1(0xfff)
9000000008008ec0:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008008ec4:	5fff51ac 	bne	$r13,$r12,-176(0x3ff50) # 9000000008008e14 <sys_unlinkat+0x7c>
9000000008008ec8:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008008e98 <sys_unlinkat+0x100>
    eunlock(ep);
9000000008008ecc:	001502e4 	move	$r4,$r23
9000000008008ed0:	544cf000 	bl	19696(0x4cf0) # 900000000800dbc0 <eunlock>
    eput(ep);
9000000008008ed4:	001502e4 	move	$r4,$r23
9000000008008ed8:	544d4c00 	bl	19788(0x4d4c) # 900000000800dc24 <eput>
    return -1;
9000000008008edc:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008008ee0:	53ffbbff 	b	-72(0xfffffb8) # 9000000008008e98 <sys_unlinkat+0x100>

9000000008008ee4 <sys_lseek>:

uint64 sys_lseek(void) {
9000000008008ee4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008008ee8:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008008eec:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008008ef0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  struct file *f;
  uint64 offset;
  int fd, whence;

  if (argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 ||
9000000008008ef4:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
9000000008008ef8:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
9000000008008efc:	00150004 	move	$r4,$r0
9000000008008f00:	57ed1fff 	bl	-4836(0xfffed1c) # 9000000008007c1c <argfd>
      argint(2, &whence) < 0)
    return -1;
9000000008008f04:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 ||
9000000008008f08:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008008f48 <sys_lseek+0x64>
9000000008008f0c:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008008f10:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008008f14:	57d80fff 	bl	-10228(0xfffd80c) # 9000000008006720 <argaddr>
    return -1;
9000000008008f18:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 ||
9000000008008f1c:	60002c80 	blt	$r4,$r0,44(0x2c) # 9000000008008f48 <sys_lseek+0x64>
      argint(2, &whence) < 0)
9000000008008f20:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008008f24:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008008f28:	57d777ff 	bl	-10380(0xfffd774) # 900000000800669c <argint>
    return -1;
9000000008008f2c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &offset) < 0 ||
9000000008008f30:	60001880 	blt	$r4,$r0,24(0x18) # 9000000008008f48 <sys_lseek+0x64>

  return fileseek(f, offset, whence);
9000000008008f34:	28bf62c6 	ld.w	$r6,$r22,-40(0xfd8)
9000000008008f38:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000008008f3c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000008008f40:	57ca2bff 	bl	-13784(0xfffca28) # 9000000008005968 <fileseek>
9000000008008f44:	0015008c 	move	$r12,$r4
}
9000000008008f48:	00150184 	move	$r4,$r12
9000000008008f4c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008008f50:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008008f54:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008008f58:	4c000020 	jirl	$r0,$r1,0

9000000008008f5c <sys_remove>:

uint64 sys_remove(void) {
9000000008008f5c:	02fb4063 	addi.d	$r3,$r3,-304(0xed0)
9000000008008f60:	29c4a061 	st.d	$r1,$r3,296(0x128)
9000000008008f64:	29c48076 	st.d	$r22,$r3,288(0x120)
9000000008008f68:	29c46077 	st.d	$r23,$r3,280(0x118)
9000000008008f6c:	02c4c076 	addi.d	$r22,$r3,304(0x130)
  char path[FAT32_MAX_PATH];
  struct dirent *ep;
  int len;
  if ((len = argstr(0, path, FAT32_MAX_PATH)) <= 0)
9000000008008f70:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008008f74:	02fb62c5 	addi.d	$r5,$r22,-296(0xed8)
9000000008008f78:	00150004 	move	$r4,$r0
9000000008008f7c:	57d7dfff 	bl	-10276(0xfffd7dc) # 9000000008006758 <argstr>
9000000008008f80:	0015008d 	move	$r13,$r4
    return -1;
9000000008008f84:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if ((len = argstr(0, path, FAT32_MAX_PATH)) <= 0)
9000000008008f88:	6400ac0d 	bge	$r0,$r13,172(0xac) # 9000000008009034 <sys_remove+0xd8>

  char *s = path + len - 1;
9000000008008f8c:	02fb62cc 	addi.d	$r12,$r22,-296(0xed8)
9000000008008f90:	02fffdad 	addi.d	$r13,$r13,-1(0xfff)
9000000008008f94:	0010b58d 	add.d	$r13,$r12,$r13
  while (s >= path && *s == '/') {
9000000008008f98:	68003dac 	bltu	$r13,$r12,60(0x3c) # 9000000008008fd4 <sys_remove+0x78>
9000000008008f9c:	280001ae 	ld.b	$r14,$r13,0
9000000008008fa0:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008008fa4:	5c0025cc 	bne	$r14,$r12,36(0x24) # 9000000008008fc8 <sys_remove+0x6c>
9000000008008fa8:	02fffdac 	addi.d	$r12,$r13,-1(0xfff)
9000000008008fac:	02fb5ecf 	addi.d	$r15,$r22,-297(0xed7)
9000000008008fb0:	0280bc10 	addi.w	$r16,$r0,47(0x2f)
    s--;
9000000008008fb4:	0015018d 	move	$r13,$r12
  while (s >= path && *s == '/') {
9000000008008fb8:	58001d8f 	beq	$r12,$r15,28(0x1c) # 9000000008008fd4 <sys_remove+0x78>
9000000008008fbc:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
9000000008008fc0:	2800058e 	ld.b	$r14,$r12,1(0x1)
9000000008008fc4:	5bfff1d0 	beq	$r14,$r16,-16(0x3fff0) # 9000000008008fb4 <sys_remove+0x58>
  }
  if (s >= path && *s == '.' && (s == path || *--s == '/')) {
9000000008008fc8:	280001ae 	ld.b	$r14,$r13,0
9000000008008fcc:	0280b80c 	addi.w	$r12,$r0,46(0x2e)
9000000008008fd0:	580079cc 	beq	$r14,$r12,120(0x78) # 9000000008009048 <sys_remove+0xec>
    return -1;
  }

  if ((ep = ename(path)) == NULL) {
9000000008008fd4:	02fb62c4 	addi.d	$r4,$r22,-296(0xed8)
9000000008008fd8:	54575400 	bl	22356(0x5754) # 900000000800e72c <ename>
9000000008008fdc:	00150097 	move	$r23,$r4
    return -1;
9000000008008fe0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if ((ep = ename(path)) == NULL) {
9000000008008fe4:	400052e0 	beqz	$r23,80(0x50) # 9000000008009034 <sys_remove+0xd8>
  }
  elock(ep);
9000000008008fe8:	001502e4 	move	$r4,$r23
9000000008008fec:	544b9400 	bl	19348(0x4b94) # 900000000800db80 <elock>
  if ((ep->attribute & ATTR_DIRECTORY) && !isdirempty(ep)) {
9000000008008ff0:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
9000000008008ff4:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008008ff8:	40001180 	beqz	$r12,16(0x10) # 9000000008009008 <sys_remove+0xac>
9000000008008ffc:	001502e4 	move	$r4,$r23
9000000008009000:	57ed83ff 	bl	-4736(0xfffed80) # 9000000008007d80 <isdirempty>
9000000008009004:	40006080 	beqz	$r4,96(0x60) # 9000000008009064 <sys_remove+0x108>
    eunlock(ep);
    eput(ep);
    return -1;
  }
  elock(ep->parent); // Will this lead to deadlock?
9000000008009008:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800900c:	544b7400 	bl	19316(0x4b74) # 900000000800db80 <elock>
  eremove(ep);
9000000008009010:	001502e4 	move	$r4,$r23
9000000008009014:	5448e000 	bl	18656(0x48e0) # 900000000800d8f4 <eremove>
  eunlock(ep->parent);
9000000008009018:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800901c:	544ba400 	bl	19364(0x4ba4) # 900000000800dbc0 <eunlock>
  eunlock(ep);
9000000008009020:	001502e4 	move	$r4,$r23
9000000008009024:	544b9c00 	bl	19356(0x4b9c) # 900000000800dbc0 <eunlock>
  eput(ep);
9000000008009028:	001502e4 	move	$r4,$r23
900000000800902c:	544bf800 	bl	19448(0x4bf8) # 900000000800dc24 <eput>

  return 0;
9000000008009030:	00150004 	move	$r4,$r0
}
9000000008009034:	28c4a061 	ld.d	$r1,$r3,296(0x128)
9000000008009038:	28c48076 	ld.d	$r22,$r3,288(0x120)
900000000800903c:	28c46077 	ld.d	$r23,$r3,280(0x118)
9000000008009040:	02c4c063 	addi.d	$r3,$r3,304(0x130)
9000000008009044:	4c000020 	jirl	$r0,$r1,0
  if (s >= path && *s == '.' && (s == path || *--s == '/')) {
9000000008009048:	02fb62cc 	addi.d	$r12,$r22,-296(0xed8)
    return -1;
900000000800904c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (s >= path && *s == '.' && (s == path || *--s == '/')) {
9000000008009050:	5bffe5ac 	beq	$r13,$r12,-28(0x3ffe4) # 9000000008009034 <sys_remove+0xd8>
9000000008009054:	283ffdad 	ld.b	$r13,$r13,-1(0xfff)
9000000008009058:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
900000000800905c:	5fff79ac 	bne	$r13,$r12,-136(0x3ff78) # 9000000008008fd4 <sys_remove+0x78>
9000000008009060:	53ffd7ff 	b	-44(0xfffffd4) # 9000000008009034 <sys_remove+0xd8>
    eunlock(ep);
9000000008009064:	001502e4 	move	$r4,$r23
9000000008009068:	544b5800 	bl	19288(0x4b58) # 900000000800dbc0 <eunlock>
    eput(ep);
900000000800906c:	001502e4 	move	$r4,$r23
9000000008009070:	544bb400 	bl	19380(0x4bb4) # 900000000800dc24 <eput>
    return -1;
9000000008009074:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008009078:	53ffbfff 	b	-68(0xfffffbc) # 9000000008009034 <sys_remove+0xd8>

900000000800907c <sys_mount>:

uint64 sys_mount() {
900000000800907c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008009080:	29c02076 	st.d	$r22,$r3,8(0x8)
9000000008009084:	02c04076 	addi.d	$r22,$r3,16(0x10)

  // TODO: 进一步根据挂载需求进行其他处理
  // 例如，更新文件系统状态、分配挂载点并建立连接等
  */
  return 0; // 返回0表示挂载成功
}
9000000008009088:	00150004 	move	$r4,$r0
900000000800908c:	28c02076 	ld.d	$r22,$r3,8(0x8)
9000000008009090:	02c04063 	addi.d	$r3,$r3,16(0x10)
9000000008009094:	4c000020 	jirl	$r0,$r1,0

9000000008009098 <sys_umount>:

uint64 sys_umount() {
9000000008009098:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800909c:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080090a0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // 释放文件系统数据结构
  fat32_fs_free(fs);
  */

  return 0; // 返回0表示卸载成功
}
90000000080090a4:	00150004 	move	$r4,$r0
90000000080090a8:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080090ac:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080090b0:	4c000020 	jirl	$r0,$r1,0

90000000080090b4 <sys_rename>:

// Must hold too many locks at a time! It's possible to raise a deadlock.
// Because this op takes some steps, we can't promise
uint64 sys_rename(void) {
90000000080090b4:	02f6c063 	addi.d	$r3,$r3,-592(0xdb0)
90000000080090b8:	29c92061 	st.d	$r1,$r3,584(0x248)
90000000080090bc:	29c90076 	st.d	$r22,$r3,576(0x240)
90000000080090c0:	29c8e077 	st.d	$r23,$r3,568(0x238)
90000000080090c4:	29c8c078 	st.d	$r24,$r3,560(0x230)
90000000080090c8:	29c8a079 	st.d	$r25,$r3,552(0x228)
90000000080090cc:	29c8807a 	st.d	$r26,$r3,544(0x220)
90000000080090d0:	02c94076 	addi.d	$r22,$r3,592(0x250)
  char old[FAT32_MAX_PATH], new[FAT32_MAX_PATH];
  if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
90000000080090d4:	02841006 	addi.w	$r6,$r0,260(0x104)
90000000080090d8:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
90000000080090dc:	00150004 	move	$r4,$r0
90000000080090e0:	57d67bff 	bl	-10632(0xfffd678) # 9000000008006758 <argstr>
      argstr(1, new, FAT32_MAX_PATH) < 0) {
    return -1;
90000000080090e4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
90000000080090e8:	6000e080 	blt	$r4,$r0,224(0xe0) # 90000000080091c8 <sys_rename+0x114>
      argstr(1, new, FAT32_MAX_PATH) < 0) {
90000000080090ec:	02841006 	addi.w	$r6,$r0,260(0x104)
90000000080090f0:	02f702c5 	addi.d	$r5,$r22,-576(0xdc0)
90000000080090f4:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080090f8:	57d663ff 	bl	-10656(0xfffd660) # 9000000008006758 <argstr>
    return -1;
90000000080090fc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, old, FAT32_MAX_PATH) < 0 ||
9000000008009100:	6000c880 	blt	$r4,$r0,200(0xc8) # 90000000080091c8 <sys_rename+0x114>
  }

  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
  int srclock = 0;
  char *name;
  if ((src = ename(old)) == NULL || (pdst = enameparent(new, old)) == NULL ||
9000000008009104:	02fb22c4 	addi.d	$r4,$r22,-312(0xec8)
9000000008009108:	54562400 	bl	22052(0x5624) # 900000000800e72c <ename>
900000000800910c:	00150097 	move	$r23,$r4
9000000008009110:	4001b080 	beqz	$r4,432(0x1b0) # 90000000080092c0 <sys_rename+0x20c>
9000000008009114:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
9000000008009118:	02f702c4 	addi.d	$r4,$r22,-576(0xdc0)
900000000800911c:	54563c00 	bl	22076(0x563c) # 900000000800e758 <enameparent>
9000000008009120:	00150098 	move	$r24,$r4
9000000008009124:	40008480 	beqz	$r4,132(0x84) # 90000000080091a8 <sys_rename+0xf4>
      (name = formatname(old)) == NULL) {
9000000008009128:	02fb22c4 	addi.d	$r4,$r22,-312(0xec8)
900000000800912c:	5440ec00 	bl	16620(0x40ec) # 900000000800d218 <formatname>
9000000008009130:	0015009a 	move	$r26,$r4
  if ((src = ename(old)) == NULL || (pdst = enameparent(new, old)) == NULL ||
9000000008009134:	40007480 	beqz	$r4,116(0x74) # 90000000080091a8 <sys_rename+0xf4>
    goto fail; // src doesn't exist || dst parent doesn't exist || illegal new
               // name
  }
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
9000000008009138:	0015030c 	move	$r12,$r24
    if (ep == src) { // In what universe can we move a directory into its child?
900000000800913c:	58006ef8 	beq	$r23,$r24,108(0x6c) # 90000000080091a8 <sys_rename+0xf4>
  for (struct dirent *ep = pdst; ep != NULL; ep = ep->parent) {
9000000008009140:	28c4818c 	ld.d	$r12,$r12,288(0x120)
9000000008009144:	40000d80 	beqz	$r12,12(0xc) # 9000000008009150 <sys_rename+0x9c>
    if (ep == src) { // In what universe can we move a directory into its child?
9000000008009148:	5ffffaec 	bne	$r23,$r12,-8(0x3fff8) # 9000000008009140 <sys_rename+0x8c>
900000000800914c:	50005c00 	b	92(0x5c) # 90000000080091a8 <sys_rename+0xf4>
      goto fail;
    }
  }

  uint off;
  elock(src); // must hold child's lock before acquiring parent's, because we do
9000000008009150:	001502e4 	move	$r4,$r23
9000000008009154:	544a2c00 	bl	18988(0x4a2c) # 900000000800db80 <elock>
              // so in other similar cases
  srclock = 1;
  elock(pdst);
9000000008009158:	00150304 	move	$r4,$r24
900000000800915c:	544a2400 	bl	18980(0x4a24) # 900000000800db80 <elock>
  dst = dirlookup(pdst, name, &off);
9000000008009160:	02f6f2c6 	addi.d	$r6,$r22,-580(0xdbc)
9000000008009164:	00150345 	move	$r5,$r26
9000000008009168:	00150304 	move	$r4,$r24
900000000800916c:	544fec00 	bl	20460(0x4fec) # 900000000800e158 <dirlookup>
9000000008009170:	00150099 	move	$r25,$r4
  if (dst != NULL) {
9000000008009174:	4000a480 	beqz	$r4,164(0xa4) # 9000000008009218 <sys_rename+0x164>
    eunlock(pdst);
9000000008009178:	00150304 	move	$r4,$r24
900000000800917c:	544a4400 	bl	19012(0x4a44) # 900000000800dbc0 <eunlock>
    if (src == dst) {
9000000008009180:	58001af9 	beq	$r23,$r25,24(0x18) # 9000000008009198 <sys_rename+0xe4>
      goto fail;
    } else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
9000000008009184:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
9000000008009188:	2a04032d 	ld.bu	$r13,$r25,256(0x100)
900000000800918c:	0014b58c 	and	$r12,$r12,$r13
9000000008009190:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008009194:	44005980 	bnez	$r12,88(0x58) # 90000000080091ec <sys_rename+0x138>

  return 0;

fail:
  if (srclock)
    eunlock(src);
9000000008009198:	001502e4 	move	$r4,$r23
900000000800919c:	544a2400 	bl	18980(0x4a24) # 900000000800dbc0 <eunlock>
  if (dst)
    eput(dst);
90000000080091a0:	00150324 	move	$r4,$r25
90000000080091a4:	544a8000 	bl	19072(0x4a80) # 900000000800dc24 <eput>
  if (pdst)
90000000080091a8:	40000f00 	beqz	$r24,12(0xc) # 90000000080091b4 <sys_rename+0x100>
    eput(pdst);
90000000080091ac:	00150304 	move	$r4,$r24
90000000080091b0:	544a7400 	bl	19060(0x4a74) # 900000000800dc24 <eput>
  if (src)
    eput(src);
  return -1;
90000000080091b4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (src)
90000000080091b8:	400012e0 	beqz	$r23,16(0x10) # 90000000080091c8 <sys_rename+0x114>
    eput(src);
90000000080091bc:	001502e4 	move	$r4,$r23
90000000080091c0:	544a6400 	bl	19044(0x4a64) # 900000000800dc24 <eput>
  return -1;
90000000080091c4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
}
90000000080091c8:	00150184 	move	$r4,$r12
90000000080091cc:	28c92061 	ld.d	$r1,$r3,584(0x248)
90000000080091d0:	28c90076 	ld.d	$r22,$r3,576(0x240)
90000000080091d4:	28c8e077 	ld.d	$r23,$r3,568(0x238)
90000000080091d8:	28c8c078 	ld.d	$r24,$r3,560(0x230)
90000000080091dc:	28c8a079 	ld.d	$r25,$r3,552(0x228)
90000000080091e0:	28c8807a 	ld.d	$r26,$r3,544(0x220)
90000000080091e4:	02c94063 	addi.d	$r3,$r3,592(0x250)
90000000080091e8:	4c000020 	jirl	$r0,$r1,0
      elock(dst);
90000000080091ec:	00150324 	move	$r4,$r25
90000000080091f0:	54499000 	bl	18832(0x4990) # 900000000800db80 <elock>
      if (!isdirempty(dst)) { // it's ok to overwrite an empty dir
90000000080091f4:	00150324 	move	$r4,$r25
90000000080091f8:	57eb8bff 	bl	-5240(0xfffeb88) # 9000000008007d80 <isdirempty>
90000000080091fc:	4000b880 	beqz	$r4,184(0xb8) # 90000000080092b4 <sys_rename+0x200>
      elock(pdst);
9000000008009200:	00150304 	move	$r4,$r24
9000000008009204:	54497c00 	bl	18812(0x497c) # 900000000800db80 <elock>
    eremove(dst);
9000000008009208:	00150324 	move	$r4,$r25
900000000800920c:	5446e800 	bl	18152(0x46e8) # 900000000800d8f4 <eremove>
    eunlock(dst);
9000000008009210:	00150324 	move	$r4,$r25
9000000008009214:	5449ac00 	bl	18860(0x49ac) # 900000000800dbc0 <eunlock>
  memmove(src->filename, name, FAT32_MAX_FILENAME);
9000000008009218:	0283fc06 	addi.w	$r6,$r0,255(0xff)
900000000800921c:	00150345 	move	$r5,$r26
9000000008009220:	001502e4 	move	$r4,$r23
9000000008009224:	577debff 	bl	-33304(0xfff7de8) # 900000000800100c <memmove>
  emake(pdst, src, off);
9000000008009228:	28b6f2c6 	ld.w	$r6,$r22,-580(0xdbc)
900000000800922c:	001502e5 	move	$r5,$r23
9000000008009230:	00150304 	move	$r4,$r24
9000000008009234:	54410c00 	bl	16652(0x410c) # 900000000800d340 <emake>
  if (src->parent != pdst) {
9000000008009238:	28c482ec 	ld.d	$r12,$r23,288(0x120)
900000000800923c:	58001598 	beq	$r12,$r24,20(0x14) # 9000000008009250 <sys_rename+0x19c>
    eunlock(pdst);
9000000008009240:	00150304 	move	$r4,$r24
9000000008009244:	54497c00 	bl	18812(0x497c) # 900000000800dbc0 <eunlock>
    elock(src->parent);
9000000008009248:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800924c:	54493400 	bl	18740(0x4934) # 900000000800db80 <elock>
  eremove(src);
9000000008009250:	001502e4 	move	$r4,$r23
9000000008009254:	5446a000 	bl	18080(0x46a0) # 900000000800d8f4 <eremove>
  eunlock(src->parent);
9000000008009258:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800925c:	54496400 	bl	18788(0x4964) # 900000000800dbc0 <eunlock>
  struct dirent *psrc =
9000000008009260:	28c482fa 	ld.d	$r26,$r23,288(0x120)
  src->parent = edup(pdst);
9000000008009264:	00150304 	move	$r4,$r24
9000000008009268:	54452c00 	bl	17708(0x452c) # 900000000800d794 <edup>
900000000800926c:	29c482e4 	st.d	$r4,$r23,288(0x120)
  src->off = off;
9000000008009270:	28b6f2cc 	ld.w	$r12,$r22,-580(0xdbc)
9000000008009274:	298472ec 	st.w	$r12,$r23,284(0x11c)
  src->valid = 1;
9000000008009278:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800927c:	29445aec 	st.h	$r12,$r23,278(0x116)
  eunlock(src);
9000000008009280:	001502e4 	move	$r4,$r23
9000000008009284:	54493c00 	bl	18748(0x493c) # 900000000800dbc0 <eunlock>
  eput(psrc);
9000000008009288:	00150344 	move	$r4,$r26
900000000800928c:	54499800 	bl	18840(0x4998) # 900000000800dc24 <eput>
  if (dst) {
9000000008009290:	40000f20 	beqz	$r25,12(0xc) # 900000000800929c <sys_rename+0x1e8>
    eput(dst);
9000000008009294:	00150324 	move	$r4,$r25
9000000008009298:	54498c00 	bl	18828(0x498c) # 900000000800dc24 <eput>
  eput(pdst);
900000000800929c:	00150304 	move	$r4,$r24
90000000080092a0:	54498400 	bl	18820(0x4984) # 900000000800dc24 <eput>
  eput(src);
90000000080092a4:	001502e4 	move	$r4,$r23
90000000080092a8:	54497c00 	bl	18812(0x497c) # 900000000800dc24 <eput>
  return 0;
90000000080092ac:	0015000c 	move	$r12,$r0
90000000080092b0:	53ff1bff 	b	-232(0xfffff18) # 90000000080091c8 <sys_rename+0x114>
        eunlock(dst);
90000000080092b4:	00150324 	move	$r4,$r25
90000000080092b8:	54490800 	bl	18696(0x4908) # 900000000800dbc0 <eunlock>
        goto fail;
90000000080092bc:	53fedfff 	b	-292(0xffffedc) # 9000000008009198 <sys_rename+0xe4>
  struct dirent *src = NULL, *dst = NULL, *pdst = NULL;
90000000080092c0:	00150098 	move	$r24,$r4
  if (dst)
90000000080092c4:	53fee7ff 	b	-284(0xffffee4) # 90000000080091a8 <sys_rename+0xf4>

90000000080092c8 <sys_ioctl>:

uint64 sys_ioctl(void) { return 0; }
90000000080092c8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
90000000080092cc:	29c02076 	st.d	$r22,$r3,8(0x8)
90000000080092d0:	02c04076 	addi.d	$r22,$r3,16(0x10)
90000000080092d4:	00150004 	move	$r4,$r0
90000000080092d8:	28c02076 	ld.d	$r22,$r3,8(0x8)
90000000080092dc:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080092e0:	4c000020 	jirl	$r0,$r1,0

90000000080092e4 <sys_getdents64>:

uint64 sys_getdents64(void) {
90000000080092e4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
90000000080092e8:	29c0a061 	st.d	$r1,$r3,40(0x28)
90000000080092ec:	29c08076 	st.d	$r22,$r3,32(0x20)
90000000080092f0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  struct file *f;
  int fd;
  uint64 buf, len;
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
90000000080092f4:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
90000000080092f8:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
90000000080092fc:	00150004 	move	$r4,$r0
9000000008009300:	57e91fff 	bl	-5860(0xfffe91c) # 9000000008007c1c <argfd>
    return -1;
9000000008009304:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
9000000008009308:	60004080 	blt	$r4,$r0,64(0x40) # 9000000008009348 <sys_getdents64+0x64>
900000000800930c:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008009310:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009314:	57d40fff 	bl	-11252(0xfffd40c) # 9000000008006720 <argaddr>
    return -1;
9000000008009318:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
900000000800931c:	60002c80 	blt	$r4,$r0,44(0x2c) # 9000000008009348 <sys_getdents64+0x64>
9000000008009320:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
9000000008009324:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008009328:	57d3fbff 	bl	-11272(0xfffd3f8) # 9000000008006720 <argaddr>
    return -1;
900000000800932c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argaddr(1, &buf) < 0 || argaddr(2, &len) < 0) {
9000000008009330:	60001880 	blt	$r4,$r0,24(0x18) # 9000000008009348 <sys_getdents64+0x64>
  }

  return get_next_dirent(f, buf, len);
9000000008009334:	28bf42c6 	ld.w	$r6,$r22,-48(0xfd0)
9000000008009338:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000800933c:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
9000000008009340:	57c48bff 	bl	-15224(0xfffc488) # 90000000080057c8 <get_next_dirent>
9000000008009344:	0015008c 	move	$r12,$r4
}
9000000008009348:	00150184 	move	$r4,$r12
900000000800934c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
9000000008009350:	28c08076 	ld.d	$r22,$r3,32(0x20)
9000000008009354:	02c0c063 	addi.d	$r3,$r3,48(0x30)
9000000008009358:	4c000020 	jirl	$r0,$r1,0

900000000800935c <sys_openat>:
返回值：成功执行，返回新的文件描述符。失败，返回-1。

int fd, const char *filename, int flags, mode_t mode;
int ret = syscall(SYS_openat, fd, filename, flags, mode);
*/
uint64 sys_openat() {
900000000800935c:	02fa8063 	addi.d	$r3,$r3,-352(0xea0)
9000000008009360:	29c56061 	st.d	$r1,$r3,344(0x158)
9000000008009364:	29c54076 	st.d	$r22,$r3,336(0x150)
9000000008009368:	29c52077 	st.d	$r23,$r3,328(0x148)
900000000800936c:	29c50078 	st.d	$r24,$r3,320(0x140)
9000000008009370:	29c4e079 	st.d	$r25,$r3,312(0x138)
9000000008009374:	29c4c07a 	st.d	$r26,$r3,304(0x130)
9000000008009378:	29c4a07b 	st.d	$r27,$r3,296(0x128)
900000000800937c:	02c58076 	addi.d	$r22,$r3,352(0x160)
  char path[FAT32_MAX_FILENAME];
  int dirfd, flags, mode, fd;
  struct file *f, *dirf;
  dirf = NULL;
9000000008009380:	29faa2c0 	st.d	$r0,$r22,-344(0xea8)
  struct dirent *dp = NULL, *ep;
  argfd(0, &dirfd, &dirf);
9000000008009384:	02faa2c6 	addi.d	$r6,$r22,-344(0xea8)
9000000008009388:	02faf2c5 	addi.d	$r5,$r22,-324(0xebc)
900000000800938c:	00150004 	move	$r4,$r0
9000000008009390:	57e88fff 	bl	-6004(0xfffe88c) # 9000000008007c1c <argfd>
  // printf("entere here!\n");
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argint(2, &flags) < 0 ||
9000000008009394:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008009398:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
900000000800939c:	02800404 	addi.w	$r4,$r0,1(0x1)
90000000080093a0:	57d3bbff 	bl	-11336(0xfffd3b8) # 9000000008006758 <argstr>
      argint(3, &mode) < 0) {
    return -1;
90000000080093a4:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argint(2, &flags) < 0 ||
90000000080093a8:	60014c80 	blt	$r4,$r0,332(0x14c) # 90000000080094f4 <sys_openat+0x198>
90000000080093ac:	02fae2c5 	addi.d	$r5,$r22,-328(0xeb8)
90000000080093b0:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000080093b4:	57d2ebff 	bl	-11544(0xfffd2e8) # 900000000800669c <argint>
90000000080093b8:	60013c80 	blt	$r4,$r0,316(0x13c) # 90000000080094f4 <sys_openat+0x198>
      argint(3, &mode) < 0) {
90000000080093bc:	02fad2c5 	addi.d	$r5,$r22,-332(0xeb4)
90000000080093c0:	02800c04 	addi.w	$r4,$r0,3(0x3)
90000000080093c4:	57d2dbff 	bl	-11560(0xfffd2d8) # 900000000800669c <argint>
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argint(2, &flags) < 0 ||
90000000080093c8:	60012c80 	blt	$r4,$r0,300(0x12c) # 90000000080094f4 <sys_openat+0x198>
  }
  // 打开/dev/null文件，这个文件做一个特殊的标记
  if (0 == strncmp(path, "/dev/null", 9)) {
90000000080093cc:	02802406 	addi.w	$r6,$r0,9(0x9)
90000000080093d0:	1c000225 	pcaddu12i	$r5,17(0x11)
90000000080093d4:	02f740a5 	addi.d	$r5,$r5,-560(0xdd0)
90000000080093d8:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
90000000080093dc:	577cdbff 	bl	-33576(0xfff7cd8) # 90000000080010b4 <strncmp>
90000000080093e0:	40013c80 	beqz	$r4,316(0x13c) # 900000000800951c <sys_openat+0x1c0>
    f->ep = 0;
    f->readable = 1;
    f->writable = 1;
    return fd;
  }
  flags |= O_RDWR;
90000000080093e4:	28bae2cc 	ld.w	$r12,$r22,-328(0xeb8)
90000000080093e8:	0380098c 	ori	$r12,$r12,0x2
90000000080093ec:	29bae2cc 	st.w	$r12,$r22,-328(0xeb8)
  if (dirf && FD_ENTRY == dirf->type) {
90000000080093f0:	28faa2d9 	ld.d	$r25,$r22,-344(0xea8)
90000000080093f4:	40001720 	beqz	$r25,20(0x14) # 9000000008009408 <sys_openat+0xac>
90000000080093f8:	2880032d 	ld.w	$r13,$r25,0
90000000080093fc:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008009400:	580159ac 	beq	$r13,$r12,344(0x158) # 9000000008009558 <sys_openat+0x1fc>
  struct dirent *dp = NULL, *ep;
9000000008009404:	00150019 	move	$r25,$r0
    if (!(dp->attribute & ATTR_DIRECTORY)) {
      eunlock(dp);
      dp = NULL;
    }
  }
  printf("%s\n", path);
9000000008009408:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
900000000800940c:	1c000184 	pcaddu12i	$r4,12(0xc)
9000000008009410:	02d4d084 	addi.d	$r4,$r4,1332(0x534)
9000000008009414:	576e63ff 	bl	-37280(0xfff6e60) # 9000000008000274 <printf>
  if (NULL == (ep = new_ename(dp, path))) {
9000000008009418:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
900000000800941c:	00150324 	move	$r4,$r25
9000000008009420:	5452e000 	bl	21216(0x52e0) # 900000000800e700 <new_ename>
9000000008009424:	00150098 	move	$r24,$r4
9000000008009428:	40015080 	beqz	$r4,336(0x150) # 9000000008009578 <sys_openat+0x21c>
    }
    if (!ep) {
      return -1;
    }
  } else {
    elock(ep);
900000000800942c:	54475400 	bl	18260(0x4754) # 900000000800db80 <elock>
  }
  // 如果ename成功创建了ep,那么返回的dirent是已经上锁的

  if ((ep->attribute & ATTR_DIRECTORY) &&
9000000008009430:	2a04030c 	ld.bu	$r12,$r24,256(0x100)
9000000008009434:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008009438:	40001180 	beqz	$r12,16(0x10) # 9000000008009448 <sys_openat+0xec>
      (!(flags & O_WRONLY) && !(flags & O_RDWR))) {
900000000800943c:	28bae2cc 	ld.w	$r12,$r22,-328(0xeb8)
  if ((ep->attribute & ATTR_DIRECTORY) &&
9000000008009440:	03400d8c 	andi	$r12,$r12,0x3
9000000008009444:	40025d80 	beqz	$r12,604(0x25c) # 90000000080096a0 <sys_openat+0x344>
    printf("directory only can be read\n");

    return -1;
  }

  if (NULL == (f = filealloc()) || (fd = fdalloc(f)) < 0) {
9000000008009448:	57b7fbff 	bl	-18440(0xfffb7f8) # 9000000008004c40 <filealloc>
900000000800944c:	0015009a 	move	$r26,$r4
9000000008009450:	4002b080 	beqz	$r4,688(0x2b0) # 9000000008009700 <sys_openat+0x3a4>
9000000008009454:	57e897ff 	bl	-5996(0xfffe894) # 9000000008007ce8 <fdalloc>
9000000008009458:	0015009b 	move	$r27,$r4
900000000800945c:	60029c80 	blt	$r4,$r0,668(0x29c) # 90000000080096f8 <sys_openat+0x39c>
    }
    eunlock(ep);
    eput(ep);
    return -24;
  }
  if (!(ep->attribute & ATTR_DIRECTORY) && (flags & O_TRUNC)) {
9000000008009460:	2a04030c 	ld.bu	$r12,$r24,256(0x100)
9000000008009464:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008009468:	44001180 	bnez	$r12,16(0x10) # 9000000008009478 <sys_openat+0x11c>
900000000800946c:	28bae2cc 	ld.w	$r12,$r22,-328(0xeb8)
9000000008009470:	00c9258c 	bstrpick.d	$r12,$r12,0x9,0x9
9000000008009474:	44025180 	bnez	$r12,592(0x250) # 90000000080096c4 <sys_openat+0x368>
    etrunc(ep);
  }
  f->type = FD_ENTRY;
9000000008009478:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800947c:	2980034c 	st.w	$r12,$r26,0
  f->off = (flags & O_APPEND) ? ep->file_size : 0;
9000000008009480:	28bae2cc 	ld.w	$r12,$r22,-328(0xeb8)
9000000008009484:	00ca298e 	bstrpick.d	$r14,$r12,0xa,0xa
9000000008009488:	0015000d 	move	$r13,$r0
900000000800948c:	400009c0 	beqz	$r14,8(0x8) # 9000000008009494 <sys_openat+0x138>
9000000008009490:	2884230d 	ld.w	$r13,$r24,264(0x108)
9000000008009494:	2980834d 	st.w	$r13,$r26,32(0x20)
  f->ep = ep;
9000000008009498:	29c06358 	st.d	$r24,$r26,24(0x18)
  f->readable = !(flags & O_WRONLY);
900000000800949c:	03c0058d 	xori	$r13,$r12,0x1
90000000080094a0:	034005ad 	andi	$r13,$r13,0x1
90000000080094a4:	2900234d 	st.b	$r13,$r26,8(0x8)
  f->writable = (flags & O_WRONLY) || (flags & O_RDWR);
90000000080094a8:	03400d8c 	andi	$r12,$r12,0x3
90000000080094ac:	0012b00c 	sltu	$r12,$r0,$r12
90000000080094b0:	2900274c 	st.b	$r12,$r26,9(0x9)
  eunlock(ep);
90000000080094b4:	00150304 	move	$r4,$r24
90000000080094b8:	54470800 	bl	18184(0x4708) # 900000000800dbc0 <eunlock>
  if (dp) {
90000000080094bc:	40000f20 	beqz	$r25,12(0xc) # 90000000080094c8 <sys_openat+0x16c>
    elock(dp);
90000000080094c0:	00150324 	move	$r4,$r25
90000000080094c4:	5446bc00 	bl	18108(0x46bc) # 900000000800db80 <elock>
  }
  struct proc *p = myproc();
90000000080094c8:	578263ff 	bl	-32160(0xfff8260) # 9000000008001728 <myproc>
  p->exec_close[fd] = 0;
90000000080094cc:	00150377 	move	$r23,$r27
90000000080094d0:	28d3608c 	ld.d	$r12,$r4,1240(0x4d8)
90000000080094d4:	002cb37b 	alsl.d	$r27,$r27,$r12,0x2
90000000080094d8:	29800360 	st.w	$r0,$r27,0
  if (strncmp(path, "/dev/zero", 9) == 0) {
90000000080094dc:	02802406 	addi.w	$r6,$r0,9(0x9)
90000000080094e0:	1c000225 	pcaddu12i	$r5,17(0x11)
90000000080094e4:	02f4c0a5 	addi.d	$r5,$r5,-720(0xd30)
90000000080094e8:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
90000000080094ec:	577bcbff 	bl	-33848(0xfff7bc8) # 90000000080010b4 <strncmp>
90000000080094f0:	4001e080 	beqz	$r4,480(0x1e0) # 90000000080096d0 <sys_openat+0x374>
    strncpy(f->ep->filename, "zero", 4);
  }

  return fd;
}
90000000080094f4:	001502e4 	move	$r4,$r23
90000000080094f8:	28c56061 	ld.d	$r1,$r3,344(0x158)
90000000080094fc:	28c54076 	ld.d	$r22,$r3,336(0x150)
9000000008009500:	28c52077 	ld.d	$r23,$r3,328(0x148)
9000000008009504:	28c50078 	ld.d	$r24,$r3,320(0x140)
9000000008009508:	28c4e079 	ld.d	$r25,$r3,312(0x138)
900000000800950c:	28c4c07a 	ld.d	$r26,$r3,304(0x130)
9000000008009510:	28c4a07b 	ld.d	$r27,$r3,296(0x128)
9000000008009514:	02c58063 	addi.d	$r3,$r3,352(0x160)
9000000008009518:	4c000020 	jirl	$r0,$r1,0
    if (NULL == (f = filealloc()) || (fd = fdalloc(f)) < 0) {
900000000800951c:	57b727ff 	bl	-18652(0xfffb724) # 9000000008004c40 <filealloc>
9000000008009520:	00150098 	move	$r24,$r4
      return -24;
9000000008009524:	02bfa017 	addi.w	$r23,$r0,-24(0xfe8)
    if (NULL == (f = filealloc()) || (fd = fdalloc(f)) < 0) {
9000000008009528:	43ffcc9f 	beqz	$r4,-52(0x7fffcc) # 90000000080094f4 <sys_openat+0x198>
900000000800952c:	57e7bfff 	bl	-6212(0xfffe7bc) # 9000000008007ce8 <fdalloc>
9000000008009530:	6001b880 	blt	$r4,$r0,440(0x1b8) # 90000000080096e8 <sys_openat+0x38c>
    f->type = FD_NULL;
9000000008009534:	0280140c 	addi.w	$r12,$r0,5(0x5)
9000000008009538:	2980030c 	st.w	$r12,$r24,0
    f->off = 0;
900000000800953c:	29808300 	st.w	$r0,$r24,32(0x20)
    f->ep = 0;
9000000008009540:	29c06300 	st.d	$r0,$r24,24(0x18)
    f->readable = 1;
9000000008009544:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008009548:	2900230c 	st.b	$r12,$r24,8(0x8)
    f->writable = 1;
900000000800954c:	2900270c 	st.b	$r12,$r24,9(0x9)
    return fd;
9000000008009550:	00150097 	move	$r23,$r4
9000000008009554:	53ffa3ff 	b	-96(0xfffffa0) # 90000000080094f4 <sys_openat+0x198>
    dp = dirf->ep;
9000000008009558:	28c06339 	ld.d	$r25,$r25,24(0x18)
    if (!(dp->attribute & ATTR_DIRECTORY)) {
900000000800955c:	2a04032c 	ld.bu	$r12,$r25,256(0x100)
9000000008009560:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008009564:	47fea59f 	bnez	$r12,-348(0x7ffea4) # 9000000008009408 <sys_openat+0xac>
      eunlock(dp);
9000000008009568:	00150324 	move	$r4,$r25
900000000800956c:	54465400 	bl	18004(0x4654) # 900000000800dbc0 <eunlock>
      dp = NULL;
9000000008009570:	00150019 	move	$r25,$r0
9000000008009574:	53fe97ff 	b	-364(0xffffe94) # 9000000008009408 <sys_openat+0xac>
    if ((flags & O_CREATE) || strncmp(path, "/proc/loadavg", 13) == 0 ||
9000000008009578:	28bae2cc 	ld.w	$r12,$r22,-328(0xeb8)
900000000800957c:	00c6198c 	bstrpick.d	$r12,$r12,0x6,0x6
9000000008009580:	44001d80 	bnez	$r12,28(0x1c) # 900000000800959c <sys_openat+0x240>
9000000008009584:	02803406 	addi.w	$r6,$r0,13(0xd)
9000000008009588:	1c000225 	pcaddu12i	$r5,17(0x11)
900000000800958c:	02f1e0a5 	addi.d	$r5,$r5,-904(0xc78)
9000000008009590:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009594:	577b23ff 	bl	-34016(0xfff7b20) # 90000000080010b4 <strncmp>
9000000008009598:	44002880 	bnez	$r4,40(0x28) # 90000000080095c0 <sys_openat+0x264>
      ep = new_create(dp, path, T_FILE, flags);
900000000800959c:	28bae2c7 	ld.w	$r7,$r22,-328(0xeb8)
90000000080095a0:	02800806 	addi.w	$r6,$r0,2(0x2)
90000000080095a4:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
90000000080095a8:	00150324 	move	$r4,$r25
90000000080095ac:	54520400 	bl	20996(0x5204) # 900000000800e7b0 <new_create>
90000000080095b0:	00150098 	move	$r24,$r4
        return -1;
90000000080095b4:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
      if (NULL == ep) {
90000000080095b8:	47fe789f 	bnez	$r4,-392(0x7ffe78) # 9000000008009430 <sys_openat+0xd4>
90000000080095bc:	53ff3bff 	b	-200(0xfffff38) # 90000000080094f4 <sys_openat+0x198>
        strncmp(path, "/tmp/testsuite-", 15) == 0 ||
90000000080095c0:	02803c06 	addi.w	$r6,$r0,15(0xf)
90000000080095c4:	1c000225 	pcaddu12i	$r5,17(0x11)
90000000080095c8:	02f0b0a5 	addi.d	$r5,$r5,-980(0xc2c)
90000000080095cc:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
90000000080095d0:	577ae7ff 	bl	-34076(0xfff7ae4) # 90000000080010b4 <strncmp>
    if ((flags & O_CREATE) || strncmp(path, "/proc/loadavg", 13) == 0 ||
90000000080095d4:	43ffc89f 	beqz	$r4,-56(0x7fffc8) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/dev/zero", 9) == 0 ||
90000000080095d8:	02802406 	addi.w	$r6,$r0,9(0x9)
90000000080095dc:	1c000225 	pcaddu12i	$r5,17(0x11)
90000000080095e0:	02f0d0a5 	addi.d	$r5,$r5,-972(0xc34)
90000000080095e4:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
90000000080095e8:	577acfff 	bl	-34100(0xfff7acc) # 90000000080010b4 <strncmp>
        strncmp(path, "/tmp/testsuite-", 15) == 0 ||
90000000080095ec:	43ffb09f 	beqz	$r4,-80(0x7fffb0) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/etc/passwd", 11) == 0 ||
90000000080095f0:	02802c06 	addi.w	$r6,$r0,11(0xb)
90000000080095f4:	1c000225 	pcaddu12i	$r5,17(0x11)
90000000080095f8:	02f0b0a5 	addi.d	$r5,$r5,-980(0xc2c)
90000000080095fc:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009600:	577ab7ff 	bl	-34124(0xfff7ab4) # 90000000080010b4 <strncmp>
        strncmp(path, "/dev/zero", 9) == 0 ||
9000000008009604:	43ff989f 	beqz	$r4,-104(0x7fff98) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/proc/meminfo", 13) == 0 ||
9000000008009608:	02803406 	addi.w	$r6,$r0,13(0xd)
900000000800960c:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009610:	02f090a5 	addi.d	$r5,$r5,-988(0xc24)
9000000008009614:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009618:	577a9fff 	bl	-34148(0xfff7a9c) # 90000000080010b4 <strncmp>
        strncmp(path, "/etc/passwd", 11) == 0 ||
900000000800961c:	43ff809f 	beqz	$r4,-128(0x7fff80) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/dev/tty", 8) == 0 ||
9000000008009620:	02802006 	addi.w	$r6,$r0,8(0x8)
9000000008009624:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009628:	02f070a5 	addi.d	$r5,$r5,-996(0xc1c)
900000000800962c:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009630:	577a87ff 	bl	-34172(0xfff7a84) # 90000000080010b4 <strncmp>
        strncmp(path, "/proc/meminfo", 13) == 0 ||
9000000008009634:	43ff689f 	beqz	$r4,-152(0x7fff68) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/etc/localtime", 14) == 0 ||
9000000008009638:	02803806 	addi.w	$r6,$r0,14(0xe)
900000000800963c:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009640:	02f050a5 	addi.d	$r5,$r5,-1004(0xc14)
9000000008009644:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009648:	577a6fff 	bl	-34196(0xfff7a6c) # 90000000080010b4 <strncmp>
        strncmp(path, "/dev/tty", 8) == 0 ||
900000000800964c:	43ff509f 	beqz	$r4,-176(0x7fff50) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/dev/misc/rtc", 13) == 0 ||
9000000008009650:	02803406 	addi.w	$r6,$r0,13(0xd)
9000000008009654:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009658:	02f030a5 	addi.d	$r5,$r5,-1012(0xc0c)
900000000800965c:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009660:	577a57ff 	bl	-34220(0xfff7a54) # 90000000080010b4 <strncmp>
        strncmp(path, "/etc/localtime", 14) == 0 ||
9000000008009664:	43ff389f 	beqz	$r4,-200(0x7fff38) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/proc/mounts", 12) == 0 ||
9000000008009668:	02803006 	addi.w	$r6,$r0,12(0xc)
900000000800966c:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009670:	02f010a5 	addi.d	$r5,$r5,-1020(0xc04)
9000000008009674:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009678:	577a3fff 	bl	-34244(0xfff7a3c) # 90000000080010b4 <strncmp>
        strncmp(path, "/dev/misc/rtc", 13) == 0 ||
900000000800967c:	43ff209f 	beqz	$r4,-224(0x7fff20) # 900000000800959c <sys_openat+0x240>
        strncmp(path, "/dev/urandom", 12) == 0) {
9000000008009680:	02803006 	addi.w	$r6,$r0,12(0xc)
9000000008009684:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009688:	02eff0a5 	addi.d	$r5,$r5,-1028(0xbfc)
900000000800968c:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
9000000008009690:	577a27ff 	bl	-34268(0xfff7a24) # 90000000080010b4 <strncmp>
      return -1;
9000000008009694:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
        strncmp(path, "/proc/mounts", 12) == 0 ||
9000000008009698:	47fe5c9f 	bnez	$r4,-420(0x7ffe5c) # 90000000080094f4 <sys_openat+0x198>
900000000800969c:	53ff03ff 	b	-256(0xfffff00) # 900000000800959c <sys_openat+0x240>
    eunlock(ep);
90000000080096a0:	00150304 	move	$r4,$r24
90000000080096a4:	54451c00 	bl	17692(0x451c) # 900000000800dbc0 <eunlock>
    eput(ep);
90000000080096a8:	00150304 	move	$r4,$r24
90000000080096ac:	54457800 	bl	17784(0x4578) # 900000000800dc24 <eput>
    printf("directory only can be read\n");
90000000080096b0:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000080096b4:	02ef8084 	addi.d	$r4,$r4,-1056(0xbe0)
90000000080096b8:	576bbfff 	bl	-37956(0xfff6bbc) # 9000000008000274 <printf>
    return -1;
90000000080096bc:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
90000000080096c0:	53fe37ff 	b	-460(0xffffe34) # 90000000080094f4 <sys_openat+0x198>
    etrunc(ep);
90000000080096c4:	00150304 	move	$r4,$r24
90000000080096c8:	54432400 	bl	17188(0x4324) # 900000000800d9ec <etrunc>
90000000080096cc:	53fdafff 	b	-596(0xffffdac) # 9000000008009478 <sys_openat+0x11c>
    strncpy(f->ep->filename, "zero", 4);
90000000080096d0:	02801006 	addi.w	$r6,$r0,4(0x4)
90000000080096d4:	1c000185 	pcaddu12i	$r5,12(0xc)
90000000080096d8:	02fc70a5 	addi.d	$r5,$r5,-228(0xf1c)
90000000080096dc:	28c06344 	ld.d	$r4,$r26,24(0x18)
90000000080096e0:	577a4bff 	bl	-34232(0xfff7a48) # 9000000008001128 <strncpy>
90000000080096e4:	53fe13ff 	b	-496(0xffffe10) # 90000000080094f4 <sys_openat+0x198>
        fileclose(f);
90000000080096e8:	00150304 	move	$r4,$r24
90000000080096ec:	57b65fff 	bl	-18852(0xfffb65c) # 9000000008004d48 <fileclose>
      return -24;
90000000080096f0:	02bfa017 	addi.w	$r23,$r0,-24(0xfe8)
90000000080096f4:	53fe03ff 	b	-512(0xffffe00) # 90000000080094f4 <sys_openat+0x198>
      fileclose(f);
90000000080096f8:	00150344 	move	$r4,$r26
90000000080096fc:	57b64fff 	bl	-18868(0xfffb64c) # 9000000008004d48 <fileclose>
    eunlock(ep);
9000000008009700:	00150304 	move	$r4,$r24
9000000008009704:	5444bc00 	bl	17596(0x44bc) # 900000000800dbc0 <eunlock>
    eput(ep);
9000000008009708:	00150304 	move	$r4,$r24
900000000800970c:	54451800 	bl	17688(0x4518) # 900000000800dc24 <eput>
    return -24;
9000000008009710:	02bfa017 	addi.w	$r23,$r0,-24(0xfe8)
9000000008009714:	53fde3ff 	b	-544(0xffffde0) # 90000000080094f4 <sys_openat+0x198>

9000000008009718 <sys_faccessat>:

uint64 sys_faccessat(void) {
9000000008009718:	02fb0063 	addi.d	$r3,$r3,-320(0xec0)
900000000800971c:	29c4e061 	st.d	$r1,$r3,312(0x138)
9000000008009720:	29c4c076 	st.d	$r22,$r3,304(0x130)
9000000008009724:	29c4a077 	st.d	$r23,$r3,296(0x128)
9000000008009728:	02c50076 	addi.d	$r22,$r3,320(0x140)
  int dirfd, mode, flags, emode = R_OK | W_OK | X_OK;
  struct file *fp;
  struct dirent *dp, *ep;
  struct proc *p = myproc();
900000000800972c:	577fffff 	bl	-32772(0xfff7ffc) # 9000000008001728 <myproc>
9000000008009730:	00150097 	move	$r23,$r4
  char path[FAT32_MAX_FILENAME];

  if (argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD) {
9000000008009734:	02ff22c6 	addi.d	$r6,$r22,-56(0xfc8)
9000000008009738:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
900000000800973c:	00150004 	move	$r4,$r0
9000000008009740:	57e4dfff 	bl	-6948(0xfffe4dc) # 9000000008007c1c <argfd>
9000000008009744:	64001480 	bge	$r4,$r0,20(0x14) # 9000000008009758 <sys_faccessat+0x40>
9000000008009748:	28bf72ce 	ld.w	$r14,$r22,-36(0xfdc)
900000000800974c:	02be700d 	addi.w	$r13,$r0,-100(0xf9c)
    return -24;
9000000008009750:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
  if (argfd(0, &dirfd, &fp) < 0 && dirfd != AT_FDCWD) {
9000000008009754:	5c00a1cd 	bne	$r14,$r13,160(0xa0) # 90000000080097f4 <sys_faccessat+0xdc>
  /*
  if (argstr(1,path,FAT32_MAX_FILENAME + 1) < 0 || argint(2,&mode) < 0 ||
  argint(3,&flags) < 0) { return -1;
  }
  */
  if (argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
9000000008009758:	02840006 	addi.w	$r6,$r0,256(0x100)
900000000800975c:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
9000000008009760:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009764:	57cff7ff 	bl	-12300(0xfffcff4) # 9000000008006758 <argstr>
    return -1;
9000000008009768:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(1, path, FAT32_MAX_FILENAME + 1) < 0)
900000000800976c:	60008880 	blt	$r4,$r0,136(0x88) # 90000000080097f4 <sys_faccessat+0xdc>
  if (argint(2, &mode) < 0)
9000000008009770:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
9000000008009774:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008009778:	57cf27ff 	bl	-12508(0xfffcf24) # 900000000800669c <argint>
    return -1;
900000000800977c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(2, &mode) < 0)
9000000008009780:	60007480 	blt	$r4,$r0,116(0x74) # 90000000080097f4 <sys_faccessat+0xdc>
  if (argint(3, &flags) < 0)
9000000008009784:	02ff52c5 	addi.d	$r5,$r22,-44(0xfd4)
9000000008009788:	02800c04 	addi.w	$r4,$r0,3(0x3)
900000000800978c:	57cf13ff 	bl	-12528(0xfffcf10) # 900000000800669c <argint>
    return -1;
9000000008009790:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(3, &flags) < 0)
9000000008009794:	60006080 	blt	$r4,$r0,96(0x60) # 90000000080097f4 <sys_faccessat+0xdc>

  if (path[0] == '/')
9000000008009798:	283b22cd 	ld.b	$r13,$r22,-312(0xec8)
900000000800979c:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
90000000080097a0:	580075ac 	beq	$r13,$r12,116(0x74) # 9000000008009814 <sys_faccessat+0xfc>
    dp = NULL;
  else if (AT_FDCWD == dirfd)
90000000080097a4:	28bf72cd 	ld.w	$r13,$r22,-36(0xfdc)
90000000080097a8:	02be700c 	addi.w	$r12,$r0,-100(0xf9c)
90000000080097ac:	580061ac 	beq	$r13,$r12,96(0x60) # 900000000800980c <sys_faccessat+0xf4>
    dp = p->cwd;
  else {
    if (NULL == fp)
90000000080097b0:	28ff22cd 	ld.d	$r13,$r22,-56(0xfc8)
      return -24;
90000000080097b4:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
    if (NULL == fp)
90000000080097b8:	40003da0 	beqz	$r13,60(0x3c) # 90000000080097f4 <sys_faccessat+0xdc>
    dp = fp->ep;
90000000080097bc:	28c061a4 	ld.d	$r4,$r13,24(0x18)
  }
  ep = new_ename(dp, path);
90000000080097c0:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
90000000080097c4:	544f3c00 	bl	20284(0x4f3c) # 900000000800e700 <new_ename>
  if (NULL == ep)
    return -1;
90000000080097c8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (NULL == ep)
90000000080097cc:	40002880 	beqz	$r4,40(0x28) # 90000000080097f4 <sys_faccessat+0xdc>
  if (mode == F_OK)
90000000080097d0:	28bf62cd 	ld.w	$r13,$r22,-40(0xfd8)
    return 0;
  if ((emode & mode) != mode)
90000000080097d4:	03401dac 	andi	$r12,$r13,0x7
90000000080097d8:	0011b58c 	sub.d	$r12,$r12,$r13
90000000080097dc:	0012b00c 	sltu	$r12,$r0,$r12
90000000080097e0:	0011b00c 	sub.d	$r12,$r0,$r12
90000000080097e4:	0013358c 	maskeqz	$r12,$r12,$r13
90000000080097e8:	0015000e 	move	$r14,$r0
90000000080097ec:	0013b5cd 	masknez	$r13,$r14,$r13
90000000080097f0:	0015358c 	or	$r12,$r12,$r13
    return -1;

  return 0;
}
90000000080097f4:	00150184 	move	$r4,$r12
90000000080097f8:	28c4e061 	ld.d	$r1,$r3,312(0x138)
90000000080097fc:	28c4c076 	ld.d	$r22,$r3,304(0x130)
9000000008009800:	28c4a077 	ld.d	$r23,$r3,296(0x128)
9000000008009804:	02c50063 	addi.d	$r3,$r3,320(0x140)
9000000008009808:	4c000020 	jirl	$r0,$r1,0
    dp = p->cwd;
900000000800980c:	28d382e4 	ld.d	$r4,$r23,1248(0x4e0)
9000000008009810:	53ffb3ff 	b	-80(0xfffffb0) # 90000000080097c0 <sys_faccessat+0xa8>
    dp = NULL;
9000000008009814:	00150004 	move	$r4,$r0
9000000008009818:	53ffabff 	b	-88(0xfffffa8) # 90000000080097c0 <sys_faccessat+0xa8>

900000000800981c <sys_mmap>:

uint64 sys_mmap() {
900000000800981c:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
9000000008009820:	29c0a061 	st.d	$r1,$r3,40(0x28)
9000000008009824:	29c08076 	st.d	$r22,$r3,32(0x20)
9000000008009828:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  uint64 start;
  int prot, flags, fd, off;
  uint64 len;
  if (argaddr(0, &start) < 0) {
900000000800982c:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008009830:	00150004 	move	$r4,$r0
9000000008009834:	57ceefff 	bl	-12564(0xfffceec) # 9000000008006720 <argaddr>
9000000008009838:	60008c80 	blt	$r4,$r0,140(0x8c) # 90000000080098c4 <sys_mmap+0xa8>
    printf("argaddr start error\n");
    return -1;
  }
  if (argaddr(1, &len) < 0) {
900000000800983c:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
9000000008009840:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009844:	57cedfff 	bl	-12580(0xfffcedc) # 9000000008006720 <argaddr>
9000000008009848:	60009080 	blt	$r4,$r0,144(0x90) # 90000000080098d8 <sys_mmap+0xbc>
    printf("argint len error\n");
    return -1;
  }
  if (argint(2, &prot) < 0) {
900000000800984c:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
9000000008009850:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008009854:	57ce4bff 	bl	-12728(0xfffce48) # 900000000800669c <argint>
9000000008009858:	60009480 	blt	$r4,$r0,148(0x94) # 90000000080098ec <sys_mmap+0xd0>
    printf("argint prot error\n");
    return -1;
  }
  if (argint(3, &flags) < 0) {
900000000800985c:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008009860:	02800c04 	addi.w	$r4,$r0,3(0x3)
9000000008009864:	57ce3bff 	bl	-12744(0xfffce38) # 900000000800669c <argint>
9000000008009868:	60009880 	blt	$r4,$r0,152(0x98) # 9000000008009900 <sys_mmap+0xe4>
    printf("argint flags error\n");
    return -1;
  }
  int ret = argfd(4, &fd, NULL);
900000000800986c:	00150006 	move	$r6,$r0
9000000008009870:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
9000000008009874:	02801004 	addi.w	$r4,$r0,4(0x4)
9000000008009878:	57e3a7ff 	bl	-7260(0xfffe3a4) # 9000000008007c1c <argfd>
  if (ret == -2 && (flags & MAP_ANONYMOUS)) {
900000000800987c:	02bff80c 	addi.w	$r12,$r0,-2(0xffe)
9000000008009880:	5800948c 	beq	$r4,$r12,148(0x94) # 9000000008009914 <sys_mmap+0xf8>
    fd = -1;
  } else if (ret < 0) {
9000000008009884:	6000a880 	blt	$r4,$r0,168(0xa8) # 900000000800992c <sys_mmap+0x110>
    printf("argfd fd error\n");
    return -1;
  }
  if (argint(5, &off) < 0) {
9000000008009888:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
900000000800988c:	02801404 	addi.w	$r4,$r0,5(0x5)
9000000008009890:	57ce0fff 	bl	-12788(0xfffce0c) # 900000000800669c <argint>
9000000008009894:	6000ac80 	blt	$r4,$r0,172(0xac) # 9000000008009940 <sys_mmap+0x124>
  // off:%d\n",start,len,prot,flags,fd,off); if (len == 0) {
  //   len = 32 * PGSIZE;
  //   return mmap(start,len,prot,flags,fd,off) + 16 * PGSIZE;
  // }

  return mmap(start, len, prot, flags, fd, off);
9000000008009898:	28bf62c9 	ld.w	$r9,$r22,-40(0xfd8)
900000000800989c:	28bf72c8 	ld.w	$r8,$r22,-36(0xfdc)
90000000080098a0:	28bf82c7 	ld.w	$r7,$r22,-32(0xfe0)
90000000080098a4:	28bf92c6 	ld.w	$r6,$r22,-28(0xfe4)
90000000080098a8:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
90000000080098ac:	28ffa2c4 	ld.d	$r4,$r22,-24(0xfe8)
90000000080098b0:	54541c00 	bl	21532(0x541c) # 900000000800eccc <mmap>
}
90000000080098b4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
90000000080098b8:	28c08076 	ld.d	$r22,$r3,32(0x20)
90000000080098bc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
90000000080098c0:	4c000020 	jirl	$r0,$r1,0
    printf("argaddr start error\n");
90000000080098c4:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000080098c8:	02e7b084 	addi.d	$r4,$r4,-1556(0x9ec)
90000000080098cc:	5769abff 	bl	-38488(0xfff69a8) # 9000000008000274 <printf>
    return -1;
90000000080098d0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080098d4:	53ffe3ff 	b	-32(0xfffffe0) # 90000000080098b4 <sys_mmap+0x98>
    printf("argint len error\n");
90000000080098d8:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000080098dc:	02e7c084 	addi.d	$r4,$r4,-1552(0x9f0)
90000000080098e0:	576997ff 	bl	-38508(0xfff6994) # 9000000008000274 <printf>
    return -1;
90000000080098e4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080098e8:	53ffcfff 	b	-52(0xfffffcc) # 90000000080098b4 <sys_mmap+0x98>
    printf("argint prot error\n");
90000000080098ec:	1c000224 	pcaddu12i	$r4,17(0x11)
90000000080098f0:	02e7d084 	addi.d	$r4,$r4,-1548(0x9f4)
90000000080098f4:	576983ff 	bl	-38528(0xfff6980) # 9000000008000274 <printf>
    return -1;
90000000080098f8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
90000000080098fc:	53ffbbff 	b	-72(0xfffffb8) # 90000000080098b4 <sys_mmap+0x98>
    printf("argint flags error\n");
9000000008009900:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008009904:	02e7e084 	addi.d	$r4,$r4,-1544(0x9f8)
9000000008009908:	57696fff 	bl	-38548(0xfff696c) # 9000000008000274 <printf>
    return -1;
900000000800990c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008009910:	53ffa7ff 	b	-92(0xfffffa4) # 90000000080098b4 <sys_mmap+0x98>
  if (ret == -2 && (flags & MAP_ANONYMOUS)) {
9000000008009914:	28bf82cc 	ld.w	$r12,$r22,-32(0xfe0)
9000000008009918:	00c5158c 	bstrpick.d	$r12,$r12,0x5,0x5
900000000800991c:	40001180 	beqz	$r12,16(0x10) # 900000000800992c <sys_mmap+0x110>
    fd = -1;
9000000008009920:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008009924:	29bf72cc 	st.w	$r12,$r22,-36(0xfdc)
9000000008009928:	53ff63ff 	b	-160(0xfffff60) # 9000000008009888 <sys_mmap+0x6c>
    printf("argfd fd error\n");
900000000800992c:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008009930:	02e79084 	addi.d	$r4,$r4,-1564(0x9e4)
9000000008009934:	576943ff 	bl	-38592(0xfff6940) # 9000000008000274 <printf>
    return -1;
9000000008009938:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800993c:	53ff7bff 	b	-136(0xfffff78) # 90000000080098b4 <sys_mmap+0x98>
    printf("argint off error\n");
9000000008009940:	1c000224 	pcaddu12i	$r4,17(0x11)
9000000008009944:	02e78084 	addi.d	$r4,$r4,-1568(0x9e0)
9000000008009948:	57692fff 	bl	-38612(0xfff692c) # 9000000008000274 <printf>
    return -1;
900000000800994c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
9000000008009950:	53ff67ff 	b	-156(0xfffff64) # 90000000080098b4 <sys_mmap+0x98>

9000000008009954 <sys_statfs>:

uint64 sys_statfs() {
9000000008009954:	02f98063 	addi.d	$r3,$r3,-416(0xe60)
9000000008009958:	29c66061 	st.d	$r1,$r3,408(0x198)
900000000800995c:	29c64076 	st.d	$r22,$r3,400(0x190)
9000000008009960:	02c68076 	addi.d	$r22,$r3,416(0x1a0)
  char path[FAT32_MAX_PATH];
  uint64 addr;
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &addr) < 0) {
9000000008009964:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008009968:	02fba2c5 	addi.d	$r5,$r22,-280(0xee8)
900000000800996c:	00150004 	move	$r4,$r0
9000000008009970:	57cdebff 	bl	-12824(0xfffcde8) # 9000000008006758 <argstr>
    return -1;
9000000008009974:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &addr) < 0) {
9000000008009978:	60009080 	blt	$r4,$r0,144(0x90) # 9000000008009a08 <sys_statfs+0xb4>
900000000800997c:	02fb82c5 	addi.d	$r5,$r22,-288(0xee0)
9000000008009980:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009984:	57cd9fff 	bl	-12900(0xfffcd9c) # 9000000008006720 <argaddr>
    return -1;
9000000008009988:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argstr(0, path, FAT32_MAX_PATH) < 0 || argaddr(1, &addr) < 0) {
900000000800998c:	60007c80 	blt	$r4,$r0,124(0x7c) # 9000000008009a08 <sys_statfs+0xb4>
  }
  statfs stat;
  if (0 == strncmp(path, "/proc", 5)) {
9000000008009990:	02801406 	addi.w	$r6,$r0,5(0x5)
9000000008009994:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009998:	02e690a5 	addi.d	$r5,$r5,-1628(0x9a4)
900000000800999c:	02fba2c4 	addi.d	$r4,$r22,-280(0xee8)
90000000080099a0:	577717ff 	bl	-35052(0xfff7714) # 90000000080010b4 <strncmp>
90000000080099a4:	44007880 	bnez	$r4,120(0x78) # 9000000008009a1c <sys_statfs+0xc8>
    stat.f_type = PROC_SUPER_MAGIC;
90000000080099a8:	1400012c 	lu12i.w	$r12,9(0x9)
90000000080099ac:	03be818c 	ori	$r12,$r12,0xfa0
90000000080099b0:	29f9a2cc 	st.d	$r12,$r22,-408(0xe68)
    stat.f_fsid[0] = 0;
90000000080099b4:	29ba82c0 	st.w	$r0,$r22,-352(0xea0)
    stat.f_fsid[1] = 1;
90000000080099b8:	0280040c 	addi.w	$r12,$r0,1(0x1)
90000000080099bc:	29ba92cc 	st.w	$r12,$r22,-348(0xea4)
  } else if (0 == strncmp(path, "tmp", 3)) {
    stat.f_type = TMPFS_MAGIC;
    stat.f_fsid[0] = 0;
    stat.f_fsid[1] = 2;
  }
  stat.f_bsize = 512;
90000000080099c0:	0288000c 	addi.w	$r12,$r0,512(0x200)
90000000080099c4:	29f9c2cc 	st.d	$r12,$r22,-400(0xe70)
  stat.f_blocks = 4;
90000000080099c8:	0280100c 	addi.w	$r12,$r0,4(0x4)
90000000080099cc:	29f9e2cc 	st.d	$r12,$r22,-392(0xe78)
  stat.f_bfree = 4;
90000000080099d0:	29fa02cc 	st.d	$r12,$r22,-384(0xe80)
  stat.f_bavail = 4;
90000000080099d4:	29fa22cc 	st.d	$r12,$r22,-376(0xe88)
  stat.f_files = 4;
90000000080099d8:	29fa42cc 	st.d	$r12,$r22,-368(0xe90)
  stat.f_namelen = 64;
90000000080099dc:	0281000c 	addi.w	$r12,$r0,64(0x40)
90000000080099e0:	29faa2cc 	st.d	$r12,$r22,-344(0xea8)
  stat.f_frsize = 32;
90000000080099e4:	0280800c 	addi.w	$r12,$r0,32(0x20)
90000000080099e8:	29fac2cc 	st.d	$r12,$r22,-336(0xeb0)
  stat.f_flags = 0;
90000000080099ec:	29fae2c0 	st.d	$r0,$r22,-328(0xeb8)
  if (either_copyout(1, addr, (void *)&stat, sizeof(stat)) < 0) {
90000000080099f0:	0281e007 	addi.w	$r7,$r0,120(0x78)
90000000080099f4:	02f9a2c6 	addi.d	$r6,$r22,-408(0xe68)
90000000080099f8:	28fb82c5 	ld.d	$r5,$r22,-288(0xee0)
90000000080099fc:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009a00:	5788abff 	bl	-30552(0xfff88a8) # 90000000080022a8 <either_copyout>
9000000008009a04:	0049fc8c 	srai.d	$r12,$r4,0x3f
    return -1;
  }

  return 0;
}
9000000008009a08:	00150184 	move	$r4,$r12
9000000008009a0c:	28c66061 	ld.d	$r1,$r3,408(0x198)
9000000008009a10:	28c64076 	ld.d	$r22,$r3,400(0x190)
9000000008009a14:	02c68063 	addi.d	$r3,$r3,416(0x1a0)
9000000008009a18:	4c000020 	jirl	$r0,$r1,0
  } else if (0 == strncmp(path, "tmp", 3)) {
9000000008009a1c:	02800c06 	addi.w	$r6,$r0,3(0x3)
9000000008009a20:	1c000225 	pcaddu12i	$r5,17(0x11)
9000000008009a24:	02e480a5 	addi.d	$r5,$r5,-1760(0x920)
9000000008009a28:	02fba2c4 	addi.d	$r4,$r22,-280(0xee8)
9000000008009a2c:	57768bff 	bl	-35192(0xfff7688) # 90000000080010b4 <strncmp>
9000000008009a30:	47ff909f 	bnez	$r4,-112(0x7fff90) # 90000000080099c0 <sys_statfs+0x6c>
    stat.f_type = TMPFS_MAGIC;
9000000008009a34:	1402042c 	lu12i.w	$r12,4129(0x1021)
9000000008009a38:	03a6518c 	ori	$r12,$r12,0x994
9000000008009a3c:	29f9a2cc 	st.d	$r12,$r22,-408(0xe68)
    stat.f_fsid[0] = 0;
9000000008009a40:	29ba82c0 	st.w	$r0,$r22,-352(0xea0)
    stat.f_fsid[1] = 2;
9000000008009a44:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008009a48:	29ba92cc 	st.w	$r12,$r22,-348(0xea4)
9000000008009a4c:	53ff77ff 	b	-140(0xfffff74) # 90000000080099c0 <sys_statfs+0x6c>

9000000008009a50 <sys_munmap>:

uint64 sys_munmap() {
9000000008009a50:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008009a54:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008009a58:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008009a5c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  uint64 start, len;
  if (argaddr(0, &start) < 0 || argaddr(1, &len) < 0) {
9000000008009a60:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008009a64:	00150004 	move	$r4,$r0
9000000008009a68:	57ccbbff 	bl	-13128(0xfffccb8) # 9000000008006720 <argaddr>
    return -1;
9000000008009a6c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &start) < 0 || argaddr(1, &len) < 0) {
9000000008009a70:	60001480 	blt	$r4,$r0,20(0x14) # 9000000008009a84 <sys_munmap+0x34>
9000000008009a74:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008009a78:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009a7c:	57cca7ff 	bl	-13148(0xfffcca4) # 9000000008006720 <argaddr>
9000000008009a80:	0049fc8c 	srai.d	$r12,$r4,0x3f
  }

  // TODO
  // return munmap(start,len);
  return 0;
}
9000000008009a84:	00150184 	move	$r4,$r12
9000000008009a88:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008009a8c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008009a90:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008009a94:	4c000020 	jirl	$r0,$r1,0

9000000008009a98 <sys_renameat2>:

uint64 sys_renameat2(void) {
9000000008009a98:	02f68063 	addi.d	$r3,$r3,-608(0xda0)
9000000008009a9c:	29c96061 	st.d	$r1,$r3,600(0x258)
9000000008009aa0:	29c94076 	st.d	$r22,$r3,592(0x250)
9000000008009aa4:	29c92077 	st.d	$r23,$r3,584(0x248)
9000000008009aa8:	29c90078 	st.d	$r24,$r3,576(0x240)
9000000008009aac:	29c8e079 	st.d	$r25,$r3,568(0x238)
9000000008009ab0:	29c8c07a 	st.d	$r26,$r3,560(0x230)
9000000008009ab4:	02c98076 	addi.d	$r22,$r3,608(0x260)
  char old_path[FAT32_MAX_PATH], new_path[FAT32_MAX_PATH], *name;
  int olddirfd, newdirfd, srclock;
  struct file *oldfp, *newfp;
  struct dirent *olddp = NULL, *newdp = NULL, *src = NULL, *dst = NULL,
                *pdst = NULL;
  struct proc *p = myproc();
9000000008009ab8:	577c73ff 	bl	-33680(0xfff7c70) # 9000000008001728 <myproc>
9000000008009abc:	00150097 	move	$r23,$r4

  if (argstr(1, old_path, FAT32_MAX_PATH) < 0 ||
9000000008009ac0:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008009ac4:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
9000000008009ac8:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009acc:	57cc8fff 	bl	-13172(0xfffcc8c) # 9000000008006758 <argstr>
      argstr(3, new_path, FAT32_MAX_PATH) < 0)
    return -36;
9000000008009ad0:	02bf700c 	addi.w	$r12,$r0,-36(0xfdc)
  if (argstr(1, old_path, FAT32_MAX_PATH) < 0 ||
9000000008009ad4:	60015c80 	blt	$r4,$r0,348(0x15c) # 9000000008009c30 <sys_renameat2+0x198>
      argstr(3, new_path, FAT32_MAX_PATH) < 0)
9000000008009ad8:	02841006 	addi.w	$r6,$r0,260(0x104)
9000000008009adc:	02f702c5 	addi.d	$r5,$r22,-576(0xdc0)
9000000008009ae0:	02800c04 	addi.w	$r4,$r0,3(0x3)
9000000008009ae4:	57cc77ff 	bl	-13196(0xfffcc74) # 9000000008006758 <argstr>
    return -36;
9000000008009ae8:	02bf700c 	addi.w	$r12,$r0,-36(0xfdc)
  if (argstr(1, old_path, FAT32_MAX_PATH) < 0 ||
9000000008009aec:	60014480 	blt	$r4,$r0,324(0x144) # 9000000008009c30 <sys_renameat2+0x198>

  if (argfd(0, &olddirfd, &oldfp) < 0) {
9000000008009af0:	02f6c2c6 	addi.d	$r6,$r22,-592(0xdb0)
9000000008009af4:	02f6f2c5 	addi.d	$r5,$r22,-580(0xdbc)
9000000008009af8:	00150004 	move	$r4,$r0
9000000008009afc:	57e123ff 	bl	-7904(0xfffe120) # 9000000008007c1c <argfd>
9000000008009b00:	6400ac80 	bge	$r4,$r0,172(0xac) # 9000000008009bac <sys_renameat2+0x114>
    if (old_path[0] != '/' && olddirfd != AT_FDCWD)
9000000008009b04:	283b22cd 	ld.b	$r13,$r22,-312(0xec8)
9000000008009b08:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008009b0c:	580015ac 	beq	$r13,$r12,20(0x14) # 9000000008009b20 <sys_renameat2+0x88>
9000000008009b10:	28b6f2ce 	ld.w	$r14,$r22,-580(0xdbc)
9000000008009b14:	02be700d 	addi.w	$r13,$r0,-100(0xf9c)
      return -9;
9000000008009b18:	02bfdc0c 	addi.w	$r12,$r0,-9(0xff7)
    if (old_path[0] != '/' && olddirfd != AT_FDCWD)
9000000008009b1c:	5c0115cd 	bne	$r14,$r13,276(0x114) # 9000000008009c30 <sys_renameat2+0x198>
    olddp = p->cwd;
9000000008009b20:	28d382f8 	ld.d	$r24,$r23,1248(0x4e0)
  }
  if (argfd(2, &newdirfd, &newfp) < 0) {
9000000008009b24:	02f6a2c6 	addi.d	$r6,$r22,-600(0xda8)
9000000008009b28:	02f6e2c5 	addi.d	$r5,$r22,-584(0xdb8)
9000000008009b2c:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008009b30:	57e0efff 	bl	-7956(0xfffe0ec) # 9000000008007c1c <argfd>
9000000008009b34:	64008080 	bge	$r4,$r0,128(0x80) # 9000000008009bb4 <sys_renameat2+0x11c>
    if (new_path[0] != '/' && newdirfd != AT_FDCWD)
9000000008009b38:	283702cd 	ld.b	$r13,$r22,-576(0xdc0)
9000000008009b3c:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008009b40:	580015ac 	beq	$r13,$r12,20(0x14) # 9000000008009b54 <sys_renameat2+0xbc>
9000000008009b44:	28b6e2ce 	ld.w	$r14,$r22,-584(0xdb8)
9000000008009b48:	02be700d 	addi.w	$r13,$r0,-100(0xf9c)
      return -9;
9000000008009b4c:	02bfdc0c 	addi.w	$r12,$r0,-9(0xff7)
    if (new_path[0] != '/' && newdirfd != AT_FDCWD)
9000000008009b50:	5c00e1cd 	bne	$r14,$r13,224(0xe0) # 9000000008009c30 <sys_renameat2+0x198>
    newdp = p->cwd;
9000000008009b54:	28d382f9 	ld.d	$r25,$r23,1248(0x4e0)
  }
  if ((src = new_ename(olddp, old_path)) == NULL ||
9000000008009b58:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
9000000008009b5c:	00150304 	move	$r4,$r24
9000000008009b60:	544ba000 	bl	19360(0x4ba0) # 900000000800e700 <new_ename>
9000000008009b64:	00150097 	move	$r23,$r4
9000000008009b68:	4001c080 	beqz	$r4,448(0x1c0) # 9000000008009d28 <sys_renameat2+0x290>
      (pdst = new_enameparent(newdp, new_path, old_path)) == NULL ||
9000000008009b6c:	02fb22c6 	addi.d	$r6,$r22,-312(0xec8)
9000000008009b70:	02f702c5 	addi.d	$r5,$r22,-576(0xdc0)
9000000008009b74:	00150324 	move	$r4,$r25
9000000008009b78:	544c0c00 	bl	19468(0x4c0c) # 900000000800e784 <new_enameparent>
9000000008009b7c:	00150098 	move	$r24,$r4
  if ((src = new_ename(olddp, old_path)) == NULL ||
9000000008009b80:	4001ac80 	beqz	$r4,428(0x1ac) # 9000000008009d2c <sys_renameat2+0x294>
      (name = formatname(old_path)) == NULL)
9000000008009b84:	02fb22c4 	addi.d	$r4,$r22,-312(0xec8)
9000000008009b88:	54369000 	bl	13968(0x3690) # 900000000800d218 <formatname>
9000000008009b8c:	0015009a 	move	$r26,$r4
      (pdst = new_enameparent(newdp, new_path, old_path)) == NULL ||
9000000008009b90:	40019c80 	beqz	$r4,412(0x19c) # 9000000008009d2c <sys_renameat2+0x294>
    goto failure;
  for (struct dirent *ep = pdst; NULL != ep; ep = ep->parent)
9000000008009b94:	0015030c 	move	$r12,$r24
    if (ep == src)
9000000008009b98:	580196f8 	beq	$r23,$r24,404(0x194) # 9000000008009d2c <sys_renameat2+0x294>
  for (struct dirent *ep = pdst; NULL != ep; ep = ep->parent)
9000000008009b9c:	28c4818c 	ld.d	$r12,$r12,288(0x120)
9000000008009ba0:	40001d80 	beqz	$r12,28(0x1c) # 9000000008009bbc <sys_renameat2+0x124>
    if (ep == src)
9000000008009ba4:	5ffffaec 	bne	$r23,$r12,-8(0x3fff8) # 9000000008009b9c <sys_renameat2+0x104>
9000000008009ba8:	50018400 	b	388(0x184) # 9000000008009d2c <sys_renameat2+0x294>
  struct dirent *olddp = NULL, *newdp = NULL, *src = NULL, *dst = NULL,
9000000008009bac:	00150018 	move	$r24,$r0
9000000008009bb0:	53ff77ff 	b	-140(0xfffff74) # 9000000008009b24 <sys_renameat2+0x8c>
9000000008009bb4:	00150019 	move	$r25,$r0
9000000008009bb8:	53ffa3ff 	b	-96(0xfffffa0) # 9000000008009b58 <sys_renameat2+0xc0>
      goto failure;

  uint off;
  elock(src);
9000000008009bbc:	001502e4 	move	$r4,$r23
9000000008009bc0:	543fc000 	bl	16320(0x3fc0) # 900000000800db80 <elock>
  srclock = 1;
  elock(pdst);
9000000008009bc4:	00150304 	move	$r4,$r24
9000000008009bc8:	543fb800 	bl	16312(0x3fb8) # 900000000800db80 <elock>
  dst = dirlookup(pdst, name, &off);
9000000008009bcc:	02f692c6 	addi.d	$r6,$r22,-604(0xda4)
9000000008009bd0:	00150345 	move	$r5,$r26
9000000008009bd4:	00150304 	move	$r4,$r24
9000000008009bd8:	54458000 	bl	17792(0x4580) # 900000000800e158 <dirlookup>
9000000008009bdc:	00150099 	move	$r25,$r4
  if (NULL != dst) {
9000000008009be0:	4000a080 	beqz	$r4,160(0xa0) # 9000000008009c80 <sys_renameat2+0x1e8>
    eunlock(pdst);
9000000008009be4:	00150304 	move	$r4,$r24
9000000008009be8:	543fd800 	bl	16344(0x3fd8) # 900000000800dbc0 <eunlock>
    if (src == dst)
9000000008009bec:	58001af9 	beq	$r23,$r25,24(0x18) # 9000000008009c04 <sys_renameat2+0x16c>
      goto failure;
    else if (src->attribute & dst->attribute & ATTR_DIRECTORY) {
9000000008009bf0:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
9000000008009bf4:	2a04032d 	ld.bu	$r13,$r25,256(0x100)
9000000008009bf8:	0014b58c 	and	$r12,$r12,$r13
9000000008009bfc:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
9000000008009c00:	44005580 	bnez	$r12,84(0x54) # 9000000008009c54 <sys_renameat2+0x1bc>

  return 0;

failure:
  if (srclock)
    eunlock(src);
9000000008009c04:	001502e4 	move	$r4,$r23
9000000008009c08:	543fb800 	bl	16312(0x3fb8) # 900000000800dbc0 <eunlock>
  if (dst)
    eput(dst);
9000000008009c0c:	00150324 	move	$r4,$r25
9000000008009c10:	54401400 	bl	16404(0x4014) # 900000000800dc24 <eput>
  if (pdst)
    eput(pdst);
9000000008009c14:	00150304 	move	$r4,$r24
9000000008009c18:	54400c00 	bl	16396(0x400c) # 900000000800dc24 <eput>
  if (src)
    eput(src);
  return -1;
9000000008009c1c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (src)
9000000008009c20:	400012e0 	beqz	$r23,16(0x10) # 9000000008009c30 <sys_renameat2+0x198>
    eput(src);
9000000008009c24:	001502e4 	move	$r4,$r23
9000000008009c28:	543ffc00 	bl	16380(0x3ffc) # 900000000800dc24 <eput>
  return -1;
9000000008009c2c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
}
9000000008009c30:	00150184 	move	$r4,$r12
9000000008009c34:	28c96061 	ld.d	$r1,$r3,600(0x258)
9000000008009c38:	28c94076 	ld.d	$r22,$r3,592(0x250)
9000000008009c3c:	28c92077 	ld.d	$r23,$r3,584(0x248)
9000000008009c40:	28c90078 	ld.d	$r24,$r3,576(0x240)
9000000008009c44:	28c8e079 	ld.d	$r25,$r3,568(0x238)
9000000008009c48:	28c8c07a 	ld.d	$r26,$r3,560(0x230)
9000000008009c4c:	02c98063 	addi.d	$r3,$r3,608(0x260)
9000000008009c50:	4c000020 	jirl	$r0,$r1,0
      elock(dst);
9000000008009c54:	00150324 	move	$r4,$r25
9000000008009c58:	543f2800 	bl	16168(0x3f28) # 900000000800db80 <elock>
      if (!isdirempty(dst)) {
9000000008009c5c:	00150324 	move	$r4,$r25
9000000008009c60:	57e123ff 	bl	-7904(0xfffe120) # 9000000008007d80 <isdirempty>
9000000008009c64:	4000b880 	beqz	$r4,184(0xb8) # 9000000008009d1c <sys_renameat2+0x284>
      elock(pdst);
9000000008009c68:	00150304 	move	$r4,$r24
9000000008009c6c:	543f1400 	bl	16148(0x3f14) # 900000000800db80 <elock>
    eremove(dst);
9000000008009c70:	00150324 	move	$r4,$r25
9000000008009c74:	543c8000 	bl	15488(0x3c80) # 900000000800d8f4 <eremove>
    eunlock(dst);
9000000008009c78:	00150324 	move	$r4,$r25
9000000008009c7c:	543f4400 	bl	16196(0x3f44) # 900000000800dbc0 <eunlock>
  memmove(src->filename, name, FAT32_MAX_FILENAME);
9000000008009c80:	0283fc06 	addi.w	$r6,$r0,255(0xff)
9000000008009c84:	00150345 	move	$r5,$r26
9000000008009c88:	001502e4 	move	$r4,$r23
9000000008009c8c:	577383ff 	bl	-35968(0xfff7380) # 900000000800100c <memmove>
  emake(pdst, src, off);
9000000008009c90:	28b692c6 	ld.w	$r6,$r22,-604(0xda4)
9000000008009c94:	001502e5 	move	$r5,$r23
9000000008009c98:	00150304 	move	$r4,$r24
9000000008009c9c:	5436a400 	bl	13988(0x36a4) # 900000000800d340 <emake>
  if (src->parent != pdst) {
9000000008009ca0:	28c482ec 	ld.d	$r12,$r23,288(0x120)
9000000008009ca4:	58001598 	beq	$r12,$r24,20(0x14) # 9000000008009cb8 <sys_renameat2+0x220>
    eunlock(pdst);
9000000008009ca8:	00150304 	move	$r4,$r24
9000000008009cac:	543f1400 	bl	16148(0x3f14) # 900000000800dbc0 <eunlock>
    elock(src->parent);
9000000008009cb0:	28c482e4 	ld.d	$r4,$r23,288(0x120)
9000000008009cb4:	543ecc00 	bl	16076(0x3ecc) # 900000000800db80 <elock>
  eremove(src);
9000000008009cb8:	001502e4 	move	$r4,$r23
9000000008009cbc:	543c3800 	bl	15416(0x3c38) # 900000000800d8f4 <eremove>
  eunlock(src->parent);
9000000008009cc0:	28c482e4 	ld.d	$r4,$r23,288(0x120)
9000000008009cc4:	543efc00 	bl	16124(0x3efc) # 900000000800dbc0 <eunlock>
  struct dirent *psrc = src->parent;
9000000008009cc8:	28c482fa 	ld.d	$r26,$r23,288(0x120)
  src->parent = edup(pdst);
9000000008009ccc:	00150304 	move	$r4,$r24
9000000008009cd0:	543ac400 	bl	15044(0x3ac4) # 900000000800d794 <edup>
9000000008009cd4:	29c482e4 	st.d	$r4,$r23,288(0x120)
  src->off = off;
9000000008009cd8:	28b692cc 	ld.w	$r12,$r22,-604(0xda4)
9000000008009cdc:	298472ec 	st.w	$r12,$r23,284(0x11c)
  src->valid = 1;
9000000008009ce0:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008009ce4:	29445aec 	st.h	$r12,$r23,278(0x116)
  eunlock(src);
9000000008009ce8:	001502e4 	move	$r4,$r23
9000000008009cec:	543ed400 	bl	16084(0x3ed4) # 900000000800dbc0 <eunlock>
  eput(psrc);
9000000008009cf0:	00150344 	move	$r4,$r26
9000000008009cf4:	543f3000 	bl	16176(0x3f30) # 900000000800dc24 <eput>
  if (dst)
9000000008009cf8:	40000f20 	beqz	$r25,12(0xc) # 9000000008009d04 <sys_renameat2+0x26c>
    eput(dst);
9000000008009cfc:	00150324 	move	$r4,$r25
9000000008009d00:	543f2400 	bl	16164(0x3f24) # 900000000800dc24 <eput>
  eput(pdst);
9000000008009d04:	00150304 	move	$r4,$r24
9000000008009d08:	543f1c00 	bl	16156(0x3f1c) # 900000000800dc24 <eput>
  eput(src);
9000000008009d0c:	001502e4 	move	$r4,$r23
9000000008009d10:	543f1400 	bl	16148(0x3f14) # 900000000800dc24 <eput>
  return 0;
9000000008009d14:	0015000c 	move	$r12,$r0
9000000008009d18:	53ff1bff 	b	-232(0xfffff18) # 9000000008009c30 <sys_renameat2+0x198>
        eunlock(dst);
9000000008009d1c:	00150324 	move	$r4,$r25
9000000008009d20:	543ea000 	bl	16032(0x3ea0) # 900000000800dbc0 <eunlock>
        goto failure;
9000000008009d24:	53fee3ff 	b	-288(0xffffee0) # 9000000008009c04 <sys_renameat2+0x16c>
                *pdst = NULL;
9000000008009d28:	00150098 	move	$r24,$r4
    eunlock(src);
9000000008009d2c:	001502e4 	move	$r4,$r23
9000000008009d30:	543e9000 	bl	16016(0x3e90) # 900000000800dbc0 <eunlock>
  if (pdst)
9000000008009d34:	43feeb1f 	beqz	$r24,-280(0x7ffee8) # 9000000008009c1c <sys_renameat2+0x184>
9000000008009d38:	53fedfff 	b	-292(0xffffedc) # 9000000008009c14 <sys_renameat2+0x17c>

9000000008009d3c <sys_fcntl>:
  }

  return -24;
}

uint64 sys_fcntl(void) {
9000000008009d3c:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
9000000008009d40:	29c12061 	st.d	$r1,$r3,72(0x48)
9000000008009d44:	29c10076 	st.d	$r22,$r3,64(0x40)
9000000008009d48:	29c0e077 	st.d	$r23,$r3,56(0x38)
9000000008009d4c:	29c0c078 	st.d	$r24,$r3,48(0x30)
9000000008009d50:	29c0a079 	st.d	$r25,$r3,40(0x28)
9000000008009d54:	02c14076 	addi.d	$r22,$r3,80(0x50)
  int fd, cmd;
  uint64 arg;
  struct file *f;
  struct proc *p = myproc();
9000000008009d58:	5779d3ff 	bl	-34352(0xfff79d0) # 9000000008001728 <myproc>
9000000008009d5c:	00150097 	move	$r23,$r4
  if (argfd(0, &fd, &f) < 0 || argint(1, &cmd) < 0 || argaddr(2, &arg) < 0)
9000000008009d60:	02fee2c6 	addi.d	$r6,$r22,-72(0xfb8)
9000000008009d64:	02ff32c5 	addi.d	$r5,$r22,-52(0xfcc)
9000000008009d68:	00150004 	move	$r4,$r0
9000000008009d6c:	57deb3ff 	bl	-8528(0xfffdeb0) # 9000000008007c1c <argfd>
    return -1;
9000000008009d70:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
  if (argfd(0, &fd, &f) < 0 || argint(1, &cmd) < 0 || argaddr(2, &arg) < 0)
9000000008009d74:	60004880 	blt	$r4,$r0,72(0x48) # 9000000008009dbc <sys_fcntl+0x80>
9000000008009d78:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
9000000008009d7c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009d80:	57c91fff 	bl	-14052(0xfffc91c) # 900000000800669c <argint>
9000000008009d84:	60003880 	blt	$r4,$r0,56(0x38) # 9000000008009dbc <sys_fcntl+0x80>
9000000008009d88:	02ff02c5 	addi.d	$r5,$r22,-64(0xfc0)
9000000008009d8c:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008009d90:	57c993ff 	bl	-13936(0xfffc990) # 9000000008006720 <argaddr>
9000000008009d94:	60002880 	blt	$r4,$r0,40(0x28) # 9000000008009dbc <sys_fcntl+0x80>
  if (F_GETFD == cmd)
9000000008009d98:	28bf22cd 	ld.w	$r13,$r22,-56(0xfc8)
9000000008009d9c:	0280040c 	addi.w	$r12,$r0,1(0x1)
9000000008009da0:	58003dac 	beq	$r13,$r12,60(0x3c) # 9000000008009ddc <sys_fcntl+0xa0>
    return p->exec_close[fd];
  else if (F_SETFD == cmd)
9000000008009da4:	0280080c 	addi.w	$r12,$r0,2(0x2)
9000000008009da8:	580049ac 	beq	$r13,$r12,72(0x48) # 9000000008009df0 <sys_fcntl+0xb4>
    p->exec_close[fd] = arg;
  else if (F_DUPFD == cmd) {
9000000008009dac:	400061a0 	beqz	$r13,96(0x60) # 9000000008009e0c <sys_fcntl+0xd0>
    if ((fd = fdalloc2(f, arg)) < 0)
      return fd;
    filedup(f);

    return fd;
  } else if (F_DUPFD_CLOEXEC == cmd) {
9000000008009db0:	0290180e 	addi.w	$r14,$r0,1030(0x406)
  //       ret |= O_NONBLOCK;
  //   }
  //   return ret;
  // }

  return 0;
9000000008009db4:	00150018 	move	$r24,$r0
  } else if (F_DUPFD_CLOEXEC == cmd) {
9000000008009db8:	5800e5ae 	beq	$r13,$r14,228(0xe4) # 9000000008009e9c <sys_fcntl+0x160>
}
9000000008009dbc:	00150304 	move	$r4,$r24
9000000008009dc0:	28c12061 	ld.d	$r1,$r3,72(0x48)
9000000008009dc4:	28c10076 	ld.d	$r22,$r3,64(0x40)
9000000008009dc8:	28c0e077 	ld.d	$r23,$r3,56(0x38)
9000000008009dcc:	28c0c078 	ld.d	$r24,$r3,48(0x30)
9000000008009dd0:	28c0a079 	ld.d	$r25,$r3,40(0x28)
9000000008009dd4:	02c14063 	addi.d	$r3,$r3,80(0x50)
9000000008009dd8:	4c000020 	jirl	$r0,$r1,0
    return p->exec_close[fd];
9000000008009ddc:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000008009de0:	28d362ed 	ld.d	$r13,$r23,1240(0x4d8)
9000000008009de4:	002cb58c 	alsl.d	$r12,$r12,$r13,0x2
9000000008009de8:	28800198 	ld.w	$r24,$r12,0
9000000008009dec:	53ffd3ff 	b	-48(0xfffffd0) # 9000000008009dbc <sys_fcntl+0x80>
    p->exec_close[fd] = arg;
9000000008009df0:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000008009df4:	28d362ed 	ld.d	$r13,$r23,1240(0x4d8)
9000000008009df8:	002cb58c 	alsl.d	$r12,$r12,$r13,0x2
9000000008009dfc:	28ff02cd 	ld.d	$r13,$r22,-64(0xfc0)
9000000008009e00:	2980018d 	st.w	$r13,$r12,0
  return 0;
9000000008009e04:	00150018 	move	$r24,$r0
9000000008009e08:	53ffb7ff 	b	-76(0xfffffb4) # 9000000008009dbc <sys_fcntl+0x80>
    if ((fd = fdalloc2(f, arg)) < 0)
9000000008009e0c:	28fee2d8 	ld.d	$r24,$r22,-72(0xfb8)
9000000008009e10:	28bf02d7 	ld.w	$r23,$r22,-64(0xfc0)
  struct proc *p = myproc();
9000000008009e14:	577917ff 	bl	-34540(0xfff7914) # 9000000008001728 <myproc>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009e18:	28c1208c 	ld.d	$r12,$r4,72(0x48)
9000000008009e1c:	0242058f 	sltui	$r15,$r12,129(0x81)
9000000008009e20:	00133d8c 	maskeqz	$r12,$r12,$r15
9000000008009e24:	0282000d 	addi.w	$r13,$r0,128(0x80)
9000000008009e28:	0013bdaf 	masknez	$r15,$r13,$r15
9000000008009e2c:	00153d8f 	or	$r15,$r12,$r15
9000000008009e30:	6c0066ef 	bgeu	$r23,$r15,100(0x64) # 9000000008009e94 <sys_fcntl+0x158>
    if (p->ofile[fd] == 0) {
9000000008009e34:	002d12ec 	alsl.d	$r12,$r23,$r4,0x3
9000000008009e38:	28c3618c 	ld.d	$r12,$r12,216(0xd8)
9000000008009e3c:	028006ed 	addi.w	$r13,$r23,1(0x1)
9000000008009e40:	02c072ee 	addi.d	$r14,$r23,28(0x1c)
9000000008009e44:	002d11ce 	alsl.d	$r14,$r14,$r4,0x3
9000000008009e48:	40002180 	beqz	$r12,32(0x20) # 9000000008009e68 <sys_fcntl+0x12c>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009e4c:	004081ac 	slli.w	$r12,$r13,0x0
9000000008009e50:	00150197 	move	$r23,$r12
9000000008009e54:	580035af 	beq	$r13,$r15,52(0x34) # 9000000008009e88 <sys_fcntl+0x14c>
    if (p->ofile[fd] == 0) {
9000000008009e58:	28c001cc 	ld.d	$r12,$r14,0
9000000008009e5c:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008009e60:	02c021ce 	addi.d	$r14,$r14,8(0x8)
9000000008009e64:	47ffe99f 	bnez	$r12,-24(0x7fffe8) # 9000000008009e4c <sys_fcntl+0x110>
      p->ofile[fd] = f;
9000000008009e68:	002d12e4 	alsl.d	$r4,$r23,$r4,0x3
9000000008009e6c:	29c36098 	st.d	$r24,$r4,216(0xd8)
    if ((fd = fdalloc2(f, arg)) < 0)
9000000008009e70:	29bf32d7 	st.w	$r23,$r22,-52(0xfcc)
9000000008009e74:	60001ae0 	blt	$r23,$r0,24(0x18) # 9000000008009e8c <sys_fcntl+0x150>
    filedup(f);
9000000008009e78:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000008009e7c:	57ae6bff 	bl	-20888(0xfffae68) # 9000000008004ce4 <filedup>
    return fd;
9000000008009e80:	28bf32d8 	ld.w	$r24,$r22,-52(0xfcc)
9000000008009e84:	53ff3bff 	b	-200(0xfffff38) # 9000000008009dbc <sys_fcntl+0x80>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009e88:	02bfa017 	addi.w	$r23,$r0,-24(0xfe8)
      return fd;
9000000008009e8c:	001502f8 	move	$r24,$r23
9000000008009e90:	53ff2fff 	b	-212(0xfffff2c) # 9000000008009dbc <sys_fcntl+0x80>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009e94:	02bfa017 	addi.w	$r23,$r0,-24(0xfe8)
9000000008009e98:	53fff7ff 	b	-12(0xffffff4) # 9000000008009e8c <sys_fcntl+0x150>
    if ((fd = fdalloc2(f, arg)) < 0)
9000000008009e9c:	28fee2d9 	ld.d	$r25,$r22,-72(0xfb8)
9000000008009ea0:	28bf02d8 	ld.w	$r24,$r22,-64(0xfc0)
  struct proc *p = myproc();
9000000008009ea4:	577887ff 	bl	-34684(0xfff7884) # 9000000008001728 <myproc>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009ea8:	28c1208c 	ld.d	$r12,$r4,72(0x48)
9000000008009eac:	0242058f 	sltui	$r15,$r12,129(0x81)
9000000008009eb0:	00133d8c 	maskeqz	$r12,$r12,$r15
9000000008009eb4:	0282000d 	addi.w	$r13,$r0,128(0x80)
9000000008009eb8:	0013bdaf 	masknez	$r15,$r13,$r15
9000000008009ebc:	00153d8f 	or	$r15,$r12,$r15
9000000008009ec0:	6c00770f 	bgeu	$r24,$r15,116(0x74) # 9000000008009f34 <sys_fcntl+0x1f8>
    if (p->ofile[fd] == 0) {
9000000008009ec4:	002d130c 	alsl.d	$r12,$r24,$r4,0x3
9000000008009ec8:	28c3618c 	ld.d	$r12,$r12,216(0xd8)
9000000008009ecc:	0280070d 	addi.w	$r13,$r24,1(0x1)
9000000008009ed0:	02c0730e 	addi.d	$r14,$r24,28(0x1c)
9000000008009ed4:	002d11ce 	alsl.d	$r14,$r14,$r4,0x3
9000000008009ed8:	40002180 	beqz	$r12,32(0x20) # 9000000008009ef8 <sys_fcntl+0x1bc>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009edc:	004081ac 	slli.w	$r12,$r13,0x0
9000000008009ee0:	00150198 	move	$r24,$r12
9000000008009ee4:	580049ed 	beq	$r15,$r13,72(0x48) # 9000000008009f2c <sys_fcntl+0x1f0>
    if (p->ofile[fd] == 0) {
9000000008009ee8:	28c001cc 	ld.d	$r12,$r14,0
9000000008009eec:	02c005ad 	addi.d	$r13,$r13,1(0x1)
9000000008009ef0:	02c021ce 	addi.d	$r14,$r14,8(0x8)
9000000008009ef4:	47ffe99f 	bnez	$r12,-24(0x7fffe8) # 9000000008009edc <sys_fcntl+0x1a0>
      p->ofile[fd] = f;
9000000008009ef8:	002d1304 	alsl.d	$r4,$r24,$r4,0x3
9000000008009efc:	29c36099 	st.d	$r25,$r4,216(0xd8)
    if ((fd = fdalloc2(f, arg)) < 0)
9000000008009f00:	29bf32d8 	st.w	$r24,$r22,-52(0xfcc)
9000000008009f04:	63febb00 	blt	$r24,$r0,-328(0x3feb8) # 9000000008009dbc <sys_fcntl+0x80>
    filedup(f);
9000000008009f08:	28fee2c4 	ld.d	$r4,$r22,-72(0xfb8)
9000000008009f0c:	57addbff 	bl	-21032(0xfffadd8) # 9000000008004ce4 <filedup>
    p->exec_close[fd] = 1;
9000000008009f10:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
9000000008009f14:	28d362ed 	ld.d	$r13,$r23,1240(0x4d8)
9000000008009f18:	002cb58c 	alsl.d	$r12,$r12,$r13,0x2
9000000008009f1c:	0280040d 	addi.w	$r13,$r0,1(0x1)
9000000008009f20:	2980018d 	st.w	$r13,$r12,0
    return fd;
9000000008009f24:	28bf32d8 	ld.w	$r24,$r22,-52(0xfcc)
9000000008009f28:	53fe97ff 	b	-364(0xffffe94) # 9000000008009dbc <sys_fcntl+0x80>
  for (fd = start; fd < NOFILEMAX(p); fd++) {
9000000008009f2c:	02bfa018 	addi.w	$r24,$r0,-24(0xfe8)
9000000008009f30:	53fe8fff 	b	-372(0xffffe8c) # 9000000008009dbc <sys_fcntl+0x80>
9000000008009f34:	02bfa018 	addi.w	$r24,$r0,-24(0xfe8)
      return fd;
9000000008009f38:	53fe87ff 	b	-380(0xffffe84) # 9000000008009dbc <sys_fcntl+0x80>

9000000008009f3c <sys_syslog>:

uint64 sys_syslog() {
9000000008009f3c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008009f40:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008009f44:	29c04076 	st.d	$r22,$r3,16(0x10)
9000000008009f48:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int type, len;
  uint64 bufp;
  if (argint(0, &type) < 0 || argaddr(1, &bufp) < 0 || argint(2, &len) < 0) {
9000000008009f4c:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008009f50:	00150004 	move	$r4,$r0
9000000008009f54:	57c74bff 	bl	-14520(0xfffc748) # 900000000800669c <argint>
    return -1;
9000000008009f58:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &type) < 0 || argaddr(1, &bufp) < 0 || argint(2, &len) < 0) {
9000000008009f5c:	60004480 	blt	$r4,$r0,68(0x44) # 9000000008009fa0 <sys_syslog+0x64>
9000000008009f60:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
9000000008009f64:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009f68:	57c7bbff 	bl	-14408(0xfffc7b8) # 9000000008006720 <argaddr>
    return -1;
9000000008009f6c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &type) < 0 || argaddr(1, &bufp) < 0 || argint(2, &len) < 0) {
9000000008009f70:	60003080 	blt	$r4,$r0,48(0x30) # 9000000008009fa0 <sys_syslog+0x64>
9000000008009f74:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
9000000008009f78:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008009f7c:	57c723ff 	bl	-14560(0xfffc720) # 900000000800669c <argint>
    return -1;
9000000008009f80:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &type) < 0 || argaddr(1, &bufp) < 0 || argint(2, &len) < 0) {
9000000008009f84:	60001c80 	blt	$r4,$r0,28(0x1c) # 9000000008009fa0 <sys_syslog+0x64>
  }
  if (type == SYSLOG_ACTION_READ_ALL) {
9000000008009f88:	28bfb2cd 	ld.w	$r13,$r22,-20(0xfec)
9000000008009f8c:	02800c0e 	addi.w	$r14,$r0,3(0x3)
    if (either_copyout(1, bufp, syslogbuffer, bufferlength) < 0)
      return -1;
    return bufferlength;
  } else if (type == SYSLOG_ACTION_SIZE_BUFFER)
    return sizeof(syslogbuffer);
9000000008009f90:	03c029ac 	xori	$r12,$r13,0xa
9000000008009f94:	0240058c 	sltui	$r12,$r12,1(0x1)
9000000008009f98:	0041298c 	slli.d	$r12,$r12,0xa
  if (type == SYSLOG_ACTION_READ_ALL) {
9000000008009f9c:	580019ae 	beq	$r13,$r14,24(0x18) # 9000000008009fb4 <sys_syslog+0x78>

  return 0;
}
9000000008009fa0:	00150184 	move	$r4,$r12
9000000008009fa4:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008009fa8:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008009fac:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008009fb0:	4c000020 	jirl	$r0,$r1,0
    if (either_copyout(1, bufp, syslogbuffer, bufferlength) < 0)
9000000008009fb4:	1c0009ac 	pcaddu12i	$r12,77(0x4d)
9000000008009fb8:	02fab18c 	addi.d	$r12,$r12,-340(0xeac)
9000000008009fbc:	28800187 	ld.w	$r7,$r12,0
9000000008009fc0:	1c0009a6 	pcaddu12i	$r6,77(0x4d)
9000000008009fc4:	02faa0c6 	addi.d	$r6,$r6,-344(0xea8)
9000000008009fc8:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
9000000008009fcc:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008009fd0:	5782dbff 	bl	-32040(0xfff82d8) # 90000000080022a8 <either_copyout>
      return -1;
9000000008009fd4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    if (either_copyout(1, bufp, syslogbuffer, bufferlength) < 0)
9000000008009fd8:	63ffc880 	blt	$r4,$r0,-56(0x3ffc8) # 9000000008009fa0 <sys_syslog+0x64>
    return bufferlength;
9000000008009fdc:	1c0009ac 	pcaddu12i	$r12,77(0x4d)
9000000008009fe0:	02fa118c 	addi.d	$r12,$r12,-380(0xe84)
9000000008009fe4:	2880018c 	ld.w	$r12,$r12,0
9000000008009fe8:	53ffbbff 	b	-72(0xfffffb8) # 9000000008009fa0 <sys_syslog+0x64>

9000000008009fec <sys_sendfile>:

uint64 sys_sendfile(void) {
9000000008009fec:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
9000000008009ff0:	29c0e061 	st.d	$r1,$r3,56(0x38)
9000000008009ff4:	29c0c076 	st.d	$r22,$r3,48(0x30)
9000000008009ff8:	02c10076 	addi.d	$r22,$r3,64(0x40)
  int in_fd;
  struct file *fout;
  struct file *fin;
  uint64 offset;
  uint64 count;
  if (argfd(0, &out_fd, &fout) < 0) {
9000000008009ffc:	02ff82c6 	addi.d	$r6,$r22,-32(0xfe0)
900000000800a000:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
900000000800a004:	00150004 	move	$r4,$r0
900000000800a008:	57dc17ff 	bl	-9196(0xfffdc14) # 9000000008007c1c <argfd>
    return -1;
900000000800a00c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(0, &out_fd, &fout) < 0) {
900000000800a010:	60009080 	blt	$r4,$r0,144(0x90) # 900000000800a0a0 <sys_sendfile+0xb4>
  }
  if (argfd(1, &in_fd, &fin) < 0) {
900000000800a014:	02ff62c6 	addi.d	$r6,$r22,-40(0xfd8)
900000000800a018:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
900000000800a01c:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800a020:	57dbffff 	bl	-9220(0xfffdbfc) # 9000000008007c1c <argfd>
    return -1;
900000000800a024:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argfd(1, &in_fd, &fin) < 0) {
900000000800a028:	60007880 	blt	$r4,$r0,120(0x78) # 900000000800a0a0 <sys_sendfile+0xb4>
  }
  if (argaddr(2, &offset) < 0) {
900000000800a02c:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
900000000800a030:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800a034:	57c6efff 	bl	-14612(0xfffc6ec) # 9000000008006720 <argaddr>
    return -1;
900000000800a038:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(2, &offset) < 0) {
900000000800a03c:	60006480 	blt	$r4,$r0,100(0x64) # 900000000800a0a0 <sys_sendfile+0xb4>
  }
  if (argaddr(3, &count) < 0) {
900000000800a040:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
900000000800a044:	02800c04 	addi.w	$r4,$r0,3(0x3)
900000000800a048:	57c6dbff 	bl	-14632(0xfffc6d8) # 9000000008006720 <argaddr>
    return -1;
900000000800a04c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(3, &count) < 0) {
900000000800a050:	60005080 	blt	$r4,$r0,80(0x50) # 900000000800a0a0 <sys_sendfile+0xb4>
  }
  printf("pid: %d out_type:%d in_type:%d\n", myproc()->pid, fout->type,
900000000800a054:	5776d7ff 	bl	-35116(0xfff76d4) # 9000000008001728 <myproc>
900000000800a058:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000800a05c:	28800187 	ld.w	$r7,$r12,0
900000000800a060:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000800a064:	28800186 	ld.w	$r6,$r12,0
900000000800a068:	2880e085 	ld.w	$r5,$r4,56(0x38)
900000000800a06c:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a070:	02cb7084 	addi.d	$r4,$r4,732(0x2dc)
900000000800a074:	576203ff 	bl	-40448(0xfff6200) # 9000000008000274 <printf>
              fin->type);
  if (fin->type == FD_ENTRY) {
900000000800a078:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000800a07c:	2880018e 	ld.w	$r14,$r12,0
900000000800a080:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000800a084:	580031cd 	beq	$r14,$r13,48(0x30) # 900000000800a0b4 <sys_sendfile+0xc8>
    printf("in name : %s\n", fin->ep->filename);
  }
  return file_send(fin, fout, offset, count);
900000000800a088:	28ff22c7 	ld.d	$r7,$r22,-56(0xfc8)
900000000800a08c:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
900000000800a090:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000800a094:	28ff62c4 	ld.d	$r4,$r22,-40(0xfd8)
900000000800a098:	57baffff 	bl	-17668(0xfffbafc) # 9000000008005b94 <file_send>
900000000800a09c:	0015008c 	move	$r12,$r4
}
900000000800a0a0:	00150184 	move	$r4,$r12
900000000800a0a4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800a0a8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800a0ac:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800a0b0:	4c000020 	jirl	$r0,$r1,0
    printf("in name : %s\n", fin->ep->filename);
900000000800a0b4:	28c06185 	ld.d	$r5,$r12,24(0x18)
900000000800a0b8:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a0bc:	02cac084 	addi.d	$r4,$r4,688(0x2b0)
900000000800a0c0:	5761b7ff 	bl	-40524(0xfff61b4) # 9000000008000274 <printf>
900000000800a0c4:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800a088 <sys_sendfile+0x9c>

900000000800a0c8 <sys_sync>:

uint64 sys_sync(void) {
900000000800a0c8:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800a0cc:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800a0d0:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // todo
  return 0;
}
900000000800a0d4:	00150004 	move	$r4,$r0
900000000800a0d8:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800a0dc:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800a0e0:	4c000020 	jirl	$r0,$r1,0

900000000800a0e4 <sys_fsync>:

uint64 sys_fsync(void) { return 0; }
900000000800a0e4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800a0e8:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800a0ec:	02c04076 	addi.d	$r22,$r3,16(0x10)
900000000800a0f0:	00150004 	move	$r4,$r0
900000000800a0f4:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800a0f8:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800a0fc:	4c000020 	jirl	$r0,$r1,0

900000000800a100 <sys_ftruncate>:

uint64 sys_ftruncate(void) {
900000000800a100:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800a104:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800a108:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800a10c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct file *fp;
  int len, fd;
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD)
900000000800a110:	02ffa2c6 	addi.d	$r6,$r22,-24(0xfe8)
900000000800a114:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
900000000800a118:	00150004 	move	$r4,$r0
900000000800a11c:	57db03ff 	bl	-9472(0xfffdb00) # 9000000008007c1c <argfd>
900000000800a120:	64001480 	bge	$r4,$r0,20(0x14) # 900000000800a134 <sys_ftruncate+0x34>
900000000800a124:	28bf82ce 	ld.w	$r14,$r22,-32(0xfe0)
900000000800a128:	02be700d 	addi.w	$r13,$r0,-100(0xf9c)
    return -24; // 打开文件太多
900000000800a12c:	02bfa00c 	addi.w	$r12,$r0,-24(0xfe8)
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD)
900000000800a130:	5c002dcd 	bne	$r14,$r13,44(0x2c) # 900000000800a15c <sys_ftruncate+0x5c>

  if (argint(1, &len) < 0) {
900000000800a134:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
900000000800a138:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800a13c:	57c563ff 	bl	-15008(0xfffc560) # 900000000800669c <argint>
    return -1;
900000000800a140:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(1, &len) < 0) {
900000000800a144:	60001880 	blt	$r4,$r0,24(0x18) # 900000000800a15c <sys_ftruncate+0x5c>
  }

  etruncate(fp->ep, len);
900000000800a148:	28bf92c5 	ld.w	$r5,$r22,-28(0xfe4)
900000000800a14c:	28ffa2cc 	ld.d	$r12,$r22,-24(0xfe8)
900000000800a150:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800a154:	54392800 	bl	14632(0x3928) # 900000000800da7c <etruncate>

  return 0;
900000000800a158:	0015000c 	move	$r12,$r0
}
900000000800a15c:	00150184 	move	$r4,$r12
900000000800a160:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800a164:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800a168:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800a16c:	4c000020 	jirl	$r0,$r1,0

900000000800a170 <sys_readlinkat>:

uint64 sys_readlinkat(void) {
900000000800a170:	02fac063 	addi.d	$r3,$r3,-336(0xeb0)
900000000800a174:	29c52061 	st.d	$r1,$r3,328(0x148)
900000000800a178:	29c50076 	st.d	$r22,$r3,320(0x140)
900000000800a17c:	29c4e077 	st.d	$r23,$r3,312(0x138)
900000000800a180:	29c4c078 	st.d	$r24,$r3,304(0x130)
900000000800a184:	02c54076 	addi.d	$r22,$r3,336(0x150)

  int bufsiz;
  uint64 addr2;
  char path[FAT32_MAX_PATH];
  int dirfd = 0;
900000000800a188:	29bb12c0 	st.w	$r0,$r22,-316(0xec4)
  struct file *df;
  struct dirent *dp = NULL;
  struct proc *p = myproc();
900000000800a18c:	57759fff 	bl	-35428(0xfff759c) # 9000000008001728 <myproc>
  printf("arrive a\n");
900000000800a190:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a194:	02c7a084 	addi.d	$r4,$r4,488(0x1e8)
900000000800a198:	5760dfff 	bl	-40740(0xfff60dc) # 9000000008000274 <printf>
  if (argfd(0, &dirfd, &df) < 0) {
900000000800a19c:	02fae2c6 	addi.d	$r6,$r22,-328(0xeb8)
900000000800a1a0:	02fb12c5 	addi.d	$r5,$r22,-316(0xec4)
900000000800a1a4:	00150004 	move	$r4,$r0
900000000800a1a8:	57da77ff 	bl	-9612(0xfffda74) # 9000000008007c1c <argfd>
900000000800a1ac:	64002080 	bge	$r4,$r0,32(0x20) # 900000000800a1cc <sys_readlinkat+0x5c>
    if (dirfd != AT_FDCWD && path[0] != '/') {
900000000800a1b0:	28bb12cd 	ld.w	$r13,$r22,-316(0xec4)
900000000800a1b4:	02be700c 	addi.w	$r12,$r0,-100(0xf9c)
900000000800a1b8:	580015ac 	beq	$r13,$r12,20(0x14) # 900000000800a1cc <sys_readlinkat+0x5c>
900000000800a1bc:	283b22cd 	ld.b	$r13,$r22,-312(0xec8)
900000000800a1c0:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
      return -1;
900000000800a1c4:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
    if (dirfd != AT_FDCWD && path[0] != '/') {
900000000800a1c8:	5c00d5ac 	bne	$r13,$r12,212(0xd4) # 900000000800a29c <sys_readlinkat+0x12c>
    dp = p->cwd;
  } 
  else {
    dp = df->ep;
  }
  printf("arrive b\n");
900000000800a1cc:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a1d0:	02c6f084 	addi.d	$r4,$r4,444(0x1bc)
900000000800a1d4:	5760a3ff 	bl	-40800(0xfff60a0) # 9000000008000274 <printf>
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argaddr(2, &addr2) < 0 ||
900000000800a1d8:	02841006 	addi.w	$r6,$r0,260(0x104)
900000000800a1dc:	02fb22c5 	addi.d	$r5,$r22,-312(0xec8)
900000000800a1e0:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800a1e4:	57c577ff 	bl	-14988(0xfffc574) # 9000000008006758 <argstr>
      argint(3, &bufsiz) < 0) {
    return -1;
900000000800a1e8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argaddr(2, &addr2) < 0 ||
900000000800a1ec:	6000b080 	blt	$r4,$r0,176(0xb0) # 900000000800a29c <sys_readlinkat+0x12c>
900000000800a1f0:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
900000000800a1f4:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800a1f8:	57c52bff 	bl	-15064(0xfffc528) # 9000000008006720 <argaddr>
900000000800a1fc:	6000a080 	blt	$r4,$r0,160(0xa0) # 900000000800a29c <sys_readlinkat+0x12c>
      argint(3, &bufsiz) < 0) {
900000000800a200:	02ff72c5 	addi.d	$r5,$r22,-36(0xfdc)
900000000800a204:	02800c04 	addi.w	$r4,$r0,3(0x3)
900000000800a208:	57c497ff 	bl	-15212(0xfffc494) # 900000000800669c <argint>
  if (argstr(1, path, FAT32_MAX_PATH) < 0 || argaddr(2, &addr2) < 0 ||
900000000800a20c:	60009080 	blt	$r4,$r0,144(0x90) # 900000000800a29c <sys_readlinkat+0x12c>
  }
  printf("arrive c\n");
900000000800a210:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a214:	02c62084 	addi.d	$r4,$r4,392(0x188)
900000000800a218:	57605fff 	bl	-40868(0xfff605c) # 9000000008000274 <printf>
  int copy_size;
  if (bufsiz < strlen(path)) {
900000000800a21c:	02fb22c4 	addi.d	$r4,$r22,-312(0xec8)
900000000800a220:	576fbbff 	bl	-36936(0xfff6fb8) # 90000000080011d8 <strlen>
900000000800a224:	28bf72d7 	ld.w	$r23,$r22,-36(0xfdc)
900000000800a228:	640092e4 	bge	$r23,$r4,144(0x90) # 900000000800a2b8 <sys_readlinkat+0x148>
    copy_size = bufsiz;
  } else {
    copy_size = strlen(path);
  }
  printf("readlinkat fd:%d path: %s proc name :%s\n", dirfd, path,
900000000800a22c:	28bb12d8 	ld.w	$r24,$r22,-316(0xec4)
              myproc()->name);
900000000800a230:	5774fbff 	bl	-35592(0xfff74f8) # 9000000008001728 <myproc>
  printf("readlinkat fd:%d path: %s proc name :%s\n", dirfd, path,
900000000800a234:	02d3a087 	addi.d	$r7,$r4,1256(0x4e8)
900000000800a238:	02fb22c6 	addi.d	$r6,$r22,-312(0xec8)
900000000800a23c:	00150305 	move	$r5,$r24
900000000800a240:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a244:	02c5a084 	addi.d	$r4,$r4,360(0x168)
900000000800a248:	57602fff 	bl	-40916(0xfff602c) # 9000000008000274 <printf>
  if (strncmp(path, "/proc/self/exe", 14) == 0) {
900000000800a24c:	02803806 	addi.w	$r6,$r0,14(0xe)
900000000800a250:	1c000205 	pcaddu12i	$r5,16(0x10)
900000000800a254:	02c620a5 	addi.d	$r5,$r5,392(0x188)
900000000800a258:	02fb22c4 	addi.d	$r4,$r22,-312(0xec8)
900000000800a25c:	576e5bff 	bl	-37288(0xfff6e58) # 90000000080010b4 <strncmp>
900000000800a260:	44006880 	bnez	$r4,104(0x68) # 900000000800a2c8 <sys_readlinkat+0x158>
    either_copyout(1, addr2, "/", 1);
900000000800a264:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000800a268:	1c000166 	pcaddu12i	$r6,11(0xb)
900000000800a26c:	02fb20c6 	addi.d	$r6,$r6,-312(0xec8)
900000000800a270:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000800a274:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800a278:	578033ff 	bl	-32720(0xfff8030) # 90000000080022a8 <either_copyout>
    either_copyout(1, addr2 + 1, myproc()->name, copy_size - 1);
900000000800a27c:	28ff42d8 	ld.d	$r24,$r22,-48(0xfd0)
900000000800a280:	02c00718 	addi.d	$r24,$r24,1(0x1)
900000000800a284:	5774a7ff 	bl	-35676(0xfff74a4) # 9000000008001728 <myproc>
900000000800a288:	02bffee7 	addi.w	$r7,$r23,-1(0xfff)
900000000800a28c:	02d3a086 	addi.d	$r6,$r4,1256(0x4e8)
900000000800a290:	00150305 	move	$r5,$r24
900000000800a294:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800a298:	578013ff 	bl	-32752(0xfff8010) # 90000000080022a8 <either_copyout>
    copyout(myproc()->pagetable, addr2, path, copy_size);
  }

  return copy_size;
  // return 0;
}
900000000800a29c:	001502e4 	move	$r4,$r23
900000000800a2a0:	28c52061 	ld.d	$r1,$r3,328(0x148)
900000000800a2a4:	28c50076 	ld.d	$r22,$r3,320(0x140)
900000000800a2a8:	28c4e077 	ld.d	$r23,$r3,312(0x138)
900000000800a2ac:	28c4c078 	ld.d	$r24,$r3,304(0x130)
900000000800a2b0:	02c54063 	addi.d	$r3,$r3,336(0x150)
900000000800a2b4:	4c000020 	jirl	$r0,$r1,0
    copy_size = strlen(path);
900000000800a2b8:	02fb22c4 	addi.d	$r4,$r22,-312(0xec8)
900000000800a2bc:	576f1fff 	bl	-37092(0xfff6f1c) # 90000000080011d8 <strlen>
900000000800a2c0:	00150097 	move	$r23,$r4
900000000800a2c4:	53ff6bff 	b	-152(0xfffff68) # 900000000800a22c <sys_readlinkat+0xbc>
    copyout(myproc()->pagetable, addr2, path, copy_size);
900000000800a2c8:	577463ff 	bl	-35744(0xfff7460) # 9000000008001728 <myproc>
900000000800a2cc:	001502e7 	move	$r7,$r23
900000000800a2d0:	02fb22c6 	addi.d	$r6,$r22,-312(0xec8)
900000000800a2d4:	28ff42c5 	ld.d	$r5,$r22,-48(0xfd0)
900000000800a2d8:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800a2dc:	579bb3ff 	bl	-25680(0xfff9bb0) # 9000000008003e8c <copyout>
  return copy_size;
900000000800a2e0:	53ffbfff 	b	-68(0xfffffbc) # 900000000800a29c <sys_readlinkat+0x12c>

900000000800a2e4 <sys_copy_file_range>:
  }

  return fd;
}

uint64 sys_copy_file_range(void) {
900000000800a2e4:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
900000000800a2e8:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000800a2ec:	29c20076 	st.d	$r22,$r3,128(0x80)
900000000800a2f0:	29c1e077 	st.d	$r23,$r3,120(0x78)
900000000800a2f4:	29c1c078 	st.d	$r24,$r3,112(0x70)
900000000800a2f8:	29c1a079 	st.d	$r25,$r3,104(0x68)
900000000800a2fc:	29c1807a 	st.d	$r26,$r3,96(0x60)
900000000800a300:	29c1607b 	st.d	$r27,$r3,88(0x58)
900000000800a304:	29c1407c 	st.d	$r28,$r3,80(0x50)
900000000800a308:	29c1207d 	st.d	$r29,$r3,72(0x48)
900000000800a30c:	29c1007e 	st.d	$r30,$r3,64(0x40)
900000000800a310:	29c0e07f 	st.d	$r31,$r3,56(0x38)
900000000800a314:	02c24076 	addi.d	$r22,$r3,144(0x90)
  struct file *fp_in, *fp_out;
  uint64 off_in;
  uint64 off_out = NULL;
  uint64 len;

  printf("enter here!\n");
900000000800a318:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a31c:	02c34084 	addi.d	$r4,$r4,208(0xd0)
900000000800a320:	575f57ff 	bl	-41132(0xfff5f54) # 9000000008000274 <printf>
  if (argfd(0, &fd_in, &fp_in) < 0 || argaddr(1, &off_in) < 0 ||
900000000800a324:	02fe42c6 	addi.d	$r6,$r22,-112(0xf90)
900000000800a328:	02fe72c5 	addi.d	$r5,$r22,-100(0xf9c)
900000000800a32c:	00150004 	move	$r4,$r0
900000000800a330:	57d8efff 	bl	-10004(0xfffd8ec) # 9000000008007c1c <argfd>
      argfd(2, &fd_out, &fp_out) < 0 || argaddr(3, &off_in) < 0 ||
      argint(4, &len) < 0) {
    return -1;
900000000800a334:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
  if (argfd(0, &fd_in, &fp_in) < 0 || argaddr(1, &off_in) < 0 ||
900000000800a338:	6002b880 	blt	$r4,$r0,696(0x2b8) # 900000000800a5f0 <sys_copy_file_range+0x30c>
900000000800a33c:	02fe02c5 	addi.d	$r5,$r22,-128(0xf80)
900000000800a340:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800a344:	57c3dfff 	bl	-15396(0xfffc3dc) # 9000000008006720 <argaddr>
900000000800a348:	6002a880 	blt	$r4,$r0,680(0x2a8) # 900000000800a5f0 <sys_copy_file_range+0x30c>
      argfd(2, &fd_out, &fp_out) < 0 || argaddr(3, &off_in) < 0 ||
900000000800a34c:	02fe22c6 	addi.d	$r6,$r22,-120(0xf88)
900000000800a350:	02fe62c5 	addi.d	$r5,$r22,-104(0xf98)
900000000800a354:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800a358:	57d8c7ff 	bl	-10044(0xfffd8c4) # 9000000008007c1c <argfd>
  if (argfd(0, &fd_in, &fp_in) < 0 || argaddr(1, &off_in) < 0 ||
900000000800a35c:	60029480 	blt	$r4,$r0,660(0x294) # 900000000800a5f0 <sys_copy_file_range+0x30c>
      argfd(2, &fd_out, &fp_out) < 0 || argaddr(3, &off_in) < 0 ||
900000000800a360:	02fe02c5 	addi.d	$r5,$r22,-128(0xf80)
900000000800a364:	02800c04 	addi.w	$r4,$r0,3(0x3)
900000000800a368:	57c3bbff 	bl	-15432(0xfffc3b8) # 9000000008006720 <argaddr>
900000000800a36c:	60028480 	blt	$r4,$r0,644(0x284) # 900000000800a5f0 <sys_copy_file_range+0x30c>
      argint(4, &len) < 0) {
900000000800a370:	02fde2c5 	addi.d	$r5,$r22,-136(0xf78)
900000000800a374:	02801004 	addi.w	$r4,$r0,4(0x4)
900000000800a378:	57c327ff 	bl	-15580(0xfffc324) # 900000000800669c <argint>
      argfd(2, &fd_out, &fp_out) < 0 || argaddr(3, &off_in) < 0 ||
900000000800a37c:	60027480 	blt	$r4,$r0,628(0x274) # 900000000800a5f0 <sys_copy_file_range+0x30c>
  }
  if (len == 0) {
900000000800a380:	28fde2d8 	ld.d	$r24,$r22,-136(0xf78)
900000000800a384:	40026f00 	beqz	$r24,620(0x26c) # 900000000800a5f0 <sys_copy_file_range+0x30c>
    return 0;
  }
  int pagenum;
  if (len % PGSIZE == 0) {
900000000800a388:	037fff0d 	andi	$r13,$r24,0xfff
900000000800a38c:	44029da0 	bnez	$r13,668(0x29c) # 900000000800a628 <sys_copy_file_range+0x344>
    pagenum = len / PGSIZE;
900000000800a390:	00453318 	srli.d	$r24,$r24,0xc
900000000800a394:	00408318 	slli.w	$r24,$r24,0x0
  } else {
    pagenum = len / PGSIZE + 1;
  }

  printf("pagenum:%d\n", pagenum);
900000000800a398:	00150305 	move	$r5,$r24
900000000800a39c:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a3a0:	02c17084 	addi.d	$r4,$r4,92(0x5c)
900000000800a3a4:	575ed3ff 	bl	-41264(0xfff5ed0) # 9000000008000274 <printf>
  char **pbuf;
  uint64 lastlen = len - PGSIZE * (pagenum - 1);
900000000800a3a8:	02bfff1a 	addi.w	$r26,$r24,-1(0xfff)
900000000800a3ac:	0040b35e 	slli.w	$r30,$r26,0xc
900000000800a3b0:	28fde2dd 	ld.d	$r29,$r22,-136(0xf78)
900000000800a3b4:	0011fbbd 	sub.d	$r29,$r29,$r30
  pbuf = kalloc();
900000000800a3b8:	578b1bff 	bl	-29928(0xfff8b18) # 9000000008002ed0 <kalloc>
900000000800a3bc:	0015009c 	move	$r28,$r4
  memset(pbuf, 0, PGSIZE);
900000000800a3c0:	14000026 	lu12i.w	$r6,1(0x1)
900000000800a3c4:	00150005 	move	$r5,$r0
900000000800a3c8:	576b9fff 	bl	-37988(0xfff6b9c) # 9000000008000f64 <memset>
  for (int i = 0; i < pagenum; i++) {
900000000800a3cc:	64003818 	bge	$r0,$r24,56(0x38) # 900000000800a404 <sys_copy_file_range+0x120>
900000000800a3d0:	00150397 	move	$r23,$r28
900000000800a3d4:	02bfff19 	addi.w	$r25,$r24,-1(0xfff)
900000000800a3d8:	00df0339 	bstrpick.d	$r25,$r25,0x1f,0x0
900000000800a3dc:	002d0339 	alsl.d	$r25,$r25,$r0,0x3
900000000800a3e0:	02c0238c 	addi.d	$r12,$r28,8(0x8)
900000000800a3e4:	0010b339 	add.d	$r25,$r25,$r12
    pbuf[i] = kalloc();
900000000800a3e8:	578aebff 	bl	-29976(0xfff8ae8) # 9000000008002ed0 <kalloc>
900000000800a3ec:	29c002e4 	st.d	$r4,$r23,0
    memset(pbuf[i], 0, PGSIZE);
900000000800a3f0:	14000026 	lu12i.w	$r6,1(0x1)
900000000800a3f4:	00150005 	move	$r5,$r0
900000000800a3f8:	576b6fff 	bl	-38036(0xfff6b6c) # 9000000008000f64 <memset>
900000000800a3fc:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (int i = 0; i < pagenum; i++) {
900000000800a400:	5fffeaf9 	bne	$r23,$r25,-24(0x3ffe8) # 900000000800a3e8 <sys_copy_file_range+0x104>
  }
  printf("len %d\n", len);
900000000800a404:	28fde2c5 	ld.d	$r5,$r22,-136(0xf78)
900000000800a408:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a40c:	02c00084 	addi.d	$r4,$r4,0
900000000800a410:	575e67ff 	bl	-41372(0xfff5e64) # 9000000008000274 <printf>
  char *buf;
  printf("eread off %d\n", fp_in->off);
900000000800a414:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000800a418:	28808185 	ld.w	$r5,$r12,32(0x20)
900000000800a41c:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a420:	02ffd084 	addi.d	$r4,$r4,-12(0xff4)
900000000800a424:	575e53ff 	bl	-41392(0xfff5e50) # 9000000008000274 <printf>
  if (off_in == 0) {
900000000800a428:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000800a42c:	44008980 	bnez	$r12,136(0x88) # 900000000800a4b4 <sys_copy_file_range+0x1d0>
    for (int i = 0; i < pagenum - 1; i++) {
900000000800a430:	64004c1a 	bge	$r0,$r26,76(0x4c) # 900000000800a47c <sys_copy_file_range+0x198>
900000000800a434:	00150399 	move	$r25,$r28
900000000800a438:	14001ffb 	lu12i.w	$r27,255(0xff)
900000000800a43c:	03bfff7b 	ori	$r27,$r27,0xfff
900000000800a440:	00106f1b 	add.w	$r27,$r24,$r27
900000000800a444:	0040b37b 	slli.w	$r27,$r27,0xc
900000000800a448:	00150017 	move	$r23,$r0
900000000800a44c:	1400003f 	lu12i.w	$r31,1(0x1)
      eread(fp_in->ep, 0, (uint64)pbuf[i], fp_in->off + i * PGSIZE, PGSIZE);
900000000800a450:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000800a454:	28808187 	ld.w	$r7,$r12,32(0x20)
900000000800a458:	14000028 	lu12i.w	$r8,1(0x1)
900000000800a45c:	00105ce7 	add.w	$r7,$r7,$r23
900000000800a460:	28c00326 	ld.d	$r6,$r25,0
900000000800a464:	00150005 	move	$r5,$r0
900000000800a468:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800a46c:	542ac000 	bl	10944(0x2ac0) # 900000000800cf2c <eread>
900000000800a470:	02c02339 	addi.d	$r25,$r25,8(0x8)
900000000800a474:	00105ff7 	add.w	$r23,$r31,$r23
    for (int i = 0; i < pagenum - 1; i++) {
900000000800a478:	5fffdafb 	bne	$r23,$r27,-40(0x3ffd8) # 900000000800a450 <sys_copy_file_range+0x16c>
    }
    eread(fp_in->ep, 0, (uint64)pbuf[pagenum - 1],
900000000800a47c:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
900000000800a480:	004083a8 	slli.w	$r8,$r29,0x0
900000000800a484:	288081a7 	ld.w	$r7,$r13,32(0x20)
900000000800a488:	002d730c 	alsl.d	$r12,$r24,$r28,0x3
900000000800a48c:	001078e7 	add.w	$r7,$r7,$r30
900000000800a490:	28ffe186 	ld.d	$r6,$r12,-8(0xff8)
900000000800a494:	00150005 	move	$r5,$r0
900000000800a498:	28c061a4 	ld.d	$r4,$r13,24(0x18)
900000000800a49c:	542a9000 	bl	10896(0x2a90) # 900000000800cf2c <eread>
          fp_in->off + (pagenum - 1) * PGSIZE, lastlen);
    fp_in->off += len;
900000000800a4a0:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
900000000800a4a4:	288081ac 	ld.w	$r12,$r13,32(0x20)
900000000800a4a8:	28bde2ce 	ld.w	$r14,$r22,-136(0xf78)
900000000800a4ac:	0010398c 	add.w	$r12,$r12,$r14
900000000800a4b0:	298081ac 	st.w	$r12,$r13,32(0x20)

  // for(int i=0;i<len;i++){
  //   printf("%d ",buf[i]);
  // }
  if (off_out == NULL) {
    printf("off_out == null\n");
900000000800a4b4:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a4b8:	02fdb084 	addi.d	$r4,$r4,-148(0xf6c)
900000000800a4bc:	575dbbff 	bl	-41544(0xfff5db8) # 9000000008000274 <printf>
    if (fp_out->off > fp_out->ep->file_size) {
900000000800a4c0:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800a4c4:	28c0618e 	ld.d	$r14,$r12,24(0x18)
900000000800a4c8:	2880818d 	ld.w	$r13,$r12,32(0x20)
900000000800a4cc:	288421cc 	ld.w	$r12,$r14,264(0x108)
900000000800a4d0:	6801698d 	bltu	$r12,$r13,360(0x168) # 900000000800a638 <sys_copy_file_range+0x354>
      memset(buf, 0, PGSIZE);
      ewrite(fp_out->ep, 0, buf, fp_out->ep->file_size,
             fp_out->off - fp_out->ep->file_size);
      kfree(buf);
    }
    if (len > 0) {
900000000800a4d4:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000800a4d8:	4000cd80 	beqz	$r12,204(0xcc) # 900000000800a5a4 <sys_copy_file_range+0x2c0>
      for (int i = 0; i < pagenum - 1; i++) {
900000000800a4dc:	64004c1a 	bge	$r0,$r26,76(0x4c) # 900000000800a528 <sys_copy_file_range+0x244>
900000000800a4e0:	00150399 	move	$r25,$r28
900000000800a4e4:	14001ffa 	lu12i.w	$r26,255(0xff)
900000000800a4e8:	03bfff5a 	ori	$r26,$r26,0xfff
900000000800a4ec:	00106b1a 	add.w	$r26,$r24,$r26
900000000800a4f0:	0040b35a 	slli.w	$r26,$r26,0xc
900000000800a4f4:	00150017 	move	$r23,$r0
900000000800a4f8:	1400003b 	lu12i.w	$r27,1(0x1)
        ewrite(fp_out->ep, 0, (uint64)pbuf[i], fp_out->off + i * PGSIZE,
900000000800a4fc:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800a500:	28808187 	ld.w	$r7,$r12,32(0x20)
900000000800a504:	14000028 	lu12i.w	$r8,1(0x1)
900000000800a508:	00105ce7 	add.w	$r7,$r7,$r23
900000000800a50c:	28c00326 	ld.d	$r6,$r25,0
900000000800a510:	00150005 	move	$r5,$r0
900000000800a514:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800a518:	542b7400 	bl	11124(0x2b74) # 900000000800d08c <ewrite>
900000000800a51c:	02c02339 	addi.d	$r25,$r25,8(0x8)
900000000800a520:	00105f77 	add.w	$r23,$r27,$r23
      for (int i = 0; i < pagenum - 1; i++) {
900000000800a524:	5fffdafa 	bne	$r23,$r26,-40(0x3ffd8) # 900000000800a4fc <sys_copy_file_range+0x218>
               PGSIZE);
      }
      for (int i = 0; i < PGSIZE; i++) {
        printf("%d ", pbuf[pagenum - 1][i]);
900000000800a528:	002d7319 	alsl.d	$r25,$r24,$r28,0x3
900000000800a52c:	02ffe339 	addi.d	$r25,$r25,-8(0xff8)
900000000800a530:	00150017 	move	$r23,$r0
900000000800a534:	1c00021b 	pcaddu12i	$r27,16(0x10)
900000000800a538:	02fc137b 	addi.d	$r27,$r27,-252(0xf04)
      for (int i = 0; i < PGSIZE; i++) {
900000000800a53c:	1400003a 	lu12i.w	$r26,1(0x1)
        printf("%d ", pbuf[pagenum - 1][i]);
900000000800a540:	28c0032c 	ld.d	$r12,$r25,0
900000000800a544:	0010dd8c 	add.d	$r12,$r12,$r23
900000000800a548:	28000185 	ld.b	$r5,$r12,0
900000000800a54c:	00150364 	move	$r4,$r27
900000000800a550:	575d27ff 	bl	-41692(0xfff5d24) # 9000000008000274 <printf>
900000000800a554:	02c006f7 	addi.d	$r23,$r23,1(0x1)
      for (int i = 0; i < PGSIZE; i++) {
900000000800a558:	5fffeafa 	bne	$r23,$r26,-24(0x3ffe8) # 900000000800a540 <sys_copy_file_range+0x25c>
      }
      printf("ewrite lastlen %d\n", lastlen);
900000000800a55c:	001503a5 	move	$r5,$r29
900000000800a560:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a564:	02fb8084 	addi.d	$r4,$r4,-288(0xee0)
900000000800a568:	575d0fff 	bl	-41716(0xfff5d0c) # 9000000008000274 <printf>
      ewrite(fp_out->ep, 0, (uint64)pbuf[pagenum - 1],
900000000800a56c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800a570:	004083a8 	slli.w	$r8,$r29,0x0
900000000800a574:	28808187 	ld.w	$r7,$r12,32(0x20)
900000000800a578:	001078e7 	add.w	$r7,$r7,$r30
900000000800a57c:	28c00326 	ld.d	$r6,$r25,0
900000000800a580:	00150005 	move	$r5,$r0
900000000800a584:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800a588:	542b0400 	bl	11012(0x2b04) # 900000000800d08c <ewrite>
             fp_out->off + (pagenum - 1) * PGSIZE, lastlen);
      printf("file?_size:%d\n", fp_out->ep->file_size);
900000000800a58c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800a590:	28c0618c 	ld.d	$r12,$r12,24(0x18)
900000000800a594:	28842185 	ld.w	$r5,$r12,264(0x108)
900000000800a598:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a59c:	02fb0084 	addi.d	$r4,$r4,-320(0xec0)
900000000800a5a0:	575cd7ff 	bl	-41772(0xfff5cd4) # 9000000008000274 <printf>
    }
    fp_out->off += len;
900000000800a5a4:	28fe22cd 	ld.d	$r13,$r22,-120(0xf88)
900000000800a5a8:	288081ac 	ld.w	$r12,$r13,32(0x20)
900000000800a5ac:	28bde2ce 	ld.w	$r14,$r22,-136(0xf78)
900000000800a5b0:	0010398c 	add.w	$r12,$r12,$r14
900000000800a5b4:	298081ac 	st.w	$r12,$r13,32(0x20)
  }

  for (int i = 0; i < pagenum; i++) {
900000000800a5b8:	64002c18 	bge	$r0,$r24,44(0x2c) # 900000000800a5e4 <sys_copy_file_range+0x300>
900000000800a5bc:	00150397 	move	$r23,$r28
900000000800a5c0:	02bfff18 	addi.w	$r24,$r24,-1(0xfff)
900000000800a5c4:	00df0318 	bstrpick.d	$r24,$r24,0x1f,0x0
900000000800a5c8:	002d0318 	alsl.d	$r24,$r24,$r0,0x3
900000000800a5cc:	02c0238c 	addi.d	$r12,$r28,8(0x8)
900000000800a5d0:	0010b318 	add.d	$r24,$r24,$r12
    kfree(pbuf[i]);
900000000800a5d4:	28c002e4 	ld.d	$r4,$r23,0
900000000800a5d8:	57876bff 	bl	-30872(0xfff8768) # 9000000008002d40 <kfree>
900000000800a5dc:	02c022f7 	addi.d	$r23,$r23,8(0x8)
  for (int i = 0; i < pagenum; i++) {
900000000800a5e0:	5ffff6f8 	bne	$r23,$r24,-12(0x3fff4) # 900000000800a5d4 <sys_copy_file_range+0x2f0>
  }
  kfree(pbuf);
900000000800a5e4:	00150384 	move	$r4,$r28
900000000800a5e8:	57875bff 	bl	-30888(0xfff8758) # 9000000008002d40 <kfree>
  return len;
900000000800a5ec:	28fde2d8 	ld.d	$r24,$r22,-136(0xf78)
900000000800a5f0:	00150304 	move	$r4,$r24
900000000800a5f4:	28c22061 	ld.d	$r1,$r3,136(0x88)
900000000800a5f8:	28c20076 	ld.d	$r22,$r3,128(0x80)
900000000800a5fc:	28c1e077 	ld.d	$r23,$r3,120(0x78)
900000000800a600:	28c1c078 	ld.d	$r24,$r3,112(0x70)
900000000800a604:	28c1a079 	ld.d	$r25,$r3,104(0x68)
900000000800a608:	28c1807a 	ld.d	$r26,$r3,96(0x60)
900000000800a60c:	28c1607b 	ld.d	$r27,$r3,88(0x58)
900000000800a610:	28c1407c 	ld.d	$r28,$r3,80(0x50)
900000000800a614:	28c1207d 	ld.d	$r29,$r3,72(0x48)
900000000800a618:	28c1007e 	ld.d	$r30,$r3,64(0x40)
900000000800a61c:	28c0e07f 	ld.d	$r31,$r3,56(0x38)
900000000800a620:	02c24063 	addi.d	$r3,$r3,144(0x90)
900000000800a624:	4c000020 	jirl	$r0,$r1,0
    pagenum = len / PGSIZE + 1;
900000000800a628:	00453318 	srli.d	$r24,$r24,0xc
900000000800a62c:	00408318 	slli.w	$r24,$r24,0x0
900000000800a630:	02800718 	addi.w	$r24,$r24,1(0x1)
900000000800a634:	53fd67ff 	b	-668(0xffffd64) # 900000000800a398 <sys_copy_file_range+0xb4>
      char *buf = kalloc();
900000000800a638:	57889bff 	bl	-30568(0xfff8898) # 9000000008002ed0 <kalloc>
900000000800a63c:	00150097 	move	$r23,$r4
      memset(buf, 0, PGSIZE);
900000000800a640:	14000026 	lu12i.w	$r6,1(0x1)
900000000800a644:	00150005 	move	$r5,$r0
900000000800a648:	57691fff 	bl	-38628(0xfff691c) # 9000000008000f64 <memset>
      ewrite(fp_out->ep, 0, buf, fp_out->ep->file_size,
900000000800a64c:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800a650:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800a654:	28842087 	ld.w	$r7,$r4,264(0x108)
900000000800a658:	28808188 	ld.w	$r8,$r12,32(0x20)
900000000800a65c:	00111d08 	sub.w	$r8,$r8,$r7
900000000800a660:	001502e6 	move	$r6,$r23
900000000800a664:	00150005 	move	$r5,$r0
900000000800a668:	542a2400 	bl	10788(0x2a24) # 900000000800d08c <ewrite>
      kfree(buf);
900000000800a66c:	001502e4 	move	$r4,$r23
900000000800a670:	5786d3ff 	bl	-31024(0xfff86d0) # 9000000008002d40 <kfree>
900000000800a674:	53fe63ff 	b	-416(0xffffe60) # 900000000800a4d4 <sys_copy_file_range+0x1f0>

900000000800a678 <readelfhdr>:
  return 0;
}

// read and check elf header
// return 0 on success,-1 on failure
static int readelfhdr(struct dirent *ep, struct elfhdr *elf) {
900000000800a678:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800a67c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800a680:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800a684:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800a688:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800a68c:	001500b7 	move	$r23,$r5
  // Check ELF header
  if (eread(ep, 0, (uint64)elf, 0, sizeof(struct elfhdr)) !=
900000000800a690:	02810008 	addi.w	$r8,$r0,64(0x40)
900000000800a694:	00150007 	move	$r7,$r0
900000000800a698:	001500a6 	move	$r6,$r5
900000000800a69c:	00150005 	move	$r5,$r0
900000000800a6a0:	54288c00 	bl	10380(0x288c) # 900000000800cf2c <eread>
900000000800a6a4:	0281000c 	addi.w	$r12,$r0,64(0x40)
900000000800a6a8:	5c00308c 	bne	$r4,$r12,48(0x30) # 900000000800a6d8 <readelfhdr+0x60>
      sizeof(struct elfhdr))
    return -1;
  if (elf->magic != ELF_MAGIC)
900000000800a6ac:	288002e4 	ld.w	$r4,$r23,0
900000000800a6b0:	148c988c 	lu12i.w	$r12,287940(0x464c4)
900000000800a6b4:	0395fd8c 	ori	$r12,$r12,0x57f
900000000800a6b8:	0011b084 	sub.d	$r4,$r4,$r12
900000000800a6bc:	00129004 	sltu	$r4,$r0,$r4
900000000800a6c0:	00119004 	sub.d	$r4,$r0,$r4
    return -1;
  return 0;
}
900000000800a6c4:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800a6c8:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800a6cc:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800a6d0:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800a6d4:	4c000020 	jirl	$r0,$r1,0
    return -1;
900000000800a6d8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800a6dc:	53ffebff 	b	-24(0xfffffe8) # 900000000800a6c4 <readelfhdr+0x4c>

900000000800a6e0 <loadseg>:
                   uint offset, uint sz) {
900000000800a6e0:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800a6e4:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000800a6e8:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000800a6ec:	29c12077 	st.d	$r23,$r3,72(0x48)
900000000800a6f0:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800a6f4:	29c0e079 	st.d	$r25,$r3,56(0x38)
900000000800a6f8:	29c0c07a 	st.d	$r26,$r3,48(0x30)
900000000800a6fc:	29c0a07b 	st.d	$r27,$r3,40(0x28)
900000000800a700:	29c0807c 	st.d	$r28,$r3,32(0x20)
900000000800a704:	29c0607d 	st.d	$r29,$r3,24(0x18)
900000000800a708:	29c0407e 	st.d	$r30,$r3,16(0x10)
900000000800a70c:	29c0207f 	st.d	$r31,$r3,8(0x8)
900000000800a710:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000800a714:	0015009c 	move	$r28,$r4
900000000800a718:	001500b9 	move	$r25,$r5
900000000800a71c:	001500dd 	move	$r29,$r6
900000000800a720:	001500fe 	move	$r30,$r7
900000000800a724:	0015011a 	move	$r26,$r8
  if ((va % PGSIZE) != 0) {
900000000800a728:	037ffcb7 	andi	$r23,$r5,0xfff
  uint i = 0, n;
900000000800a72c:	00150018 	move	$r24,$r0
  if ((va % PGSIZE) != 0) {
900000000800a730:	440066e0 	bnez	$r23,100(0x64) # 900000000800a794 <loadseg+0xb4>
  for (; i < sz;) {
900000000800a734:	6c00cb1a 	bgeu	$r24,$r26,200(0xc8) # 900000000800a7fc <loadseg+0x11c>
    if (sz - i < PGSIZE)
900000000800a738:	03bffc1f 	ori	$r31,$r0,0xfff
      n = PGSIZE;
900000000800a73c:	1400003b 	lu12i.w	$r27,1(0x1)
    pa = walkaddr(pagetable, va);
900000000800a740:	00150325 	move	$r5,$r25
900000000800a744:	00150384 	move	$r4,$r28
900000000800a748:	5789dbff 	bl	-30248(0xfff89d8) # 9000000008003120 <walkaddr>
    if (pa == NULL)
900000000800a74c:	4000a480 	beqz	$r4,164(0xa4) # 900000000800a7f0 <loadseg+0x110>
    if (sz - i < PGSIZE)
900000000800a750:	00116357 	sub.w	$r23,$r26,$r24
      n = PGSIZE;
900000000800a754:	0012dfec 	sltu	$r12,$r31,$r23
900000000800a758:	0013b2f7 	masknez	$r23,$r23,$r12
900000000800a75c:	0013336c 	maskeqz	$r12,$r27,$r12
900000000800a760:	001532f7 	or	$r23,$r23,$r12
    if (eread(ep, 0, (uint64)pa, offset + i, n) != n)
900000000800a764:	001502e8 	move	$r8,$r23
900000000800a768:	001063c7 	add.w	$r7,$r30,$r24
900000000800a76c:	00150086 	move	$r6,$r4
900000000800a770:	00150005 	move	$r5,$r0
900000000800a774:	001503a4 	move	$r4,$r29
900000000800a778:	5427b400 	bl	10164(0x27b4) # 900000000800cf2c <eread>
900000000800a77c:	5c008897 	bne	$r4,$r23,136(0x88) # 900000000800a804 <loadseg+0x124>
    i += n;
900000000800a780:	001062f8 	add.w	$r24,$r23,$r24
    va += PGSIZE;
900000000800a784:	0010ef39 	add.d	$r25,$r25,$r27
  for (; i < sz;) {
900000000800a788:	6bffbb1a 	bltu	$r24,$r26,-72(0x3ffb8) # 900000000800a740 <loadseg+0x60>
  return 0;
900000000800a78c:	00150004 	move	$r4,$r0
900000000800a790:	50007800 	b	120(0x78) # 900000000800a808 <loadseg+0x128>
    va = va - va_off;
900000000800a794:	0011dcb9 	sub.d	$r25,$r5,$r23
    pa = walkaddr(pagetable, va);
900000000800a798:	00150325 	move	$r5,$r25
900000000800a79c:	578987ff 	bl	-30332(0xfff8984) # 9000000008003120 <walkaddr>
    if (pa == NULL)
900000000800a7a0:	40004480 	beqz	$r4,68(0x44) # 900000000800a7e4 <loadseg+0x104>
    n = PGSIZE - va_off;
900000000800a7a4:	14000038 	lu12i.w	$r24,1(0x1)
900000000800a7a8:	00115f18 	sub.w	$r24,$r24,$r23
    if (eread(ep, 0, (uint64)(pa + va_off), offset, n) != n) {
900000000800a7ac:	00150308 	move	$r8,$r24
900000000800a7b0:	001503c7 	move	$r7,$r30
900000000800a7b4:	001092e6 	add.d	$r6,$r23,$r4
900000000800a7b8:	00150005 	move	$r5,$r0
900000000800a7bc:	001503a4 	move	$r4,$r29
900000000800a7c0:	54276c00 	bl	10092(0x276c) # 900000000800cf2c <eread>
    va += PGSIZE;
900000000800a7c4:	1400002c 	lu12i.w	$r12,1(0x1)
900000000800a7c8:	0010b339 	add.d	$r25,$r25,$r12
    if (eread(ep, 0, (uint64)(pa + va_off), offset, n) != n) {
900000000800a7cc:	5bff6898 	beq	$r4,$r24,-152(0x3ff68) # 900000000800a734 <loadseg+0x54>
      printf("loadseg: read error\n");
900000000800a7d0:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a7d4:	02f2e084 	addi.d	$r4,$r4,-840(0xcb8)
900000000800a7d8:	575a9fff 	bl	-42340(0xfff5a9c) # 9000000008000274 <printf>
      return -1;
900000000800a7dc:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800a7e0:	50002800 	b	40(0x28) # 900000000800a808 <loadseg+0x128>
      panic("loadseg: address should exist");
900000000800a7e4:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a7e8:	02f21084 	addi.d	$r4,$r4,-892(0xc84)
900000000800a7ec:	575a1bff 	bl	-42472(0xfff5a18) # 9000000008000204 <panic>
      panic("loadseg: address should exist");
900000000800a7f0:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a7f4:	02f1e084 	addi.d	$r4,$r4,-904(0xc78)
900000000800a7f8:	575a0fff 	bl	-42484(0xfff5a0c) # 9000000008000204 <panic>
  return 0;
900000000800a7fc:	00150004 	move	$r4,$r0
900000000800a800:	50000800 	b	8(0x8) # 900000000800a808 <loadseg+0x128>
      return -1;
900000000800a804:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800a808:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000800a80c:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000800a810:	28c12077 	ld.d	$r23,$r3,72(0x48)
900000000800a814:	28c10078 	ld.d	$r24,$r3,64(0x40)
900000000800a818:	28c0e079 	ld.d	$r25,$r3,56(0x38)
900000000800a81c:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
900000000800a820:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
900000000800a824:	28c0807c 	ld.d	$r28,$r3,32(0x20)
900000000800a828:	28c0607d 	ld.d	$r29,$r3,24(0x18)
900000000800a82c:	28c0407e 	ld.d	$r30,$r3,16(0x10)
900000000800a830:	28c0207f 	ld.d	$r31,$r3,8(0x8)
900000000800a834:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000800a838:	4c000020 	jirl	$r0,$r1,0

900000000800a83c <create_kpagetable>:

pagetable_t create_kpagetable(struct proc *p) {
900000000800a83c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800a840:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800a844:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800a848:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800a84c:	29c00078 	st.d	$r24,$r3,0
900000000800a850:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800a854:	00150098 	move	$r24,$r4
  pagetable_t kpagetable;
  // Make a copy of p->kpt without old user space,
  // but with the same kstack we are using now, which can't be changed
  if ((kpagetable = (pagetable_t)kalloc()) == NULL) {
900000000800a858:	57867bff 	bl	-31112(0xfff8678) # 9000000008002ed0 <kalloc>
900000000800a85c:	00150097 	move	$r23,$r4
900000000800a860:	40001880 	beqz	$r4,24(0x18) # 900000000800a878 <create_kpagetable+0x3c>
    return 0;
  }
  memmove(kpagetable, p->kpagetable, PGSIZE);
900000000800a864:	14000026 	lu12i.w	$r6,1(0x1)
900000000800a868:	28c1a305 	ld.d	$r5,$r24,104(0x68)
900000000800a86c:	5767a3ff 	bl	-39008(0xfff67a0) # 900000000800100c <memmove>
  for (int i = 0; i < PX(2, MAXUVA); i++) {
    kpagetable[i] = 0;
900000000800a870:	29c002e0 	st.d	$r0,$r23,0
900000000800a874:	29c022e0 	st.d	$r0,$r23,8(0x8)
  }
  return kpagetable;
}
900000000800a878:	001502e4 	move	$r4,$r23
900000000800a87c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800a880:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800a884:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800a888:	28c00078 	ld.d	$r24,$r3,0
900000000800a88c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800a890:	4c000020 	jirl	$r0,$r1,0

900000000800a894 <stackdisplay>:

void stackdisplay(pagetable_t pagetable, uint64 sp, uint64 sz) {
  for (uint64 i = sp; i < sz; i += 8) {
900000000800a894:	6c00bca6 	bgeu	$r5,$r6,188(0xbc) # 900000000800a950 <stackdisplay+0xbc>
void stackdisplay(pagetable_t pagetable, uint64 sp, uint64 sz) {
900000000800a898:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800a89c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800a8a0:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800a8a4:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800a8a8:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800a8ac:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800a8b0:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800a8b4:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800a8b8:	29c0007c 	st.d	$r28,$r3,0
900000000800a8bc:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800a8c0:	00150099 	move	$r25,$r4
900000000800a8c4:	001500b7 	move	$r23,$r5
900000000800a8c8:	001500d8 	move	$r24,$r6
    uint64 *pa = (void *)walkaddr(pagetable, i) + i - PGROUNDDOWN(i);
900000000800a8cc:	15fffffa 	lu12i.w	$r26,-1(0xfffff)
    if (pa)
      printf("addr %p phaddr:%p value %p\n", i, pa, *pa);
    else
      printf("addr %p value (nil)\n", i);
900000000800a8d0:	1c00021c 	pcaddu12i	$r28,16(0x10)
900000000800a8d4:	02efc39c 	addi.d	$r28,$r28,-1040(0xbf0)
      printf("addr %p phaddr:%p value %p\n", i, pa, *pa);
900000000800a8d8:	1c00021b 	pcaddu12i	$r27,16(0x10)
900000000800a8dc:	02ef237b 	addi.d	$r27,$r27,-1080(0xbc8)
900000000800a8e0:	50002000 	b	32(0x20) # 900000000800a900 <stackdisplay+0x6c>
    uint64 *pa = (void *)walkaddr(pagetable, i) + i - PGROUNDDOWN(i);
900000000800a8e4:	00119886 	sub.d	$r6,$r4,$r6
      printf("addr %p phaddr:%p value %p\n", i, pa, *pa);
900000000800a8e8:	28c000c7 	ld.d	$r7,$r6,0
900000000800a8ec:	001502e5 	move	$r5,$r23
900000000800a8f0:	00150364 	move	$r4,$r27
900000000800a8f4:	575983ff 	bl	-42624(0xfff5980) # 9000000008000274 <printf>
  for (uint64 i = sp; i < sz; i += 8) {
900000000800a8f8:	02c022f7 	addi.d	$r23,$r23,8(0x8)
900000000800a8fc:	6c002ef8 	bgeu	$r23,$r24,44(0x2c) # 900000000800a928 <stackdisplay+0x94>
    uint64 *pa = (void *)walkaddr(pagetable, i) + i - PGROUNDDOWN(i);
900000000800a900:	001502e5 	move	$r5,$r23
900000000800a904:	00150324 	move	$r4,$r25
900000000800a908:	57881bff 	bl	-30696(0xfff8818) # 9000000008003120 <walkaddr>
900000000800a90c:	0010dc84 	add.d	$r4,$r4,$r23
900000000800a910:	0014eae6 	and	$r6,$r23,$r26
    if (pa)
900000000800a914:	5fffd086 	bne	$r4,$r6,-48(0x3ffd0) # 900000000800a8e4 <stackdisplay+0x50>
      printf("addr %p value (nil)\n", i);
900000000800a918:	001502e5 	move	$r5,$r23
900000000800a91c:	00150384 	move	$r4,$r28
900000000800a920:	575957ff 	bl	-42668(0xfff5954) # 9000000008000274 <printf>
900000000800a924:	53ffd7ff 	b	-44(0xfffffd4) # 900000000800a8f8 <stackdisplay+0x64>
  }
}
900000000800a928:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800a92c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800a930:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800a934:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800a938:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800a93c:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800a940:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800a944:	28c0007c 	ld.d	$r28,$r3,0
900000000800a948:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800a94c:	4c000020 	jirl	$r0,$r1,0
900000000800a950:	4c000020 	jirl	$r0,$r1,0

900000000800a954 <loadelf>:

// 加载elf文件，成功返回0，失败返回-1
uint64 loadelf(struct elfhdr *elf, struct dirent *ep, struct proghdr *phdr,
               pagetable_t pagetable, pagetable_t kpagetable, uint64 *sz,
               int *is_dynamic) {
900000000800a954:	02fcc063 	addi.d	$r3,$r3,-208(0xf30)
900000000800a958:	29c32061 	st.d	$r1,$r3,200(0xc8)
900000000800a95c:	29c30076 	st.d	$r22,$r3,192(0xc0)
900000000800a960:	29c2e077 	st.d	$r23,$r3,184(0xb8)
900000000800a964:	29c2c078 	st.d	$r24,$r3,176(0xb0)
900000000800a968:	29c2a079 	st.d	$r25,$r3,168(0xa8)
900000000800a96c:	29c2807a 	st.d	$r26,$r3,160(0xa0)
900000000800a970:	29c2607b 	st.d	$r27,$r3,152(0x98)
900000000800a974:	29c2407c 	st.d	$r28,$r3,144(0x90)
900000000800a978:	29c2207d 	st.d	$r29,$r3,136(0x88)
900000000800a97c:	29c2007e 	st.d	$r30,$r3,128(0x80)
900000000800a980:	29c1e07f 	st.d	$r31,$r3,120(0x78)
900000000800a984:	02c34076 	addi.d	$r22,$r3,208(0xd0)
  uint64 sz1;
  int i, off;
  struct proghdr ph;
  int getphdr = 0;
  // Load program into memory.
  for (i = 0, off = elf->phoff; i < elf->phnum;
900000000800a988:	28808097 	ld.w	$r23,$r4,32(0x20)
900000000800a98c:	2a40e08c 	ld.hu	$r12,$r4,56(0x38)
900000000800a990:	4001f180 	beqz	$r12,496(0x1f0) # 900000000800ab80 <loadelf+0x22c>
900000000800a994:	29fce2ca 	st.d	$r10,$r22,-200(0xf38)
900000000800a998:	0015013c 	move	$r28,$r9
900000000800a99c:	29fd02c8 	st.d	$r8,$r22,-192(0xf40)
900000000800a9a0:	29fd42c7 	st.d	$r7,$r22,-176(0xf50)
900000000800a9a4:	001500d9 	move	$r25,$r6
900000000800a9a8:	29fd62c5 	st.d	$r5,$r22,-168(0xf58)
900000000800a9ac:	0015009a 	move	$r26,$r4
  int getphdr = 0;
900000000800a9b0:	29fd22c0 	st.d	$r0,$r22,-184(0xf48)
  for (i = 0, off = elf->phoff; i < elf->phnum;
900000000800a9b4:	00150018 	move	$r24,$r0
    if (eread(ep, 0, (uint64)&ph, off, sizeof(struct proghdr)) !=
        sizeof(struct proghdr)) {
      printf("eread failed\n");
      return -1;
    }
    if (ph.type == ELF_PROG_LOAD) {
900000000800a9b8:	0280041b 	addi.w	$r27,$r0,1(0x1)
      *sz = sz1;
      if (loadseg(pagetable, ph.vaddr, ep, ph.off, ph.filesz) < 0) {
        printf("loadseg failed\n");
        return -1;
      }
    } else if (ph.type == ELF_PROG_PHDR) {
900000000800a9bc:	0280181d 	addi.w	$r29,$r0,6(0x6)
      if (phdr) {
        getphdr = 1;
        *phdr = ph;
      }
    } else if (ph.type == ELF_PROG_INTERP) {
900000000800a9c0:	02800c1e 	addi.w	$r30,$r0,3(0x3)
                          PGROUNDUP(ph.vaddr + ph.memsz), perm)) == 0) {
900000000800a9c4:	03bffc1f 	ori	$r31,$r0,0xfff
900000000800a9c8:	5000dc00 	b	220(0xdc) # 900000000800aaa4 <loadelf+0x150>
      printf("eread failed\n");
900000000800a9cc:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800a9d0:	02ee1084 	addi.d	$r4,$r4,-1148(0xb84)
900000000800a9d4:	5758a3ff 	bl	-42848(0xfff58a0) # 9000000008000274 <printf>
      return -1;
900000000800a9d8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
      // printf("ph.type: %d ph.type != ELF_PROG_LOAD\n", ph.type);
    }
  }
  // printf("loadelf success\n");
  return 0;
}
900000000800a9dc:	28c32061 	ld.d	$r1,$r3,200(0xc8)
900000000800a9e0:	28c30076 	ld.d	$r22,$r3,192(0xc0)
900000000800a9e4:	28c2e077 	ld.d	$r23,$r3,184(0xb8)
900000000800a9e8:	28c2c078 	ld.d	$r24,$r3,176(0xb0)
900000000800a9ec:	28c2a079 	ld.d	$r25,$r3,168(0xa8)
900000000800a9f0:	28c2807a 	ld.d	$r26,$r3,160(0xa0)
900000000800a9f4:	28c2607b 	ld.d	$r27,$r3,152(0x98)
900000000800a9f8:	28c2407c 	ld.d	$r28,$r3,144(0x90)
900000000800a9fc:	28c2207d 	ld.d	$r29,$r3,136(0x88)
900000000800aa00:	28c2007e 	ld.d	$r30,$r3,128(0x80)
900000000800aa04:	28c1e07f 	ld.d	$r31,$r3,120(0x78)
900000000800aa08:	02c34063 	addi.d	$r3,$r3,208(0xd0)
900000000800aa0c:	4c000020 	jirl	$r0,$r1,0
      if (ph.memsz < ph.filesz) {
900000000800aa10:	28fe42c7 	ld.d	$r7,$r22,-112(0xf90)
900000000800aa14:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800aa18:	6800ccec 	bltu	$r7,$r12,204(0xcc) # 900000000800aae4 <loadelf+0x190>
      if (ph.vaddr + ph.memsz < ph.vaddr) {
900000000800aa1c:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000800aa20:	0010b0e7 	add.d	$r7,$r7,$r12
900000000800aa24:	6800d4ec 	bltu	$r7,$r12,212(0xd4) # 900000000800aaf8 <loadelf+0x1a4>
      if (!getphdr && phdr && ph.off == 0) {
900000000800aa28:	28fd22cd 	ld.d	$r13,$r22,-184(0xf48)
900000000800aa2c:	44001da0 	bnez	$r13,28(0x1c) # 900000000800aa48 <loadelf+0xf4>
900000000800aa30:	40001b20 	beqz	$r25,24(0x18) # 900000000800aa48 <loadelf+0xf4>
900000000800aa34:	28fdc2cd 	ld.d	$r13,$r22,-144(0xf70)
900000000800aa38:	440011a0 	bnez	$r13,16(0x10) # 900000000800aa48 <loadelf+0xf4>
        phdr->vaddr = elf->phoff + ph.vaddr;
900000000800aa3c:	28c0834d 	ld.d	$r13,$r26,32(0x20)
900000000800aa40:	0010b1ac 	add.d	$r12,$r13,$r12
900000000800aa44:	29c0432c 	st.d	$r12,$r25,16(0x10)
      if (ph.flags & ELF_PROG_FLAG_WRITE)
900000000800aa48:	28bdb2c8 	ld.w	$r8,$r22,-148(0xf6c)
        perm |= PTE_W;
900000000800aa4c:	00c10508 	bstrpick.d	$r8,$r8,0x1,0x1
                          PGROUNDUP(ph.vaddr + ph.memsz), perm)) == 0) {
900000000800aa50:	0010fce7 	add.d	$r7,$r7,$r31
      if ((sz1 = uvmalloc(pagetable, kpagetable, *sz,
900000000800aa54:	00412108 	slli.d	$r8,$r8,0x8
900000000800aa58:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000800aa5c:	0014b0e7 	and	$r7,$r7,$r12
900000000800aa60:	28c00386 	ld.d	$r6,$r28,0
900000000800aa64:	28fd02c5 	ld.d	$r5,$r22,-192(0xf40)
900000000800aa68:	28fd42c4 	ld.d	$r4,$r22,-176(0xf50)
900000000800aa6c:	578f07ff 	bl	-28924(0xfff8f04) # 9000000008003970 <uvmalloc>
900000000800aa70:	40009c80 	beqz	$r4,156(0x9c) # 900000000800ab0c <loadelf+0x1b8>
      *sz = sz1;
900000000800aa74:	29c00384 	st.d	$r4,$r28,0
      if (loadseg(pagetable, ph.vaddr, ep, ph.off, ph.filesz) < 0) {
900000000800aa78:	28be22c8 	ld.w	$r8,$r22,-120(0xf88)
900000000800aa7c:	28bdc2c7 	ld.w	$r7,$r22,-144(0xf70)
900000000800aa80:	28fd62c6 	ld.d	$r6,$r22,-168(0xf58)
900000000800aa84:	28fde2c5 	ld.d	$r5,$r22,-136(0xf78)
900000000800aa88:	28fd42c4 	ld.d	$r4,$r22,-176(0xf50)
900000000800aa8c:	57fc57ff 	bl	-940(0xffffc54) # 900000000800a6e0 <loadseg>
900000000800aa90:	60009080 	blt	$r4,$r0,144(0x90) # 900000000800ab20 <loadelf+0x1cc>
       i++, off += sizeof(struct proghdr)) {
900000000800aa94:	02800718 	addi.w	$r24,$r24,1(0x1)
900000000800aa98:	0280e2f7 	addi.w	$r23,$r23,56(0x38)
  for (i = 0, off = elf->phoff; i < elf->phnum;
900000000800aa9c:	2a40e34c 	ld.hu	$r12,$r26,56(0x38)
900000000800aaa0:	6400db0c 	bge	$r24,$r12,216(0xd8) # 900000000800ab78 <loadelf+0x224>
    if (eread(ep, 0, (uint64)&ph, off, sizeof(struct proghdr)) !=
900000000800aaa4:	0280e008 	addi.w	$r8,$r0,56(0x38)
900000000800aaa8:	001502e7 	move	$r7,$r23
900000000800aaac:	02fda2c6 	addi.d	$r6,$r22,-152(0xf68)
900000000800aab0:	00150005 	move	$r5,$r0
900000000800aab4:	28fd62c4 	ld.d	$r4,$r22,-168(0xf58)
900000000800aab8:	54247400 	bl	9332(0x2474) # 900000000800cf2c <eread>
900000000800aabc:	0280e00c 	addi.w	$r12,$r0,56(0x38)
900000000800aac0:	5fff0c8c 	bne	$r4,$r12,-244(0x3ff0c) # 900000000800a9cc <loadelf+0x78>
    if (ph.type == ELF_PROG_LOAD) {
900000000800aac4:	28bda2cc 	ld.w	$r12,$r22,-152(0xf68)
900000000800aac8:	5bff499b 	beq	$r12,$r27,-184(0x3ff48) # 900000000800aa10 <loadelf+0xbc>
    } else if (ph.type == ELF_PROG_PHDR) {
900000000800aacc:	5800699d 	beq	$r12,$r29,104(0x68) # 900000000800ab34 <loadelf+0x1e0>
    } else if (ph.type == ELF_PROG_INTERP) {
900000000800aad0:	5fffc59e 	bne	$r12,$r30,-60(0x3ffc4) # 900000000800aa94 <loadelf+0x140>
      *is_dynamic = 1;
900000000800aad4:	28fce2cc 	ld.d	$r12,$r22,-200(0xf38)
900000000800aad8:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800aadc:	2980018d 	st.w	$r13,$r12,0
900000000800aae0:	53ffb7ff 	b	-76(0xfffffb4) # 900000000800aa94 <loadelf+0x140>
        printf("ph.memsz < ph.filesz\n");
900000000800aae4:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800aae8:	02e7d084 	addi.d	$r4,$r4,-1548(0x9f4)
900000000800aaec:	57578bff 	bl	-43128(0xfff5788) # 9000000008000274 <printf>
        return -1;
900000000800aaf0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800aaf4:	53feebff 	b	-280(0xffffee8) # 900000000800a9dc <loadelf+0x88>
        printf("ph.vaddr + ph.memsz < ph.vaddr\n");
900000000800aaf8:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800aafc:	02e7e084 	addi.d	$r4,$r4,-1544(0x9f8)
900000000800ab00:	575777ff 	bl	-43148(0xfff5774) # 9000000008000274 <printf>
        return -1;
900000000800ab04:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800ab08:	53fed7ff 	b	-300(0xffffed4) # 900000000800a9dc <loadelf+0x88>
        printf("uvmalloc failed\n");
900000000800ab0c:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800ab10:	02e81084 	addi.d	$r4,$r4,-1532(0xa04)
900000000800ab14:	575763ff 	bl	-43168(0xfff5760) # 9000000008000274 <printf>
        return -1;
900000000800ab18:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800ab1c:	53fec3ff 	b	-320(0xffffec0) # 900000000800a9dc <loadelf+0x88>
        printf("loadseg failed\n");
900000000800ab20:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800ab24:	02e82084 	addi.d	$r4,$r4,-1528(0xa08)
900000000800ab28:	57574fff 	bl	-43188(0xfff574c) # 9000000008000274 <printf>
        return -1;
900000000800ab2c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800ab30:	53feafff 	b	-340(0xffffeac) # 900000000800a9dc <loadelf+0x88>
      if (phdr) {
900000000800ab34:	43ff633f 	beqz	$r25,-160(0x7fff60) # 900000000800aa94 <loadelf+0x140>
        *phdr = ph;
900000000800ab38:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000800ab3c:	29c0032c 	st.d	$r12,$r25,0
900000000800ab40:	28fdc2cc 	ld.d	$r12,$r22,-144(0xf70)
900000000800ab44:	29c0232c 	st.d	$r12,$r25,8(0x8)
900000000800ab48:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000800ab4c:	29c0432c 	st.d	$r12,$r25,16(0x10)
900000000800ab50:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000800ab54:	29c0632c 	st.d	$r12,$r25,24(0x18)
900000000800ab58:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800ab5c:	29c0832c 	st.d	$r12,$r25,32(0x20)
900000000800ab60:	28fe42cc 	ld.d	$r12,$r22,-112(0xf90)
900000000800ab64:	29c0a32c 	st.d	$r12,$r25,40(0x28)
900000000800ab68:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000800ab6c:	29c0c32c 	st.d	$r12,$r25,48(0x30)
        getphdr = 1;
900000000800ab70:	29fd22db 	st.d	$r27,$r22,-184(0xf48)
900000000800ab74:	53ff23ff 	b	-224(0xfffff20) # 900000000800aa94 <loadelf+0x140>
  return 0;
900000000800ab78:	00150004 	move	$r4,$r0
900000000800ab7c:	53fe63ff 	b	-416(0xffffe60) # 900000000800a9dc <loadelf+0x88>
900000000800ab80:	00150004 	move	$r4,$r0
900000000800ab84:	53fe5bff 	b	-424(0xffffe58) # 900000000800a9dc <loadelf+0x88>

900000000800ab88 <get_total_mapping_size>:

uint64 get_total_mapping_size(struct elfhdr *interp_elf_ex,
                              struct dirent *interpreter) {
900000000800ab88:	02fd8063 	addi.d	$r3,$r3,-160(0xf60)
900000000800ab8c:	29c26061 	st.d	$r1,$r3,152(0x98)
900000000800ab90:	29c24076 	st.d	$r22,$r3,144(0x90)
900000000800ab94:	29c22077 	st.d	$r23,$r3,136(0x88)
900000000800ab98:	29c20078 	st.d	$r24,$r3,128(0x80)
900000000800ab9c:	29c1e079 	st.d	$r25,$r3,120(0x78)
900000000800aba0:	29c1c07a 	st.d	$r26,$r3,112(0x70)
900000000800aba4:	29c1a07b 	st.d	$r27,$r3,104(0x68)
900000000800aba8:	29c1807c 	st.d	$r28,$r3,96(0x60)
900000000800abac:	29c1607d 	st.d	$r29,$r3,88(0x58)
900000000800abb0:	29c1407e 	st.d	$r30,$r3,80(0x50)
900000000800abb4:	29c1207f 	st.d	$r31,$r3,72(0x48)
900000000800abb8:	02c28076 	addi.d	$r22,$r3,160(0xa0)
  uint64 min_addr = -1;
  uint64 max_addr = 0;
  int is_true = 0;
  struct proghdr ph;
  for (uint i = 0, off = interp_elf_ex->phoff; i < interp_elf_ex->phnum;
900000000800abbc:	28808097 	ld.w	$r23,$r4,32(0x20)
900000000800abc0:	2a40e08c 	ld.hu	$r12,$r4,56(0x38)
900000000800abc4:	4000e980 	beqz	$r12,232(0xe8) # 900000000800acac <get_total_mapping_size+0x124>
900000000800abc8:	001500bd 	move	$r29,$r5
900000000800abcc:	0015009b 	move	$r27,$r4
900000000800abd0:	00150018 	move	$r24,$r0
  int is_true = 0;
900000000800abd4:	0015001e 	move	$r30,$r0
  uint64 max_addr = 0;
900000000800abd8:	00150019 	move	$r25,$r0
  uint64 min_addr = -1;
900000000800abdc:	02bffc1a 	addi.w	$r26,$r0,-1(0xfff)
    if (eread(interpreter, 0, (uint64)&ph, off, sizeof(struct proghdr)) !=
        sizeof(struct proghdr)) {
      printf("[get_total_mapping_size]eread failed\n");
      return -1;
    }
    if (ph.type == ELF_PROG_LOAD) {
900000000800abe0:	0280041c 	addi.w	$r28,$r0,1(0x1)
      min_addr = min(min_addr, PGROUNDDOWN(ph.vaddr));
900000000800abe4:	15ffffff 	lu12i.w	$r31,-1(0xfffff)
900000000800abe8:	50005800 	b	88(0x58) # 900000000800ac40 <get_total_mapping_size+0xb8>
      printf("[get_total_mapping_size]eread failed\n");
900000000800abec:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800abf0:	02e53084 	addi.d	$r4,$r4,-1716(0x94c)
900000000800abf4:	575683ff 	bl	-43392(0xfff5680) # 9000000008000274 <printf>
      return -1;
900000000800abf8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
      max_addr = max(max_addr, ph.vaddr + ph.memsz);
      is_true = 1;
    }
  }
  return is_true ? (max_addr - min_addr) : 0;
}
900000000800abfc:	28c26061 	ld.d	$r1,$r3,152(0x98)
900000000800ac00:	28c24076 	ld.d	$r22,$r3,144(0x90)
900000000800ac04:	28c22077 	ld.d	$r23,$r3,136(0x88)
900000000800ac08:	28c20078 	ld.d	$r24,$r3,128(0x80)
900000000800ac0c:	28c1e079 	ld.d	$r25,$r3,120(0x78)
900000000800ac10:	28c1c07a 	ld.d	$r26,$r3,112(0x70)
900000000800ac14:	28c1a07b 	ld.d	$r27,$r3,104(0x68)
900000000800ac18:	28c1807c 	ld.d	$r28,$r3,96(0x60)
900000000800ac1c:	28c1607d 	ld.d	$r29,$r3,88(0x58)
900000000800ac20:	28c1407e 	ld.d	$r30,$r3,80(0x50)
900000000800ac24:	28c1207f 	ld.d	$r31,$r3,72(0x48)
900000000800ac28:	02c28063 	addi.d	$r3,$r3,160(0xa0)
900000000800ac2c:	4c000020 	jirl	$r0,$r1,0
       i++, off += sizeof(struct proghdr)) {
900000000800ac30:	02800718 	addi.w	$r24,$r24,1(0x1)
900000000800ac34:	0280e2f7 	addi.w	$r23,$r23,56(0x38)
  for (uint i = 0, off = interp_elf_ex->phoff; i < interp_elf_ex->phnum;
900000000800ac38:	2a40e36c 	ld.hu	$r12,$r27,56(0x38)
900000000800ac3c:	6c00670c 	bgeu	$r24,$r12,100(0x64) # 900000000800aca0 <get_total_mapping_size+0x118>
    if (eread(interpreter, 0, (uint64)&ph, off, sizeof(struct proghdr)) !=
900000000800ac40:	0280e008 	addi.w	$r8,$r0,56(0x38)
900000000800ac44:	001502e7 	move	$r7,$r23
900000000800ac48:	02fda2c6 	addi.d	$r6,$r22,-152(0xf68)
900000000800ac4c:	00150005 	move	$r5,$r0
900000000800ac50:	001503a4 	move	$r4,$r29
900000000800ac54:	5422d800 	bl	8920(0x22d8) # 900000000800cf2c <eread>
900000000800ac58:	0280e00c 	addi.w	$r12,$r0,56(0x38)
900000000800ac5c:	5fff908c 	bne	$r4,$r12,-112(0x3ff90) # 900000000800abec <get_total_mapping_size+0x64>
    if (ph.type == ELF_PROG_LOAD) {
900000000800ac60:	28bda2cc 	ld.w	$r12,$r22,-152(0xf68)
900000000800ac64:	5fffcd9c 	bne	$r12,$r28,-52(0x3ffcc) # 900000000800ac30 <get_total_mapping_size+0xa8>
      min_addr = min(min_addr, PGROUNDDOWN(ph.vaddr));
900000000800ac68:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000800ac6c:	0014fd8e 	and	$r14,$r12,$r31
900000000800ac70:	0012e9cd 	sltu	$r13,$r14,$r26
900000000800ac74:	0013b75a 	masknez	$r26,$r26,$r13
900000000800ac78:	001335cd 	maskeqz	$r13,$r14,$r13
900000000800ac7c:	0015375a 	or	$r26,$r26,$r13
      max_addr = max(max_addr, ph.vaddr + ph.memsz);
900000000800ac80:	28fe42cd 	ld.d	$r13,$r22,-112(0xf90)
900000000800ac84:	0010b58c 	add.d	$r12,$r12,$r13
900000000800ac88:	0012b32d 	sltu	$r13,$r25,$r12
900000000800ac8c:	0013b739 	masknez	$r25,$r25,$r13
900000000800ac90:	0013358c 	maskeqz	$r12,$r12,$r13
900000000800ac94:	00153339 	or	$r25,$r25,$r12
      is_true = 1;
900000000800ac98:	0015039e 	move	$r30,$r28
900000000800ac9c:	53ff97ff 	b	-108(0xfffff94) # 900000000800ac30 <get_total_mapping_size+0xa8>
  return is_true ? (max_addr - min_addr) : 0;
900000000800aca0:	0011eb39 	sub.d	$r25,$r25,$r26
900000000800aca4:	00137b24 	maskeqz	$r4,$r25,$r30
900000000800aca8:	53ff57ff 	b	-172(0xfffff54) # 900000000800abfc <get_total_mapping_size+0x74>
900000000800acac:	00150004 	move	$r4,$r0
900000000800acb0:	53ff4fff 	b	-180(0xfffff4c) # 900000000800abfc <get_total_mapping_size+0x74>

900000000800acb4 <load_elf_interp>:

uint64 load_elf_interp(pagetable_t pagetable, struct elfhdr *interp_elf_ex,
                       struct dirent *interpreter) {
900000000800acb4:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
900000000800acb8:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000800acbc:	29c20076 	st.d	$r22,$r3,128(0x80)
900000000800acc0:	29c1e077 	st.d	$r23,$r3,120(0x78)
900000000800acc4:	29c1c078 	st.d	$r24,$r3,112(0x70)
900000000800acc8:	29c1a079 	st.d	$r25,$r3,104(0x68)
900000000800accc:	29c1807a 	st.d	$r26,$r3,96(0x60)
900000000800acd0:	29c1607b 	st.d	$r27,$r3,88(0x58)
900000000800acd4:	29c1407c 	st.d	$r28,$r3,80(0x50)
900000000800acd8:	29c1207d 	st.d	$r29,$r3,72(0x48)
900000000800acdc:	02c24076 	addi.d	$r22,$r3,144(0x90)
900000000800ace0:	0015009d 	move	$r29,$r4
900000000800ace4:	001500ba 	move	$r26,$r5
900000000800ace8:	001500d9 	move	$r25,$r6
  uint64 total_size = 0;
  uint64 start_addr = 0;
  struct proghdr ph;
  /*----------------------获取总共需要的内存大小--------------------*/
  total_size = get_total_mapping_size(interp_elf_ex, interpreter);
900000000800acec:	001500c5 	move	$r5,$r6
900000000800acf0:	00150344 	move	$r4,$r26
900000000800acf4:	57fe97ff 	bl	-364(0xffffe94) # 900000000800ab88 <get_total_mapping_size>
  if (total_size == 0) {
900000000800acf8:	40004480 	beqz	$r4,68(0x44) # 900000000800ad3c <load_elf_interp+0x88>
    printf("[load_elf_interp]get_total_mapping_size failed\n");
    return -1;
  }
  /*----------------------分配总共需要的内存大小--------------------*/
  start_addr = mmap(0, total_size, PROT_READ | PROT_WRITE | PROT_EXEC,
900000000800acfc:	00150009 	move	$r9,$r0
900000000800ad00:	02bffc08 	addi.w	$r8,$r0,-1(0xfff)
900000000800ad04:	02808807 	addi.w	$r7,$r0,34(0x22)
900000000800ad08:	02801c06 	addi.w	$r6,$r0,7(0x7)
900000000800ad0c:	00150085 	move	$r5,$r4
900000000800ad10:	00150004 	move	$r4,$r0
900000000800ad14:	543fb800 	bl	16312(0x3fb8) # 900000000800eccc <mmap>
900000000800ad18:	0015009c 	move	$r28,$r4
                    MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  if (start_addr == -1) {
900000000800ad1c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800ad20:	5800308c 	beq	$r4,$r12,48(0x30) # 900000000800ad50 <load_elf_interp+0x9c>
    printf("[load_elf_interp]mmap failed\n");
    return -1;
  }
  /*----------------------加载elf文件--------------------*/
  for (uint i = 0, off = interp_elf_ex->phoff; i < interp_elf_ex->phnum;
900000000800ad24:	28808357 	ld.w	$r23,$r26,32(0x20)
900000000800ad28:	2a40e34c 	ld.hu	$r12,$r26,56(0x38)
900000000800ad2c:	40004580 	beqz	$r12,68(0x44) # 900000000800ad70 <load_elf_interp+0xbc>
900000000800ad30:	00150018 	move	$r24,$r0
    if (eread(interpreter, 0, (uint64)&ph, off, sizeof(struct proghdr)) !=
        sizeof(struct proghdr)) {
      printf("[load_elf_interp]eread failed\n");
      return -1;
    }
    if (ph.type == ELF_PROG_LOAD) {
900000000800ad34:	0280041b 	addi.w	$r27,$r0,1(0x1)
900000000800ad38:	5000a000 	b	160(0xa0) # 900000000800add8 <load_elf_interp+0x124>
    printf("[load_elf_interp]get_total_mapping_size failed\n");
900000000800ad3c:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800ad40:	02e09084 	addi.d	$r4,$r4,-2012(0x824)
900000000800ad44:	575533ff 	bl	-43728(0xfff5530) # 9000000008000274 <printf>
    return -1;
900000000800ad48:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
900000000800ad4c:	50002400 	b	36(0x24) # 900000000800ad70 <load_elf_interp+0xbc>
    printf("[load_elf_interp]mmap failed\n");
900000000800ad50:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800ad54:	02e10084 	addi.d	$r4,$r4,-1984(0x840)
900000000800ad58:	57551fff 	bl	-43748(0xfff551c) # 9000000008000274 <printf>
    return -1;
900000000800ad5c:	50001400 	b	20(0x14) # 900000000800ad70 <load_elf_interp+0xbc>
      printf("[load_elf_interp]eread failed\n");
900000000800ad60:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800ad64:	02e14084 	addi.d	$r4,$r4,-1968(0x850)
900000000800ad68:	57550fff 	bl	-43764(0xfff550c) # 9000000008000274 <printf>
      return -1;
900000000800ad6c:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
        return -1;
      }
    }
  }
  return start_addr;
}
900000000800ad70:	00150384 	move	$r4,$r28
900000000800ad74:	28c22061 	ld.d	$r1,$r3,136(0x88)
900000000800ad78:	28c20076 	ld.d	$r22,$r3,128(0x80)
900000000800ad7c:	28c1e077 	ld.d	$r23,$r3,120(0x78)
900000000800ad80:	28c1c078 	ld.d	$r24,$r3,112(0x70)
900000000800ad84:	28c1a079 	ld.d	$r25,$r3,104(0x68)
900000000800ad88:	28c1807a 	ld.d	$r26,$r3,96(0x60)
900000000800ad8c:	28c1607b 	ld.d	$r27,$r3,88(0x58)
900000000800ad90:	28c1407c 	ld.d	$r28,$r3,80(0x50)
900000000800ad94:	28c1207d 	ld.d	$r29,$r3,72(0x48)
900000000800ad98:	02c24063 	addi.d	$r3,$r3,144(0x90)
900000000800ad9c:	4c000020 	jirl	$r0,$r1,0
        printf("[load_elf_interp]ph.memsz < ph.filesz\n");
900000000800ada0:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800ada4:	02e0c084 	addi.d	$r4,$r4,-2000(0x830)
900000000800ada8:	5754cfff 	bl	-43828(0xfff54cc) # 9000000008000274 <printf>
        return -1;
900000000800adac:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
900000000800adb0:	53ffc3ff 	b	-64(0xfffffc0) # 900000000800ad70 <load_elf_interp+0xbc>
        printf("[load_elf_interp]ph.vaddr + ph.memsz < ph.vaddr\n");
900000000800adb4:	1c000204 	pcaddu12i	$r4,16(0x10)
900000000800adb8:	02e11084 	addi.d	$r4,$r4,-1980(0x844)
900000000800adbc:	5754bbff 	bl	-43848(0xfff54b8) # 9000000008000274 <printf>
        return -1;
900000000800adc0:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
900000000800adc4:	53ffafff 	b	-84(0xfffffac) # 900000000800ad70 <load_elf_interp+0xbc>
       i++, off += sizeof(struct proghdr)) {
900000000800adc8:	02800718 	addi.w	$r24,$r24,1(0x1)
900000000800adcc:	0280e2f7 	addi.w	$r23,$r23,56(0x38)
  for (uint i = 0, off = interp_elf_ex->phoff; i < interp_elf_ex->phnum;
900000000800add0:	2a40e34c 	ld.hu	$r12,$r26,56(0x38)
900000000800add4:	6fff9f0c 	bgeu	$r24,$r12,-100(0x3ff9c) # 900000000800ad70 <load_elf_interp+0xbc>
    if (eread(interpreter, 0, (uint64)&ph, off, sizeof(struct proghdr)) !=
900000000800add8:	0280e008 	addi.w	$r8,$r0,56(0x38)
900000000800addc:	001502e7 	move	$r7,$r23
900000000800ade0:	02fde2c6 	addi.d	$r6,$r22,-136(0xf78)
900000000800ade4:	00150005 	move	$r5,$r0
900000000800ade8:	00150324 	move	$r4,$r25
900000000800adec:	54214000 	bl	8512(0x2140) # 900000000800cf2c <eread>
900000000800adf0:	0280e00c 	addi.w	$r12,$r0,56(0x38)
900000000800adf4:	5fff6c8c 	bne	$r4,$r12,-148(0x3ff6c) # 900000000800ad60 <load_elf_interp+0xac>
    if (ph.type == ELF_PROG_LOAD) {
900000000800adf8:	28bde2cc 	ld.w	$r12,$r22,-136(0xf78)
900000000800adfc:	5fffcd9b 	bne	$r12,$r27,-52(0x3ffcc) # 900000000800adc8 <load_elf_interp+0x114>
      if (ph.memsz < ph.filesz) {
900000000800ae00:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000800ae04:	28fe62c8 	ld.d	$r8,$r22,-104(0xf98)
900000000800ae08:	6bff9988 	bltu	$r12,$r8,-104(0x3ff98) # 900000000800ada0 <load_elf_interp+0xec>
      if (ph.vaddr + ph.memsz < ph.vaddr) {
900000000800ae0c:	28fe22c5 	ld.d	$r5,$r22,-120(0xf88)
900000000800ae10:	0010958c 	add.d	$r12,$r12,$r5
900000000800ae14:	6bffa185 	bltu	$r12,$r5,-96(0x3ffa0) # 900000000800adb4 <load_elf_interp+0x100>
      if (loadseg(pagetable, start_addr + ph.vaddr, interpreter, ph.off,
900000000800ae18:	00408108 	slli.w	$r8,$r8,0x0
900000000800ae1c:	28be02c7 	ld.w	$r7,$r22,-128(0xf80)
900000000800ae20:	00150326 	move	$r6,$r25
900000000800ae24:	0010f0a5 	add.d	$r5,$r5,$r28
900000000800ae28:	001503a4 	move	$r4,$r29
900000000800ae2c:	57f8b7ff 	bl	-1868(0xffff8b4) # 900000000800a6e0 <loadseg>
900000000800ae30:	67ff9880 	bge	$r4,$r0,-104(0x3ff98) # 900000000800adc8 <load_elf_interp+0x114>
        printf("[load_elf_interp]loadseg failed\n");
900000000800ae34:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800ae38:	02dff084 	addi.d	$r4,$r4,2044(0x7fc)
900000000800ae3c:	57543bff 	bl	-43976(0xfff5438) # 9000000008000274 <printf>
        return -1;
900000000800ae40:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
900000000800ae44:	53ff2fff 	b	-212(0xfffff2c) # 900000000800ad70 <load_elf_interp+0xbc>

900000000800ae48 <user_stack_push_str>:

int user_stack_push_str(pagetable_t pt, uint64 *ustack, char *str, uint64 sp,
                        uint64 stackbase) {
900000000800ae48:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800ae4c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800ae50:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800ae54:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800ae58:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800ae5c:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800ae60:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800ae64:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800ae68:	29c0007c 	st.d	$r28,$r3,0
900000000800ae6c:	02c10076 	addi.d	$r22,$r3,64(0x40)
  uint64 argc = ++ustack[0];
900000000800ae70:	28c000ac 	ld.d	$r12,$r5,0
900000000800ae74:	02c00599 	addi.d	$r25,$r12,1(0x1)
900000000800ae78:	29c000b9 	st.d	$r25,$r5,0
  if (argc > MAXARG + 1) {
900000000800ae7c:	0280840c 	addi.w	$r12,$r0,33(0x21)
900000000800ae80:	6800a199 	bltu	$r12,$r25,160(0xa0) # 900000000800af20 <user_stack_push_str+0xd8>
900000000800ae84:	0015011a 	move	$r26,$r8
900000000800ae88:	001500f7 	move	$r23,$r7
900000000800ae8c:	001500db 	move	$r27,$r6
900000000800ae90:	001500bc 	move	$r28,$r5
900000000800ae94:	00150098 	move	$r24,$r4
    return -1;
  }
  sp -= strlen(str) + 1;
900000000800ae98:	001500c4 	move	$r4,$r6
900000000800ae9c:	57633fff 	bl	-40132(0xfff633c) # 90000000080011d8 <strlen>
900000000800aea0:	02800484 	addi.w	$r4,$r4,1(0x1)
900000000800aea4:	001192f7 	sub.d	$r23,$r23,$r4
  sp -= sp % 16; // riscv sp must be 16-byte aligned
900000000800aea8:	02bfc004 	addi.w	$r4,$r0,-16(0xff0)
900000000800aeac:	001492f7 	and	$r23,$r23,$r4
  if (sp < stackbase) {
900000000800aeb0:	68007afa 	bltu	$r23,$r26,120(0x78) # 900000000800af28 <user_stack_push_str+0xe0>
    return -1;
  }
  if (copyout(pt, sp, str, strlen(str) + 1) < 0) {
900000000800aeb4:	00150364 	move	$r4,$r27
900000000800aeb8:	576323ff 	bl	-40160(0xfff6320) # 90000000080011d8 <strlen>
900000000800aebc:	02800487 	addi.w	$r7,$r4,1(0x1)
900000000800aec0:	00150366 	move	$r6,$r27
900000000800aec4:	001502e5 	move	$r5,$r23
900000000800aec8:	00150304 	move	$r4,$r24
900000000800aecc:	578fc3ff 	bl	-28736(0xfff8fc0) # 9000000008003e8c <copyout>
900000000800aed0:	60003c80 	blt	$r4,$r0,60(0x3c) # 900000000800af0c <user_stack_push_str+0xc4>
    printf("copyout failed\n");
    return -1;
  }
  ustack[argc] = sp;
900000000800aed4:	002d7325 	alsl.d	$r5,$r25,$r28,0x3
900000000800aed8:	29c000b7 	st.d	$r23,$r5,0
  ustack[argc + 1] = 0;
900000000800aedc:	29c020a0 	st.d	$r0,$r5,8(0x8)
  return sp;
900000000800aee0:	004082e4 	slli.w	$r4,$r23,0x0
}
900000000800aee4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800aee8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800aeec:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800aef0:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800aef4:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800aef8:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800aefc:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800af00:	28c0007c 	ld.d	$r28,$r3,0
900000000800af04:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800af08:	4c000020 	jirl	$r0,$r1,0
    printf("copyout failed\n");
900000000800af0c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800af10:	02dd3084 	addi.d	$r4,$r4,1868(0x74c)
900000000800af14:	575363ff 	bl	-44192(0xfff5360) # 9000000008000274 <printf>
    return -1;
900000000800af18:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800af1c:	53ffcbff 	b	-56(0xfffffc8) # 900000000800aee4 <user_stack_push_str+0x9c>
    return -1;
900000000800af20:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800af24:	53ffc3ff 	b	-64(0xfffffc0) # 900000000800aee4 <user_stack_push_str+0x9c>
    return -1;
900000000800af28:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800af2c:	53ffbbff 	b	-72(0xfffffb8) # 900000000800aee4 <user_stack_push_str+0x9c>

900000000800af30 <alloc_aux>:

void alloc_aux(uint64 *aux, uint64 atid, uint64 value) {
900000000800af30:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800af34:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800af38:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // printf("aux[%d] = %p\n",atid,value);
  uint64 argc = aux[0];
  aux[argc * 2 + 1] = atid;
900000000800af3c:	28c0008c 	ld.d	$r12,$r4,0
900000000800af40:	002d918c 	alsl.d	$r12,$r12,$r4,0x4
900000000800af44:	29c02185 	st.d	$r5,$r12,8(0x8)
  aux[argc * 2 + 2] = value;
900000000800af48:	29c04186 	st.d	$r6,$r12,16(0x10)
  aux[argc * 2 + 3] = 0;
900000000800af4c:	29c06180 	st.d	$r0,$r12,24(0x18)
  aux[argc * 2 + 4] = 0;
900000000800af50:	29c08180 	st.d	$r0,$r12,32(0x20)
  aux[0]++;
900000000800af54:	28c0008c 	ld.d	$r12,$r4,0
900000000800af58:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800af5c:	29c0008c 	st.d	$r12,$r4,0
}
900000000800af60:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800af64:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800af68:	4c000020 	jirl	$r0,$r1,0

900000000800af6c <loadaux>:

int loadaux(pagetable_t pagetable, uint64 sp, uint64 stackbase, uint64 *aux) {
  int argc = aux[0];
900000000800af6c:	288000ec 	ld.w	$r12,$r7,0
  if (!argc)
900000000800af70:	40007180 	beqz	$r12,112(0x70) # 900000000800afe0 <loadaux+0x74>
int loadaux(pagetable_t pagetable, uint64 sp, uint64 stackbase, uint64 *aux) {
900000000800af74:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800af78:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800af7c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800af80:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800af84:	02c08076 	addi.d	$r22,$r3,32(0x20)
  printf("aux argc:%d\n",argc);
  for(int i=1;i<=2*argc+2;i++){
    printf("final raw aux[%d] = %p\n",i,aux[i]);
  }
  */
  sp -= (2 * argc + 2) * sizeof(uint64);
900000000800af88:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800af8c:	0040858c 	slli.w	$r12,$r12,0x1
900000000800af90:	00410d8c 	slli.d	$r12,$r12,0x3
900000000800af94:	0011b0b7 	sub.d	$r23,$r5,$r12
  if (sp < stackbase) {
900000000800af98:	680052e6 	bltu	$r23,$r6,80(0x50) # 900000000800afe8 <loadaux+0x7c>
900000000800af9c:	001500e6 	move	$r6,$r7
    return -1;
  }
  aux[0] = 0;
900000000800afa0:	29c000e0 	st.d	$r0,$r7,0
  if (copyout(pagetable, sp, (char *)(aux + 1),
900000000800afa4:	00150187 	move	$r7,$r12
900000000800afa8:	02c020c6 	addi.d	$r6,$r6,8(0x8)
900000000800afac:	001502e5 	move	$r5,$r23
900000000800afb0:	578edfff 	bl	-28964(0xfff8edc) # 9000000008003e8c <copyout>
              (2 * argc + 2) * sizeof(uint64)) < 0) {
    return -1;
  }
  return sp;
900000000800afb4:	004082f7 	slli.w	$r23,$r23,0x0
900000000800afb8:	02000084 	slti	$r4,$r4,0
900000000800afbc:	001392f7 	masknez	$r23,$r23,$r4
900000000800afc0:	02bffc05 	addi.w	$r5,$r0,-1(0xfff)
900000000800afc4:	001310a4 	maskeqz	$r4,$r5,$r4
900000000800afc8:	001512e4 	or	$r4,$r23,$r4
}
900000000800afcc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800afd0:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800afd4:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800afd8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800afdc:	4c000020 	jirl	$r0,$r1,0
    return sp;
900000000800afe0:	004080a4 	slli.w	$r4,$r5,0x0
}
900000000800afe4:	4c000020 	jirl	$r0,$r1,0
    return -1;
900000000800afe8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800afec:	53ffe3ff 	b	-32(0xfffffe0) # 900000000800afcc <loadaux+0x60>

900000000800aff0 <is_sh_script>:

int is_sh_script(char *path) {
900000000800aff0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800aff4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800aff8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800affc:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800b000:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800b004:	00150097 	move	$r23,$r4
  int len = strlen(path);
900000000800b008:	5761d3ff 	bl	-40496(0xfff61d0) # 90000000080011d8 <strlen>
  if (len < 3) {
900000000800b00c:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000800b010:	640055a4 	bge	$r13,$r4,84(0x54) # 900000000800b064 <is_sh_script+0x74>
900000000800b014:	0015008c 	move	$r12,$r4
    return 0;
  }
  if (path[len - 1] == 'h' && path[len - 2] == 's' && path[len - 3] == '.') {
900000000800b018:	001092ed 	add.d	$r13,$r23,$r4
900000000800b01c:	283ffdae 	ld.b	$r14,$r13,-1(0xfff)
900000000800b020:	0281a00d 	addi.w	$r13,$r0,104(0x68)
    return 1;
  }
  return 0;
900000000800b024:	00150004 	move	$r4,$r0
  if (path[len - 1] == 'h' && path[len - 2] == 's' && path[len - 3] == '.') {
900000000800b028:	580019cd 	beq	$r14,$r13,24(0x18) # 900000000800b040 <is_sh_script+0x50>
}
900000000800b02c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800b030:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800b034:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800b038:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800b03c:	4c000020 	jirl	$r0,$r1,0
  if (path[len - 1] == 'h' && path[len - 2] == 's' && path[len - 3] == '.') {
900000000800b040:	0010b2ed 	add.d	$r13,$r23,$r12
900000000800b044:	283ff9ae 	ld.b	$r14,$r13,-2(0xffe)
900000000800b048:	0281cc0d 	addi.w	$r13,$r0,115(0x73)
900000000800b04c:	5fffe1cd 	bne	$r14,$r13,-32(0x3ffe0) # 900000000800b02c <is_sh_script+0x3c>
900000000800b050:	0010b2ec 	add.d	$r12,$r23,$r12
900000000800b054:	283ff584 	ld.b	$r4,$r12,-3(0xffd)
900000000800b058:	02ff4884 	addi.d	$r4,$r4,-46(0xfd2)
    return 0;
900000000800b05c:	02400484 	sltui	$r4,$r4,1(0x1)
900000000800b060:	53ffcfff 	b	-52(0xfffffcc) # 900000000800b02c <is_sh_script+0x3c>
900000000800b064:	00150004 	move	$r4,$r0
900000000800b068:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800b02c <is_sh_script+0x3c>

900000000800b06c <exec>:

int exec(char *path, char **argv, char **env) {
900000000800b06c:	02e90063 	addi.d	$r3,$r3,-1472(0xa40)
900000000800b070:	29d6e061 	st.d	$r1,$r3,1464(0x5b8)
900000000800b074:	29d6c076 	st.d	$r22,$r3,1456(0x5b0)
900000000800b078:	29d6a077 	st.d	$r23,$r3,1448(0x5a8)
900000000800b07c:	29d68078 	st.d	$r24,$r3,1440(0x5a0)
900000000800b080:	29d66079 	st.d	$r25,$r3,1432(0x598)
900000000800b084:	29d6407a 	st.d	$r26,$r3,1424(0x590)
900000000800b088:	29d6207b 	st.d	$r27,$r3,1416(0x588)
900000000800b08c:	29d6007c 	st.d	$r28,$r3,1408(0x580)
900000000800b090:	29d5e07d 	st.d	$r29,$r3,1400(0x578)
900000000800b094:	29d5c07e 	st.d	$r30,$r3,1392(0x570)
900000000800b098:	29d5a07f 	st.d	$r31,$r3,1384(0x568)
900000000800b09c:	02d70076 	addi.d	$r22,$r3,1472(0x5c0)
900000000800b0a0:	29ea22c4 	st.d	$r4,$r22,-1400(0xa88)
900000000800b0a4:	001500b7 	move	$r23,$r5
900000000800b0a8:	29e9e2c6 	st.d	$r6,$r22,-1416(0xa78)
  char *s, *last;
  uint64 argc, sz = 0, sp, ustack[MAXARG + 1], stackbase;
900000000800b0ac:	29fe62c0 	st.d	$r0,$r22,-104(0xf98)
  pagetable_t kpagetable = 0, oldkpagetable;
  struct dirent *interpreter = NULL;
  struct elfhdr interpreter_elf;
  uint64 interp_start_addr = 0;
  uint64 program_entry = 0;
  int is_dynamic = 0;
900000000800b0b0:	29b752c0 	st.w	$r0,$r22,-556(0xdd4)
  struct proc *p = myproc();
900000000800b0b4:	576677ff 	bl	-39308(0xfff6674) # 9000000008001728 <myproc>
900000000800b0b8:	0015009d 	move	$r29,$r4
  free_vma_list(p);
900000000800b0bc:	54444c00 	bl	17484(0x444c) # 900000000800f508 <free_vma_list>
  vma_init(p);
900000000800b0c0:	001503a4 	move	$r4,$r29
900000000800b0c4:	5440d800 	bl	16600(0x40d8) # 900000000800f19c <vma_init>

  oldpagetable = p->pagetable;
900000000800b0c8:	28c183be 	ld.d	$r30,$r29,96(0x60)
  oldkpagetable = p->kpagetable;
900000000800b0cc:	28c1a3bb 	ld.d	$r27,$r29,104(0x68)

  kpagetable = create_kpagetable(p);
900000000800b0d0:	001503a4 	move	$r4,$r29
900000000800b0d4:	57f76bff 	bl	-2200(0xffff768) # 900000000800a83c <create_kpagetable>
  if (kpagetable == 0) {
900000000800b0d8:	40004480 	beqz	$r4,68(0x44) # 900000000800b11c <exec+0xb0>
900000000800b0dc:	00150098 	move	$r24,$r4
    printf("[exec]create_kpagetable failed\n");
    return -1;
  }
  int is_shell_script = is_sh_script(path);
900000000800b0e0:	28ea22dc 	ld.d	$r28,$r22,-1400(0xa88)
900000000800b0e4:	00150384 	move	$r4,$r28
900000000800b0e8:	57ff0bff 	bl	-248(0xfffff08) # 900000000800aff0 <is_sh_script>
900000000800b0ec:	00150099 	move	$r25,$r4
  struct dirent *ep = NULL;
900000000800b0f0:	0015001a 	move	$r26,$r0
  if (is_shell_script) {
900000000800b0f4:	40003c80 	beqz	$r4,60(0x3c) # 900000000800b130 <exec+0xc4>

  return argc; // this ends up in a0, the first argument to main(argc, argv)

bad:
#ifdef DEBUG
  printf("[exec] reach bad\n");
900000000800b0f8:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b0fc:	02db6084 	addi.d	$r4,$r4,1752(0x6d8)
900000000800b100:	575177ff 	bl	-44684(0xfff5174) # 9000000008000274 <printf>
#endif
  if (pagetable)
    proc_freepagetable(pagetable, sz);
  if (kpagetable)
    kvmfree(kpagetable, 0, myproc());
900000000800b104:	576627ff 	bl	-39388(0xfff6624) # 9000000008001728 <myproc>
900000000800b108:	00150086 	move	$r6,$r4
900000000800b10c:	00150005 	move	$r5,$r0
900000000800b110:	00150304 	move	$r4,$r24
900000000800b114:	579307ff 	bl	-27900(0xfff9304) # 9000000008004418 <kvmfree>
  if (interpreter) {
900000000800b118:	50035c00 	b	860(0x35c) # 900000000800b474 <exec+0x408>
    printf("[exec]create_kpagetable failed\n");
900000000800b11c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b120:	02d53084 	addi.d	$r4,$r4,1356(0x54c)
900000000800b124:	575153ff 	bl	-44720(0xfff5150) # 9000000008000274 <printf>
    return -1;
900000000800b128:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800b12c:	50036400 	b	868(0x364) # 900000000800b490 <exec+0x424>
  if ((ep = ename(path)) == NULL) {
900000000800b130:	00150384 	move	$r4,$r28
900000000800b134:	5435f800 	bl	13816(0x35f8) # 900000000800e72c <ename>
900000000800b138:	0015009a 	move	$r26,$r4
900000000800b13c:	40021880 	beqz	$r4,536(0x218) # 900000000800b354 <exec+0x2e8>
  elock(ep);
900000000800b140:	542a4000 	bl	10816(0x2a40) # 900000000800db80 <elock>
  if (readelfhdr(ep, &elf) < 0) {
900000000800b144:	02f942c5 	addi.d	$r5,$r22,-432(0xe50)
900000000800b148:	00150344 	move	$r4,$r26
900000000800b14c:	57f52fff 	bl	-2772(0xffff52c) # 900000000800a678 <readelfhdr>
900000000800b150:	60021880 	blt	$r4,$r0,536(0x218) # 900000000800b368 <exec+0x2fc>
  if ((pagetable = proc_pagetable(p)) == NULL)
900000000800b154:	001503a4 	move	$r4,$r29
900000000800b158:	5766efff 	bl	-39188(0xfff66ec) # 9000000008001844 <proc_pagetable>
900000000800b15c:	0015009c 	move	$r28,$r4
900000000800b160:	43ff989f 	beqz	$r4,-104(0x7fff98) # 900000000800b0f8 <exec+0x8c>
  p->pagetable = pagetable;
900000000800b164:	29c183a4 	st.d	$r4,$r29,96(0x60)
  if (loadelf(&elf, ep, &ph, pagetable, kpagetable, &sz, &is_dynamic) < 0) {
900000000800b168:	02f752ca 	addi.d	$r10,$r22,-556(0xdd4)
900000000800b16c:	02fe62c9 	addi.d	$r9,$r22,-104(0xf98)
900000000800b170:	00150308 	move	$r8,$r24
900000000800b174:	00150087 	move	$r7,$r4
900000000800b178:	02f862c6 	addi.d	$r6,$r22,-488(0xe18)
900000000800b17c:	00150345 	move	$r5,$r26
900000000800b180:	02f942c4 	addi.d	$r4,$r22,-432(0xe50)
900000000800b184:	57f7d3ff 	bl	-2096(0xffff7d0) # 900000000800a954 <loadelf>
  if (is_dynamic) {
900000000800b188:	28b752cc 	ld.w	$r12,$r22,-556(0xdd4)
    program_entry = elf.entry;
900000000800b18c:	28f9a2cd 	ld.d	$r13,$r22,-408(0xe68)
900000000800b190:	29e962cd 	st.d	$r13,$r22,-1448(0xa58)
  uint64 interp_start_addr = 0;
900000000800b194:	0015001f 	move	$r31,$r0
  if (is_dynamic) {
900000000800b198:	4401e180 	bnez	$r12,480(0x1e0) # 900000000800b378 <exec+0x30c>
  eunlock(ep);
900000000800b19c:	00150344 	move	$r4,$r26
900000000800b1a0:	542a2000 	bl	10784(0x2a20) # 900000000800dbc0 <eunlock>
  eput(ep);
900000000800b1a4:	00150344 	move	$r4,$r26
900000000800b1a8:	542a7c00 	bl	10876(0x2a7c) # 900000000800dc24 <eput>
  p = myproc();
900000000800b1ac:	57657fff 	bl	-39556(0xfff657c) # 9000000008001728 <myproc>
900000000800b1b0:	0015009a 	move	$r26,$r4
900000000800b1b4:	29e982c4 	st.d	$r4,$r22,-1440(0xa60)
  uint64 oldsz = p->sz;
900000000800b1b8:	28c1608c 	ld.d	$r12,$r4,88(0x58)
900000000800b1bc:	29e922cc 	st.d	$r12,$r22,-1464(0xa48)
  alloc_vma_stack(p);
900000000800b1c0:	54444800 	bl	17480(0x4448) # 900000000800f608 <alloc_vma_stack>
  sp = get_proc_sp(p);
900000000800b1c4:	00150344 	move	$r4,$r26
900000000800b1c8:	54467000 	bl	18032(0x4670) # 900000000800f838 <get_proc_sp>
  stackbase = sp - INIT_STACK_SIZE;
900000000800b1cc:	15fff38c 	lu12i.w	$r12,-100(0xfff9c)
900000000800b1d0:	0010b08c 	add.d	$r12,$r4,$r12
900000000800b1d4:	29ea02cc 	st.d	$r12,$r22,-1408(0xa80)
  envp[0] = 0;
900000000800b1d8:	29f322c0 	st.d	$r0,$r22,-824(0xcc8)
  if ((sp = user_stack_push_str(pagetable, envp, "UB_BINDIR=.", sp,
900000000800b1dc:	00150188 	move	$r8,$r12
900000000800b1e0:	00150087 	move	$r7,$r4
900000000800b1e4:	1c0001e6 	pcaddu12i	$r6,15(0xf)
900000000800b1e8:	02d490c6 	addi.d	$r6,$r6,1316(0x524)
900000000800b1ec:	02f322c5 	addi.d	$r5,$r22,-824(0xcc8)
900000000800b1f0:	00150384 	move	$r4,$r28
900000000800b1f4:	57fc57ff 	bl	-940(0xffffc54) # 900000000800ae48 <user_stack_push_str>
900000000800b1f8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800b1fc:	58020c8c 	beq	$r4,$r12,524(0x20c) # 900000000800b408 <exec+0x39c>
  uint64 random[2] = {0xcde142a16cb93072, 0x128a39c127d8bbf2};
900000000800b200:	14d9726c 	lu12i.w	$r12,445331(0x6cb93)
900000000800b204:	0381c98c 	ori	$r12,$r12,0x72
900000000800b208:	1628542c 	lu32i.d	$r12,82593(0x142a1)
900000000800b20c:	0333798c 	lu52i.d	$r12,$r12,-802(0xcde)
900000000800b210:	29f2e2cc 	st.d	$r12,$r22,-840(0xcb8)
900000000800b214:	144fb16c 	lu12i.w	$r12,163211(0x27d8b)
900000000800b218:	03afc98c 	ori	$r12,$r12,0xbf2
900000000800b21c:	1747382c 	lu32i.d	$r12,-378431(0xa39c1)
900000000800b220:	0304a18c 	lu52i.d	$r12,$r12,296(0x128)
900000000800b224:	29f302cc 	st.d	$r12,$r22,-832(0xcc0)
  sp -= 16;
900000000800b228:	02ffc09a 	addi.d	$r26,$r4,-16(0xff0)
  if (sp < stackbase || copyout(pagetable, sp, (char *)random, 16) < 0) {
900000000800b22c:	28ea02cc 	ld.d	$r12,$r22,-1408(0xa80)
900000000800b230:	6801f34c 	bltu	$r26,$r12,496(0x1f0) # 900000000800b420 <exec+0x3b4>
900000000800b234:	02804007 	addi.w	$r7,$r0,16(0x10)
900000000800b238:	02f2e2c6 	addi.d	$r6,$r22,-840(0xcb8)
900000000800b23c:	00150345 	move	$r5,$r26
900000000800b240:	00150384 	move	$r4,$r28
900000000800b244:	578c4bff 	bl	-29624(0xfff8c48) # 9000000008003e8c <copyout>
900000000800b248:	6001d880 	blt	$r4,$r0,472(0x1d8) # 900000000800b420 <exec+0x3b4>
  uint64 aux[MAXARG * 2 + 3] = {0, 0, 0};
900000000800b24c:	02886006 	addi.w	$r6,$r0,536(0x218)
900000000800b250:	00150005 	move	$r5,$r0
900000000800b254:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b258:	575d0fff 	bl	-41716(0xfff5d0c) # 9000000008000f64 <memset>
  alloc_aux(aux, AT_HWCAP, 0);
900000000800b25c:	00150006 	move	$r6,$r0
900000000800b260:	02804005 	addi.w	$r5,$r0,16(0x10)
900000000800b264:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b268:	57fccbff 	bl	-824(0xffffcc8) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_PAGESZ, PGSIZE);
900000000800b26c:	14000026 	lu12i.w	$r6,1(0x1)
900000000800b270:	02801805 	addi.w	$r5,$r0,6(0x6)
900000000800b274:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b278:	57fcbbff 	bl	-840(0xffffcb8) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_PHDR, ph.vaddr);
900000000800b27c:	28f8a2c6 	ld.d	$r6,$r22,-472(0xe28)
900000000800b280:	02800c05 	addi.w	$r5,$r0,3(0x3)
900000000800b284:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b288:	57fcabff 	bl	-856(0xffffca8) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_PHENT, elf.phentsize);
900000000800b28c:	2a7a1ac6 	ld.hu	$r6,$r22,-378(0xe86)
900000000800b290:	02801005 	addi.w	$r5,$r0,4(0x4)
900000000800b294:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b298:	57fc9bff 	bl	-872(0xffffc98) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_PHNUM, elf.phnum);
900000000800b29c:	2a7a22c6 	ld.hu	$r6,$r22,-376(0xe88)
900000000800b2a0:	02801405 	addi.w	$r5,$r0,5(0x5)
900000000800b2a4:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b2a8:	57fc8bff 	bl	-888(0xffffc88) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_BASE, interp_start_addr);
900000000800b2ac:	001503e6 	move	$r6,$r31
900000000800b2b0:	02801c05 	addi.w	$r5,$r0,7(0x7)
900000000800b2b4:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b2b8:	57fc7bff 	bl	-904(0xffffc78) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_ENTRY, elf.entry);
900000000800b2bc:	28f9a2c6 	ld.d	$r6,$r22,-408(0xe68)
900000000800b2c0:	02802405 	addi.w	$r5,$r0,9(0x9)
900000000800b2c4:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b2c8:	57fc6bff 	bl	-920(0xffffc68) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_UID, 0);
900000000800b2cc:	00150006 	move	$r6,$r0
900000000800b2d0:	02802c05 	addi.w	$r5,$r0,11(0xb)
900000000800b2d4:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b2d8:	57fc5bff 	bl	-936(0xffffc58) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_EUID, 0);
900000000800b2dc:	00150006 	move	$r6,$r0
900000000800b2e0:	02803005 	addi.w	$r5,$r0,12(0xc)
900000000800b2e4:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b2e8:	57fc4bff 	bl	-952(0xffffc48) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_GID, 0);
900000000800b2ec:	00150006 	move	$r6,$r0
900000000800b2f0:	02803405 	addi.w	$r5,$r0,13(0xd)
900000000800b2f4:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b2f8:	57fc3bff 	bl	-968(0xffffc38) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_EGID, 0);
900000000800b2fc:	00150006 	move	$r6,$r0
900000000800b300:	02803805 	addi.w	$r5,$r0,14(0xe)
900000000800b304:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b308:	57fc2bff 	bl	-984(0xffffc28) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_SECURE, 0);
900000000800b30c:	00150006 	move	$r6,$r0
900000000800b310:	02805c05 	addi.w	$r5,$r0,23(0x17)
900000000800b314:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b318:	57fc1bff 	bl	-1000(0xffffc18) # 900000000800af30 <alloc_aux>
  alloc_aux(aux, AT_RANDOM, sp);
900000000800b31c:	00150346 	move	$r6,$r26
900000000800b320:	02806405 	addi.w	$r5,$r0,25(0x19)
900000000800b324:	02ea82c4 	addi.d	$r4,$r22,-1376(0xaa0)
900000000800b328:	57fc0bff 	bl	-1016(0xffffc08) # 900000000800af30 <alloc_aux>
  ustack[0] = 0;
900000000800b32c:	29fa42c0 	st.d	$r0,$r22,-368(0xe90)
  for (argc = 0; argv[argc]; argc++) {
900000000800b330:	28c002e4 	ld.d	$r4,$r23,0
900000000800b334:	40026480 	beqz	$r4,612(0x264) # 900000000800b598 <exec+0x52c>
  int jump = 0;
900000000800b338:	29e9a2d9 	st.d	$r25,$r22,-1432(0xa68)
  char *redir_file = 0;
900000000800b33c:	29e942c0 	st.d	$r0,$r22,-1456(0xa50)
  int redirection = -1;
900000000800b340:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800b344:	29e9c2cc 	st.d	$r12,$r22,-1424(0xa70)
  for (argc = 0; argv[argc]; argc++) {
900000000800b348:	0015001d 	move	$r29,$r0
    if (redirection != -1 && jump == 0) {
900000000800b34c:	02bffc1f 	addi.w	$r31,$r0,-1(0xfff)
900000000800b350:	5001f000 	b	496(0x1f0) # 900000000800b540 <exec+0x4d4>
    printf("[exec] %s not found\n", path);
900000000800b354:	28ea22c5 	ld.d	$r5,$r22,-1400(0xa88)
900000000800b358:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b35c:	02ccc084 	addi.d	$r4,$r4,816(0x330)
900000000800b360:	574f17ff 	bl	-45292(0xfff4f14) # 9000000008000274 <printf>
    goto bad;
900000000800b364:	53fd97ff 	b	-620(0xffffd94) # 900000000800b0f8 <exec+0x8c>
    printf("readelfhdr failed\n");
900000000800b368:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b36c:	02cce084 	addi.d	$r4,$r4,824(0x338)
900000000800b370:	574f07ff 	bl	-45308(0xfff4f04) # 9000000008000274 <printf>
    goto bad;
900000000800b374:	53fd87ff 	b	-636(0xffffd84) # 900000000800b0f8 <exec+0x8c>
    if ((interpreter = ename("/libc.so")) == NULL) {
900000000800b378:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b37c:	02cd0084 	addi.d	$r4,$r4,832(0x340)
900000000800b380:	5433ac00 	bl	13228(0x33ac) # 900000000800e72c <ename>
900000000800b384:	0015009d 	move	$r29,$r4
900000000800b388:	40006080 	beqz	$r4,96(0x60) # 900000000800b3e8 <exec+0x37c>
    elock(interpreter);
900000000800b38c:	5427f400 	bl	10228(0x27f4) # 900000000800db80 <elock>
    if (readelfhdr(interpreter, &interpreter_elf) < 0) {
900000000800b390:	02f762c5 	addi.d	$r5,$r22,-552(0xdd8)
900000000800b394:	001503a4 	move	$r4,$r29
900000000800b398:	57f2e3ff 	bl	-3360(0xffff2e0) # 900000000800a678 <readelfhdr>
900000000800b39c:	60005c80 	blt	$r4,$r0,92(0x5c) # 900000000800b3f8 <exec+0x38c>
        load_elf_interp(pagetable, &interpreter_elf, interpreter);
900000000800b3a0:	001503a6 	move	$r6,$r29
900000000800b3a4:	02f762c5 	addi.d	$r5,$r22,-552(0xdd8)
900000000800b3a8:	00150384 	move	$r4,$r28
900000000800b3ac:	57f90bff 	bl	-1784(0xffff908) # 900000000800acb4 <load_elf_interp>
900000000800b3b0:	0015009f 	move	$r31,$r4
    program_entry = interp_start_addr + interpreter_elf.entry;
900000000800b3b4:	28f7c2cc 	ld.d	$r12,$r22,-528(0xdf0)
900000000800b3b8:	0010b08c 	add.d	$r12,$r4,$r12
900000000800b3bc:	29e962cc 	st.d	$r12,$r22,-1448(0xa58)
    printf("interp_start_addr:%p program_entry:%p\n", interp_start_addr,
900000000800b3c0:	00150186 	move	$r6,$r12
900000000800b3c4:	00150085 	move	$r5,$r4
900000000800b3c8:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b3cc:	02cc6084 	addi.d	$r4,$r4,792(0x318)
900000000800b3d0:	574ea7ff 	bl	-45404(0xfff4ea4) # 9000000008000274 <printf>
    eunlock(interpreter);
900000000800b3d4:	001503a4 	move	$r4,$r29
900000000800b3d8:	5427e800 	bl	10216(0x27e8) # 900000000800dbc0 <eunlock>
    eput(interpreter);
900000000800b3dc:	001503a4 	move	$r4,$r29
900000000800b3e0:	54284400 	bl	10308(0x2844) # 900000000800dc24 <eput>
    interpreter = NULL;
900000000800b3e4:	53fdbbff 	b	-584(0xffffdb8) # 900000000800b19c <exec+0x130>
      printf("interpreter not found\n");
900000000800b3e8:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b3ec:	02cb8084 	addi.d	$r4,$r4,736(0x2e0)
900000000800b3f0:	574e87ff 	bl	-45436(0xfff4e84) # 9000000008000274 <printf>
      goto bad;
900000000800b3f4:	50004000 	b	64(0x40) # 900000000800b434 <exec+0x3c8>
      printf("readelfhdr failed\n");
900000000800b3f8:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b3fc:	02caa084 	addi.d	$r4,$r4,680(0x2a8)
900000000800b400:	574e77ff 	bl	-45452(0xfff4e74) # 9000000008000274 <printf>
      goto bad;
900000000800b404:	50003000 	b	48(0x30) # 900000000800b434 <exec+0x3c8>
    printf("user_stack_push_str failed 1\n");
900000000800b408:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b40c:	02cc4084 	addi.d	$r4,$r4,784(0x310)
900000000800b410:	574e67ff 	bl	-45468(0xfff4e64) # 9000000008000274 <printf>
    goto bad;
900000000800b414:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b418:	0015001a 	move	$r26,$r0
    goto bad;
900000000800b41c:	50001800 	b	24(0x18) # 900000000800b434 <exec+0x3c8>
    printf("[exec] random copy bad\n");
900000000800b420:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b424:	02cc6084 	addi.d	$r4,$r4,792(0x318)
900000000800b428:	574e4fff 	bl	-45492(0xfff4e4c) # 9000000008000274 <printf>
    goto bad;
900000000800b42c:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b430:	0015001a 	move	$r26,$r0
  printf("[exec] reach bad\n");
900000000800b434:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b438:	02ce7084 	addi.d	$r4,$r4,924(0x39c)
900000000800b43c:	574e3bff 	bl	-45512(0xfff4e38) # 9000000008000274 <printf>
    proc_freepagetable(pagetable, sz);
900000000800b440:	28fe62c5 	ld.d	$r5,$r22,-104(0xf98)
900000000800b444:	00150384 	move	$r4,$r28
900000000800b448:	5764e7ff 	bl	-39708(0xfff64e4) # 900000000800192c <proc_freepagetable>
    kvmfree(kpagetable, 0, myproc());
900000000800b44c:	5762dfff 	bl	-40228(0xfff62dc) # 9000000008001728 <myproc>
900000000800b450:	00150086 	move	$r6,$r4
900000000800b454:	00150005 	move	$r5,$r0
900000000800b458:	00150304 	move	$r4,$r24
900000000800b45c:	578fbfff 	bl	-28740(0xfff8fbc) # 9000000008004418 <kvmfree>
  if (interpreter) {
900000000800b460:	400017a0 	beqz	$r29,20(0x14) # 900000000800b474 <exec+0x408>
    eunlock(interpreter);
900000000800b464:	001503a4 	move	$r4,$r29
900000000800b468:	54275800 	bl	10072(0x2758) # 900000000800dbc0 <eunlock>
    eput(interpreter);
900000000800b46c:	001503a4 	move	$r4,$r29
900000000800b470:	5427b400 	bl	10164(0x27b4) # 900000000800dc24 <eput>
  }
  if (ep) {
900000000800b474:	40001740 	beqz	$r26,20(0x14) # 900000000800b488 <exec+0x41c>
    eunlock(ep);
900000000800b478:	00150344 	move	$r4,$r26
900000000800b47c:	54274400 	bl	10052(0x2744) # 900000000800dbc0 <eunlock>
    eput(ep);
900000000800b480:	00150344 	move	$r4,$r26
900000000800b484:	5427a000 	bl	10144(0x27a0) # 900000000800dc24 <eput>
  }
  if (is_shell_script) {
    exit(0);
  }
  return -1;
900000000800b488:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (is_shell_script) {
900000000800b48c:	44041720 	bnez	$r25,1044(0x414) # 900000000800b8a0 <exec+0x834>
}
900000000800b490:	28d6e061 	ld.d	$r1,$r3,1464(0x5b8)
900000000800b494:	28d6c076 	ld.d	$r22,$r3,1456(0x5b0)
900000000800b498:	28d6a077 	ld.d	$r23,$r3,1448(0x5a8)
900000000800b49c:	28d68078 	ld.d	$r24,$r3,1440(0x5a0)
900000000800b4a0:	28d66079 	ld.d	$r25,$r3,1432(0x598)
900000000800b4a4:	28d6407a 	ld.d	$r26,$r3,1424(0x590)
900000000800b4a8:	28d6207b 	ld.d	$r27,$r3,1416(0x588)
900000000800b4ac:	28d6007c 	ld.d	$r28,$r3,1408(0x580)
900000000800b4b0:	28d5e07d 	ld.d	$r29,$r3,1400(0x578)
900000000800b4b4:	28d5c07e 	ld.d	$r30,$r3,1392(0x570)
900000000800b4b8:	28d5a07f 	ld.d	$r31,$r3,1384(0x568)
900000000800b4bc:	02d70063 	addi.d	$r3,$r3,1472(0x5c0)
900000000800b4c0:	4c000020 	jirl	$r0,$r1,0
    if (strlen(argv[argc]) == 1 && strncmp(argv[argc], ">", 1) == 0) {
900000000800b4c4:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800b4c8:	1c0001e5 	pcaddu12i	$r5,15(0xf)
900000000800b4cc:	02ca20a5 	addi.d	$r5,$r5,648(0x288)
900000000800b4d0:	28c002e4 	ld.d	$r4,$r23,0
900000000800b4d4:	575be3ff 	bl	-42016(0xfff5be0) # 90000000080010b4 <strncmp>
900000000800b4d8:	44007480 	bnez	$r4,116(0x74) # 900000000800b54c <exec+0x4e0>
      redirection = REDIR_OUT;
900000000800b4dc:	29e9c2c4 	st.d	$r4,$r22,-1424(0xa70)
900000000800b4e0:	50005000 	b	80(0x50) # 900000000800b530 <exec+0x4c4>
    } else if (strlen(argv[argc]) == 2 && strncmp(argv[argc], ">>", 2) == 0) {
900000000800b4e4:	02800806 	addi.w	$r6,$r0,2(0x2)
900000000800b4e8:	1c0001e5 	pcaddu12i	$r5,15(0xf)
900000000800b4ec:	02c9c0a5 	addi.d	$r5,$r5,624(0x270)
900000000800b4f0:	28c002e4 	ld.d	$r4,$r23,0
900000000800b4f4:	575bc3ff 	bl	-42048(0xfff5bc0) # 90000000080010b4 <strncmp>
900000000800b4f8:	44006480 	bnez	$r4,100(0x64) # 900000000800b55c <exec+0x4f0>
      redirection = REDIR_APPEND;
900000000800b4fc:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800b500:	29e9c2cc 	st.d	$r12,$r22,-1424(0xa70)
900000000800b504:	50002c00 	b	44(0x2c) # 900000000800b530 <exec+0x4c4>
    if (argc >= MAXARG)
900000000800b508:	02807c0c 	addi.w	$r12,$r0,31(0x1f)
900000000800b50c:	6803a59d 	bltu	$r12,$r29,932(0x3a4) # 900000000800b8b0 <exec+0x844>
    if ((sp = user_stack_push_str(pagetable, ustack, argv[argc], sp,
900000000800b510:	28ea02c8 	ld.d	$r8,$r22,-1408(0xa80)
900000000800b514:	00150347 	move	$r7,$r26
900000000800b518:	28c002e6 	ld.d	$r6,$r23,0
900000000800b51c:	02fa42c5 	addi.d	$r5,$r22,-368(0xe90)
900000000800b520:	00150384 	move	$r4,$r28
900000000800b524:	57f927ff 	bl	-1756(0xffff924) # 900000000800ae48 <user_stack_push_str>
900000000800b528:	0015009a 	move	$r26,$r4
900000000800b52c:	5800549f 	beq	$r4,$r31,84(0x54) # 900000000800b580 <exec+0x514>
  for (argc = 0; argv[argc]; argc++) {
900000000800b530:	02c007bd 	addi.d	$r29,$r29,1(0x1)
900000000800b534:	02c022f7 	addi.d	$r23,$r23,8(0x8)
900000000800b538:	28c002e4 	ld.d	$r4,$r23,0
900000000800b53c:	40006880 	beqz	$r4,104(0x68) # 900000000800b5a4 <exec+0x538>
    if (strlen(argv[argc]) == 1 && strncmp(argv[argc], ">", 1) == 0) {
900000000800b540:	575c9bff 	bl	-41832(0xfff5c98) # 90000000080011d8 <strlen>
900000000800b544:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800b548:	5bff7c8c 	beq	$r4,$r12,-132(0x3ff7c) # 900000000800b4c4 <exec+0x458>
    } else if (strlen(argv[argc]) == 2 && strncmp(argv[argc], ">>", 2) == 0) {
900000000800b54c:	28c002e4 	ld.d	$r4,$r23,0
900000000800b550:	575c8bff 	bl	-41848(0xfff5c88) # 90000000080011d8 <strlen>
900000000800b554:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800b558:	5bff8c8c 	beq	$r4,$r12,-116(0x3ff8c) # 900000000800b4e4 <exec+0x478>
    if (redirection != -1 && jump == 0) {
900000000800b55c:	28e9c2cc 	ld.d	$r12,$r22,-1424(0xa70)
900000000800b560:	5bffa99f 	beq	$r12,$r31,-88(0x3ffa8) # 900000000800b508 <exec+0x49c>
900000000800b564:	28e9a2cc 	ld.d	$r12,$r22,-1432(0xa68)
900000000800b568:	47ffa19f 	bnez	$r12,-96(0x7fffa0) # 900000000800b508 <exec+0x49c>
      redir_file = argv[argc];
900000000800b56c:	28c002ec 	ld.d	$r12,$r23,0
900000000800b570:	29e942cc 	st.d	$r12,$r22,-1456(0xa50)
      jump = 1;
900000000800b574:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800b578:	29e9a2cc 	st.d	$r12,$r22,-1432(0xa68)
      continue;
900000000800b57c:	53ffb7ff 	b	-76(0xfffffb4) # 900000000800b530 <exec+0x4c4>
      printf("user_stack_push_str failed 2\n");
900000000800b580:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b584:	02c78084 	addi.d	$r4,$r4,480(0x1e0)
900000000800b588:	574cefff 	bl	-45844(0xfff4cec) # 9000000008000274 <printf>
      goto bad;
900000000800b58c:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b590:	0015001a 	move	$r26,$r0
      goto bad;
900000000800b594:	53fea3ff 	b	-352(0xffffea0) # 900000000800b434 <exec+0x3c8>
  char *redir_file = 0;
900000000800b598:	29e942c4 	st.d	$r4,$r22,-1456(0xa50)
  int redirection = -1;
900000000800b59c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800b5a0:	29e9c2cc 	st.d	$r12,$r22,-1424(0xa70)
  if (env) {
900000000800b5a4:	28e9e2cc 	ld.d	$r12,$r22,-1416(0xa78)
900000000800b5a8:	40003d80 	beqz	$r12,60(0x3c) # 900000000800b5e4 <exec+0x578>
    for (envnum = 0; env[envnum]; envnum++) {
900000000800b5ac:	28c00186 	ld.d	$r6,$r12,0
900000000800b5b0:	400034c0 	beqz	$r6,52(0x34) # 900000000800b5e4 <exec+0x578>
900000000800b5b4:	02c0219d 	addi.d	$r29,$r12,8(0x8)
      if ((sp = user_stack_push_str(pagetable, envp, env[envnum], sp,
900000000800b5b8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
900000000800b5bc:	28ea02c8 	ld.d	$r8,$r22,-1408(0xa80)
900000000800b5c0:	00150347 	move	$r7,$r26
900000000800b5c4:	02f322c5 	addi.d	$r5,$r22,-824(0xcc8)
900000000800b5c8:	00150384 	move	$r4,$r28
900000000800b5cc:	57f87fff 	bl	-1924(0xffff87c) # 900000000800ae48 <user_stack_push_str>
900000000800b5d0:	0015009a 	move	$r26,$r4
900000000800b5d4:	58014097 	beq	$r4,$r23,320(0x140) # 900000000800b714 <exec+0x6a8>
900000000800b5d8:	02c023bd 	addi.d	$r29,$r29,8(0x8)
    for (envnum = 0; env[envnum]; envnum++) {
900000000800b5dc:	28ffe3a6 	ld.d	$r6,$r29,-8(0xff8)
900000000800b5e0:	47ffdcdf 	bnez	$r6,-36(0x7fffdc) # 900000000800b5bc <exec+0x550>
  if ((sp = loadaux(pagetable, sp, stackbase, aux)) == -1) {
900000000800b5e4:	02ea82c7 	addi.d	$r7,$r22,-1376(0xaa0)
900000000800b5e8:	28ea02c6 	ld.d	$r6,$r22,-1408(0xa80)
900000000800b5ec:	00150345 	move	$r5,$r26
900000000800b5f0:	00150384 	move	$r4,$r28
900000000800b5f4:	57f97bff 	bl	-1672(0xffff978) # 900000000800af6c <loadaux>
900000000800b5f8:	00150097 	move	$r23,$r4
900000000800b5fc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800b600:	58012c8c 	beq	$r4,$r12,300(0x12c) # 900000000800b72c <exec+0x6c0>
  argc = envp[0];
900000000800b604:	28f322cc 	ld.d	$r12,$r22,-824(0xcc8)
  if (argc) {
900000000800b608:	40003580 	beqz	$r12,52(0x34) # 900000000800b63c <exec+0x5d0>
    sp -= (argc + 1) * sizeof(uint64);
900000000800b60c:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800b610:	00410d87 	slli.d	$r7,$r12,0x3
900000000800b614:	00119c84 	sub.d	$r4,$r4,$r7
    if (sp < stackbase) {
900000000800b618:	28ea02cc 	ld.d	$r12,$r22,-1408(0xa80)
900000000800b61c:	6801288c 	bltu	$r4,$r12,296(0x128) # 900000000800b744 <exec+0x6d8>
    sp -= sp % 16;
900000000800b620:	02bfc017 	addi.w	$r23,$r0,-16(0xff0)
900000000800b624:	0014dc97 	and	$r23,$r4,$r23
    if (copyout(pagetable, sp, (char *)(envp + 1),
900000000800b628:	02f342c6 	addi.d	$r6,$r22,-816(0xcd0)
900000000800b62c:	001502e5 	move	$r5,$r23
900000000800b630:	00150384 	move	$r4,$r28
900000000800b634:	57885bff 	bl	-30632(0xfff8858) # 9000000008003e8c <copyout>
900000000800b638:	60012480 	blt	$r4,$r0,292(0x124) # 900000000800b75c <exec+0x6f0>
  argc = ustack[0];
900000000800b63c:	28fa42cc 	ld.d	$r12,$r22,-368(0xe90)
900000000800b640:	29e9e2cc 	st.d	$r12,$r22,-1416(0xa78)
  sp -= (argc + 2) * sizeof(uint64);
900000000800b644:	02c00987 	addi.d	$r7,$r12,2(0x2)
900000000800b648:	00410ce7 	slli.d	$r7,$r7,0x3
900000000800b64c:	00119ef7 	sub.d	$r23,$r23,$r7
  sp -= sp % 16;
900000000800b650:	02bfc00c 	addi.w	$r12,$r0,-16(0xff0)
900000000800b654:	0014b2f7 	and	$r23,$r23,$r12
  if (sp < stackbase)
900000000800b658:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b65c:	0015001a 	move	$r26,$r0
  if (sp < stackbase)
900000000800b660:	28ea02cc 	ld.d	$r12,$r22,-1408(0xa80)
900000000800b664:	6bfdd2ec 	bltu	$r23,$r12,-560(0x3fdd0) # 900000000800b434 <exec+0x3c8>
  if (copyout(pagetable, sp, (char *)ustack, (argc + 2) * sizeof(uint64)) < 0)
900000000800b668:	02fa42c6 	addi.d	$r6,$r22,-368(0xe90)
900000000800b66c:	001502e5 	move	$r5,$r23
900000000800b670:	00150384 	move	$r4,$r28
900000000800b674:	57881bff 	bl	-30696(0xfff8818) # 9000000008003e8c <copyout>
900000000800b678:	60024480 	blt	$r4,$r0,580(0x244) # 900000000800b8bc <exec+0x850>
  p->trapframe->a1 = sp + 8;
900000000800b67c:	28e982cc 	ld.d	$r12,$r22,-1440(0xa60)
900000000800b680:	28c1c18c 	ld.d	$r12,$r12,112(0x70)
900000000800b684:	02c022ed 	addi.d	$r13,$r23,8(0x8)
900000000800b688:	29c0818d 	st.d	$r13,$r12,32(0x20)
  for (last = s = path; *s; s++)
900000000800b68c:	28ea22cd 	ld.d	$r13,$r22,-1400(0xa88)
900000000800b690:	280001ac 	ld.b	$r12,$r13,0
900000000800b694:	40003180 	beqz	$r12,48(0x30) # 900000000800b6c4 <exec+0x658>
900000000800b698:	02c005ad 	addi.d	$r13,$r13,1(0x1)
    if (*s == '/')
900000000800b69c:	0280bc0e 	addi.w	$r14,$r0,47(0x2f)
      last = s + 1;
900000000800b6a0:	0015b98c 	xor	$r12,$r12,$r14
900000000800b6a4:	28ea22cf 	ld.d	$r15,$r22,-1400(0xa88)
900000000800b6a8:	001331ef 	maskeqz	$r15,$r15,$r12
900000000800b6ac:	0013b1ac 	masknez	$r12,$r13,$r12
900000000800b6b0:	001531ec 	or	$r12,$r15,$r12
900000000800b6b4:	29ea22cc 	st.d	$r12,$r22,-1400(0xa88)
900000000800b6b8:	02c005ad 	addi.d	$r13,$r13,1(0x1)
  for (last = s = path; *s; s++)
900000000800b6bc:	283ffdac 	ld.b	$r12,$r13,-1(0xfff)
900000000800b6c0:	47ffe19f 	bnez	$r12,-32(0x7fffe0) # 900000000800b6a0 <exec+0x634>
  safestrcpy(p->name, last, sizeof(p->name));
900000000800b6c4:	02804006 	addi.w	$r6,$r0,16(0x10)
900000000800b6c8:	28ea22c5 	ld.d	$r5,$r22,-1400(0xa88)
900000000800b6cc:	28e982da 	ld.d	$r26,$r22,-1440(0xa60)
900000000800b6d0:	02d3a344 	addi.d	$r4,$r26,1256(0x4e8)
900000000800b6d4:	575abfff 	bl	-42308(0xfff5abc) # 9000000008001190 <safestrcpy>
  p->pagetable = pagetable;
900000000800b6d8:	29c1835c 	st.d	$r28,$r26,96(0x60)
  p->kpagetable = kpagetable;
900000000800b6dc:	29c1a358 	st.d	$r24,$r26,104(0x68)
  p->sz = sz;
900000000800b6e0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000800b6e4:	29c1634c 	st.d	$r12,$r26,88(0x58)
  p->trapframe->era = program_entry; // initial program counter = main
900000000800b6e8:	28c1c34c 	ld.d	$r12,$r26,112(0x70)
900000000800b6ec:	28e962ce 	ld.d	$r14,$r22,-1448(0xa58)
900000000800b6f0:	29c4218e 	st.d	$r14,$r12,264(0x108)
  p->trapframe->sp = sp;             // initial stack pointer
900000000800b6f4:	28c1c34c 	ld.d	$r12,$r26,112(0x70)
900000000800b6f8:	29c04197 	st.d	$r23,$r12,16(0x10)
  for (int fd = 0; fd < NOFILEMAX(p); fd++) {
900000000800b6fc:	28c1234c 	ld.d	$r12,$r26,72(0x48)
900000000800b700:	4000dd80 	beqz	$r12,220(0xdc) # 900000000800b7dc <exec+0x770>
900000000800b704:	02c3635a 	addi.d	$r26,$r26,216(0xd8)
900000000800b708:	00150017 	move	$r23,$r0
900000000800b70c:	0282001d 	addi.w	$r29,$r0,128(0x80)
900000000800b710:	50008800 	b	136(0x88) # 900000000800b798 <exec+0x72c>
        printf("user_stack_push_str failed 3\n");
900000000800b714:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b718:	02c1b084 	addi.d	$r4,$r4,108(0x6c)
900000000800b71c:	574b5bff 	bl	-46248(0xfff4b58) # 9000000008000274 <printf>
        goto bad;
900000000800b720:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b724:	0015001a 	move	$r26,$r0
        goto bad;
900000000800b728:	53fd0fff 	b	-756(0xffffd0c) # 900000000800b434 <exec+0x3c8>
    printf("loadaux failed\n");
900000000800b72c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b730:	02c1d084 	addi.d	$r4,$r4,116(0x74)
900000000800b734:	574b43ff 	bl	-46272(0xfff4b40) # 9000000008000274 <printf>
    goto bad;
900000000800b738:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b73c:	0015001a 	move	$r26,$r0
    goto bad;
900000000800b740:	53fcf7ff 	b	-780(0xffffcf4) # 900000000800b434 <exec+0x3c8>
      printf("sp < stackbase\n");
900000000800b744:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b748:	02c1b084 	addi.d	$r4,$r4,108(0x6c)
900000000800b74c:	574b2bff 	bl	-46296(0xfff4b28) # 9000000008000274 <printf>
      goto bad;
900000000800b750:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b754:	0015001a 	move	$r26,$r0
      goto bad;
900000000800b758:	53fcdfff 	b	-804(0xffffcdc) # 900000000800b434 <exec+0x3c8>
      printf("copyout failed\n");
900000000800b75c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b760:	02fbf084 	addi.d	$r4,$r4,-260(0xefc)
900000000800b764:	574b13ff 	bl	-46320(0xfff4b10) # 9000000008000274 <printf>
      goto bad;
900000000800b768:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b76c:	0015001a 	move	$r26,$r0
      goto bad;
900000000800b770:	53fcc7ff 	b	-828(0xffffcc4) # 900000000800b434 <exec+0x3c8>
900000000800b774:	02c006f7 	addi.d	$r23,$r23,1(0x1)
900000000800b778:	02c0235a 	addi.d	$r26,$r26,8(0x8)
  for (int fd = 0; fd < NOFILEMAX(p); fd++) {
900000000800b77c:	28e982cc 	ld.d	$r12,$r22,-1440(0xa60)
900000000800b780:	28c1218c 	ld.d	$r12,$r12,72(0x48)
900000000800b784:	0242058d 	sltui	$r13,$r12,129(0x81)
900000000800b788:	0013358c 	maskeqz	$r12,$r12,$r13
900000000800b78c:	0013b7ad 	masknez	$r13,$r29,$r13
900000000800b790:	0015358c 	or	$r12,$r12,$r13
900000000800b794:	6c004aec 	bgeu	$r23,$r12,72(0x48) # 900000000800b7dc <exec+0x770>
    struct file *f = p->ofile[fd];
900000000800b798:	29ea22da 	st.d	$r26,$r22,-1400(0xa88)
900000000800b79c:	28c00344 	ld.d	$r4,$r26,0
    if (f && p->exec_close[fd]) {
900000000800b7a0:	43ffd49f 	beqz	$r4,-44(0x7fffd4) # 900000000800b774 <exec+0x708>
900000000800b7a4:	00410aff 	slli.d	$r31,$r23,0x2
900000000800b7a8:	28e982cc 	ld.d	$r12,$r22,-1440(0xa60)
900000000800b7ac:	28d3618c 	ld.d	$r12,$r12,1240(0x4d8)
900000000800b7b0:	0010fd8c 	add.d	$r12,$r12,$r31
900000000800b7b4:	2880018c 	ld.w	$r12,$r12,0
900000000800b7b8:	43ffbd9f 	beqz	$r12,-68(0x7fffbc) # 900000000800b774 <exec+0x708>
      fileclose(f);
900000000800b7bc:	57958fff 	bl	-27252(0xfff958c) # 9000000008004d48 <fileclose>
      p->ofile[fd] = 0;
900000000800b7c0:	28ea22cc 	ld.d	$r12,$r22,-1400(0xa88)
900000000800b7c4:	29c00180 	st.d	$r0,$r12,0
      p->exec_close[fd] = 0;
900000000800b7c8:	28e982cc 	ld.d	$r12,$r22,-1440(0xa60)
900000000800b7cc:	28d3618c 	ld.d	$r12,$r12,1240(0x4d8)
900000000800b7d0:	0010fd8c 	add.d	$r12,$r12,$r31
900000000800b7d4:	29800180 	st.w	$r0,$r12,0
900000000800b7d8:	53ff9fff 	b	-100(0xfffff9c) # 900000000800b774 <exec+0x708>
  if (redirection != -1) {
900000000800b7dc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800b7e0:	28e9c2d7 	ld.d	$r23,$r22,-1424(0xa70)
900000000800b7e4:	580066ec 	beq	$r23,$r12,100(0x64) # 900000000800b848 <exec+0x7dc>
    fileclose(p->ofile[1]);
900000000800b7e8:	28e982da 	ld.d	$r26,$r22,-1440(0xa60)
900000000800b7ec:	28c38344 	ld.d	$r4,$r26,224(0xe0)
900000000800b7f0:	57955bff 	bl	-27304(0xfff9558) # 9000000008004d48 <fileclose>
    p->ofile[1] = 0;
900000000800b7f4:	29c38340 	st.d	$r0,$r26,224(0xe0)
    if (redirection == REDIR_OUT) {
900000000800b7f8:	40002ae0 	beqz	$r23,40(0x28) # 900000000800b820 <exec+0x7b4>
    } else if (redirection == REDIR_APPEND) {
900000000800b7fc:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800b800:	28e9c2cd 	ld.d	$r13,$r22,-1424(0xa70)
900000000800b804:	580089ac 	beq	$r13,$r12,136(0x88) # 900000000800b88c <exec+0x820>
      printf("[exec]:fd != 1\n");
900000000800b808:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800b80c:	02fee084 	addi.d	$r4,$r4,-72(0xfb8)
900000000800b810:	574a67ff 	bl	-46492(0xfff4a64) # 9000000008000274 <printf>
      goto bad;
900000000800b814:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b818:	0015001a 	move	$r26,$r0
      goto bad;
900000000800b81c:	53fc1bff 	b	-1000(0xffffc18) # 900000000800b434 <exec+0x3c8>
      fd = open(redir_file, O_WRONLY | O_CREATE);
900000000800b820:	02810405 	addi.w	$r5,$r0,65(0x41)
900000000800b824:	28e942c4 	ld.d	$r4,$r22,-1456(0xa50)
900000000800b828:	57ce23ff 	bl	-12768(0xfffce20) # 9000000008008648 <open>
900000000800b82c:	0040808c 	slli.w	$r12,$r4,0x0
    if (fd != 1) {
900000000800b830:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800b834:	5fffd58d 	bne	$r12,$r13,-44(0x3ffd4) # 900000000800b808 <exec+0x79c>
    p->exec_close[1] = 1;
900000000800b838:	28e982cc 	ld.d	$r12,$r22,-1440(0xa60)
900000000800b83c:	28d3618c 	ld.d	$r12,$r12,1240(0x4d8)
900000000800b840:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800b844:	2980118d 	st.w	$r13,$r12,4(0x4)
  proc_freepagetable(oldpagetable, oldsz);
900000000800b848:	28e922c5 	ld.d	$r5,$r22,-1464(0xa48)
900000000800b84c:	001503c4 	move	$r4,$r30
900000000800b850:	5760dfff 	bl	-40740(0xfff60dc) # 900000000800192c <proc_freepagetable>
  volatile uint64 pgdl = (uint64)(p->pagetable);
900000000800b854:	28e982cc 	ld.d	$r12,$r22,-1440(0xa60)
900000000800b858:	28c1818c 	ld.d	$r12,$r12,96(0x60)
900000000800b85c:	29ea62cc 	st.d	$r12,$r22,-1384(0xa98)
  w_csr_pgdl(pgdl);
900000000800b860:	28ea62cc 	ld.d	$r12,$r22,-1384(0xa98)
  asm volatile("csrwr %0, 0x19" : : "r" (x) );
900000000800b864:	0400642c 	csrwr	$r12,0x19
  asm volatile("invtlb 0x0,$zero,$zero");
900000000800b868:	06498000 	invtlb	0x0,$r0,$r0
  kvmfree(oldkpagetable, 0, myproc());
900000000800b86c:	575ebfff 	bl	-41284(0xfff5ebc) # 9000000008001728 <myproc>
900000000800b870:	00150086 	move	$r6,$r4
900000000800b874:	00150005 	move	$r5,$r0
900000000800b878:	00150364 	move	$r4,$r27
900000000800b87c:	578b9fff 	bl	-29796(0xfff8b9c) # 9000000008004418 <kvmfree>
  return argc; // this ends up in a0, the first argument to main(argc, argv)
900000000800b880:	28e9e2cc 	ld.d	$r12,$r22,-1416(0xa78)
900000000800b884:	00408184 	slli.w	$r4,$r12,0x0
900000000800b888:	53fc0bff 	b	-1016(0xffffc08) # 900000000800b490 <exec+0x424>
      fd = open(redir_file, O_WRONLY | O_CREATE | O_APPEND);
900000000800b88c:	02910405 	addi.w	$r5,$r0,1089(0x441)
900000000800b890:	28e942c4 	ld.d	$r4,$r22,-1456(0xa50)
900000000800b894:	57cdb7ff 	bl	-12876(0xfffcdb4) # 9000000008008648 <open>
900000000800b898:	0040808c 	slli.w	$r12,$r4,0x0
900000000800b89c:	53ff97ff 	b	-108(0xfffff94) # 900000000800b830 <exec+0x7c4>
    exit(0);
900000000800b8a0:	00150004 	move	$r4,$r0
900000000800b8a4:	5764e3ff 	bl	-39712(0xfff64e0) # 9000000008001d84 <exit>
  return -1;
900000000800b8a8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800b8ac:	53fbe7ff 	b	-1052(0xffffbe4) # 900000000800b490 <exec+0x424>
900000000800b8b0:	0015001d 	move	$r29,$r0
  ep = 0;
900000000800b8b4:	0015001a 	move	$r26,$r0
900000000800b8b8:	53fb7fff 	b	-1156(0xffffb7c) # 900000000800b434 <exec+0x3c8>
900000000800b8bc:	0015001d 	move	$r29,$r0
900000000800b8c0:	0015001a 	move	$r26,$r0
900000000800b8c4:	53fb73ff 	b	-1168(0xffffb70) # 900000000800b434 <exec+0x3c8>

900000000800b8c8 <pipealloc>:
#include "include/sleeplock.h"
#include "include/spinlock.h"
#include "include/types.h"
#include "include/vm.h"

int pipealloc(struct file **f0, struct file **f1) {
900000000800b8c8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800b8cc:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800b8d0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800b8d4:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800b8d8:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800b8dc:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800b8e0:	29c0007a 	st.d	$r26,$r3,0
900000000800b8e4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800b8e8:	00150097 	move	$r23,$r4
900000000800b8ec:	001500b8 	move	$r24,$r5
  struct pipe *pi;

  pi = 0;
  *f0 = *f1 = 0;
900000000800b8f0:	29c000a0 	st.d	$r0,$r5,0
900000000800b8f4:	29c00080 	st.d	$r0,$r4,0
  if ((*f0 = filealloc()) == NULL || (*f1 = filealloc()) == NULL)
900000000800b8f8:	57934bff 	bl	-27832(0xfff9348) # 9000000008004c40 <filealloc>
900000000800b8fc:	29c002e4 	st.d	$r4,$r23,0
900000000800b900:	40009c80 	beqz	$r4,156(0x9c) # 900000000800b99c <pipealloc+0xd4>
900000000800b904:	57933fff 	bl	-27844(0xfff933c) # 9000000008004c40 <filealloc>
900000000800b908:	29c00304 	st.d	$r4,$r24,0
900000000800b90c:	40008480 	beqz	$r4,132(0x84) # 900000000800b990 <pipealloc+0xc8>
    goto bad;
  if ((pi = (struct pipe *)kalloc()) == NULL)
900000000800b910:	5775c3ff 	bl	-35392(0xfff75c0) # 9000000008002ed0 <kalloc>
900000000800b914:	00150099 	move	$r25,$r4
900000000800b918:	40006c80 	beqz	$r4,108(0x6c) # 900000000800b984 <pipealloc+0xbc>
    goto bad;
  pi->readopen = 1;
900000000800b91c:	0280041a 	addi.w	$r26,$r0,1(0x1)
900000000800b920:	2988809a 	st.w	$r26,$r4,544(0x220)
  pi->writeopen = 1;
900000000800b924:	2988909a 	st.w	$r26,$r4,548(0x224)
  pi->nwrite = 0;
900000000800b928:	29887080 	st.w	$r0,$r4,540(0x21c)
  pi->nread = 0;
900000000800b92c:	29886080 	st.w	$r0,$r4,536(0x218)
  initlock(&pi->lock, "pipe");
900000000800b930:	1c000145 	pcaddu12i	$r5,10(0xa)
900000000800b934:	02c160a5 	addi.d	$r5,$r5,88(0x58)
900000000800b938:	57550fff 	bl	-43764(0xfff550c) # 9000000008000e44 <initlock>
  (*f0)->type = FD_PIPE;
900000000800b93c:	28c002ec 	ld.d	$r12,$r23,0
900000000800b940:	2980019a 	st.w	$r26,$r12,0
  (*f0)->readable = 1;
900000000800b944:	28c002ec 	ld.d	$r12,$r23,0
900000000800b948:	2900219a 	st.b	$r26,$r12,8(0x8)
  (*f0)->writable = 0;
900000000800b94c:	28c002ec 	ld.d	$r12,$r23,0
900000000800b950:	29002580 	st.b	$r0,$r12,9(0x9)
  (*f0)->pipe = pi;
900000000800b954:	28c002ec 	ld.d	$r12,$r23,0
900000000800b958:	29c04199 	st.d	$r25,$r12,16(0x10)
  (*f1)->type = FD_PIPE;
900000000800b95c:	28c0030c 	ld.d	$r12,$r24,0
900000000800b960:	2980019a 	st.w	$r26,$r12,0
  (*f1)->readable = 0;
900000000800b964:	28c0030c 	ld.d	$r12,$r24,0
900000000800b968:	29002180 	st.b	$r0,$r12,8(0x8)
  (*f1)->writable = 1;
900000000800b96c:	28c0030c 	ld.d	$r12,$r24,0
900000000800b970:	2900259a 	st.b	$r26,$r12,9(0x9)
  (*f1)->pipe = pi;
900000000800b974:	28c0030c 	ld.d	$r12,$r24,0
900000000800b978:	29c04199 	st.d	$r25,$r12,16(0x10)
  return 0;
900000000800b97c:	00150004 	move	$r4,$r0
900000000800b980:	50003400 	b	52(0x34) # 900000000800b9b4 <pipealloc+0xec>

bad:
  if (pi)
    kfree((char *)pi);
  if (*f0)
900000000800b984:	28c002e4 	ld.d	$r4,$r23,0
900000000800b988:	44001080 	bnez	$r4,16(0x10) # 900000000800b998 <pipealloc+0xd0>
900000000800b98c:	50001000 	b	16(0x10) # 900000000800b99c <pipealloc+0xd4>
900000000800b990:	28c002e4 	ld.d	$r4,$r23,0
900000000800b994:	40004080 	beqz	$r4,64(0x40) # 900000000800b9d4 <pipealloc+0x10c>
    fileclose(*f0);
900000000800b998:	5793b3ff 	bl	-27728(0xfff93b0) # 9000000008004d48 <fileclose>
  if (*f1)
900000000800b99c:	28c0030c 	ld.d	$r12,$r24,0
    fileclose(*f1);
  return -1;
900000000800b9a0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (*f1)
900000000800b9a4:	40001180 	beqz	$r12,16(0x10) # 900000000800b9b4 <pipealloc+0xec>
    fileclose(*f1);
900000000800b9a8:	00150184 	move	$r4,$r12
900000000800b9ac:	57939fff 	bl	-27748(0xfff939c) # 9000000008004d48 <fileclose>
  return -1;
900000000800b9b0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800b9b4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800b9b8:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800b9bc:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800b9c0:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800b9c4:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800b9c8:	28c0007a 	ld.d	$r26,$r3,0
900000000800b9cc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800b9d0:	4c000020 	jirl	$r0,$r1,0
  return -1;
900000000800b9d4:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800b9d8:	53ffdfff 	b	-36(0xfffffdc) # 900000000800b9b4 <pipealloc+0xec>

900000000800b9dc <pipeclose>:

void pipeclose(struct pipe *pi, int writable) {
900000000800b9dc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800b9e0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800b9e4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800b9e8:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800b9ec:	29c00078 	st.d	$r24,$r3,0
900000000800b9f0:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800b9f4:	00150097 	move	$r23,$r4
900000000800b9f8:	001500b8 	move	$r24,$r5
  acquire(&pi->lock);
900000000800b9fc:	5754b7ff 	bl	-43852(0xfff54b4) # 9000000008000eb0 <acquire>
  if (writable) {
900000000800ba00:	40004300 	beqz	$r24,64(0x40) # 900000000800ba40 <pipeclose+0x64>
    pi->writeopen = 0;
900000000800ba04:	298892e0 	st.w	$r0,$r23,548(0x224)
    wakeup(&pi->nread);
900000000800ba08:	02c862e4 	addi.d	$r4,$r23,536(0x218)
900000000800ba0c:	5766d7ff 	bl	-39212(0xfff66d4) # 90000000080020e0 <wakeup>
  } else {
    pi->readopen = 0;
    wakeup(&pi->nwrite);
  }
  if (pi->readopen == 0 && pi->writeopen == 0) {
900000000800ba10:	28c882ec 	ld.d	$r12,$r23,544(0x220)
900000000800ba14:	44003d80 	bnez	$r12,60(0x3c) # 900000000800ba50 <pipeclose+0x74>
    release(&pi->lock);
900000000800ba18:	001502e4 	move	$r4,$r23
900000000800ba1c:	5754f7ff 	bl	-43788(0xfff54f4) # 9000000008000f10 <release>
    kfree((char *)pi);
900000000800ba20:	001502e4 	move	$r4,$r23
900000000800ba24:	57731fff 	bl	-36068(0xfff731c) # 9000000008002d40 <kfree>
  } else
    release(&pi->lock);
}
900000000800ba28:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800ba2c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800ba30:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800ba34:	28c00078 	ld.d	$r24,$r3,0
900000000800ba38:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800ba3c:	4c000020 	jirl	$r0,$r1,0
    pi->readopen = 0;
900000000800ba40:	298882e0 	st.w	$r0,$r23,544(0x220)
    wakeup(&pi->nwrite);
900000000800ba44:	02c872e4 	addi.d	$r4,$r23,540(0x21c)
900000000800ba48:	57669bff 	bl	-39272(0xfff6698) # 90000000080020e0 <wakeup>
900000000800ba4c:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800ba10 <pipeclose+0x34>
    release(&pi->lock);
900000000800ba50:	001502e4 	move	$r4,$r23
900000000800ba54:	5754bfff 	bl	-43844(0xfff54bc) # 9000000008000f10 <release>
}
900000000800ba58:	53ffd3ff 	b	-48(0xfffffd0) # 900000000800ba28 <pipeclose+0x4c>

900000000800ba5c <pipewrite>:

int pipewrite(struct pipe *pi, int user, uint64 addr, int n) {
900000000800ba5c:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
900000000800ba60:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000800ba64:	29c20076 	st.d	$r22,$r3,128(0x80)
900000000800ba68:	29c1e077 	st.d	$r23,$r3,120(0x78)
900000000800ba6c:	29c1c078 	st.d	$r24,$r3,112(0x70)
900000000800ba70:	29c1a079 	st.d	$r25,$r3,104(0x68)
900000000800ba74:	29c1807a 	st.d	$r26,$r3,96(0x60)
900000000800ba78:	29c1607b 	st.d	$r27,$r3,88(0x58)
900000000800ba7c:	29c1407c 	st.d	$r28,$r3,80(0x50)
900000000800ba80:	29c1207d 	st.d	$r29,$r3,72(0x48)
900000000800ba84:	29c1007e 	st.d	$r30,$r3,64(0x40)
900000000800ba88:	29c0e07f 	st.d	$r31,$r3,56(0x38)
900000000800ba8c:	02c24076 	addi.d	$r22,$r3,144(0x90)
900000000800ba90:	00150097 	move	$r23,$r4
900000000800ba94:	29fe22c5 	st.d	$r5,$r22,-120(0xf88)
900000000800ba98:	29fe02c6 	st.d	$r6,$r22,-128(0xf80)
900000000800ba9c:	001500fa 	move	$r26,$r7
  int i;
  char ch;
  struct proc *pr = myproc();
900000000800baa0:	575c8bff 	bl	-41848(0xfff5c88) # 9000000008001728 <myproc>
900000000800baa4:	00150098 	move	$r24,$r4

  acquire(&pi->lock);
900000000800baa8:	001502e4 	move	$r4,$r23
900000000800baac:	575407ff 	bl	-44028(0xfff5404) # 9000000008000eb0 <acquire>
  for (i = 0; i < n; i++) {
900000000800bab0:	6401141a 	bge	$r0,$r26,276(0x114) # 900000000800bbc4 <pipewrite+0x168>
900000000800bab4:	001502f9 	move	$r25,$r23
900000000800bab8:	02bfff5a 	addi.w	$r26,$r26,-1(0xfff)
900000000800babc:	00df034c 	bstrpick.d	$r12,$r26,0x1f,0x0
900000000800bac0:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
900000000800bac4:	0015001d 	move	$r29,$r0
    while (pi->nwrite == pi->nread + PIPESIZE) { // DOC: pipewrite-full
      if (pi->readopen == 0 || pr->killed) {
        release(&pi->lock);
        return -1;
      }
      wakeup(&pi->nread);
900000000800bac8:	02c862fb 	addi.d	$r27,$r23,536(0x218)
      sleep(&pi->nwrite, &pi->lock);
900000000800bacc:	02c872fa 	addi.d	$r26,$r23,540(0x21c)
    }
    // if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
    // if(copyin2(&ch, addr + i, 1) == -1)
    //   break;
    if (either_copyin(&ch, user, addr + i, 1) == -1)
900000000800bad0:	02bffc1f 	addi.w	$r31,$r0,-1(0xfff)
900000000800bad4:	004083bc 	slli.w	$r28,$r29,0x0
900000000800bad8:	0015039e 	move	$r30,$r28
    while (pi->nwrite == pi->nread + PIPESIZE) { // DOC: pipewrite-full
900000000800badc:	288862ec 	ld.w	$r12,$r23,536(0x218)
900000000800bae0:	288872ed 	ld.w	$r13,$r23,540(0x21c)
900000000800bae4:	0288018c 	addi.w	$r12,$r12,512(0x200)
900000000800bae8:	5c008dac 	bne	$r13,$r12,140(0x8c) # 900000000800bb74 <pipewrite+0x118>
      if (pi->readopen == 0 || pr->killed) {
900000000800baec:	288882ec 	ld.w	$r12,$r23,544(0x220)
900000000800baf0:	40004180 	beqz	$r12,64(0x40) # 900000000800bb30 <pipewrite+0xd4>
900000000800baf4:	2880c30c 	ld.w	$r12,$r24,48(0x30)
900000000800baf8:	44003980 	bnez	$r12,56(0x38) # 900000000800bb30 <pipewrite+0xd4>
      wakeup(&pi->nread);
900000000800bafc:	00150364 	move	$r4,$r27
900000000800bb00:	5765e3ff 	bl	-39456(0xfff65e0) # 90000000080020e0 <wakeup>
      sleep(&pi->nwrite, &pi->lock);
900000000800bb04:	00150325 	move	$r5,$r25
900000000800bb08:	00150344 	move	$r4,$r26
900000000800bb0c:	5763ebff 	bl	-39960(0xfff63e8) # 9000000008001ef4 <sleep>
    while (pi->nwrite == pi->nread + PIPESIZE) { // DOC: pipewrite-full
900000000800bb10:	288862ec 	ld.w	$r12,$r23,536(0x218)
900000000800bb14:	288872ed 	ld.w	$r13,$r23,540(0x21c)
900000000800bb18:	0288018c 	addi.w	$r12,$r12,512(0x200)
900000000800bb1c:	5c0059ac 	bne	$r13,$r12,88(0x58) # 900000000800bb74 <pipewrite+0x118>
      if (pi->readopen == 0 || pr->killed) {
900000000800bb20:	288882ec 	ld.w	$r12,$r23,544(0x220)
900000000800bb24:	40000d80 	beqz	$r12,12(0xc) # 900000000800bb30 <pipewrite+0xd4>
900000000800bb28:	2880c30c 	ld.w	$r12,$r24,48(0x30)
900000000800bb2c:	43ffd19f 	beqz	$r12,-48(0x7fffd0) # 900000000800bafc <pipewrite+0xa0>
        release(&pi->lock);
900000000800bb30:	001502e4 	move	$r4,$r23
900000000800bb34:	5753dfff 	bl	-44068(0xfff53dc) # 9000000008000f10 <release>
        return -1;
900000000800bb38:	02bffc1e 	addi.w	$r30,$r0,-1(0xfff)
    pi->data[pi->nwrite++ % PIPESIZE] = ch;
  }
  wakeup(&pi->nread);
  release(&pi->lock);
  return i;
}
900000000800bb3c:	001503c4 	move	$r4,$r30
900000000800bb40:	28c22061 	ld.d	$r1,$r3,136(0x88)
900000000800bb44:	28c20076 	ld.d	$r22,$r3,128(0x80)
900000000800bb48:	28c1e077 	ld.d	$r23,$r3,120(0x78)
900000000800bb4c:	28c1c078 	ld.d	$r24,$r3,112(0x70)
900000000800bb50:	28c1a079 	ld.d	$r25,$r3,104(0x68)
900000000800bb54:	28c1807a 	ld.d	$r26,$r3,96(0x60)
900000000800bb58:	28c1607b 	ld.d	$r27,$r3,88(0x58)
900000000800bb5c:	28c1407c 	ld.d	$r28,$r3,80(0x50)
900000000800bb60:	28c1207d 	ld.d	$r29,$r3,72(0x48)
900000000800bb64:	28c1007e 	ld.d	$r30,$r3,64(0x40)
900000000800bb68:	28c0e07f 	ld.d	$r31,$r3,56(0x38)
900000000800bb6c:	02c24063 	addi.d	$r3,$r3,144(0x90)
900000000800bb70:	4c000020 	jirl	$r0,$r1,0
    if (either_copyin(&ch, user, addr + i, 1) == -1)
900000000800bb74:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000800bb78:	28fe02cc 	ld.d	$r12,$r22,-128(0xf80)
900000000800bb7c:	0010b3a6 	add.d	$r6,$r29,$r12
900000000800bb80:	28fe22c5 	ld.d	$r5,$r22,-120(0xf88)
900000000800bb84:	02fe7ec4 	addi.d	$r4,$r22,-97(0xf9f)
900000000800bb88:	5767a7ff 	bl	-39004(0xfff67a4) # 900000000800232c <either_copyin>
900000000800bb8c:	58003c9f 	beq	$r4,$r31,60(0x3c) # 900000000800bbc8 <pipewrite+0x16c>
    pi->data[pi->nwrite++ % PIPESIZE] = ch;
900000000800bb90:	288872ec 	ld.w	$r12,$r23,540(0x21c)
900000000800bb94:	0280058d 	addi.w	$r13,$r12,1(0x1)
900000000800bb98:	298872ed 	st.w	$r13,$r23,540(0x21c)
900000000800bb9c:	0347fd8c 	andi	$r12,$r12,0x1ff
900000000800bba0:	0010b2ec 	add.d	$r12,$r23,$r12
900000000800bba4:	2a3e7ecd 	ld.bu	$r13,$r22,-97(0xf9f)
900000000800bba8:	2900618d 	st.b	$r13,$r12,24(0x18)
900000000800bbac:	0280079e 	addi.w	$r30,$r28,1(0x1)
900000000800bbb0:	02c007ac 	addi.d	$r12,$r29,1(0x1)
  for (i = 0; i < n; i++) {
900000000800bbb4:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000800bbb8:	580013ad 	beq	$r29,$r13,16(0x10) # 900000000800bbc8 <pipewrite+0x16c>
900000000800bbbc:	0015019d 	move	$r29,$r12
900000000800bbc0:	53ff17ff 	b	-236(0xfffff14) # 900000000800bad4 <pipewrite+0x78>
900000000800bbc4:	0015001e 	move	$r30,$r0
  wakeup(&pi->nread);
900000000800bbc8:	02c862e4 	addi.d	$r4,$r23,536(0x218)
900000000800bbcc:	576517ff 	bl	-39660(0xfff6514) # 90000000080020e0 <wakeup>
  release(&pi->lock);
900000000800bbd0:	001502e4 	move	$r4,$r23
900000000800bbd4:	57533fff 	bl	-44228(0xfff533c) # 9000000008000f10 <release>
  return i;
900000000800bbd8:	53ff67ff 	b	-156(0xfffff64) # 900000000800bb3c <pipewrite+0xe0>

900000000800bbdc <piperead>:

int piperead(struct pipe *pi, int user, uint64 addr, int n) {
900000000800bbdc:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800bbe0:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000800bbe4:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000800bbe8:	29c12077 	st.d	$r23,$r3,72(0x48)
900000000800bbec:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800bbf0:	29c0e079 	st.d	$r25,$r3,56(0x38)
900000000800bbf4:	29c0c07a 	st.d	$r26,$r3,48(0x30)
900000000800bbf8:	29c0a07b 	st.d	$r27,$r3,40(0x28)
900000000800bbfc:	29c0807c 	st.d	$r28,$r3,32(0x20)
900000000800bc00:	29c0607d 	st.d	$r29,$r3,24(0x18)
900000000800bc04:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000800bc08:	00150097 	move	$r23,$r4
900000000800bc0c:	001500bb 	move	$r27,$r5
900000000800bc10:	001500d9 	move	$r25,$r6
900000000800bc14:	001500fa 	move	$r26,$r7
  int i;
  struct proc *pr = myproc();
900000000800bc18:	575b13ff 	bl	-42224(0xfff5b10) # 9000000008001728 <myproc>
900000000800bc1c:	00150098 	move	$r24,$r4
  char ch;

  acquire(&pi->lock);
900000000800bc20:	001502e4 	move	$r4,$r23
900000000800bc24:	57528fff 	bl	-44404(0xfff528c) # 9000000008000eb0 <acquire>
  while (pi->nread == pi->nwrite && pi->writeopen) { // DOC: pipe-empty
900000000800bc28:	288862ed 	ld.w	$r13,$r23,536(0x218)
900000000800bc2c:	288872ec 	ld.w	$r12,$r23,540(0x21c)
900000000800bc30:	5c0099ac 	bne	$r13,$r12,152(0x98) # 900000000800bcc8 <piperead+0xec>
900000000800bc34:	001502fc 	move	$r28,$r23
900000000800bc38:	288892ec 	ld.w	$r12,$r23,548(0x224)
900000000800bc3c:	40004980 	beqz	$r12,72(0x48) # 900000000800bc84 <piperead+0xa8>
    if (pr->killed) {
900000000800bc40:	2880c30c 	ld.w	$r12,$r24,48(0x30)
900000000800bc44:	44003180 	bnez	$r12,48(0x30) # 900000000800bc74 <piperead+0x98>
      release(&pi->lock);
      return -1;
    }
    sleep(&pi->nread, &pi->lock); // DOC: piperead-sleep
900000000800bc48:	02c862fd 	addi.d	$r29,$r23,536(0x218)
900000000800bc4c:	00150385 	move	$r5,$r28
900000000800bc50:	001503a4 	move	$r4,$r29
900000000800bc54:	5762a3ff 	bl	-40288(0xfff62a0) # 9000000008001ef4 <sleep>
  while (pi->nread == pi->nwrite && pi->writeopen) { // DOC: pipe-empty
900000000800bc58:	288862ed 	ld.w	$r13,$r23,536(0x218)
900000000800bc5c:	288872ec 	ld.w	$r12,$r23,540(0x21c)
900000000800bc60:	5c0069ac 	bne	$r13,$r12,104(0x68) # 900000000800bcc8 <piperead+0xec>
900000000800bc64:	288892ec 	ld.w	$r12,$r23,548(0x224)
900000000800bc68:	40001d80 	beqz	$r12,28(0x1c) # 900000000800bc84 <piperead+0xa8>
    if (pr->killed) {
900000000800bc6c:	2880c30c 	ld.w	$r12,$r24,48(0x30)
900000000800bc70:	43ffdd9f 	beqz	$r12,-36(0x7fffdc) # 900000000800bc4c <piperead+0x70>
      release(&pi->lock);
900000000800bc74:	001502e4 	move	$r4,$r23
900000000800bc78:	57529bff 	bl	-44392(0xfff5298) # 9000000008000f10 <release>
      return -1;
900000000800bc7c:	02bffc18 	addi.w	$r24,$r0,-1(0xfff)
900000000800bc80:	50001800 	b	24(0x18) # 900000000800bc98 <piperead+0xbc>
  }
  for (i = 0; i < n; i++) { // DOC: piperead-copy
    if (pi->nread == pi->nwrite)
900000000800bc84:	00150018 	move	$r24,$r0
    // if(copyout2(addr + i, &ch, 1) == -1)
    //   break;
    if (either_copyout(user, addr + i, &ch, 1) == -1)
      break;
  }
  wakeup(&pi->nwrite); // DOC: piperead-wakeup
900000000800bc88:	02c872e4 	addi.d	$r4,$r23,540(0x21c)
900000000800bc8c:	576457ff 	bl	-39852(0xfff6454) # 90000000080020e0 <wakeup>
  release(&pi->lock);
900000000800bc90:	001502e4 	move	$r4,$r23
900000000800bc94:	57527fff 	bl	-44420(0xfff527c) # 9000000008000f10 <release>
  return i;
}
900000000800bc98:	00150304 	move	$r4,$r24
900000000800bc9c:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000800bca0:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000800bca4:	28c12077 	ld.d	$r23,$r3,72(0x48)
900000000800bca8:	28c10078 	ld.d	$r24,$r3,64(0x40)
900000000800bcac:	28c0e079 	ld.d	$r25,$r3,56(0x38)
900000000800bcb0:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
900000000800bcb4:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
900000000800bcb8:	28c0807c 	ld.d	$r28,$r3,32(0x20)
900000000800bcbc:	28c0607d 	ld.d	$r29,$r3,24(0x18)
900000000800bcc0:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000800bcc4:	4c000020 	jirl	$r0,$r1,0
  for (i = 0; i < n; i++) { // DOC: piperead-copy
900000000800bcc8:	00150018 	move	$r24,$r0
900000000800bccc:	67ffbc1a 	bge	$r0,$r26,-68(0x3ffbc) # 900000000800bc88 <piperead+0xac>
    if (pi->nread == pi->nwrite)
900000000800bcd0:	288862ec 	ld.w	$r12,$r23,536(0x218)
900000000800bcd4:	00150018 	move	$r24,$r0
    if (either_copyout(user, addr + i, &ch, 1) == -1)
900000000800bcd8:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
    ch = pi->data[pi->nread++ % PIPESIZE];
900000000800bcdc:	0280058d 	addi.w	$r13,$r12,1(0x1)
900000000800bce0:	298862ed 	st.w	$r13,$r23,536(0x218)
900000000800bce4:	0347fd8c 	andi	$r12,$r12,0x1ff
900000000800bce8:	0010b2ec 	add.d	$r12,$r23,$r12
900000000800bcec:	2a00618c 	ld.bu	$r12,$r12,24(0x18)
900000000800bcf0:	293ebecc 	st.b	$r12,$r22,-81(0xfaf)
    if (either_copyout(user, addr + i, &ch, 1) == -1)
900000000800bcf4:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000800bcf8:	02febec6 	addi.d	$r6,$r22,-81(0xfaf)
900000000800bcfc:	00150325 	move	$r5,$r25
900000000800bd00:	00150364 	move	$r4,$r27
900000000800bd04:	5765a7ff 	bl	-39516(0xfff65a4) # 90000000080022a8 <either_copyout>
900000000800bd08:	5bff809c 	beq	$r4,$r28,-128(0x3ff80) # 900000000800bc88 <piperead+0xac>
  for (i = 0; i < n; i++) { // DOC: piperead-copy
900000000800bd0c:	02800718 	addi.w	$r24,$r24,1(0x1)
900000000800bd10:	5bff7b58 	beq	$r26,$r24,-136(0x3ff78) # 900000000800bc88 <piperead+0xac>
    if (pi->nread == pi->nwrite)
900000000800bd14:	288862ec 	ld.w	$r12,$r23,536(0x218)
900000000800bd18:	02c00739 	addi.d	$r25,$r25,1(0x1)
900000000800bd1c:	288872ed 	ld.w	$r13,$r23,540(0x21c)
900000000800bd20:	5fffbdac 	bne	$r13,$r12,-68(0x3ffbc) # 900000000800bcdc <piperead+0x100>
900000000800bd24:	53ff67ff 	b	-156(0xfffff64) # 900000000800bc88 <piperead+0xac>

900000000800bd28 <pipe_full>:

int pipe_full(struct pipe *pi) {
900000000800bd28:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800bd2c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800bd30:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800bd34:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800bd38:	29c00078 	st.d	$r24,$r3,0
900000000800bd3c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800bd40:	00150098 	move	$r24,$r4
  int ans = 0;
  acquire(&pi->lock);
900000000800bd44:	57516fff 	bl	-44692(0xfff516c) # 9000000008000eb0 <acquire>
  // int ans = __pipe_full(pi);
  if (pi->nwrite == pi->nread + PIPESIZE) {
900000000800bd48:	28886317 	ld.w	$r23,$r24,536(0x218)
900000000800bd4c:	028802f7 	addi.w	$r23,$r23,512(0x200)
900000000800bd50:	2888730c 	ld.w	$r12,$r24,540(0x21c)
900000000800bd54:	0011b2f7 	sub.d	$r23,$r23,$r12
  int ans = 0;
900000000800bd58:	024006f7 	sltui	$r23,$r23,1(0x1)
    ans = 1;
  }

  release(&pi->lock);
900000000800bd5c:	00150304 	move	$r4,$r24
900000000800bd60:	5751b3ff 	bl	-44624(0xfff51b0) # 9000000008000f10 <release>
  return ans;
}
900000000800bd64:	001502e4 	move	$r4,$r23
900000000800bd68:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800bd6c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800bd70:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800bd74:	28c00078 	ld.d	$r24,$r3,0
900000000800bd78:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800bd7c:	4c000020 	jirl	$r0,$r1,0

900000000800bd80 <pipe_empty>:

int pipe_empty(struct pipe *pi) {
900000000800bd80:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800bd84:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800bd88:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800bd8c:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800bd90:	29c00078 	st.d	$r24,$r3,0
900000000800bd94:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800bd98:	00150098 	move	$r24,$r4
  int ans = 0;
  acquire(&pi->lock);
900000000800bd9c:	575117ff 	bl	-44780(0xfff5114) # 9000000008000eb0 <acquire>
  // int ans = __pipe_empty(pi);
  if (pi->nread == pi->nwrite) {
900000000800bda0:	28886317 	ld.w	$r23,$r24,536(0x218)
900000000800bda4:	2888730c 	ld.w	$r12,$r24,540(0x21c)
900000000800bda8:	0011b2f7 	sub.d	$r23,$r23,$r12
  int ans = 0;
900000000800bdac:	024006f7 	sltui	$r23,$r23,1(0x1)
    ans = 1;
  }
  release(&pi->lock);
900000000800bdb0:	00150304 	move	$r4,$r24
900000000800bdb4:	57515fff 	bl	-44708(0xfff515c) # 9000000008000f10 <release>
  return ans;
900000000800bdb8:	001502e4 	move	$r4,$r23
900000000800bdbc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800bdc0:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800bdc4:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800bdc8:	28c00078 	ld.d	$r24,$r3,0
900000000800bdcc:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800bdd0:	4c000020 	jirl	$r0,$r1,0

900000000800bdd4 <binit>:
  // Sorted by how recently the buffer was used.
  // head.next is most recent, head.prev is least.
  struct buf head;
} bcache;

void binit(void) {
900000000800bdd4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800bdd8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800bddc:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800bde0:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800bde4:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800bde8:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800bdec:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800bdf0:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800bdf4:	02c10076 	addi.d	$r22,$r3,64(0x40)
  struct buf *b;

  initlock(&bcache.lock, "bcache");
900000000800bdf8:	1c0001e5 	pcaddu12i	$r5,15(0xf)
900000000800bdfc:	02e7c0a5 	addi.d	$r5,$r5,-1552(0x9f0)
900000000800be00:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800be04:	02d1a084 	addi.d	$r4,$r4,1128(0x468)
900000000800be08:	57503fff 	bl	-44996(0xfff503c) # 9000000008000e44 <initlock>

  // Create linked list of buffers
  bcache.head.prev = &bcache.head;
900000000800be0c:	1c000977 	pcaddu12i	$r23,75(0x4b)
900000000800be10:	02d172f7 	addi.d	$r23,$r23,1116(0x45c)
900000000800be14:	140036ec 	lu12i.w	$r12,439(0x1b7)
900000000800be18:	0010b2ec 	add.d	$r12,$r23,$r12
900000000800be1c:	1c0001ed 	pcaddu12i	$r13,15(0xf)
900000000800be20:	02e831ad 	addi.d	$r13,$r13,-1524(0xa0c)
900000000800be24:	28c001ad 	ld.d	$r13,$r13,0
900000000800be28:	29de818d 	st.d	$r13,$r12,1952(0x7a0)
  bcache.head.next = &bcache.head;
900000000800be2c:	29dea18d 	st.d	$r13,$r12,1960(0x7a8)
  for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
900000000800be30:	02c062f7 	addi.d	$r23,$r23,24(0x18)
    b->refcnt = 0;
    b->sectorno = ~0;
900000000800be34:	02bffc1a 	addi.w	$r26,$r0,-1(0xfff)
    b->dev = ~0;
    b->next = bcache.head.next;
900000000800be38:	1c000978 	pcaddu12i	$r24,75(0x4b)
900000000800be3c:	02d0c318 	addi.d	$r24,$r24,1072(0x430)
900000000800be40:	140036ec 	lu12i.w	$r12,439(0x1b7)
900000000800be44:	0010b318 	add.d	$r24,$r24,$r12
    b->prev = &bcache.head;
900000000800be48:	001501b9 	move	$r25,$r13
    initsleeplock(&b->lock, "buffer");
900000000800be4c:	1c0001fb 	pcaddu12i	$r27,15(0xf)
900000000800be50:	02e6937b 	addi.d	$r27,$r27,-1628(0x9a4)
    b->refcnt = 0;
900000000800be54:	298102e0 	st.w	$r0,$r23,64(0x40)
    b->sectorno = ~0;
900000000800be58:	298032fa 	st.w	$r26,$r23,12(0xc)
    b->dev = ~0;
900000000800be5c:	298022fa 	st.w	$r26,$r23,8(0x8)
    b->next = bcache.head.next;
900000000800be60:	28dea30c 	ld.d	$r12,$r24,1960(0x7a8)
900000000800be64:	29c142ec 	st.d	$r12,$r23,80(0x50)
    b->prev = &bcache.head;
900000000800be68:	29c122f9 	st.d	$r25,$r23,72(0x48)
    initsleeplock(&b->lock, "buffer");
900000000800be6c:	00150365 	move	$r5,$r27
900000000800be70:	02c042e4 	addi.d	$r4,$r23,16(0x10)
900000000800be74:	54035800 	bl	856(0x358) # 900000000800c1cc <initsleeplock>
    bcache.head.next->prev = b;
900000000800be78:	28dea30c 	ld.d	$r12,$r24,1960(0x7a8)
900000000800be7c:	29c12197 	st.d	$r23,$r12,72(0x48)
    bcache.head.next = b;
900000000800be80:	29dea317 	st.d	$r23,$r24,1960(0x7a8)
  for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
900000000800be84:	02c962f7 	addi.d	$r23,$r23,600(0x258)
900000000800be88:	5fffcef9 	bne	$r23,$r25,-52(0x3ffcc) # 900000000800be54 <binit+0x80>
  }
// #ifdef DEBUG
  printf("binit\n");
900000000800be8c:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800be90:	02e5b084 	addi.d	$r4,$r4,-1684(0x96c)
900000000800be94:	5743e3ff 	bl	-48160(0xfff43e0) # 9000000008000274 <printf>
// #endif
}
900000000800be98:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800be9c:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800bea0:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800bea4:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800bea8:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800beac:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800beb0:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800beb4:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800beb8:	4c000020 	jirl	$r0,$r1,0

900000000800bebc <bread>:
  }
  panic("bget: no buffers");
}

// Return a locked buf with the contents of the indicated block.
struct buf *bread(uint dev, uint sectorno) {
900000000800bebc:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800bec0:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800bec4:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800bec8:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800becc:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800bed0:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800bed4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800bed8:	00150099 	move	$r25,$r4
900000000800bedc:	001500b8 	move	$r24,$r5
  acquire(&bcache.lock);
900000000800bee0:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800bee4:	02ce2084 	addi.d	$r4,$r4,904(0x388)
900000000800bee8:	574fcbff 	bl	-45112(0xfff4fc8) # 9000000008000eb0 <acquire>
  for (b = bcache.head.next; b != &bcache.head; b = b->next) {
900000000800beec:	1c00096c 	pcaddu12i	$r12,75(0x4b)
900000000800bef0:	02cdf18c 	addi.d	$r12,$r12,892(0x37c)
900000000800bef4:	140036ed 	lu12i.w	$r13,439(0x1b7)
900000000800bef8:	0010b58c 	add.d	$r12,$r12,$r13
900000000800befc:	28dea197 	ld.d	$r23,$r12,1960(0x7a8)
900000000800bf00:	1c0001ec 	pcaddu12i	$r12,15(0xf)
900000000800bf04:	02e4a18c 	addi.d	$r12,$r12,-1752(0x928)
900000000800bf08:	28c0018c 	ld.d	$r12,$r12,0
900000000800bf0c:	580052ec 	beq	$r23,$r12,80(0x50) # 900000000800bf5c <bread+0xa0>
900000000800bf10:	1c0001ed 	pcaddu12i	$r13,15(0xf)
900000000800bf14:	02e461ad 	addi.d	$r13,$r13,-1768(0x918)
900000000800bf18:	50001000 	b	16(0x10) # 900000000800bf28 <bread+0x6c>
900000000800bf1c:	28c142f7 	ld.d	$r23,$r23,80(0x50)
900000000800bf20:	28c001ac 	ld.d	$r12,$r13,0
900000000800bf24:	58003aec 	beq	$r23,$r12,56(0x38) # 900000000800bf5c <bread+0xa0>
    if (b->dev == dev && b->sectorno == sectorno) {
900000000800bf28:	288022ec 	ld.w	$r12,$r23,8(0x8)
900000000800bf2c:	5ffff199 	bne	$r12,$r25,-16(0x3fff0) # 900000000800bf1c <bread+0x60>
900000000800bf30:	288032ec 	ld.w	$r12,$r23,12(0xc)
900000000800bf34:	5fffe998 	bne	$r12,$r24,-24(0x3ffe8) # 900000000800bf1c <bread+0x60>
      b->refcnt++;
900000000800bf38:	288102ec 	ld.w	$r12,$r23,64(0x40)
900000000800bf3c:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800bf40:	298102ec 	st.w	$r12,$r23,64(0x40)
      release(&bcache.lock);
900000000800bf44:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800bf48:	02cc9084 	addi.d	$r4,$r4,804(0x324)
900000000800bf4c:	574fc7ff 	bl	-45116(0xfff4fc4) # 9000000008000f10 <release>
      acquiresleep(&b->lock);
900000000800bf50:	02c042e4 	addi.d	$r4,$r23,16(0x10)
900000000800bf54:	5402cc00 	bl	716(0x2cc) # 900000000800c220 <acquiresleep>
      return b;
900000000800bf58:	50007400 	b	116(0x74) # 900000000800bfcc <bread+0x110>
  for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
900000000800bf5c:	1c00096c 	pcaddu12i	$r12,75(0x4b)
900000000800bf60:	02cc318c 	addi.d	$r12,$r12,780(0x30c)
900000000800bf64:	140036ed 	lu12i.w	$r13,439(0x1b7)
900000000800bf68:	0010b58c 	add.d	$r12,$r12,$r13
900000000800bf6c:	28de8197 	ld.d	$r23,$r12,1952(0x7a0)
900000000800bf70:	1c0001ec 	pcaddu12i	$r12,15(0xf)
900000000800bf74:	02e2e18c 	addi.d	$r12,$r12,-1864(0x8b8)
900000000800bf78:	28c0018c 	ld.d	$r12,$r12,0
900000000800bf7c:	58007aec 	beq	$r23,$r12,120(0x78) # 900000000800bff4 <bread+0x138>
    if (b->refcnt == 0) {
900000000800bf80:	288102ec 	ld.w	$r12,$r23,64(0x40)
900000000800bf84:	40002180 	beqz	$r12,32(0x20) # 900000000800bfa4 <bread+0xe8>
  for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
900000000800bf88:	1c0001ec 	pcaddu12i	$r12,15(0xf)
900000000800bf8c:	02e2818c 	addi.d	$r12,$r12,-1888(0x8a0)
900000000800bf90:	28c0018d 	ld.d	$r13,$r12,0
900000000800bf94:	28c122f7 	ld.d	$r23,$r23,72(0x48)
900000000800bf98:	58005eed 	beq	$r23,$r13,92(0x5c) # 900000000800bff4 <bread+0x138>
    if (b->refcnt == 0) {
900000000800bf9c:	288102ec 	ld.w	$r12,$r23,64(0x40)
900000000800bfa0:	47fff59f 	bnez	$r12,-12(0x7ffff4) # 900000000800bf94 <bread+0xd8>
      b->dev = dev;
900000000800bfa4:	298022f9 	st.w	$r25,$r23,8(0x8)
      b->sectorno = sectorno;
900000000800bfa8:	298032f8 	st.w	$r24,$r23,12(0xc)
      b->valid = 0;
900000000800bfac:	298002e0 	st.w	$r0,$r23,0
      b->refcnt = 1;
900000000800bfb0:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800bfb4:	298102ec 	st.w	$r12,$r23,64(0x40)
      release(&bcache.lock);
900000000800bfb8:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800bfbc:	02cac084 	addi.d	$r4,$r4,688(0x2b0)
900000000800bfc0:	574f53ff 	bl	-45232(0xfff4f50) # 9000000008000f10 <release>
      acquiresleep(&b->lock);
900000000800bfc4:	02c042e4 	addi.d	$r4,$r23,16(0x10)
900000000800bfc8:	54025800 	bl	600(0x258) # 900000000800c220 <acquiresleep>
  struct buf *b;

  b = bget(dev, sectorno);
  if (!b->valid) {
900000000800bfcc:	288002ec 	ld.w	$r12,$r23,0
900000000800bfd0:	40003180 	beqz	$r12,48(0x30) # 900000000800c000 <bread+0x144>
    disk_read(b);
    b->valid = 1;
  }

  return b;
}
900000000800bfd4:	001502e4 	move	$r4,$r23
900000000800bfd8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800bfdc:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800bfe0:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800bfe4:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800bfe8:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800bfec:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800bff0:	4c000020 	jirl	$r0,$r1,0
  panic("bget: no buffers");
900000000800bff4:	1c0001e4 	pcaddu12i	$r4,15(0xf)
900000000800bff8:	02e03084 	addi.d	$r4,$r4,-2036(0x80c)
900000000800bffc:	57420bff 	bl	-48632(0xfff4208) # 9000000008000204 <panic>
    disk_read(b);
900000000800c000:	001502e4 	move	$r4,$r23
900000000800c004:	54038800 	bl	904(0x388) # 900000000800c38c <disk_read>
    b->valid = 1;
900000000800c008:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800c00c:	298002ec 	st.w	$r12,$r23,0
  return b;
900000000800c010:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800bfd4 <bread+0x118>

900000000800c014 <bwrite>:

// Write b's contents to disk.  Must be locked.
void bwrite(struct buf *b) {
900000000800c014:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c018:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c01c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c020:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c024:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c028:	00150097 	move	$r23,$r4
  if (!holdingsleep(&b->lock))
900000000800c02c:	02c04084 	addi.d	$r4,$r4,16(0x10)
900000000800c030:	5402c000 	bl	704(0x2c0) # 900000000800c2f0 <holdingsleep>
900000000800c034:	40002080 	beqz	$r4,32(0x20) # 900000000800c054 <bwrite+0x40>
    panic("bwrite");
  disk_write(b);
900000000800c038:	001502e4 	move	$r4,$r23
900000000800c03c:	54037400 	bl	884(0x374) # 900000000800c3b0 <disk_write>
}
900000000800c040:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c044:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c048:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c04c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c050:	4c000020 	jirl	$r0,$r1,0
    panic("bwrite");
900000000800c054:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800c058:	02df1084 	addi.d	$r4,$r4,1988(0x7c4)
900000000800c05c:	5741abff 	bl	-48728(0xfff41a8) # 9000000008000204 <panic>

900000000800c060 <brelse>:

// Release a locked buffer.
// Move to the head of the most-recently-used list.
void brelse(struct buf *b) {
900000000800c060:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c064:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c068:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c06c:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c070:	29c00078 	st.d	$r24,$r3,0
900000000800c074:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c078:	00150097 	move	$r23,$r4
  if (!holdingsleep(&b->lock))
900000000800c07c:	02c04098 	addi.d	$r24,$r4,16(0x10)
900000000800c080:	00150304 	move	$r4,$r24
900000000800c084:	54026c00 	bl	620(0x26c) # 900000000800c2f0 <holdingsleep>
900000000800c088:	40009880 	beqz	$r4,152(0x98) # 900000000800c120 <brelse+0xc0>
    panic("brelse");

  releasesleep(&b->lock);
900000000800c08c:	00150304 	move	$r4,$r24
900000000800c090:	54020800 	bl	520(0x208) # 900000000800c298 <releasesleep>

  acquire(&bcache.lock);
900000000800c094:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800c098:	02c75084 	addi.d	$r4,$r4,468(0x1d4)
900000000800c09c:	574e17ff 	bl	-45548(0xfff4e14) # 9000000008000eb0 <acquire>
  b->refcnt--;
900000000800c0a0:	288102ec 	ld.w	$r12,$r23,64(0x40)
900000000800c0a4:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000800c0a8:	298102ec 	st.w	$r12,$r23,64(0x40)
  if (b->refcnt == 0) {
900000000800c0ac:	44005180 	bnez	$r12,80(0x50) # 900000000800c0fc <brelse+0x9c>
    // no one is waiting for it.
    b->next->prev = b->prev;
900000000800c0b0:	28c142ec 	ld.d	$r12,$r23,80(0x50)
900000000800c0b4:	28c122ed 	ld.d	$r13,$r23,72(0x48)
900000000800c0b8:	29c1218d 	st.d	$r13,$r12,72(0x48)
    b->prev->next = b->next;
900000000800c0bc:	28c122ec 	ld.d	$r12,$r23,72(0x48)
900000000800c0c0:	28c142ed 	ld.d	$r13,$r23,80(0x50)
900000000800c0c4:	29c1418d 	st.d	$r13,$r12,80(0x50)
    b->next = bcache.head.next;
900000000800c0c8:	1c00096c 	pcaddu12i	$r12,75(0x4b)
900000000800c0cc:	02c6818c 	addi.d	$r12,$r12,416(0x1a0)
900000000800c0d0:	140036ed 	lu12i.w	$r13,439(0x1b7)
900000000800c0d4:	0010b58c 	add.d	$r12,$r12,$r13
900000000800c0d8:	28dea18d 	ld.d	$r13,$r12,1960(0x7a8)
900000000800c0dc:	29c142ed 	st.d	$r13,$r23,80(0x50)
    b->prev = &bcache.head;
900000000800c0e0:	1c0001cd 	pcaddu12i	$r13,14(0xe)
900000000800c0e4:	02dd21ad 	addi.d	$r13,$r13,1864(0x748)
900000000800c0e8:	28c001ad 	ld.d	$r13,$r13,0
900000000800c0ec:	29c122ed 	st.d	$r13,$r23,72(0x48)
    bcache.head.next->prev = b;
900000000800c0f0:	28dea18d 	ld.d	$r13,$r12,1960(0x7a8)
900000000800c0f4:	29c121b7 	st.d	$r23,$r13,72(0x48)
    bcache.head.next = b;
900000000800c0f8:	29dea197 	st.d	$r23,$r12,1960(0x7a8)
  }

  release(&bcache.lock);
900000000800c0fc:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800c100:	02c5b084 	addi.d	$r4,$r4,364(0x16c)
900000000800c104:	574e0fff 	bl	-45556(0xfff4e0c) # 9000000008000f10 <release>
}
900000000800c108:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c10c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c110:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c114:	28c00078 	ld.d	$r24,$r3,0
900000000800c118:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c11c:	4c000020 	jirl	$r0,$r1,0
    panic("brelse");
900000000800c120:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800c124:	02dc0084 	addi.d	$r4,$r4,1792(0x700)
900000000800c128:	5740dfff 	bl	-48932(0xfff40dc) # 9000000008000204 <panic>

900000000800c12c <bpin>:

void bpin(struct buf *b) {
900000000800c12c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c130:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c134:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c138:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c13c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c140:	00150097 	move	$r23,$r4
  acquire(&bcache.lock);
900000000800c144:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800c148:	02c49084 	addi.d	$r4,$r4,292(0x124)
900000000800c14c:	574d67ff 	bl	-45724(0xfff4d64) # 9000000008000eb0 <acquire>
  b->refcnt++;
900000000800c150:	288102ec 	ld.w	$r12,$r23,64(0x40)
900000000800c154:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800c158:	298102ec 	st.w	$r12,$r23,64(0x40)
  release(&bcache.lock);
900000000800c15c:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800c160:	02c43084 	addi.d	$r4,$r4,268(0x10c)
900000000800c164:	574dafff 	bl	-45652(0xfff4dac) # 9000000008000f10 <release>
}
900000000800c168:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c16c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c170:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c174:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c178:	4c000020 	jirl	$r0,$r1,0

900000000800c17c <bunpin>:

void bunpin(struct buf *b) {
900000000800c17c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c180:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c184:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c188:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c18c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c190:	00150097 	move	$r23,$r4
  acquire(&bcache.lock);
900000000800c194:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800c198:	02c35084 	addi.d	$r4,$r4,212(0xd4)
900000000800c19c:	574d17ff 	bl	-45804(0xfff4d14) # 9000000008000eb0 <acquire>
  b->refcnt--;
900000000800c1a0:	288102ec 	ld.w	$r12,$r23,64(0x40)
900000000800c1a4:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000800c1a8:	298102ec 	st.w	$r12,$r23,64(0x40)
  release(&bcache.lock);
900000000800c1ac:	1c000964 	pcaddu12i	$r4,75(0x4b)
900000000800c1b0:	02c2f084 	addi.d	$r4,$r4,188(0xbc)
900000000800c1b4:	574d5fff 	bl	-45732(0xfff4d5c) # 9000000008000f10 <release>
}
900000000800c1b8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c1bc:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c1c0:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c1c4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c1c8:	4c000020 	jirl	$r0,$r1,0

900000000800c1cc <initsleeplock>:
#include "include/proc.h"
#include "include/loongarch.h"
#include "include/spinlock.h"
#include "include/types.h"

void initsleeplock(struct sleeplock *lk, char *name) {
900000000800c1cc:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c1d0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c1d4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c1d8:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c1dc:	29c00078 	st.d	$r24,$r3,0
900000000800c1e0:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c1e4:	00150097 	move	$r23,$r4
900000000800c1e8:	001500b8 	move	$r24,$r5
  initlock(&lk->lk, "sleep lock");
900000000800c1ec:	1c0001c5 	pcaddu12i	$r5,14(0xe)
900000000800c1f0:	02d910a5 	addi.d	$r5,$r5,1604(0x644)
900000000800c1f4:	02c02084 	addi.d	$r4,$r4,8(0x8)
900000000800c1f8:	574c4fff 	bl	-46004(0xfff4c4c) # 9000000008000e44 <initlock>
  lk->name = name;
900000000800c1fc:	29c082f8 	st.d	$r24,$r23,32(0x20)
  lk->locked = 0;
900000000800c200:	298002e0 	st.w	$r0,$r23,0
  lk->pid = 0;
900000000800c204:	2980a2e0 	st.w	$r0,$r23,40(0x28)
}
900000000800c208:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c20c:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c210:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c214:	28c00078 	ld.d	$r24,$r3,0
900000000800c218:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c21c:	4c000020 	jirl	$r0,$r1,0

900000000800c220 <acquiresleep>:

void acquiresleep(struct sleeplock *lk) {
900000000800c220:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c224:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c228:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c22c:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c230:	29c00078 	st.d	$r24,$r3,0
900000000800c234:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c238:	00150097 	move	$r23,$r4
  acquire(&lk->lk);
900000000800c23c:	02c02098 	addi.d	$r24,$r4,8(0x8)
900000000800c240:	00150304 	move	$r4,$r24
900000000800c244:	574c6fff 	bl	-45972(0xfff4c6c) # 9000000008000eb0 <acquire>
  while (lk->locked) {
900000000800c248:	288002ec 	ld.w	$r12,$r23,0
900000000800c24c:	40001980 	beqz	$r12,24(0x18) # 900000000800c264 <acquiresleep+0x44>
    sleep(lk, &lk->lk);
900000000800c250:	00150305 	move	$r5,$r24
900000000800c254:	001502e4 	move	$r4,$r23
900000000800c258:	575c9fff 	bl	-41828(0xfff5c9c) # 9000000008001ef4 <sleep>
  while (lk->locked) {
900000000800c25c:	288002ec 	ld.w	$r12,$r23,0
900000000800c260:	47fff19f 	bnez	$r12,-16(0x7ffff0) # 900000000800c250 <acquiresleep+0x30>
  }
  lk->locked = 1;
900000000800c264:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800c268:	298002ec 	st.w	$r12,$r23,0
  lk->pid = myproc()->pid;
900000000800c26c:	5754bfff 	bl	-43844(0xfff54bc) # 9000000008001728 <myproc>
900000000800c270:	2880e08c 	ld.w	$r12,$r4,56(0x38)
900000000800c274:	2980a2ec 	st.w	$r12,$r23,40(0x28)
  release(&lk->lk);
900000000800c278:	00150304 	move	$r4,$r24
900000000800c27c:	574c97ff 	bl	-45932(0xfff4c94) # 9000000008000f10 <release>
}
900000000800c280:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c284:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c288:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c28c:	28c00078 	ld.d	$r24,$r3,0
900000000800c290:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c294:	4c000020 	jirl	$r0,$r1,0

900000000800c298 <releasesleep>:

void releasesleep(struct sleeplock *lk) {
900000000800c298:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c29c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c2a0:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c2a4:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c2a8:	29c00078 	st.d	$r24,$r3,0
900000000800c2ac:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c2b0:	00150097 	move	$r23,$r4
  acquire(&lk->lk);
900000000800c2b4:	02c02098 	addi.d	$r24,$r4,8(0x8)
900000000800c2b8:	00150304 	move	$r4,$r24
900000000800c2bc:	574bf7ff 	bl	-46092(0xfff4bf4) # 9000000008000eb0 <acquire>
  lk->locked = 0;
900000000800c2c0:	298002e0 	st.w	$r0,$r23,0
  lk->pid = 0;
900000000800c2c4:	2980a2e0 	st.w	$r0,$r23,40(0x28)
  wakeup(lk);
900000000800c2c8:	001502e4 	move	$r4,$r23
900000000800c2cc:	575e17ff 	bl	-41452(0xfff5e14) # 90000000080020e0 <wakeup>
  release(&lk->lk);
900000000800c2d0:	00150304 	move	$r4,$r24
900000000800c2d4:	574c3fff 	bl	-46020(0xfff4c3c) # 9000000008000f10 <release>
}
900000000800c2d8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c2dc:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c2e0:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c2e4:	28c00078 	ld.d	$r24,$r3,0
900000000800c2e8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c2ec:	4c000020 	jirl	$r0,$r1,0

900000000800c2f0 <holdingsleep>:

int holdingsleep(struct sleeplock *lk) {
900000000800c2f0:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800c2f4:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800c2f8:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800c2fc:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800c300:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800c304:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800c308:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800c30c:	00150097 	move	$r23,$r4
  int r;

  acquire(&lk->lk);
900000000800c310:	02c02098 	addi.d	$r24,$r4,8(0x8)
900000000800c314:	00150304 	move	$r4,$r24
900000000800c318:	574b9bff 	bl	-46184(0xfff4b98) # 9000000008000eb0 <acquire>
  r = lk->locked && (lk->pid == myproc()->pid);
900000000800c31c:	288002ec 	ld.w	$r12,$r23,0
900000000800c320:	44003180 	bnez	$r12,48(0x30) # 900000000800c350 <holdingsleep+0x60>
900000000800c324:	00150017 	move	$r23,$r0
  release(&lk->lk);
900000000800c328:	00150304 	move	$r4,$r24
900000000800c32c:	574be7ff 	bl	-46108(0xfff4be4) # 9000000008000f10 <release>
  return r;
}
900000000800c330:	001502e4 	move	$r4,$r23
900000000800c334:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800c338:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800c33c:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800c340:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800c344:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800c348:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800c34c:	4c000020 	jirl	$r0,$r1,0
  r = lk->locked && (lk->pid == myproc()->pid);
900000000800c350:	2880a2f9 	ld.w	$r25,$r23,40(0x28)
900000000800c354:	5753d7ff 	bl	-44076(0xfff53d4) # 9000000008001728 <myproc>
900000000800c358:	2880e097 	ld.w	$r23,$r4,56(0x38)
900000000800c35c:	0011e6f7 	sub.d	$r23,$r23,$r25
900000000800c360:	024006f7 	sltui	$r23,$r23,1(0x1)
900000000800c364:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800c328 <holdingsleep+0x38>

900000000800c368 <disk_init>:

#ifdef QEMU
#include "include/virtio.h"
#endif

void disk_init(void) {
900000000800c368:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800c36c:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800c370:	29c00076 	st.d	$r22,$r3,0
900000000800c374:	02c04076 	addi.d	$r22,$r3,16(0x10)
// #ifdef QEMU
//   virtio_disk_init();
// #else
  // sdcard_init();
  ramdisk_init();
900000000800c378:	543ff800 	bl	16376(0x3ff8) # 9000000008010370 <ramdisk_init>
// #endif
}
900000000800c37c:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800c380:	28c00076 	ld.d	$r22,$r3,0
900000000800c384:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800c388:	4c000020 	jirl	$r0,$r1,0

900000000800c38c <disk_read>:

void disk_read(struct buf *b) {
900000000800c38c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800c390:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800c394:	29c00076 	st.d	$r22,$r3,0
900000000800c398:	02c04076 	addi.d	$r22,$r3,16(0x10)
// #ifdef QEMU
//   virtio_disk_rw(b, 0);
// #else
  // sdcard_read_sector(b->data, b->sectorno);
  // sd_read((uint32*)b->data, 128, b->sectorno);
  ramdisk_read(b);
900000000800c39c:	54402800 	bl	16424(0x4028) # 90000000080103c4 <ramdisk_read>
// #endif
}
900000000800c3a0:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800c3a4:	28c00076 	ld.d	$r22,$r3,0
900000000800c3a8:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800c3ac:	4c000020 	jirl	$r0,$r1,0

900000000800c3b0 <disk_write>:

void disk_write(struct buf *b) {
900000000800c3b0:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800c3b4:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800c3b8:	29c00076 	st.d	$r22,$r3,0
900000000800c3bc:	02c04076 	addi.d	$r22,$r3,16(0x10)
// #ifdef QEMU
//   virtio_disk_rw(b, 1);
// #else
  // sdcard_write_sector(b->data, b->sectorno);
  ramdisk_write(b);
900000000800c3c0:	54407000 	bl	16496(0x4070) # 9000000008010430 <ramdisk_write>
// #endif
}
900000000800c3c4:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800c3c8:	28c00076 	ld.d	$r22,$r3,0
900000000800c3cc:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800c3d0:	4c000020 	jirl	$r0,$r1,0

900000000800c3d4 <disk_intr>:

void disk_intr(void) {
900000000800c3d4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800c3d8:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800c3dc:	29c00076 	st.d	$r22,$r3,0
900000000800c3e0:	02c04076 	addi.d	$r22,$r3,16(0x10)
// #ifdef QEMU
//   virtio_disk_intr();
// #else
  printf("should not have disk intr");
900000000800c3e4:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800c3e8:	02d17084 	addi.d	$r4,$r4,1116(0x45c)
900000000800c3ec:	573e8bff 	bl	-49528(0xfff3e88) # 9000000008000274 <printf>
// dmac_intr(DMAC_CHANNEL0);
// #endif
}
900000000800c3f0:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800c3f4:	28c00076 	ld.d	$r22,$r3,0
900000000800c3f8:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800c3fc:	4c000020 	jirl	$r0,$r1,0

900000000800c400 <skipelem>:
  }
  eput(ep);
  return NULL;
}

static char *skipelem(char *path, char *name) {
900000000800c400:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c404:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c408:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c40c:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c410:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800c414:	001500af 	move	$r15,$r5
  while (*path == '/') {
900000000800c418:	2800008c 	ld.b	$r12,$r4,0
900000000800c41c:	0015018e 	move	$r14,$r12
900000000800c420:	0280bc0d 	addi.w	$r13,$r0,47(0x2f)
900000000800c424:	5c0019cd 	bne	$r14,$r13,24(0x18) # 900000000800c43c <skipelem+0x3c>
900000000800c428:	0280bc0e 	addi.w	$r14,$r0,47(0x2f)
    path++;
900000000800c42c:	02c00484 	addi.d	$r4,$r4,1(0x1)
  while (*path == '/') {
900000000800c430:	2800008c 	ld.b	$r12,$r4,0
900000000800c434:	0015018d 	move	$r13,$r12
900000000800c438:	5bfff5ae 	beq	$r13,$r14,-12(0x3fff4) # 900000000800c42c <skipelem+0x2c>
  }
  if (*path == 0) {
    return NULL;
900000000800c43c:	00150017 	move	$r23,$r0
  if (*path == 0) {
900000000800c440:	40007980 	beqz	$r12,120(0x78) # 900000000800c4b8 <skipelem+0xb8>
  }
  char *s = path;
  while (*path != '/' && *path != 0) {
900000000800c444:	2800008c 	ld.b	$r12,$r4,0
900000000800c448:	00150097 	move	$r23,$r4
900000000800c44c:	0280bc0e 	addi.w	$r14,$r0,47(0x2f)
900000000800c450:	40001980 	beqz	$r12,24(0x18) # 900000000800c468 <skipelem+0x68>
    path++;
900000000800c454:	02c006f7 	addi.d	$r23,$r23,1(0x1)
  while (*path != '/' && *path != 0) {
900000000800c458:	280002ec 	ld.b	$r12,$r23,0
900000000800c45c:	0015018d 	move	$r13,$r12
900000000800c460:	580009ae 	beq	$r13,$r14,8(0x8) # 900000000800c468 <skipelem+0x68>
900000000800c464:	47fff19f 	bnez	$r12,-16(0x7ffff0) # 900000000800c454 <skipelem+0x54>
  }
  int len = path - s;
900000000800c468:	001192ec 	sub.d	$r12,$r23,$r4
900000000800c46c:	0040818c 	slli.w	$r12,$r12,0x0
  if (len > FAT32_MAX_FILENAME) {
900000000800c470:	0283fc0d 	addi.w	$r13,$r0,255(0xff)
900000000800c474:	001231ad 	slt	$r13,$r13,$r12
900000000800c478:	0013b586 	masknez	$r6,$r12,$r13
900000000800c47c:	0283fc0c 	addi.w	$r12,$r0,255(0xff)
900000000800c480:	0013358d 	maskeqz	$r13,$r12,$r13
900000000800c484:	001534c6 	or	$r6,$r6,$r13
    len = FAT32_MAX_FILENAME;
  }
  name[len] = 0;
900000000800c488:	001099ec 	add.d	$r12,$r15,$r6
900000000800c48c:	29000180 	st.b	$r0,$r12,0
  memmove(name, s, len);
900000000800c490:	00150085 	move	$r5,$r4
900000000800c494:	001501e4 	move	$r4,$r15
900000000800c498:	574b77ff 	bl	-46220(0xfff4b74) # 900000000800100c <memmove>
  while (*path == '/') {
900000000800c49c:	280002ed 	ld.b	$r13,$r23,0
900000000800c4a0:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
900000000800c4a4:	5c0015ac 	bne	$r13,$r12,20(0x14) # 900000000800c4b8 <skipelem+0xb8>
900000000800c4a8:	0280bc0d 	addi.w	$r13,$r0,47(0x2f)
    path++;
900000000800c4ac:	02c006f7 	addi.d	$r23,$r23,1(0x1)
  while (*path == '/') {
900000000800c4b0:	280002ec 	ld.b	$r12,$r23,0
900000000800c4b4:	5bfff98d 	beq	$r12,$r13,-8(0x3fff8) # 900000000800c4ac <skipelem+0xac>
  }
  return path;
}
900000000800c4b8:	001502e4 	move	$r4,$r23
900000000800c4bc:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c4c0:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c4c4:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c4c8:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c4cc:	4c000020 	jirl	$r0,$r1,0

900000000800c4d0 <read_fat>:
static uint32 read_fat(uint32 cluster) {
900000000800c4d0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800c4d4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800c4d8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800c4dc:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800c4e0:	29c00078 	st.d	$r24,$r3,0
900000000800c4e4:	02c08076 	addi.d	$r22,$r3,32(0x20)
  if (cluster >= FAT32_EOC) {
900000000800c4e8:	141fffec 	lu12i.w	$r12,65535(0xffff)
900000000800c4ec:	03bfdd8c 	ori	$r12,$r12,0xff7
    return cluster;
900000000800c4f0:	00150097 	move	$r23,$r4
  if (cluster >= FAT32_EOC) {
900000000800c4f4:	68001d84 	bltu	$r12,$r4,28(0x1c) # 900000000800c510 <read_fat+0x40>
      fat.data_clus_cnt + 1) { // because cluster number starts at 2, not 0
900000000800c4f8:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c4fc:	02fbc18c 	addi.d	$r12,$r12,-272(0xef0)
900000000800c500:	2880218c 	ld.w	$r12,$r12,8(0x8)
  if (cluster >
900000000800c504:	0280058c 	addi.w	$r12,$r12,1(0x1)
    return 0;
900000000800c508:	00150017 	move	$r23,$r0
  if (cluster >
900000000800c50c:	6c002184 	bgeu	$r12,$r4,32(0x20) # 900000000800c52c <read_fat+0x5c>
}
900000000800c510:	001502e4 	move	$r4,$r23
900000000800c514:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800c518:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800c51c:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800c520:	28c00078 	ld.d	$r24,$r3,0
900000000800c524:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800c528:	4c000020 	jirl	$r0,$r1,0
  return fat.bpb.rsvd_sec_cnt + (cluster << 2) / fat.bpb.byts_per_sec +
900000000800c52c:	00408897 	slli.w	$r23,$r4,0x2
900000000800c530:	1c0040f8 	pcaddu12i	$r24,519(0x207)
900000000800c534:	02fae318 	addi.d	$r24,$r24,-328(0xeb8)
900000000800c538:	2a40430c 	ld.hu	$r12,$r24,16(0x10)
900000000800c53c:	002132e5 	div.wu	$r5,$r23,$r12
900000000800c540:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000800c548 <read_fat+0x78>
900000000800c544:	002a0007 	break	0x7
900000000800c548:	2a40530c 	ld.hu	$r12,$r24,20(0x14)
  struct buf *b = bread(0, fat_sec);
900000000800c54c:	001030a5 	add.w	$r5,$r5,$r12
900000000800c550:	00150004 	move	$r4,$r0
900000000800c554:	57f96bff 	bl	-1688(0xffff968) # 900000000800bebc <bread>
  return (cluster << 2) % fat.bpb.byts_per_sec;
900000000800c558:	2a40430d 	ld.hu	$r13,$r24,16(0x10)
900000000800c55c:	0021b6ec 	mod.wu	$r12,$r23,$r13
900000000800c560:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800c568 <read_fat+0x98>
900000000800c564:	002a0007 	break	0x7
  uint32 next_clus = *(uint32 *)(b->data + fat_offset_of_clus(cluster));
900000000800c568:	0010b08c 	add.d	$r12,$r4,$r12
900000000800c56c:	28816197 	ld.w	$r23,$r12,88(0x58)
  brelse(b);
900000000800c570:	57faf3ff 	bl	-1296(0xffffaf0) # 900000000800c060 <brelse>
  return next_clus;
900000000800c574:	53ff9fff 	b	-100(0xfffff9c) # 900000000800c510 <read_fat+0x40>

900000000800c578 <alloc_clus>:
static uint32 alloc_clus(uint8 dev) {
900000000800c578:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800c57c:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800c580:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800c584:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800c588:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800c58c:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800c590:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800c594:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800c598:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800c59c:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800c5a0:	29c0007e 	st.d	$r30,$r3,0
900000000800c5a4:	02c14076 	addi.d	$r22,$r3,80(0x50)
  uint32 sec = fat.bpb.rsvd_sec_cnt;
900000000800c5a8:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c5ac:	02f9018c 	addi.d	$r12,$r12,-448(0xe40)
900000000800c5b0:	2a40519b 	ld.hu	$r27,$r12,20(0x14)
  uint32 const ent_per_sec = fat.bpb.byts_per_sec / sizeof(uint32);
900000000800c5b4:	2a404198 	ld.hu	$r24,$r12,16(0x10)
  for (uint32 i = 0; i < fat.bpb.fat_sz; i++, sec++) {
900000000800c5b8:	2880818c 	ld.w	$r12,$r12,32(0x20)
900000000800c5bc:	40013980 	beqz	$r12,312(0x138) # 900000000800c6f4 <alloc_clus+0x17c>
900000000800c5c0:	00450b18 	srli.d	$r24,$r24,0x2
900000000800c5c4:	0015001a 	move	$r26,$r0
    b = bread(dev, sec);
900000000800c5c8:	0015009c 	move	$r28,$r4
    for (uint32 j = 0; j < ent_per_sec; j++) {
900000000800c5cc:	0015001d 	move	$r29,$r0
  for (uint32 i = 0; i < fat.bpb.fat_sz; i++, sec++) {
900000000800c5d0:	1c0040fe 	pcaddu12i	$r30,519(0x207)
900000000800c5d4:	02f863de 	addi.d	$r30,$r30,-488(0xe18)
900000000800c5d8:	50001c00 	b	28(0x1c) # 900000000800c5f4 <alloc_clus+0x7c>
    brelse(b);
900000000800c5dc:	00150324 	move	$r4,$r25
900000000800c5e0:	57fa83ff 	bl	-1408(0xffffa80) # 900000000800c060 <brelse>
  for (uint32 i = 0; i < fat.bpb.fat_sz; i++, sec++) {
900000000800c5e4:	0280075a 	addi.w	$r26,$r26,1(0x1)
900000000800c5e8:	0280077b 	addi.w	$r27,$r27,1(0x1)
900000000800c5ec:	288083cc 	ld.w	$r12,$r30,32(0x20)
900000000800c5f0:	6c01074c 	bgeu	$r26,$r12,260(0x104) # 900000000800c6f4 <alloc_clus+0x17c>
    b = bread(dev, sec);
900000000800c5f4:	00150365 	move	$r5,$r27
900000000800c5f8:	00150384 	move	$r4,$r28
900000000800c5fc:	57f8c3ff 	bl	-1856(0xffff8c0) # 900000000800bebc <bread>
900000000800c600:	00150099 	move	$r25,$r4
    for (uint32 j = 0; j < ent_per_sec; j++) {
900000000800c604:	43ffdb1f 	beqz	$r24,-40(0x7fffd8) # 900000000800c5dc <alloc_clus+0x64>
      if (((uint32 *)(b->data))[j] == 0) {
900000000800c608:	02c1608e 	addi.d	$r14,$r4,88(0x58)
900000000800c60c:	28816097 	ld.w	$r23,$r4,88(0x58)
900000000800c610:	400026e0 	beqz	$r23,36(0x24) # 900000000800c634 <alloc_clus+0xbc>
900000000800c614:	02c1708c 	addi.d	$r12,$r4,92(0x5c)
    for (uint32 j = 0; j < ent_per_sec; j++) {
900000000800c618:	001503b7 	move	$r23,$r29
900000000800c61c:	028006f7 	addi.w	$r23,$r23,1(0x1)
900000000800c620:	5bffbf17 	beq	$r24,$r23,-68(0x3ffbc) # 900000000800c5dc <alloc_clus+0x64>
      if (((uint32 *)(b->data))[j] == 0) {
900000000800c624:	0015018e 	move	$r14,$r12
900000000800c628:	02c0118c 	addi.d	$r12,$r12,4(0x4)
900000000800c62c:	28bff18d 	ld.w	$r13,$r12,-4(0xffc)
900000000800c630:	47ffedbf 	bnez	$r13,-20(0x7fffec) # 900000000800c61c <alloc_clus+0xa4>
        ((uint32 *)(b->data))[j] = FAT32_EOC + 7;
900000000800c634:	141fffec 	lu12i.w	$r12,65535(0xffff)
900000000800c638:	03bffd8c 	ori	$r12,$r12,0xfff
900000000800c63c:	298001cc 	st.w	$r12,$r14,0
        bwrite(b);
900000000800c640:	00150324 	move	$r4,$r25
900000000800c644:	57f9d3ff 	bl	-1584(0xffff9d0) # 900000000800c014 <bwrite>
        brelse(b);
900000000800c648:	00150324 	move	$r4,$r25
900000000800c64c:	57fa17ff 	bl	-1516(0xffffa14) # 900000000800c060 <brelse>
        uint32 clus = i * ent_per_sec + j;
900000000800c650:	001c6b18 	mul.w	$r24,$r24,$r26
900000000800c654:	00105f18 	add.w	$r24,$r24,$r23
  return ((cluster - 2) * fat.bpb.sec_per_clus) + fat.first_data_sec;
900000000800c658:	1c0040ed 	pcaddu12i	$r13,519(0x207)
900000000800c65c:	02f641ad 	addi.d	$r13,$r13,-624(0xd90)
900000000800c660:	2a0049ac 	ld.bu	$r12,$r13,18(0x12)
900000000800c664:	02bffb1a 	addi.w	$r26,$r24,-2(0xffe)
900000000800c668:	001c335a 	mul.w	$r26,$r26,$r12
900000000800c66c:	288001ad 	ld.w	$r13,$r13,0
900000000800c670:	0010375a 	add.w	$r26,$r26,$r13
  for (int i = 0; i < fat.bpb.sec_per_clus; i++) {
900000000800c674:	40004d80 	beqz	$r12,76(0x4c) # 900000000800c6c0 <alloc_clus+0x148>
900000000800c678:	00150017 	move	$r23,$r0
900000000800c67c:	1c0040fb 	pcaddu12i	$r27,519(0x207)
900000000800c680:	02f5b37b 	addi.d	$r27,$r27,-660(0xd6c)
    b = bread(0, sec++);
900000000800c684:	00106ae5 	add.w	$r5,$r23,$r26
900000000800c688:	00150004 	move	$r4,$r0
900000000800c68c:	57f833ff 	bl	-2000(0xffff830) # 900000000800bebc <bread>
900000000800c690:	00150099 	move	$r25,$r4
    memset(b->data, 0, BSIZE);
900000000800c694:	02880006 	addi.w	$r6,$r0,512(0x200)
900000000800c698:	00150005 	move	$r5,$r0
900000000800c69c:	02c16084 	addi.d	$r4,$r4,88(0x58)
900000000800c6a0:	5748c7ff 	bl	-46908(0xfff48c4) # 9000000008000f64 <memset>
    bwrite(b);
900000000800c6a4:	00150324 	move	$r4,$r25
900000000800c6a8:	57f96fff 	bl	-1684(0xffff96c) # 900000000800c014 <bwrite>
    brelse(b);
900000000800c6ac:	00150324 	move	$r4,$r25
900000000800c6b0:	57f9b3ff 	bl	-1616(0xffff9b0) # 900000000800c060 <brelse>
  for (int i = 0; i < fat.bpb.sec_per_clus; i++) {
900000000800c6b4:	028006f7 	addi.w	$r23,$r23,1(0x1)
900000000800c6b8:	2a004b6c 	ld.bu	$r12,$r27,18(0x12)
900000000800c6bc:	63ffcaec 	blt	$r23,$r12,-56(0x3ffc8) # 900000000800c684 <alloc_clus+0x10c>
}
900000000800c6c0:	00150304 	move	$r4,$r24
900000000800c6c4:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800c6c8:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800c6cc:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800c6d0:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800c6d4:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800c6d8:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800c6dc:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800c6e0:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800c6e4:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800c6e8:	28c0007e 	ld.d	$r30,$r3,0
900000000800c6ec:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800c6f0:	4c000020 	jirl	$r0,$r1,0
  panic("no clusters");
900000000800c6f4:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800c6f8:	02c5b084 	addi.d	$r4,$r4,364(0x16c)
900000000800c6fc:	573b0bff 	bl	-50424(0xfff3b08) # 9000000008000204 <panic>

900000000800c700 <write_fat>:
  if (cluster > fat.data_clus_cnt + 1) {
900000000800c700:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c704:	02f3a18c 	addi.d	$r12,$r12,-792(0xce8)
900000000800c708:	2880218c 	ld.w	$r12,$r12,8(0x8)
900000000800c70c:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800c710:	6800a184 	bltu	$r12,$r4,160(0xa0) # 900000000800c7b0 <write_fat+0xb0>
static int write_fat(uint32 cluster, uint32 content) {
900000000800c714:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800c718:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800c71c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800c720:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800c724:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800c728:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800c72c:	29c0007a 	st.d	$r26,$r3,0
900000000800c730:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800c734:	001500ba 	move	$r26,$r5
  return fat.bpb.rsvd_sec_cnt + (cluster << 2) / fat.bpb.byts_per_sec +
900000000800c738:	00408897 	slli.w	$r23,$r4,0x2
900000000800c73c:	1c0040f8 	pcaddu12i	$r24,519(0x207)
900000000800c740:	02f2b318 	addi.d	$r24,$r24,-852(0xcac)
900000000800c744:	2a40430c 	ld.hu	$r12,$r24,16(0x10)
900000000800c748:	002132e5 	div.wu	$r5,$r23,$r12
900000000800c74c:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000800c754 <write_fat+0x54>
900000000800c750:	002a0007 	break	0x7
900000000800c754:	2a40530c 	ld.hu	$r12,$r24,20(0x14)
  struct buf *b = bread(0, fat_sec);
900000000800c758:	001030a5 	add.w	$r5,$r5,$r12
900000000800c75c:	00150004 	move	$r4,$r0
900000000800c760:	57f75fff 	bl	-2212(0xffff75c) # 900000000800bebc <bread>
900000000800c764:	00150099 	move	$r25,$r4
  return (cluster << 2) % fat.bpb.byts_per_sec;
900000000800c768:	2a40430d 	ld.hu	$r13,$r24,16(0x10)
900000000800c76c:	0021b6ec 	mod.wu	$r12,$r23,$r13
900000000800c770:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800c778 <write_fat+0x78>
900000000800c774:	002a0007 	break	0x7
  *(uint32 *)(b->data + off) = content;
900000000800c778:	0010b08c 	add.d	$r12,$r4,$r12
900000000800c77c:	2981619a 	st.w	$r26,$r12,88(0x58)
  bwrite(b);
900000000800c780:	57f897ff 	bl	-1900(0xffff894) # 900000000800c014 <bwrite>
  brelse(b);
900000000800c784:	00150324 	move	$r4,$r25
900000000800c788:	57f8dbff 	bl	-1832(0xffff8d8) # 900000000800c060 <brelse>
  return 0;
900000000800c78c:	00150004 	move	$r4,$r0
}
900000000800c790:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800c794:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800c798:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800c79c:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800c7a0:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800c7a4:	28c0007a 	ld.d	$r26,$r3,0
900000000800c7a8:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800c7ac:	4c000020 	jirl	$r0,$r1,0
    return -1;
900000000800c7b0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800c7b4:	4c000020 	jirl	$r0,$r1,0

900000000800c7b8 <reloc_clus>:
static int reloc_clus(struct dirent *entry, uint off, int alloc) {
900000000800c7b8:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800c7bc:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800c7c0:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800c7c4:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800c7c8:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800c7cc:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800c7d0:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800c7d4:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800c7d8:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800c7dc:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800c7e0:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000800c7e4:	00150097 	move	$r23,$r4
900000000800c7e8:	001500bc 	move	$r28,$r5
  int clus_num = off / fat.byts_per_clus;
900000000800c7ec:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c7f0:	02eff18c 	addi.d	$r12,$r12,-1028(0xbfc)
900000000800c7f4:	2880319d 	ld.w	$r29,$r12,12(0xc)
900000000800c7f8:	002174b9 	div.wu	$r25,$r5,$r29
900000000800c7fc:	5c000ba0 	bne	$r29,$r0,8(0x8) # 900000000800c804 <reloc_clus+0x4c>
900000000800c800:	002a0007 	break	0x7
  while (clus_num > entry->clus_cnt) {
900000000800c804:	2884408c 	ld.w	$r12,$r4,272(0x110)
900000000800c808:	6c006d99 	bgeu	$r12,$r25,108(0x6c) # 900000000800c874 <reloc_clus+0xbc>
900000000800c80c:	001500db 	move	$r27,$r6
    if (clus >= FAT32_EOC) {
900000000800c810:	141ffffa 	lu12i.w	$r26,65535(0xffff)
900000000800c814:	03bfdf5a 	ori	$r26,$r26,0xff7
900000000800c818:	50002c00 	b	44(0x2c) # 900000000800c844 <reloc_clus+0x8c>
        entry->cur_clus = entry->first_clus;
900000000800c81c:	288412ec 	ld.w	$r12,$r23,260(0x104)
900000000800c820:	298432ec 	st.w	$r12,$r23,268(0x10c)
        entry->clus_cnt = 0;
900000000800c824:	298442e0 	st.w	$r0,$r23,272(0x110)
        return -1;
900000000800c828:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800c82c:	50009c00 	b	156(0x9c) # 900000000800c8c8 <reloc_clus+0x110>
    entry->cur_clus = clus;
900000000800c830:	298432f8 	st.w	$r24,$r23,268(0x10c)
    entry->clus_cnt++;
900000000800c834:	288442ec 	ld.w	$r12,$r23,272(0x110)
900000000800c838:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800c83c:	298442ec 	st.w	$r12,$r23,272(0x110)
  while (clus_num > entry->clus_cnt) {
900000000800c840:	6c003599 	bgeu	$r12,$r25,52(0x34) # 900000000800c874 <reloc_clus+0xbc>
    int clus = read_fat(entry->cur_clus);
900000000800c844:	288432e4 	ld.w	$r4,$r23,268(0x10c)
900000000800c848:	57fc8bff 	bl	-888(0xffffc88) # 900000000800c4d0 <read_fat>
900000000800c84c:	00150098 	move	$r24,$r4
    if (clus >= FAT32_EOC) {
900000000800c850:	67ffe358 	bge	$r26,$r24,-32(0x3ffe0) # 900000000800c830 <reloc_clus+0x78>
      if (alloc) {
900000000800c854:	43ffcb7f 	beqz	$r27,-56(0x7fffc8) # 900000000800c81c <reloc_clus+0x64>
        clus = alloc_clus(entry->dev);
900000000800c858:	2a0452e4 	ld.bu	$r4,$r23,276(0x114)
900000000800c85c:	57fd1fff 	bl	-740(0xffffd1c) # 900000000800c578 <alloc_clus>
900000000800c860:	00150085 	move	$r5,$r4
900000000800c864:	00150098 	move	$r24,$r4
        write_fat(entry->cur_clus, clus);
900000000800c868:	288432e4 	ld.w	$r4,$r23,268(0x10c)
900000000800c86c:	57fe97ff 	bl	-364(0xffffe94) # 900000000800c700 <write_fat>
900000000800c870:	53ffc3ff 	b	-64(0xfffffc0) # 900000000800c830 <reloc_clus+0x78>
  if (clus_num < entry->clus_cnt) {
900000000800c874:	6c003f2c 	bgeu	$r25,$r12,60(0x3c) # 900000000800c8b0 <reloc_clus+0xf8>
    entry->cur_clus = entry->first_clus;
900000000800c878:	288412ec 	ld.w	$r12,$r23,260(0x104)
900000000800c87c:	298432ec 	st.w	$r12,$r23,268(0x10c)
    entry->clus_cnt = 0;
900000000800c880:	298442e0 	st.w	$r0,$r23,272(0x110)
    while (entry->clus_cnt < clus_num) {
900000000800c884:	68002f9d 	bltu	$r28,$r29,44(0x2c) # 900000000800c8b0 <reloc_clus+0xf8>
      if (entry->cur_clus >= FAT32_EOC) {
900000000800c888:	141ffff8 	lu12i.w	$r24,65535(0xffff)
900000000800c88c:	03bfdf18 	ori	$r24,$r24,0xff7
      entry->cur_clus = read_fat(entry->cur_clus);
900000000800c890:	288432e4 	ld.w	$r4,$r23,268(0x10c)
900000000800c894:	57fc3fff 	bl	-964(0xffffc3c) # 900000000800c4d0 <read_fat>
900000000800c898:	298432e4 	st.w	$r4,$r23,268(0x10c)
      if (entry->cur_clus >= FAT32_EOC) {
900000000800c89c:	68005b04 	bltu	$r24,$r4,88(0x58) # 900000000800c8f4 <reloc_clus+0x13c>
      entry->clus_cnt++;
900000000800c8a0:	288442ec 	ld.w	$r12,$r23,272(0x110)
900000000800c8a4:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800c8a8:	298442ec 	st.w	$r12,$r23,272(0x110)
    while (entry->clus_cnt < clus_num) {
900000000800c8ac:	6bffe599 	bltu	$r12,$r25,-28(0x3ffe4) # 900000000800c890 <reloc_clus+0xd8>
  return off % fat.byts_per_clus;
900000000800c8b0:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c8b4:	02ece18c 	addi.d	$r12,$r12,-1224(0xb38)
900000000800c8b8:	2880318c 	ld.w	$r12,$r12,12(0xc)
900000000800c8bc:	0021b384 	mod.wu	$r4,$r28,$r12
900000000800c8c0:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000800c8c8 <reloc_clus+0x110>
900000000800c8c4:	002a0007 	break	0x7
}
900000000800c8c8:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800c8cc:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800c8d0:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800c8d4:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800c8d8:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800c8dc:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800c8e0:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800c8e4:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800c8e8:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800c8ec:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800c8f0:	4c000020 	jirl	$r0,$r1,0
        panic("reloc_clus");
900000000800c8f4:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800c8f8:	02fdf084 	addi.d	$r4,$r4,-132(0xf7c)
900000000800c8fc:	57390bff 	bl	-50936(0xfff3908) # 9000000008000204 <panic>

900000000800c900 <rw_clus>:
                    uint n) {
900000000800c900:	02fe0063 	addi.d	$r3,$r3,-128(0xf80)
900000000800c904:	29c1e061 	st.d	$r1,$r3,120(0x78)
900000000800c908:	29c1c076 	st.d	$r22,$r3,112(0x70)
900000000800c90c:	29c1a077 	st.d	$r23,$r3,104(0x68)
900000000800c910:	29c18078 	st.d	$r24,$r3,96(0x60)
900000000800c914:	29c16079 	st.d	$r25,$r3,88(0x58)
900000000800c918:	29c1407a 	st.d	$r26,$r3,80(0x50)
900000000800c91c:	29c1207b 	st.d	$r27,$r3,72(0x48)
900000000800c920:	29c1007c 	st.d	$r28,$r3,64(0x40)
900000000800c924:	29c0e07d 	st.d	$r29,$r3,56(0x38)
900000000800c928:	29c0c07e 	st.d	$r30,$r3,48(0x30)
900000000800c92c:	29c0a07f 	st.d	$r31,$r3,40(0x28)
900000000800c930:	02c20076 	addi.d	$r22,$r3,128(0x80)
900000000800c934:	29fe22c5 	st.d	$r5,$r22,-120(0xf88)
900000000800c938:	29fe42c6 	st.d	$r6,$r22,-112(0xf90)
  if (off + n > fat.byts_per_clus)
900000000800c93c:	0010250d 	add.w	$r13,$r8,$r9
900000000800c940:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c944:	02eaa18c 	addi.d	$r12,$r12,-1368(0xaa8)
900000000800c948:	2880318c 	ld.w	$r12,$r12,12(0xc)
900000000800c94c:	6800618d 	bltu	$r12,$r13,96(0x60) # 900000000800c9ac <rw_clus+0xac>
900000000800c950:	001500fc 	move	$r28,$r7
900000000800c954:	0015013d 	move	$r29,$r9
  uint sec = first_sec_of_clus(cluster) + off / fat.bpb.byts_per_sec;
900000000800c958:	1c0040ec 	pcaddu12i	$r12,519(0x207)
900000000800c95c:	02ea418c 	addi.d	$r12,$r12,-1392(0xa90)
900000000800c960:	2a40418d 	ld.hu	$r13,$r12,16(0x10)
  return ((cluster - 2) * fat.bpb.sec_per_clus) + fat.first_data_sec;
900000000800c964:	02bff899 	addi.w	$r25,$r4,-2(0xffe)
900000000800c968:	2a004984 	ld.bu	$r4,$r12,18(0x12)
900000000800c96c:	001c1339 	mul.w	$r25,$r25,$r4
900000000800c970:	28800184 	ld.w	$r4,$r12,0
900000000800c974:	00101339 	add.w	$r25,$r25,$r4
  uint sec = first_sec_of_clus(cluster) + off / fat.bpb.byts_per_sec;
900000000800c978:	0021350c 	div.wu	$r12,$r8,$r13
900000000800c97c:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800c984 <rw_clus+0x84>
900000000800c980:	002a0007 	break	0x7
900000000800c984:	00103339 	add.w	$r25,$r25,$r12
  off = off % fat.bpb.byts_per_sec;
900000000800c988:	0021b51b 	mod.wu	$r27,$r8,$r13
900000000800c98c:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800c994 <rw_clus+0x94>
900000000800c990:	002a0007 	break	0x7
  for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
900000000800c994:	00150138 	move	$r24,$r9
900000000800c998:	4000d520 	beqz	$r9,212(0xd4) # 900000000800ca6c <rw_clus+0x16c>
900000000800c99c:	00150018 	move	$r24,$r0
    m = BSIZE - off % BSIZE;
900000000800c9a0:	0288001e 	addi.w	$r30,$r0,512(0x200)
    if (bad == -1) {
900000000800c9a4:	02bffc1f 	addi.w	$r31,$r0,-1(0xfff)
900000000800c9a8:	50006800 	b	104(0x68) # 900000000800ca10 <rw_clus+0x110>
    panic("offset out of range");
900000000800c9ac:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800c9b0:	02fb5084 	addi.d	$r4,$r4,-300(0xed4)
900000000800c9b4:	573853ff 	bl	-51120(0xfff3850) # 9000000008000204 <panic>
        bwrite(bp);
900000000800c9b8:	00150344 	move	$r4,$r26
900000000800c9bc:	57f65bff 	bl	-2472(0xffff658) # 900000000800c014 <bwrite>
    brelse(bp);
900000000800c9c0:	00150344 	move	$r4,$r26
900000000800c9c4:	57f69fff 	bl	-2404(0xffff69c) # 900000000800c060 <brelse>
    if (bad == -1) {
900000000800c9c8:	50003000 	b	48(0x30) # 900000000800c9f8 <rw_clus+0xf8>
      bad = either_copyout(user, data, bp->data + (off % BSIZE), m);
900000000800c9cc:	02c16086 	addi.d	$r6,$r4,88(0x58)
900000000800c9d0:	00df02e7 	bstrpick.d	$r7,$r23,0x1f,0x0
900000000800c9d4:	0010b8c6 	add.d	$r6,$r6,$r14
900000000800c9d8:	00150385 	move	$r5,$r28
900000000800c9dc:	28fe42c4 	ld.d	$r4,$r22,-112(0xf90)
900000000800c9e0:	5758cbff 	bl	-42808(0xfff58c8) # 90000000080022a8 <either_copyout>
900000000800c9e4:	29fe62c4 	st.d	$r4,$r22,-104(0xf98)
    brelse(bp);
900000000800c9e8:	00150344 	move	$r4,$r26
900000000800c9ec:	57f677ff 	bl	-2444(0xffff674) # 900000000800c060 <brelse>
    if (bad == -1) {
900000000800c9f0:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000800c9f4:	5800799f 	beq	$r12,$r31,120(0x78) # 900000000800ca6c <rw_clus+0x16c>
  for (tot = 0; tot < n; tot += m, off += m, data += m, sec++) {
900000000800c9f8:	001062f8 	add.w	$r24,$r23,$r24
900000000800c9fc:	00106efb 	add.w	$r27,$r23,$r27
900000000800ca00:	00df02f7 	bstrpick.d	$r23,$r23,0x1f,0x0
900000000800ca04:	0010df9c 	add.d	$r28,$r28,$r23
900000000800ca08:	02800739 	addi.w	$r25,$r25,1(0x1)
900000000800ca0c:	6c00631d 	bgeu	$r24,$r29,96(0x60) # 900000000800ca6c <rw_clus+0x16c>
    bp = bread(0, sec);
900000000800ca10:	00150325 	move	$r5,$r25
900000000800ca14:	00150004 	move	$r4,$r0
900000000800ca18:	57f4a7ff 	bl	-2908(0xffff4a4) # 900000000800bebc <bread>
900000000800ca1c:	0015009a 	move	$r26,$r4
    m = BSIZE - off % BSIZE;
900000000800ca20:	0347ff6e 	andi	$r14,$r27,0x1ff
900000000800ca24:	00113bcf 	sub.w	$r15,$r30,$r14
    if (n - tot < m) {
900000000800ca28:	001163ac 	sub.w	$r12,$r29,$r24
900000000800ca2c:	0015018d 	move	$r13,$r12
900000000800ca30:	0012b5ed 	sltu	$r13,$r15,$r13
900000000800ca34:	0013b597 	masknez	$r23,$r12,$r13
900000000800ca38:	001335ed 	maskeqz	$r13,$r15,$r13
900000000800ca3c:	001536f7 	or	$r23,$r23,$r13
    if (write) {
900000000800ca40:	28fe22cc 	ld.d	$r12,$r22,-120(0xf88)
900000000800ca44:	43ff899f 	beqz	$r12,-120(0x7fff88) # 900000000800c9cc <rw_clus+0xcc>
      if ((bad = either_copyin(bp->data + (off % BSIZE), user, data, m)) !=
900000000800ca48:	02c16084 	addi.d	$r4,$r4,88(0x58)
900000000800ca4c:	00df02e7 	bstrpick.d	$r7,$r23,0x1f,0x0
900000000800ca50:	00150386 	move	$r6,$r28
900000000800ca54:	28fe42c5 	ld.d	$r5,$r22,-112(0xf90)
900000000800ca58:	0010b884 	add.d	$r4,$r4,$r14
900000000800ca5c:	5758d3ff 	bl	-42800(0xfff58d0) # 900000000800232c <either_copyin>
900000000800ca60:	5fff589f 	bne	$r4,$r31,-168(0x3ff58) # 900000000800c9b8 <rw_clus+0xb8>
    brelse(bp);
900000000800ca64:	00150344 	move	$r4,$r26
900000000800ca68:	57f5fbff 	bl	-2568(0xffff5f8) # 900000000800c060 <brelse>
}
900000000800ca6c:	00150304 	move	$r4,$r24
900000000800ca70:	28c1e061 	ld.d	$r1,$r3,120(0x78)
900000000800ca74:	28c1c076 	ld.d	$r22,$r3,112(0x70)
900000000800ca78:	28c1a077 	ld.d	$r23,$r3,104(0x68)
900000000800ca7c:	28c18078 	ld.d	$r24,$r3,96(0x60)
900000000800ca80:	28c16079 	ld.d	$r25,$r3,88(0x58)
900000000800ca84:	28c1407a 	ld.d	$r26,$r3,80(0x50)
900000000800ca88:	28c1207b 	ld.d	$r27,$r3,72(0x48)
900000000800ca8c:	28c1007c 	ld.d	$r28,$r3,64(0x40)
900000000800ca90:	28c0e07d 	ld.d	$r29,$r3,56(0x38)
900000000800ca94:	28c0c07e 	ld.d	$r30,$r3,48(0x30)
900000000800ca98:	28c0a07f 	ld.d	$r31,$r3,40(0x28)
900000000800ca9c:	02c20063 	addi.d	$r3,$r3,128(0x80)
900000000800caa0:	4c000020 	jirl	$r0,$r1,0

900000000800caa4 <eget>:
static struct dirent *eget(struct dirent *parent, char *name) {
900000000800caa4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800caa8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800caac:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800cab0:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800cab4:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800cab8:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800cabc:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800cac0:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800cac4:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800cac8:	0015009a 	move	$r26,$r4
900000000800cacc:	001500bb 	move	$r27,$r5
  acquire(&ecache.lock);
900000000800cad0:	1c004044 	pcaddu12i	$r4,514(0x202)
900000000800cad4:	02cac084 	addi.d	$r4,$r4,688(0x2b0)
900000000800cad8:	5743dbff 	bl	-48168(0xfff43d8) # 9000000008000eb0 <acquire>
  if (name) {
900000000800cadc:	40007f60 	beqz	$r27,124(0x7c) # 900000000800cb58 <eget+0xb4>
    for (ep = root.next; ep != &root; ep = ep->next) { // LRU algo
900000000800cae0:	1c00404c 	pcaddu12i	$r12,514(0x202)
900000000800cae4:	02c4e18c 	addi.d	$r12,$r12,312(0x138)
900000000800cae8:	28c4a197 	ld.d	$r23,$r12,296(0x128)
900000000800caec:	58006eec 	beq	$r23,$r12,108(0x6c) # 900000000800cb58 <eget+0xb4>
      if (ep->valid == 1 && ep->parent == parent &&
900000000800caf0:	02800418 	addi.w	$r24,$r0,1(0x1)
    for (ep = root.next; ep != &root; ep = ep->next) { // LRU algo
900000000800caf4:	00150199 	move	$r25,$r12
900000000800caf8:	50000c00 	b	12(0xc) # 900000000800cb04 <eget+0x60>
900000000800cafc:	28c4a2f7 	ld.d	$r23,$r23,296(0x128)
900000000800cb00:	58005af9 	beq	$r23,$r25,88(0x58) # 900000000800cb58 <eget+0xb4>
      if (ep->valid == 1 && ep->parent == parent &&
900000000800cb04:	28445aec 	ld.h	$r12,$r23,278(0x116)
900000000800cb08:	5ffff598 	bne	$r12,$r24,-12(0x3fff4) # 900000000800cafc <eget+0x58>
900000000800cb0c:	28c482ec 	ld.d	$r12,$r23,288(0x120)
900000000800cb10:	5fffed9a 	bne	$r12,$r26,-20(0x3ffec) # 900000000800cafc <eget+0x58>
          strncmp(ep->filename, name, FAT32_MAX_FILENAME) == 0) {
900000000800cb14:	0283fc06 	addi.w	$r6,$r0,255(0xff)
900000000800cb18:	00150365 	move	$r5,$r27
900000000800cb1c:	001502e4 	move	$r4,$r23
900000000800cb20:	574597ff 	bl	-47724(0xfff4594) # 90000000080010b4 <strncmp>
      if (ep->valid == 1 && ep->parent == parent &&
900000000800cb24:	47ffd89f 	bnez	$r4,-40(0x7fffd8) # 900000000800cafc <eget+0x58>
        if (ep->ref++ == 0) {
900000000800cb28:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800cb2c:	0280058d 	addi.w	$r13,$r12,1(0x1)
900000000800cb30:	298462ed 	st.w	$r13,$r23,280(0x118)
900000000800cb34:	44001580 	bnez	$r12,20(0x14) # 900000000800cb48 <eget+0xa4>
          ep->parent->ref++;
900000000800cb38:	28c482ed 	ld.d	$r13,$r23,288(0x120)
900000000800cb3c:	288461ac 	ld.w	$r12,$r13,280(0x118)
900000000800cb40:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800cb44:	298461ac 	st.w	$r12,$r13,280(0x118)
        release(&ecache.lock);
900000000800cb48:	1c004044 	pcaddu12i	$r4,514(0x202)
900000000800cb4c:	02c8e084 	addi.d	$r4,$r4,568(0x238)
900000000800cb50:	5743c3ff 	bl	-48192(0xfff43c0) # 9000000008000f10 <release>
        return ep;
900000000800cb54:	50005c00 	b	92(0x5c) # 900000000800cbb0 <eget+0x10c>
  for (ep = root.prev; ep != &root; ep = ep->prev) { // LRU algo
900000000800cb58:	1c00404c 	pcaddu12i	$r12,514(0x202)
900000000800cb5c:	02c3018c 	addi.d	$r12,$r12,192(0xc0)
900000000800cb60:	28c4c197 	ld.d	$r23,$r12,304(0x130)
900000000800cb64:	580076ec 	beq	$r23,$r12,116(0x74) # 900000000800cbd8 <eget+0x134>
    if (ep->ref == 0) {
900000000800cb68:	288462ec 	ld.w	$r12,$r23,280(0x118)
  for (ep = root.prev; ep != &root; ep = ep->prev) { // LRU algo
900000000800cb6c:	1c00404d 	pcaddu12i	$r13,514(0x202)
900000000800cb70:	02c2b1ad 	addi.d	$r13,$r13,172(0xac)
    if (ep->ref == 0) {
900000000800cb74:	40001580 	beqz	$r12,20(0x14) # 900000000800cb88 <eget+0xe4>
  for (ep = root.prev; ep != &root; ep = ep->prev) { // LRU algo
900000000800cb78:	28c4c2f7 	ld.d	$r23,$r23,304(0x130)
900000000800cb7c:	58005eed 	beq	$r23,$r13,92(0x5c) # 900000000800cbd8 <eget+0x134>
    if (ep->ref == 0) {
900000000800cb80:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800cb84:	47fff59f 	bnez	$r12,-12(0x7ffff4) # 900000000800cb78 <eget+0xd4>
      ep->ref = 1;
900000000800cb88:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800cb8c:	298462ec 	st.w	$r12,$r23,280(0x118)
      ep->dev = parent->dev;
900000000800cb90:	2a04534c 	ld.bu	$r12,$r26,276(0x114)
900000000800cb94:	290452ec 	st.b	$r12,$r23,276(0x114)
      ep->off = 0;
900000000800cb98:	298472e0 	st.w	$r0,$r23,284(0x11c)
      ep->valid = 0;
900000000800cb9c:	29445ae0 	st.h	$r0,$r23,278(0x116)
      ep->dirty = 0;
900000000800cba0:	290456e0 	st.b	$r0,$r23,277(0x115)
      release(&ecache.lock);
900000000800cba4:	1c004044 	pcaddu12i	$r4,514(0x202)
900000000800cba8:	02c77084 	addi.d	$r4,$r4,476(0x1dc)
900000000800cbac:	574367ff 	bl	-48284(0xfff4364) # 9000000008000f10 <release>
}
900000000800cbb0:	001502e4 	move	$r4,$r23
900000000800cbb4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800cbb8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800cbbc:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800cbc0:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800cbc4:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800cbc8:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800cbcc:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800cbd0:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800cbd4:	4c000020 	jirl	$r0,$r1,0
  panic("eget: insufficient ecache");
900000000800cbd8:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800cbdc:	02f30084 	addi.d	$r4,$r4,-832(0xcc0)
900000000800cbe0:	573627ff 	bl	-51676(0xfff3624) # 9000000008000204 <panic>

900000000800cbe4 <read_entry_name>:
static void read_entry_name(char *buffer, union dentry *d) {
900000000800cbe4:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800cbe8:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800cbec:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800cbf0:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800cbf4:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800cbf8:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800cbfc:	00150098 	move	$r24,$r4
900000000800cc00:	001500b7 	move	$r23,$r5
  if (d->lne.attr == ATTR_LONG_NAME) { // long entry branch
900000000800cc04:	2a002cad 	ld.bu	$r13,$r5,11(0xb)
900000000800cc08:	02803c0c 	addi.w	$r12,$r0,15(0xf)
900000000800cc0c:	5800d9ac 	beq	$r13,$r12,216(0xd8) # 900000000800cce4 <read_entry_name+0x100>
    memset(buffer, 0, CHAR_SHORT_NAME + 2); // plus '.' and '\0'
900000000800cc10:	02803406 	addi.w	$r6,$r0,13(0xd)
900000000800cc14:	00150005 	move	$r5,$r0
900000000800cc18:	57434fff 	bl	-48308(0xfff434c) # 9000000008000f64 <memset>
    for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
900000000800cc1c:	280002ee 	ld.b	$r14,$r23,0
900000000800cc20:	001501cf 	move	$r15,$r14
900000000800cc24:	0280800c 	addi.w	$r12,$r0,32(0x20)
900000000800cc28:	0015000d 	move	$r13,$r0
900000000800cc2c:	580035ec 	beq	$r15,$r12,52(0x34) # 900000000800cc60 <read_entry_name+0x7c>
900000000800cc30:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800cc34:	02808010 	addi.w	$r16,$r0,32(0x20)
900000000800cc38:	02802411 	addi.w	$r17,$r0,9(0x9)
      buffer[i] = d->sne.name[i];
900000000800cc3c:	0010b30d 	add.d	$r13,$r24,$r12
900000000800cc40:	293ffdae 	st.b	$r14,$r13,-1(0xfff)
    for (i = 0; d->sne.name[i] != ' ' && i < 8; i++) {
900000000800cc44:	0040818d 	slli.w	$r13,$r12,0x0
900000000800cc48:	0010b2ee 	add.d	$r14,$r23,$r12
900000000800cc4c:	280001ce 	ld.b	$r14,$r14,0
900000000800cc50:	001501cf 	move	$r15,$r14
900000000800cc54:	58000df0 	beq	$r15,$r16,12(0xc) # 900000000800cc60 <read_entry_name+0x7c>
900000000800cc58:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800cc5c:	5fffe191 	bne	$r12,$r17,-32(0x3ffe0) # 900000000800cc3c <read_entry_name+0x58>
    if (d->sne.name[8] != ' ') {
900000000800cc60:	280022ee 	ld.b	$r14,$r23,8(0x8)
900000000800cc64:	0280800c 	addi.w	$r12,$r0,32(0x20)
900000000800cc68:	580065cc 	beq	$r14,$r12,100(0x64) # 900000000800cccc <read_entry_name+0xe8>
      buffer[i++] = '.';
900000000800cc6c:	028005ae 	addi.w	$r14,$r13,1(0x1)
900000000800cc70:	0010b70c 	add.d	$r12,$r24,$r13
900000000800cc74:	0280b80f 	addi.w	$r15,$r0,46(0x2e)
900000000800cc78:	2900018f 	st.b	$r15,$r12,0
      if (d->sne.name[j] == ' ') {
900000000800cc7c:	280022ec 	ld.b	$r12,$r23,8(0x8)
900000000800cc80:	00150190 	move	$r16,$r12
900000000800cc84:	0280800f 	addi.w	$r15,$r0,32(0x20)
900000000800cc88:	5800460f 	beq	$r16,$r15,68(0x44) # 900000000800cccc <read_entry_name+0xe8>
      buffer[i] = d->sne.name[j];
900000000800cc8c:	0010bb0e 	add.d	$r14,$r24,$r14
900000000800cc90:	290001cc 	st.b	$r12,$r14,0
    for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
900000000800cc94:	028009ac 	addi.w	$r12,$r13,2(0x2)
      if (d->sne.name[j] == ' ') {
900000000800cc98:	280026ee 	ld.b	$r14,$r23,9(0x9)
900000000800cc9c:	001501d0 	move	$r16,$r14
900000000800cca0:	0280800f 	addi.w	$r15,$r0,32(0x20)
900000000800cca4:	58002a0f 	beq	$r16,$r15,40(0x28) # 900000000800cccc <read_entry_name+0xe8>
      buffer[i] = d->sne.name[j];
900000000800cca8:	0010b30c 	add.d	$r12,$r24,$r12
900000000800ccac:	2900018e 	st.b	$r14,$r12,0
    for (int j = 8; j < CHAR_SHORT_NAME; j++, i++) {
900000000800ccb0:	02800dad 	addi.w	$r13,$r13,3(0x3)
      if (d->sne.name[j] == ' ') {
900000000800ccb4:	28002aec 	ld.b	$r12,$r23,10(0xa)
900000000800ccb8:	0015018f 	move	$r15,$r12
900000000800ccbc:	0280800e 	addi.w	$r14,$r0,32(0x20)
900000000800ccc0:	58000dee 	beq	$r15,$r14,12(0xc) # 900000000800cccc <read_entry_name+0xe8>
      buffer[i] = d->sne.name[j];
900000000800ccc4:	0010b70d 	add.d	$r13,$r24,$r13
900000000800ccc8:	290001ac 	st.b	$r12,$r13,0
}
900000000800cccc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800ccd0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800ccd4:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800ccd8:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800ccdc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800cce0:	4c000020 	jirl	$r0,$r1,0
    memmove(temp, d->lne.name1, sizeof(temp));
900000000800cce4:	02802806 	addi.w	$r6,$r0,10(0xa)
900000000800cce8:	02c004a5 	addi.d	$r5,$r5,1(0x1)
900000000800ccec:	02ff42c4 	addi.d	$r4,$r22,-48(0xfd0)
900000000800ccf0:	57431fff 	bl	-48356(0xfff431c) # 900000000800100c <memmove>
    snstr(buffer, temp, NELEM(d->lne.name1));
900000000800ccf4:	02801406 	addi.w	$r6,$r0,5(0x5)
900000000800ccf8:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
900000000800ccfc:	00150304 	move	$r4,$r24
900000000800cd00:	574587ff 	bl	-47740(0xfff4584) # 9000000008001284 <snstr>
    snstr(buffer, d->lne.name2, NELEM(d->lne.name2));
900000000800cd04:	02801806 	addi.w	$r6,$r0,6(0x6)
900000000800cd08:	02c03ae5 	addi.d	$r5,$r23,14(0xe)
900000000800cd0c:	02c01704 	addi.d	$r4,$r24,5(0x5)
900000000800cd10:	574577ff 	bl	-47756(0xfff4574) # 9000000008001284 <snstr>
    snstr(buffer, d->lne.name3, NELEM(d->lne.name3));
900000000800cd14:	02800806 	addi.w	$r6,$r0,2(0x2)
900000000800cd18:	02c072e5 	addi.d	$r5,$r23,28(0x1c)
900000000800cd1c:	02c02f04 	addi.d	$r4,$r24,11(0xb)
900000000800cd20:	574567ff 	bl	-47772(0xfff4564) # 9000000008001284 <snstr>
900000000800cd24:	53ffabff 	b	-88(0xfffffa8) # 900000000800cccc <read_entry_name+0xe8>

900000000800cd28 <fat32_init>:
int fat32_init() {
900000000800cd28:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800cd2c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800cd30:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800cd34:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800cd38:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800cd3c:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800cd40:	29c0007a 	st.d	$r26,$r3,0
900000000800cd44:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  printf("[fat32_init] enter!\n");
900000000800cd48:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800cd4c:	02edc084 	addi.d	$r4,$r4,-1168(0xb70)
900000000800cd50:	573527ff 	bl	-51932(0xfff3524) # 9000000008000274 <printf>
  b = bread(0, 0);
900000000800cd54:	00150005 	move	$r5,$r0
900000000800cd58:	00150004 	move	$r4,$r0
900000000800cd5c:	57f163ff 	bl	-3744(0xffff160) # 900000000800bebc <bread>
900000000800cd60:	00150098 	move	$r24,$r4
  if (strncmp((char const *)(b->data + 82), "FAT32", 5))
900000000800cd64:	02801406 	addi.w	$r6,$r0,5(0x5)
900000000800cd68:	1c0001c5 	pcaddu12i	$r5,14(0xe)
900000000800cd6c:	02eda0a5 	addi.d	$r5,$r5,-1176(0xb68)
900000000800cd70:	02c2a884 	addi.d	$r4,$r4,170(0xaa)
900000000800cd74:	574343ff 	bl	-48320(0xfff4340) # 90000000080010b4 <strncmp>
900000000800cd78:	44019c80 	bnez	$r4,412(0x19c) # 900000000800cf14 <fat32_init+0x1ec>
  memmove(&fat.bpb.byts_per_sec, b->data + 11,
900000000800cd7c:	02800806 	addi.w	$r6,$r0,2(0x2)
900000000800cd80:	02c18f05 	addi.d	$r5,$r24,99(0x63)
900000000800cd84:	1c0040d7 	pcaddu12i	$r23,518(0x206)
900000000800cd88:	02d992f7 	addi.d	$r23,$r23,1636(0x664)
900000000800cd8c:	02c042e4 	addi.d	$r4,$r23,16(0x10)
900000000800cd90:	57427fff 	bl	-48516(0xfff427c) # 900000000800100c <memmove>
  fat.bpb.sec_per_clus = *(b->data + 13);
900000000800cd94:	2a01970f 	ld.bu	$r15,$r24,101(0x65)
900000000800cd98:	29004aef 	st.b	$r15,$r23,18(0x12)
  fat.bpb.rsvd_sec_cnt = *(uint16 *)(b->data + 14);
900000000800cd9c:	2a419b0e 	ld.hu	$r14,$r24,102(0x66)
  fat.bpb.fat_cnt = *(b->data + 16);
900000000800cda0:	2a01a30d 	ld.bu	$r13,$r24,104(0x68)
900000000800cda4:	29005aed 	st.b	$r13,$r23,22(0x16)
  fat.bpb.hidd_sec = *(uint32 *)(b->data + 28);
900000000800cda8:	2881d30c 	ld.w	$r12,$r24,116(0x74)
900000000800cdac:	298062ec 	st.w	$r12,$r23,24(0x18)
  fat.bpb.rsvd_sec_cnt += fat.bpb.hidd_sec;
900000000800cdb0:	0010398c 	add.w	$r12,$r12,$r14
900000000800cdb4:	006f818c 	bstrpick.w	$r12,$r12,0xf,0x0
900000000800cdb8:	294052ec 	st.h	$r12,$r23,20(0x14)
  fat.bpb.tot_sec = *(uint32 *)(b->data + 32);
900000000800cdbc:	2881e30e 	ld.w	$r14,$r24,120(0x78)
900000000800cdc0:	298072ee 	st.w	$r14,$r23,28(0x1c)
  fat.bpb.fat_sz = *(uint32 *)(b->data + 36);
900000000800cdc4:	2881f310 	ld.w	$r16,$r24,124(0x7c)
900000000800cdc8:	298082f0 	st.w	$r16,$r23,32(0x20)
  fat.bpb.root_clus = *(uint32 *)(b->data + 44);
900000000800cdcc:	28821311 	ld.w	$r17,$r24,132(0x84)
900000000800cdd0:	298092f1 	st.w	$r17,$r23,36(0x24)
  fat.first_data_sec = fat.bpb.rsvd_sec_cnt + fat.bpb.fat_cnt * fat.bpb.fat_sz;
900000000800cdd4:	001c41ad 	mul.w	$r13,$r13,$r16
900000000800cdd8:	001031ac 	add.w	$r12,$r13,$r12
900000000800cddc:	298002ec 	st.w	$r12,$r23,0
  fat.data_sec_cnt = fat.bpb.tot_sec - fat.first_data_sec;
900000000800cde0:	001131cc 	sub.w	$r12,$r14,$r12
900000000800cde4:	298012ec 	st.w	$r12,$r23,4(0x4)
  fat.data_clus_cnt = fat.data_sec_cnt / fat.bpb.sec_per_clus;
900000000800cde8:	001501ee 	move	$r14,$r15
900000000800cdec:	0021398d 	div.wu	$r13,$r12,$r14
900000000800cdf0:	5c0009c0 	bne	$r14,$r0,8(0x8) # 900000000800cdf8 <fat32_init+0xd0>
900000000800cdf4:	002a0007 	break	0x7
900000000800cdf8:	298022ed 	st.w	$r13,$r23,8(0x8)
  fat.byts_per_clus = fat.bpb.sec_per_clus * fat.bpb.byts_per_sec;
900000000800cdfc:	2a4042ec 	ld.hu	$r12,$r23,16(0x10)
900000000800ce00:	001c3d8c 	mul.w	$r12,$r12,$r15
900000000800ce04:	298032ec 	st.w	$r12,$r23,12(0xc)
  brelse(b);
900000000800ce08:	00150304 	move	$r4,$r24
900000000800ce0c:	57f257ff 	bl	-3500(0xffff254) # 900000000800c060 <brelse>
  if (BSIZE != fat.bpb.byts_per_sec)
900000000800ce10:	2a4042ed 	ld.hu	$r13,$r23,16(0x10)
900000000800ce14:	0288000c 	addi.w	$r12,$r0,512(0x200)
900000000800ce18:	5c0109ac 	bne	$r13,$r12,264(0x108) # 900000000800cf20 <fat32_init+0x1f8>
  initlock(&ecache.lock, "ecache");
900000000800ce1c:	1c0001c5 	pcaddu12i	$r5,14(0xe)
900000000800ce20:	02ebb0a5 	addi.d	$r5,$r5,-1300(0xaec)
900000000800ce24:	1c004044 	pcaddu12i	$r4,514(0x202)
900000000800ce28:	02fd7084 	addi.d	$r4,$r4,-164(0xf5c)
900000000800ce2c:	57401bff 	bl	-49128(0xfff4018) # 9000000008000e44 <initlock>
  memset(&root, 0, sizeof(root));
900000000800ce30:	0285a006 	addi.w	$r6,$r0,360(0x168)
900000000800ce34:	00150005 	move	$r5,$r0
900000000800ce38:	1c004044 	pcaddu12i	$r4,514(0x202)
900000000800ce3c:	02f78084 	addi.d	$r4,$r4,-544(0xde0)
900000000800ce40:	574127ff 	bl	-48860(0xfff4124) # 9000000008000f64 <memset>
  initsleeplock(&root.lock, "entry");
900000000800ce44:	1c0001c5 	pcaddu12i	$r5,14(0xe)
900000000800ce48:	02eb30a5 	addi.d	$r5,$r5,-1332(0xacc)
900000000800ce4c:	1c004057 	pcaddu12i	$r23,514(0x202)
900000000800ce50:	02f732f7 	addi.d	$r23,$r23,-564(0xdcc)
900000000800ce54:	02c4e2e4 	addi.d	$r4,$r23,312(0x138)
900000000800ce58:	57f377ff 	bl	-3212(0xffff374) # 900000000800c1cc <initsleeplock>
  root.attribute = (ATTR_DIRECTORY | ATTR_SYSTEM);
900000000800ce5c:	0280500c 	addi.w	$r12,$r0,20(0x14)
900000000800ce60:	290402ec 	st.b	$r12,$r23,256(0x100)
  root.first_clus = root.cur_clus = fat.bpb.root_clus;
900000000800ce64:	1c0040cc 	pcaddu12i	$r12,518(0x206)
900000000800ce68:	02d6118c 	addi.d	$r12,$r12,1412(0x584)
900000000800ce6c:	2880918c 	ld.w	$r12,$r12,36(0x24)
900000000800ce70:	298432ec 	st.w	$r12,$r23,268(0x10c)
900000000800ce74:	298412ec 	st.w	$r12,$r23,260(0x104)
  root.valid = 1;
900000000800ce78:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800ce7c:	29445aec 	st.h	$r12,$r23,278(0x116)
  root.prev = &root;
900000000800ce80:	29c4c2f7 	st.d	$r23,$r23,304(0x130)
  root.next = &root;
900000000800ce84:	29c4a2f7 	st.d	$r23,$r23,296(0x128)
  for (struct dirent *de = ecache.entries;
900000000800ce88:	1c004057 	pcaddu12i	$r23,514(0x202)
900000000800ce8c:	02fbe2f7 	addi.d	$r23,$r23,-264(0xef8)
900000000800ce90:	02c062f7 	addi.d	$r23,$r23,24(0x18)
    de->next = root.next;
900000000800ce94:	1c004058 	pcaddu12i	$r24,514(0x202)
900000000800ce98:	02f61318 	addi.d	$r24,$r24,-636(0xd84)
    initsleeplock(&de->lock, "entry");
900000000800ce9c:	1c0001da 	pcaddu12i	$r26,14(0xe)
900000000800cea0:	02e9d35a 	addi.d	$r26,$r26,-1420(0xa74)
  for (struct dirent *de = ecache.entries;
900000000800cea4:	1c0001d9 	pcaddu12i	$r25,14(0xe)
900000000800cea8:	02ec9339 	addi.d	$r25,$r25,-1244(0xb24)
    de->dev = 0;
900000000800ceac:	290452e0 	st.b	$r0,$r23,276(0x114)
    de->valid = 0;
900000000800ceb0:	29445ae0 	st.h	$r0,$r23,278(0x116)
    de->ref = 0;
900000000800ceb4:	298462e0 	st.w	$r0,$r23,280(0x118)
    de->dirty = 0;
900000000800ceb8:	290456e0 	st.b	$r0,$r23,277(0x115)
    de->parent = 0;
900000000800cebc:	29c482e0 	st.d	$r0,$r23,288(0x120)
    de->next = root.next;
900000000800cec0:	28c4a30c 	ld.d	$r12,$r24,296(0x128)
900000000800cec4:	29c4a2ec 	st.d	$r12,$r23,296(0x128)
    de->prev = &root;
900000000800cec8:	29c4c2f8 	st.d	$r24,$r23,304(0x130)
    initsleeplock(&de->lock, "entry");
900000000800cecc:	00150345 	move	$r5,$r26
900000000800ced0:	02c4e2e4 	addi.d	$r4,$r23,312(0x138)
900000000800ced4:	57f2fbff 	bl	-3336(0xffff2f8) # 900000000800c1cc <initsleeplock>
    root.next->prev = de;
900000000800ced8:	28c4a30c 	ld.d	$r12,$r24,296(0x128)
900000000800cedc:	29c4c197 	st.d	$r23,$r12,304(0x130)
    root.next = de;
900000000800cee0:	29c4a317 	st.d	$r23,$r24,296(0x128)
       de < ecache.entries + ENTRY_CACHE_NUM; de++) {
900000000800cee4:	02c5a2f7 	addi.d	$r23,$r23,360(0x168)
  for (struct dirent *de = ecache.entries;
900000000800cee8:	28c0032c 	ld.d	$r12,$r25,0
900000000800ceec:	5fffc2ec 	bne	$r23,$r12,-64(0x3ffc0) # 900000000800ceac <fat32_init+0x184>
}
900000000800cef0:	00150004 	move	$r4,$r0
900000000800cef4:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800cef8:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800cefc:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800cf00:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800cf04:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800cf08:	28c0007a 	ld.d	$r26,$r3,0
900000000800cf0c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800cf10:	4c000020 	jirl	$r0,$r1,0
    panic("not FAT32 volume");
900000000800cf14:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800cf18:	02e71084 	addi.d	$r4,$r4,-1596(0x9c4)
900000000800cf1c:	5732ebff 	bl	-52504(0xfff32e8) # 9000000008000204 <panic>
    panic("byts_per_sec != BSIZE");
900000000800cf20:	1c0001c4 	pcaddu12i	$r4,14(0xe)
900000000800cf24:	02e74084 	addi.d	$r4,$r4,-1584(0x9d0)
900000000800cf28:	5732dfff 	bl	-52516(0xfff32dc) # 9000000008000204 <panic>

900000000800cf2c <eread>:
  if (off > entry->file_size || off + n < off ||
900000000800cf2c:	2884208c 	ld.w	$r12,$r4,264(0x108)
900000000800cf30:	68015587 	bltu	$r12,$r7,340(0x154) # 900000000800d084 <eread+0x158>
int eread(struct dirent *entry, int user_dst, uint64 dst, uint off, uint n) {
900000000800cf34:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800cf38:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000800cf3c:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000800cf40:	29c12077 	st.d	$r23,$r3,72(0x48)
900000000800cf44:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800cf48:	29c0e079 	st.d	$r25,$r3,56(0x38)
900000000800cf4c:	29c0c07a 	st.d	$r26,$r3,48(0x30)
900000000800cf50:	29c0a07b 	st.d	$r27,$r3,40(0x28)
900000000800cf54:	29c0807c 	st.d	$r28,$r3,32(0x20)
900000000800cf58:	29c0607d 	st.d	$r29,$r3,24(0x18)
900000000800cf5c:	29c0407e 	st.d	$r30,$r3,16(0x10)
900000000800cf60:	29c0207f 	st.d	$r31,$r3,8(0x8)
900000000800cf64:	02c18076 	addi.d	$r22,$r3,96(0x60)
900000000800cf68:	0015009a 	move	$r26,$r4
900000000800cf6c:	001500bd 	move	$r29,$r5
900000000800cf70:	001500db 	move	$r27,$r6
900000000800cf74:	001500f8 	move	$r24,$r7
  if (off > entry->file_size || off + n < off ||
900000000800cf78:	001020ee 	add.w	$r14,$r7,$r8
    return 0;
900000000800cf7c:	00150004 	move	$r4,$r0
  if (off > entry->file_size || off + n < off ||
900000000800cf80:	6800c1c7 	bltu	$r14,$r7,192(0xc0) # 900000000800d040 <eread+0x114>
900000000800cf84:	2a04034d 	ld.bu	$r13,$r26,256(0x100)
900000000800cf88:	00c411ad 	bstrpick.d	$r13,$r13,0x4,0x4
900000000800cf8c:	4400b5a0 	bnez	$r13,180(0xb4) # 900000000800d040 <eread+0x114>
    n = entry->file_size - off;
900000000800cf90:	00111d8d 	sub.w	$r13,$r12,$r7
900000000800cf94:	0012b98c 	sltu	$r12,$r12,$r14
900000000800cf98:	001331ad 	maskeqz	$r13,$r13,$r12
900000000800cf9c:	0013b10c 	masknez	$r12,$r8,$r12
900000000800cfa0:	001531bc 	or	$r28,$r13,$r12
  for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
900000000800cfa4:	2884334d 	ld.w	$r13,$r26,268(0x10c)
900000000800cfa8:	141fffec 	lu12i.w	$r12,65535(0xffff)
900000000800cfac:	03bfdd8c 	ori	$r12,$r12,0xff7
900000000800cfb0:	6800c58d 	bltu	$r12,$r13,196(0xc4) # 900000000800d074 <eread+0x148>
900000000800cfb4:	4000cb80 	beqz	$r28,200(0xc8) # 900000000800d07c <eread+0x150>
900000000800cfb8:	00150019 	move	$r25,$r0
    m = fat.byts_per_clus - off % fat.byts_per_clus;
900000000800cfbc:	1c0040df 	pcaddu12i	$r31,518(0x206)
900000000800cfc0:	02d0b3ff 	addi.d	$r31,$r31,1068(0x42c)
  for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
900000000800cfc4:	0015019e 	move	$r30,$r12
    reloc_clus(entry, off, 0);
900000000800cfc8:	00150006 	move	$r6,$r0
900000000800cfcc:	00150305 	move	$r5,$r24
900000000800cfd0:	00150344 	move	$r4,$r26
900000000800cfd4:	57f7e7ff 	bl	-2076(0xffff7e4) # 900000000800c7b8 <reloc_clus>
    m = fat.byts_per_clus - off % fat.byts_per_clus;
900000000800cfd8:	288033ed 	ld.w	$r13,$r31,12(0xc)
900000000800cfdc:	0021b708 	mod.wu	$r8,$r24,$r13
900000000800cfe0:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800cfe8 <eread+0xbc>
900000000800cfe4:	002a0007 	break	0x7
900000000800cfe8:	001121ae 	sub.w	$r14,$r13,$r8
    if (n - tot < m) {
900000000800cfec:	0011678c 	sub.w	$r12,$r28,$r25
900000000800cff0:	0015018d 	move	$r13,$r12
900000000800cff4:	0012b5cd 	sltu	$r13,$r14,$r13
900000000800cff8:	0013b597 	masknez	$r23,$r12,$r13
900000000800cffc:	001335cd 	maskeqz	$r13,$r14,$r13
900000000800d000:	001536f7 	or	$r23,$r23,$r13
    if (rw_clus(entry->cur_clus, 0, user_dst, dst, off % fat.byts_per_clus,
900000000800d004:	001502e9 	move	$r9,$r23
900000000800d008:	00150367 	move	$r7,$r27
900000000800d00c:	001503a6 	move	$r6,$r29
900000000800d010:	00150005 	move	$r5,$r0
900000000800d014:	28843344 	ld.w	$r4,$r26,268(0x10c)
900000000800d018:	57f8ebff 	bl	-1816(0xffff8e8) # 900000000800c900 <rw_clus>
900000000800d01c:	5c002097 	bne	$r4,$r23,32(0x20) # 900000000800d03c <eread+0x110>
       tot += m, off += m, dst += m) {
900000000800d020:	001066f9 	add.w	$r25,$r23,$r25
900000000800d024:	001062f8 	add.w	$r24,$r23,$r24
900000000800d028:	00df02f7 	bstrpick.d	$r23,$r23,0x1f,0x0
900000000800d02c:	0010df7b 	add.d	$r27,$r27,$r23
  for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
900000000800d030:	2884334c 	ld.w	$r12,$r26,268(0x10c)
900000000800d034:	68000bcc 	bltu	$r30,$r12,8(0x8) # 900000000800d03c <eread+0x110>
900000000800d038:	6bff933c 	bltu	$r25,$r28,-112(0x3ff90) # 900000000800cfc8 <eread+0x9c>
  return tot;
900000000800d03c:	00150324 	move	$r4,$r25
}
900000000800d040:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000800d044:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000800d048:	28c12077 	ld.d	$r23,$r3,72(0x48)
900000000800d04c:	28c10078 	ld.d	$r24,$r3,64(0x40)
900000000800d050:	28c0e079 	ld.d	$r25,$r3,56(0x38)
900000000800d054:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
900000000800d058:	28c0a07b 	ld.d	$r27,$r3,40(0x28)
900000000800d05c:	28c0807c 	ld.d	$r28,$r3,32(0x20)
900000000800d060:	28c0607d 	ld.d	$r29,$r3,24(0x18)
900000000800d064:	28c0407e 	ld.d	$r30,$r3,16(0x10)
900000000800d068:	28c0207f 	ld.d	$r31,$r3,8(0x8)
900000000800d06c:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000800d070:	4c000020 	jirl	$r0,$r1,0
  for (tot = 0; entry->cur_clus < FAT32_EOC && tot < n;
900000000800d074:	00150019 	move	$r25,$r0
900000000800d078:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800d03c <eread+0x110>
900000000800d07c:	00150399 	move	$r25,$r28
900000000800d080:	53ffbfff 	b	-68(0xfffffbc) # 900000000800d03c <eread+0x110>
    return 0;
900000000800d084:	00150004 	move	$r4,$r0
}
900000000800d088:	4c000020 	jirl	$r0,$r1,0

900000000800d08c <ewrite>:
  if (off > entry->file_size || off + n < off || (uint64)off + n > 0xffffffff ||
900000000800d08c:	2884208c 	ld.w	$r12,$r4,264(0x108)
900000000800d090:	68016987 	bltu	$r12,$r7,360(0x168) # 900000000800d1f8 <ewrite+0x16c>
int ewrite(struct dirent *entry, int user_src, uint64 src, uint off, uint n) {
900000000800d094:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800d098:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800d09c:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800d0a0:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800d0a4:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800d0a8:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800d0ac:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800d0b0:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800d0b4:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800d0b8:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800d0bc:	29c0007e 	st.d	$r30,$r3,0
900000000800d0c0:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000800d0c4:	0015009b 	move	$r27,$r4
900000000800d0c8:	001500bd 	move	$r29,$r5
900000000800d0cc:	001500da 	move	$r26,$r6
900000000800d0d0:	001500f8 	move	$r24,$r7
900000000800d0d4:	0015011c 	move	$r28,$r8
  if (off > entry->file_size || off + n < off || (uint64)off + n > 0xffffffff ||
900000000800d0d8:	001020ec 	add.w	$r12,$r7,$r8
900000000800d0dc:	68012587 	bltu	$r12,$r7,292(0x124) # 900000000800d200 <ewrite+0x174>
900000000800d0e0:	00df00ec 	bstrpick.d	$r12,$r7,0x1f,0x0
900000000800d0e4:	00df010d 	bstrpick.d	$r13,$r8,0x1f,0x0
900000000800d0e8:	0010b58c 	add.d	$r12,$r12,$r13
900000000800d0ec:	02bffc0d 	addi.w	$r13,$r0,-1(0xfff)
900000000800d0f0:	1600000d 	lu32i.d	$r13,0
900000000800d0f4:	680115ac 	bltu	$r13,$r12,276(0x114) # 900000000800d208 <ewrite+0x17c>
900000000800d0f8:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800d0fc:	0340058c 	andi	$r12,$r12,0x1
900000000800d100:	44011180 	bnez	$r12,272(0x110) # 900000000800d210 <ewrite+0x184>
  if (entry->first_clus ==
900000000800d104:	2884108c 	ld.w	$r12,$r4,260(0x104)
900000000800d108:	4000c980 	beqz	$r12,200(0xc8) # 900000000800d1d0 <ewrite+0x144>
  for (tot = 0; tot < n; tot += m, off += m, src += m) {
900000000800d10c:	00150019 	move	$r25,$r0
    m = fat.byts_per_clus - off % fat.byts_per_clus;
900000000800d110:	1c0040de 	pcaddu12i	$r30,518(0x206)
900000000800d114:	02cb63de 	addi.d	$r30,$r30,728(0x2d8)
  for (tot = 0; tot < n; tot += m, off += m, src += m) {
900000000800d118:	4000db80 	beqz	$r28,216(0xd8) # 900000000800d1f0 <ewrite+0x164>
    reloc_clus(entry, off, 1);
900000000800d11c:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800d120:	00150305 	move	$r5,$r24
900000000800d124:	00150364 	move	$r4,$r27
900000000800d128:	57f693ff 	bl	-2416(0xffff690) # 900000000800c7b8 <reloc_clus>
    m = fat.byts_per_clus - off % fat.byts_per_clus;
900000000800d12c:	288033cd 	ld.w	$r13,$r30,12(0xc)
900000000800d130:	0021b708 	mod.wu	$r8,$r24,$r13
900000000800d134:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800d13c <ewrite+0xb0>
900000000800d138:	002a0007 	break	0x7
900000000800d13c:	001121ae 	sub.w	$r14,$r13,$r8
    if (n - tot < m) {
900000000800d140:	0011678c 	sub.w	$r12,$r28,$r25
900000000800d144:	0015018d 	move	$r13,$r12
900000000800d148:	0012b5cd 	sltu	$r13,$r14,$r13
900000000800d14c:	0013b597 	masknez	$r23,$r12,$r13
900000000800d150:	001335cd 	maskeqz	$r13,$r14,$r13
900000000800d154:	001536f7 	or	$r23,$r23,$r13
    if (rw_clus(entry->cur_clus, 1, user_src, src, off % fat.byts_per_clus,
900000000800d158:	001502e9 	move	$r9,$r23
900000000800d15c:	00150347 	move	$r7,$r26
900000000800d160:	001503a6 	move	$r6,$r29
900000000800d164:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800d168:	28843364 	ld.w	$r4,$r27,268(0x10c)
900000000800d16c:	57f797ff 	bl	-2156(0xffff794) # 900000000800c900 <rw_clus>
900000000800d170:	5c001ae4 	bne	$r23,$r4,24(0x18) # 900000000800d188 <ewrite+0xfc>
  for (tot = 0; tot < n; tot += m, off += m, src += m) {
900000000800d174:	001066f9 	add.w	$r25,$r23,$r25
900000000800d178:	001062f8 	add.w	$r24,$r23,$r24
900000000800d17c:	00df02f7 	bstrpick.d	$r23,$r23,0x1f,0x0
900000000800d180:	0010df5a 	add.d	$r26,$r26,$r23
900000000800d184:	6bff9b3c 	bltu	$r25,$r28,-104(0x3ff98) # 900000000800d11c <ewrite+0x90>
    if (off > entry->file_size) {
900000000800d188:	2884236c 	ld.w	$r12,$r27,264(0x108)
900000000800d18c:	6c001198 	bgeu	$r12,$r24,16(0x10) # 900000000800d19c <ewrite+0x110>
      entry->file_size = off;
900000000800d190:	29842378 	st.w	$r24,$r27,264(0x108)
      entry->dirty = 1;
900000000800d194:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800d198:	2904576c 	st.b	$r12,$r27,277(0x115)
  return tot;
900000000800d19c:	00150324 	move	$r4,$r25
}
900000000800d1a0:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800d1a4:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800d1a8:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800d1ac:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800d1b0:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800d1b4:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800d1b8:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800d1bc:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800d1c0:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800d1c4:	28c0007e 	ld.d	$r30,$r3,0
900000000800d1c8:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800d1cc:	4c000020 	jirl	$r0,$r1,0
    entry->cur_clus = entry->first_clus = alloc_clus(entry->dev);
900000000800d1d0:	2a045084 	ld.bu	$r4,$r4,276(0x114)
900000000800d1d4:	57f3a7ff 	bl	-3164(0xffff3a4) # 900000000800c578 <alloc_clus>
900000000800d1d8:	29841364 	st.w	$r4,$r27,260(0x104)
900000000800d1dc:	29843364 	st.w	$r4,$r27,268(0x10c)
    entry->clus_cnt = 0;
900000000800d1e0:	29844360 	st.w	$r0,$r27,272(0x110)
    entry->dirty = 1;
900000000800d1e4:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800d1e8:	2904576c 	st.b	$r12,$r27,277(0x115)
900000000800d1ec:	53ff23ff 	b	-224(0xfffff20) # 900000000800d10c <ewrite+0x80>
  for (tot = 0; tot < n; tot += m, off += m, src += m) {
900000000800d1f0:	00150399 	move	$r25,$r28
900000000800d1f4:	53ffabff 	b	-88(0xfffffa8) # 900000000800d19c <ewrite+0x110>
    return -1;
900000000800d1f8:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800d1fc:	4c000020 	jirl	$r0,$r1,0
    return -1;
900000000800d200:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800d204:	53ff9fff 	b	-100(0xfffff9c) # 900000000800d1a0 <ewrite+0x114>
900000000800d208:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800d20c:	53ff97ff 	b	-108(0xfffff94) # 900000000800d1a0 <ewrite+0x114>
900000000800d210:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800d214:	53ff8fff 	b	-116(0xfffff8c) # 900000000800d1a0 <ewrite+0x114>

900000000800d218 <formatname>:
char *formatname(char *name) {
900000000800d218:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800d21c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800d220:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800d224:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800d228:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800d22c:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800d230:	29c0007a 	st.d	$r26,$r3,0
900000000800d234:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800d238:	00150097 	move	$r23,$r4
  while (*name == ' ' || *name == '.') {
900000000800d23c:	0280800d 	addi.w	$r13,$r0,32(0x20)
900000000800d240:	0280b80e 	addi.w	$r14,$r0,46(0x2e)
900000000800d244:	50000800 	b	8(0x8) # 900000000800d24c <formatname+0x34>
    name++;
900000000800d248:	02c006f7 	addi.d	$r23,$r23,1(0x1)
  while (*name == ' ' || *name == '.') {
900000000800d24c:	280002e5 	ld.b	$r5,$r23,0
900000000800d250:	001500ac 	move	$r12,$r5
900000000800d254:	5bfff58d 	beq	$r12,$r13,-12(0x3fff4) # 900000000800d248 <formatname+0x30>
900000000800d258:	5bfff18e 	beq	$r12,$r14,-16(0x3fff0) # 900000000800d248 <formatname+0x30>
  for (p = name; *p; p++) {
900000000800d25c:	40006ca0 	beqz	$r5,108(0x6c) # 900000000800d2c8 <formatname+0xb0>
    if (c < 0x20 || strchr(illegal, c)) {
900000000800d260:	02807c0d 	addi.w	$r13,$r0,31(0x1f)
900000000800d264:	64006dac 	bge	$r13,$r12,108(0x6c) # 900000000800d2d0 <formatname+0xb8>
900000000800d268:	001502f8 	move	$r24,$r23
900000000800d26c:	1c000279 	pcaddu12i	$r25,19(0x13)
900000000800d270:	02f7f339 	addi.d	$r25,$r25,-516(0xdfc)
900000000800d274:	02807c1a 	addi.w	$r26,$r0,31(0x1f)
900000000800d278:	00150324 	move	$r4,$r25
900000000800d27c:	5740ebff 	bl	-48920(0xfff40e8) # 9000000008001364 <strchr>
900000000800d280:	44005880 	bnez	$r4,88(0x58) # 900000000800d2d8 <formatname+0xc0>
  for (p = name; *p; p++) {
900000000800d284:	02c00718 	addi.d	$r24,$r24,1(0x1)
900000000800d288:	28000305 	ld.b	$r5,$r24,0
900000000800d28c:	400010a0 	beqz	$r5,16(0x10) # 900000000800d29c <formatname+0x84>
    if (c < 0x20 || strchr(illegal, c)) {
900000000800d290:	001500ac 	move	$r12,$r5
900000000800d294:	63ffe74c 	blt	$r26,$r12,-28(0x3ffe4) # 900000000800d278 <formatname+0x60>
900000000800d298:	50004400 	b	68(0x44) # 900000000800d2dc <formatname+0xc4>
    if (*p != ' ') {
900000000800d29c:	0280800e 	addi.w	$r14,$r0,32(0x20)
900000000800d2a0:	0015030d 	move	$r13,$r24
  while (p-- > name) {
900000000800d2a4:	6c001ef8 	bgeu	$r23,$r24,28(0x1c) # 900000000800d2c0 <formatname+0xa8>
    if (*p != ' ') {
900000000800d2a8:	02ffff18 	addi.d	$r24,$r24,-1(0xfff)
900000000800d2ac:	2800030c 	ld.b	$r12,$r24,0
900000000800d2b0:	5bfff18e 	beq	$r12,$r14,-16(0x3fff0) # 900000000800d2a0 <formatname+0x88>
      p[1] = '\0';
900000000800d2b4:	290001a0 	st.b	$r0,$r13,0
      break;
900000000800d2b8:	001502e4 	move	$r4,$r23
900000000800d2bc:	50002000 	b	32(0x20) # 900000000800d2dc <formatname+0xc4>
900000000800d2c0:	001502e4 	move	$r4,$r23
900000000800d2c4:	50001800 	b	24(0x18) # 900000000800d2dc <formatname+0xc4>
  for (p = name; *p; p++) {
900000000800d2c8:	001502e4 	move	$r4,$r23
900000000800d2cc:	50001000 	b	16(0x10) # 900000000800d2dc <formatname+0xc4>
      return 0;
900000000800d2d0:	00150004 	move	$r4,$r0
900000000800d2d4:	50000800 	b	8(0x8) # 900000000800d2dc <formatname+0xc4>
900000000800d2d8:	00150004 	move	$r4,$r0
}
900000000800d2dc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800d2e0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800d2e4:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800d2e8:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800d2ec:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800d2f0:	28c0007a 	ld.d	$r26,$r3,0
900000000800d2f4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800d2f8:	4c000020 	jirl	$r0,$r1,0

900000000800d2fc <cal_checksum>:
uint8 cal_checksum(uchar *shortname) {
900000000800d2fc:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800d300:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800d304:	02c04076 	addi.d	$r22,$r3,16(0x10)
  for (int i = CHAR_SHORT_NAME; i != 0; i--) {
900000000800d308:	02c02c8f 	addi.d	$r15,$r4,11(0xb)
  uint8 sum = 0;
900000000800d30c:	0015000c 	move	$r12,$r0
    sum = ((sum & 1) ? 0x80 : 0) + (sum >> 1) + *shortname++;
900000000800d310:	00409d8d 	slli.w	$r13,$r12,0x7
900000000800d314:	02c00484 	addi.d	$r4,$r4,1(0x1)
900000000800d318:	0044858c 	srli.w	$r12,$r12,0x1
900000000800d31c:	2a3ffc8e 	ld.bu	$r14,$r4,-1(0xfff)
900000000800d320:	0010398c 	add.w	$r12,$r12,$r14
900000000800d324:	0010b58c 	add.d	$r12,$r12,$r13
900000000800d328:	0067818c 	bstrpick.w	$r12,$r12,0x7,0x0
  for (int i = CHAR_SHORT_NAME; i != 0; i--) {
900000000800d32c:	5fffe5e4 	bne	$r15,$r4,-28(0x3ffe4) # 900000000800d310 <cal_checksum+0x14>
}
900000000800d330:	00150184 	move	$r4,$r12
900000000800d334:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800d338:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800d33c:	4c000020 	jirl	$r0,$r1,0

900000000800d340 <emake>:
void emake(struct dirent *dp, struct dirent *ep, uint off) {
900000000800d340:	02fd8063 	addi.d	$r3,$r3,-160(0xf60)
900000000800d344:	29c26061 	st.d	$r1,$r3,152(0x98)
900000000800d348:	29c24076 	st.d	$r22,$r3,144(0x90)
900000000800d34c:	29c22077 	st.d	$r23,$r3,136(0x88)
900000000800d350:	29c20078 	st.d	$r24,$r3,128(0x80)
900000000800d354:	29c1e079 	st.d	$r25,$r3,120(0x78)
900000000800d358:	29c1c07a 	st.d	$r26,$r3,112(0x70)
900000000800d35c:	29c1a07b 	st.d	$r27,$r3,104(0x68)
900000000800d360:	29c1807c 	st.d	$r28,$r3,96(0x60)
900000000800d364:	29c1607d 	st.d	$r29,$r3,88(0x58)
900000000800d368:	29c1407e 	st.d	$r30,$r3,80(0x50)
900000000800d36c:	29c1207f 	st.d	$r31,$r3,72(0x48)
900000000800d370:	02c28076 	addi.d	$r22,$r3,160(0xa0)
  if (!(dp->attribute & ATTR_DIRECTORY))
900000000800d374:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800d378:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800d37c:	4000c580 	beqz	$r12,196(0xc4) # 900000000800d440 <emake+0x100>
900000000800d380:	00150098 	move	$r24,$r4
900000000800d384:	001500bb 	move	$r27,$r5
900000000800d388:	001500d7 	move	$r23,$r6
  if (off % sizeof(union dentry))
900000000800d38c:	03407ccc 	andi	$r12,$r6,0x1f
900000000800d390:	4400bd80 	bnez	$r12,188(0xbc) # 900000000800d44c <emake+0x10c>
  memset(&de, 0, sizeof(de));
900000000800d394:	02808006 	addi.w	$r6,$r0,32(0x20)
900000000800d398:	00150005 	move	$r5,$r0
900000000800d39c:	02fe02c4 	addi.d	$r4,$r22,-128(0xf80)
900000000800d3a0:	573bc7ff 	bl	-50236(0xfff3bc4) # 9000000008000f64 <memset>
  if (off <= 32) {
900000000800d3a4:	0280800c 	addi.w	$r12,$r0,32(0x20)
900000000800d3a8:	6800c997 	bltu	$r12,$r23,200(0xc8) # 900000000800d470 <emake+0x130>
    if (off == 0) {
900000000800d3ac:	4400aee0 	bnez	$r23,172(0xac) # 900000000800d458 <emake+0x118>
      strncpy(de.sne.name, ".          ", sizeof(de.sne.name));
900000000800d3b0:	02802c06 	addi.w	$r6,$r0,11(0xb)
900000000800d3b4:	1c0001a5 	pcaddu12i	$r5,13(0xd)
900000000800d3b8:	02d630a5 	addi.d	$r5,$r5,1420(0x58c)
900000000800d3bc:	02fe02c4 	addi.d	$r4,$r22,-128(0xf80)
900000000800d3c0:	573d6bff 	bl	-49816(0xfff3d68) # 9000000008001128 <strncpy>
    de.sne.attr = ATTR_DIRECTORY;
900000000800d3c4:	0280400c 	addi.w	$r12,$r0,16(0x10)
900000000800d3c8:	293e2ecc 	st.b	$r12,$r22,-117(0xf8b)
        (uint16)(ep->first_clus >> 16); // first clus high 16 bits
900000000800d3cc:	2884136c 	ld.w	$r12,$r27,260(0x104)
900000000800d3d0:	0044c18d 	srli.w	$r13,$r12,0x10
900000000800d3d4:	297e52cd 	st.h	$r13,$r22,-108(0xf94)
    de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff); // low 16 bits
900000000800d3d8:	297e6acc 	st.h	$r12,$r22,-102(0xf9a)
    de.sne.file_size = 0; // filesize is updated in eupdate()
900000000800d3dc:	29be72c0 	st.w	$r0,$r22,-100(0xf9c)
    off = reloc_clus(dp, off, 1);
900000000800d3e0:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800d3e4:	001502e5 	move	$r5,$r23
900000000800d3e8:	00150304 	move	$r4,$r24
900000000800d3ec:	57f3cfff 	bl	-3124(0xffff3cc) # 900000000800c7b8 <reloc_clus>
    rw_clus(dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
900000000800d3f0:	02808009 	addi.w	$r9,$r0,32(0x20)
900000000800d3f4:	00150088 	move	$r8,$r4
900000000800d3f8:	02fe02c7 	addi.d	$r7,$r22,-128(0xf80)
900000000800d3fc:	00150006 	move	$r6,$r0
900000000800d400:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800d404:	28843304 	ld.w	$r4,$r24,268(0x10c)
900000000800d408:	57f4fbff 	bl	-2824(0xffff4f8) # 900000000800c900 <rw_clus>
}
900000000800d40c:	28c26061 	ld.d	$r1,$r3,152(0x98)
900000000800d410:	28c24076 	ld.d	$r22,$r3,144(0x90)
900000000800d414:	28c22077 	ld.d	$r23,$r3,136(0x88)
900000000800d418:	28c20078 	ld.d	$r24,$r3,128(0x80)
900000000800d41c:	28c1e079 	ld.d	$r25,$r3,120(0x78)
900000000800d420:	28c1c07a 	ld.d	$r26,$r3,112(0x70)
900000000800d424:	28c1a07b 	ld.d	$r27,$r3,104(0x68)
900000000800d428:	28c1807c 	ld.d	$r28,$r3,96(0x60)
900000000800d42c:	28c1607d 	ld.d	$r29,$r3,88(0x58)
900000000800d430:	28c1407e 	ld.d	$r30,$r3,80(0x50)
900000000800d434:	28c1207f 	ld.d	$r31,$r3,72(0x48)
900000000800d438:	02c28063 	addi.d	$r3,$r3,160(0xa0)
900000000800d43c:	4c000020 	jirl	$r0,$r1,0
    panic("emake: not dir");
900000000800d440:	1c0001a4 	pcaddu12i	$r4,13(0xd)
900000000800d444:	02d36084 	addi.d	$r4,$r4,1240(0x4d8)
900000000800d448:	572dbfff 	bl	-53828(0xfff2dbc) # 9000000008000204 <panic>
    panic("emake: not aligned");
900000000800d44c:	1c0001a4 	pcaddu12i	$r4,13(0xd)
900000000800d450:	02d37084 	addi.d	$r4,$r4,1244(0x4dc)
900000000800d454:	572db3ff 	bl	-53840(0xfff2db0) # 9000000008000204 <panic>
      strncpy(de.sne.name, "..         ", sizeof(de.sne.name));
900000000800d458:	02802c06 	addi.w	$r6,$r0,11(0xb)
900000000800d45c:	1c0001a5 	pcaddu12i	$r5,13(0xd)
900000000800d460:	02d3d0a5 	addi.d	$r5,$r5,1268(0x4f4)
900000000800d464:	02fe02c4 	addi.d	$r4,$r22,-128(0xf80)
900000000800d468:	573cc3ff 	bl	-49984(0xfff3cc0) # 9000000008001128 <strncpy>
900000000800d46c:	53ff5bff 	b	-168(0xfffff58) # 900000000800d3c4 <emake+0x84>
    int entcnt = (strlen(ep->filename) + CHAR_LONG_NAME - 1) /
900000000800d470:	29fda2db 	st.d	$r27,$r22,-152(0xf68)
900000000800d474:	00150364 	move	$r4,$r27
900000000800d478:	573d63ff 	bl	-49824(0xfff3d60) # 90000000080011d8 <strlen>
900000000800d47c:	29fd82c4 	st.d	$r4,$r22,-160(0xf60)
900000000800d480:	0280308d 	addi.w	$r13,$r4,12(0xc)
900000000800d484:	0280340c 	addi.w	$r12,$r0,13(0xd)
900000000800d488:	002031bc 	div.w	$r28,$r13,$r12
900000000800d48c:	5c000980 	bne	$r12,$r0,8(0x8) # 900000000800d494 <emake+0x154>
900000000800d490:	002a0007 	break	0x7
    memset(shortname, 0, sizeof(shortname));
900000000800d494:	02803006 	addi.w	$r6,$r0,12(0xc)
900000000800d498:	00150005 	move	$r5,$r0
900000000800d49c:	02fdc2c4 	addi.d	$r4,$r22,-144(0xf70)
900000000800d4a0:	573ac7ff 	bl	-50492(0xfff3ac4) # 9000000008000f64 <memset>
  for (int j = strlen(name) - 1; j >= 0; j--) {
900000000800d4a4:	00150364 	move	$r4,$r27
900000000800d4a8:	573d33ff 	bl	-49872(0xfff3d30) # 90000000080011d8 <strlen>
900000000800d4ac:	02bffc8c 	addi.w	$r12,$r4,-1(0xfff)
900000000800d4b0:	60004d80 	blt	$r12,$r0,76(0x4c) # 900000000800d4fc <emake+0x1bc>
    if (name[j] == '.') {
900000000800d4b4:	0010b36d 	add.d	$r13,$r27,$r12
900000000800d4b8:	280001af 	ld.b	$r15,$r13,0
900000000800d4bc:	0280b80e 	addi.w	$r14,$r0,46(0x2e)
900000000800d4c0:	580059ee 	beq	$r15,$r14,88(0x58) # 900000000800d518 <emake+0x1d8>
900000000800d4c4:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000800d4c8:	0010b36c 	add.d	$r12,$r27,$r12
900000000800d4cc:	02fffb6e 	addi.d	$r14,$r27,-2(0xffe)
900000000800d4d0:	001091ce 	add.d	$r14,$r14,$r4
900000000800d4d4:	02bffc8d 	addi.w	$r13,$r4,-1(0xfff)
900000000800d4d8:	00df01ad 	bstrpick.d	$r13,$r13,0x1f,0x0
900000000800d4dc:	0011b5ce 	sub.d	$r14,$r14,$r13
900000000800d4e0:	0280b80f 	addi.w	$r15,$r0,46(0x2e)
  for (int j = strlen(name) - 1; j >= 0; j--) {
900000000800d4e4:	5800198e 	beq	$r12,$r14,24(0x18) # 900000000800d4fc <emake+0x1bc>
    if (name[j] == '.') {
900000000800d4e8:	00150190 	move	$r16,$r12
900000000800d4ec:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000800d4f0:	2800058d 	ld.b	$r13,$r12,1(0x1)
900000000800d4f4:	5ffff1af 	bne	$r13,$r15,-16(0x3fff0) # 900000000800d4e4 <emake+0x1a4>
900000000800d4f8:	29fda2d0 	st.d	$r16,$r22,-152(0xf68)
  while (i < CHAR_SHORT_NAME && (c = *name++)) {
900000000800d4fc:	02c0077d 	addi.d	$r29,$r27,1(0x1)
900000000800d500:	2800037a 	ld.b	$r26,$r27,0
900000000800d504:	00150019 	move	$r25,$r0
    if (i == 8 && p) {
900000000800d508:	0280201e 	addi.w	$r30,$r0,8(0x8)
  while (i < CHAR_SHORT_NAME && (c = *name++)) {
900000000800d50c:	0280281f 	addi.w	$r31,$r0,10(0xa)
900000000800d510:	44010340 	bnez	$r26,256(0x100) # 900000000800d610 <emake+0x2d0>
900000000800d514:	50001c00 	b	28(0x1c) # 900000000800d530 <emake+0x1f0>
    if (name[j] == '.') {
900000000800d518:	29fda2cd 	st.d	$r13,$r22,-152(0xf68)
900000000800d51c:	53ffe3ff 	b	-32(0xfffffe0) # 900000000800d4fc <emake+0x1bc>
    if (i == 8 && p) {
900000000800d520:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000800d524:	40025d80 	beqz	$r12,604(0x25c) # 900000000800d780 <emake+0x440>
      if (p + 1 < name) {
900000000800d528:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800d52c:	6c00959d 	bgeu	$r12,$r29,148(0x94) # 900000000800d5c0 <emake+0x280>
900000000800d530:	02fdc2cc 	addi.d	$r12,$r22,-144(0xf70)
900000000800d534:	0010e58d 	add.d	$r13,$r12,$r25
    if (c == ' ') {
900000000800d538:	001501ac 	move	$r12,$r13
    shortname[i++] = ' ';
900000000800d53c:	0280800f 	addi.w	$r15,$r0,32(0x20)
900000000800d540:	004081ad 	slli.w	$r13,$r13,0x0
900000000800d544:	00113739 	sub.w	$r25,$r25,$r13
  while (i < CHAR_SHORT_NAME) {
900000000800d548:	0280280e 	addi.w	$r14,$r0,10(0xa)
    shortname[i++] = ' ';
900000000800d54c:	2900018f 	st.b	$r15,$r12,0
900000000800d550:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800d554:	0040818d 	slli.w	$r13,$r12,0x0
  while (i < CHAR_SHORT_NAME) {
900000000800d558:	0010372d 	add.w	$r13,$r25,$r13
900000000800d55c:	67fff1cd 	bge	$r14,$r13,-16(0x3fff0) # 900000000800d54c <emake+0x20c>
    de.lne.checksum = cal_checksum((uchar *)shortname);
900000000800d560:	02fdc2c4 	addi.d	$r4,$r22,-144(0xf70)
900000000800d564:	57fd9bff 	bl	-616(0xffffd98) # 900000000800d2fc <cal_checksum>
900000000800d568:	293e36c4 	st.b	$r4,$r22,-115(0xf8d)
    de.lne.attr = ATTR_LONG_NAME;
900000000800d56c:	02803c0c 	addi.w	$r12,$r0,15(0xf)
900000000800d570:	293e2ecc 	st.b	$r12,$r22,-117(0xf8b)
    for (int i = entcnt; i > 0; i--) {
900000000800d574:	28fd82cc 	ld.d	$r12,$r22,-160(0xf60)
900000000800d578:	6400fc0c 	bge	$r0,$r12,252(0xfc) # 900000000800d674 <emake+0x334>
900000000800d57c:	02bfff9d 	addi.w	$r29,$r28,-1(0xfff)
900000000800d580:	0280340c 	addi.w	$r12,$r0,13(0xd)
900000000800d584:	001c33bd 	mul.w	$r29,$r29,$r12
900000000800d588:	0010f77d 	add.d	$r29,$r27,$r29
900000000800d58c:	0015039a 	move	$r26,$r28
      int end = 0;
900000000800d590:	0015001e 	move	$r30,$r0
          *w++ = 0xff; // on k210, unaligned reading is illegal
900000000800d594:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
900000000800d598:	5001b800 	b	440(0x1b8) # 900000000800d750 <emake+0x410>
      if (name > p) { // last '.'
900000000800d59c:	28fda2cc 	ld.d	$r12,$r22,-152(0xf68)
900000000800d5a0:	6c005d9d 	bgeu	$r12,$r29,92(0x5c) # 900000000800d5fc <emake+0x2bc>
        memset(shortname + i, ' ', 8 - i);
900000000800d5a4:	02802006 	addi.w	$r6,$r0,8(0x8)
900000000800d5a8:	001164c6 	sub.w	$r6,$r6,$r25
900000000800d5ac:	02808005 	addi.w	$r5,$r0,32(0x20)
900000000800d5b0:	02fdc2cc 	addi.d	$r12,$r22,-144(0xf70)
900000000800d5b4:	0010e584 	add.d	$r4,$r12,$r25
900000000800d5b8:	5739afff 	bl	-50772(0xfff39ac) # 9000000008000f64 <memset>
900000000800d5bc:	001503ac 	move	$r12,$r29
  while (i < CHAR_SHORT_NAME && (c = *name++)) {
900000000800d5c0:	001503d9 	move	$r25,$r30
900000000800d5c4:	29fda2c0 	st.d	$r0,$r22,-152(0xf68)
900000000800d5c8:	50003c00 	b	60(0x3c) # 900000000800d604 <emake+0x2c4>
      if (strchr(illegal, c) != NULL) {
900000000800d5cc:	00150345 	move	$r5,$r26
900000000800d5d0:	1c000264 	pcaddu12i	$r4,19(0x13)
900000000800d5d4:	02ea4084 	addi.d	$r4,$r4,-1392(0xa90)
900000000800d5d8:	573d8fff 	bl	-49780(0xfff3d8c) # 9000000008001364 <strchr>
        c = '_';
900000000800d5dc:	0013935a 	masknez	$r26,$r26,$r4
900000000800d5e0:	02817c0c 	addi.w	$r12,$r0,95(0x5f)
900000000800d5e4:	00131184 	maskeqz	$r4,$r12,$r4
900000000800d5e8:	0015135a 	or	$r26,$r26,$r4
    shortname[i++] = c;
900000000800d5ec:	02fe82cc 	addi.d	$r12,$r22,-96(0xfa0)
900000000800d5f0:	0010e58c 	add.d	$r12,$r12,$r25
900000000800d5f4:	293f419a 	st.b	$r26,$r12,-48(0xfd0)
900000000800d5f8:	02800739 	addi.w	$r25,$r25,1(0x1)
  while (i < CHAR_SHORT_NAME && (c = *name++)) {
900000000800d5fc:	63ff67f9 	blt	$r31,$r25,-156(0x3ff64) # 900000000800d560 <emake+0x220>
900000000800d600:	001503ac 	move	$r12,$r29
900000000800d604:	02c0059d 	addi.d	$r29,$r12,1(0x1)
900000000800d608:	2800019a 	ld.b	$r26,$r12,0
900000000800d60c:	43ff275f 	beqz	$r26,-220(0x7fff24) # 900000000800d530 <emake+0x1f0>
    if (i == 8 && p) {
900000000800d610:	5bff133e 	beq	$r25,$r30,-240(0x3ff10) # 900000000800d520 <emake+0x1e0>
    if (c == ' ') {
900000000800d614:	0015034c 	move	$r12,$r26
900000000800d618:	0280800d 	addi.w	$r13,$r0,32(0x20)
900000000800d61c:	5bffe18d 	beq	$r12,$r13,-32(0x3ffe0) # 900000000800d5fc <emake+0x2bc>
    if (c == '.') {
900000000800d620:	0015034c 	move	$r12,$r26
900000000800d624:	0280b80d 	addi.w	$r13,$r0,46(0x2e)
900000000800d628:	5bff758d 	beq	$r12,$r13,-140(0x3ff74) # 900000000800d59c <emake+0x25c>
    if (c >= 'a' && c <= 'z') {
900000000800d62c:	0067834c 	bstrpick.w	$r12,$r26,0x7,0x0
900000000800d630:	02be7d8d 	addi.w	$r13,$r12,-97(0xf9f)
900000000800d634:	006781ad 	bstrpick.w	$r13,$r13,0x7,0x0
900000000800d638:	0280640e 	addi.w	$r14,$r0,25(0x19)
900000000800d63c:	6bff91cd 	bltu	$r14,$r13,-112(0x3ff90) # 900000000800d5cc <emake+0x28c>
      c += 'A' - 'a';
900000000800d640:	02bf818c 	addi.w	$r12,$r12,-32(0xfe0)
900000000800d644:	00005d9a 	ext.w.b	$r26,$r12
900000000800d648:	53ffa7ff 	b	-92(0xfffffa4) # 900000000800d5ec <emake+0x2ac>
        de.lne.order |= LAST_LONG_ENTRY;
900000000800d64c:	0381018c 	ori	$r12,$r12,0x40
900000000800d650:	293e02cc 	st.b	$r12,$r22,-128(0xf80)
900000000800d654:	50010800 	b	264(0x108) # 900000000800d75c <emake+0x41c>
          if ((*w++ = *p++) == 0) {
900000000800d658:	2a00020e 	ld.bu	$r14,$r16,0
900000000800d65c:	2900018e 	st.b	$r14,$r12,0
            end = 1;
900000000800d660:	024005ce 	sltui	$r14,$r14,1(0x1)
          *w++ = 0;
900000000800d664:	29000580 	st.b	$r0,$r12,1(0x1)
900000000800d668:	02c0098c 	addi.d	$r12,$r12,2(0x2)
          if ((*w++ = *p++) == 0) {
900000000800d66c:	02c00610 	addi.d	$r16,$r16,1(0x1)
900000000800d670:	50009800 	b	152(0x98) # 900000000800d708 <emake+0x3c8>
    memset(&de, 0, sizeof(de));
900000000800d674:	02808006 	addi.w	$r6,$r0,32(0x20)
900000000800d678:	00150005 	move	$r5,$r0
900000000800d67c:	02fe02c4 	addi.d	$r4,$r22,-128(0xf80)
900000000800d680:	5738e7ff 	bl	-50972(0xfff38e4) # 9000000008000f64 <memset>
    strncpy(de.sne.name, shortname, sizeof(de.sne.name));
900000000800d684:	02802c06 	addi.w	$r6,$r0,11(0xb)
900000000800d688:	02fdc2c5 	addi.d	$r5,$r22,-144(0xf70)
900000000800d68c:	02fe02c4 	addi.d	$r4,$r22,-128(0xf80)
900000000800d690:	573a9bff 	bl	-50536(0xfff3a98) # 9000000008001128 <strncpy>
    de.sne.attr = ep->attribute;
900000000800d694:	2a04036c 	ld.bu	$r12,$r27,256(0x100)
900000000800d698:	293e2ecc 	st.b	$r12,$r22,-117(0xf8b)
        (uint16)(ep->first_clus >> 16); // first clus high 16 bits
900000000800d69c:	2884136c 	ld.w	$r12,$r27,260(0x104)
900000000800d6a0:	0044c18d 	srli.w	$r13,$r12,0x10
900000000800d6a4:	297e52cd 	st.h	$r13,$r22,-108(0xf94)
    de.sne.fst_clus_lo = (uint16)(ep->first_clus & 0xffff); // low 16 bits
900000000800d6a8:	297e6acc 	st.h	$r12,$r22,-102(0xf9a)
    de.sne.file_size = ep->file_size; // filesize is updated in eupdate()
900000000800d6ac:	2884236c 	ld.w	$r12,$r27,264(0x108)
900000000800d6b0:	29be72cc 	st.w	$r12,$r22,-100(0xf9c)
    off = reloc_clus(dp, off, 1);
900000000800d6b4:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800d6b8:	001502e5 	move	$r5,$r23
900000000800d6bc:	00150304 	move	$r4,$r24
900000000800d6c0:	57f0fbff 	bl	-3848(0xffff0f8) # 900000000800c7b8 <reloc_clus>
    rw_clus(dp->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
900000000800d6c4:	02808009 	addi.w	$r9,$r0,32(0x20)
900000000800d6c8:	00150088 	move	$r8,$r4
900000000800d6cc:	02fe02c7 	addi.d	$r7,$r22,-128(0xf80)
900000000800d6d0:	00150006 	move	$r6,$r0
900000000800d6d4:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800d6d8:	28843304 	ld.w	$r4,$r24,268(0x10c)
900000000800d6dc:	57f227ff 	bl	-3548(0xffff224) # 900000000800c900 <rw_clus>
}
900000000800d6e0:	53fd2fff 	b	-724(0xffffd2c) # 900000000800d40c <emake+0xcc>
          w = (uint8 *)de.lne.name2;
900000000800d6e4:	02fe3acc 	addi.d	$r12,$r22,-114(0xf8e)
900000000800d6e8:	50000800 	b	8(0x8) # 900000000800d6f0 <emake+0x3b0>
          w = (uint8 *)de.lne.name3;
900000000800d6ec:	02fe72cc 	addi.d	$r12,$r22,-100(0xf9c)
900000000800d6f0:	028005ad 	addi.w	$r13,$r13,1(0x1)
900000000800d6f4:	02bffdaf 	addi.w	$r15,$r13,-1(0xfff)
        if (end) {
900000000800d6f8:	43ff61df 	beqz	$r14,-160(0x7fff60) # 900000000800d658 <emake+0x318>
          *w++ = 0xff; // on k210, unaligned reading is illegal
900000000800d6fc:	29000199 	st.b	$r25,$r12,0
          *w++ = 0xff;
900000000800d700:	29000599 	st.b	$r25,$r12,1(0x1)
900000000800d704:	02c0098c 	addi.d	$r12,$r12,2(0x2)
        switch (j) {
900000000800d708:	5bffddf2 	beq	$r15,$r18,-36(0x3ffdc) # 900000000800d6e4 <emake+0x3a4>
900000000800d70c:	5bffe1f1 	beq	$r15,$r17,-32(0x3ffe0) # 900000000800d6ec <emake+0x3ac>
      for (int j = 1; j <= CHAR_LONG_NAME; j++) {
900000000800d710:	001501af 	move	$r15,$r13
900000000800d714:	67ffde6f 	bge	$r19,$r15,-36(0x3ffdc) # 900000000800d6f0 <emake+0x3b0>
      uint off2 = reloc_clus(dp, off, 1);
900000000800d718:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800d71c:	001502e5 	move	$r5,$r23
900000000800d720:	00150304 	move	$r4,$r24
900000000800d724:	57f097ff 	bl	-3948(0xffff094) # 900000000800c7b8 <reloc_clus>
      rw_clus(dp->cur_clus, 1, 0, (uint64)&de, off2, sizeof(de));
900000000800d728:	02808009 	addi.w	$r9,$r0,32(0x20)
900000000800d72c:	00150088 	move	$r8,$r4
900000000800d730:	02fe02c7 	addi.d	$r7,$r22,-128(0xf80)
900000000800d734:	001503c6 	move	$r6,$r30
900000000800d738:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800d73c:	28843304 	ld.w	$r4,$r24,268(0x10c)
900000000800d740:	57f1c3ff 	bl	-3648(0xffff1c0) # 900000000800c900 <rw_clus>
      off += sizeof(de);
900000000800d744:	028082f7 	addi.w	$r23,$r23,32(0x20)
900000000800d748:	02ffcfbd 	addi.d	$r29,$r29,-13(0xff3)
    for (int i = entcnt; i > 0; i--) {
900000000800d74c:	67ff281a 	bge	$r0,$r26,-216(0x3ff28) # 900000000800d674 <emake+0x334>
      if ((de.lne.order = i) == entcnt) {
900000000800d750:	0067834c 	bstrpick.w	$r12,$r26,0x7,0x0
900000000800d754:	5bfef99c 	beq	$r12,$r28,-264(0x3fef8) # 900000000800d64c <emake+0x30c>
900000000800d758:	293e02cc 	st.b	$r12,$r22,-128(0xf80)
      char *p = ep->filename + (i - 1) * CHAR_LONG_NAME;
900000000800d75c:	02bfff5a 	addi.w	$r26,$r26,-1(0xfff)
900000000800d760:	001503b0 	move	$r16,$r29
900000000800d764:	0280080d 	addi.w	$r13,$r0,2(0x2)
      int end = 0;
900000000800d768:	001503ce 	move	$r14,$r30
      uint8 *w = (uint8 *)de.lne.name1;
900000000800d76c:	02fe06cc 	addi.d	$r12,$r22,-127(0xf81)
        switch (j) {
900000000800d770:	02801412 	addi.w	$r18,$r0,5(0x5)
900000000800d774:	02802c11 	addi.w	$r17,$r0,11(0xb)
      for (int j = 1; j <= CHAR_LONG_NAME; j++) {
900000000800d778:	02803413 	addi.w	$r19,$r0,13(0xd)
900000000800d77c:	53ff7bff 	b	-136(0xfffff78) # 900000000800d6f4 <emake+0x3b4>
    if (c == ' ') {
900000000800d780:	0015034c 	move	$r12,$r26
900000000800d784:	0280800d 	addi.w	$r13,$r0,32(0x20)
900000000800d788:	5ffe998d 	bne	$r12,$r13,-360(0x3fe98) # 900000000800d620 <emake+0x2e0>
900000000800d78c:	001503ac 	move	$r12,$r29
900000000800d790:	53fe77ff 	b	-396(0xffffe74) # 900000000800d604 <emake+0x2c4>

900000000800d794 <edup>:
struct dirent *edup(struct dirent *entry) {
900000000800d794:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800d798:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800d79c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800d7a0:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800d7a4:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800d7a8:	00150097 	move	$r23,$r4
  if (entry != 0) {
900000000800d7ac:	40002880 	beqz	$r4,40(0x28) # 900000000800d7d4 <edup+0x40>
    acquire(&ecache.lock);
900000000800d7b0:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800d7b4:	02d74084 	addi.d	$r4,$r4,1488(0x5d0)
900000000800d7b8:	5736fbff 	bl	-51464(0xfff36f8) # 9000000008000eb0 <acquire>
    entry->ref++;
900000000800d7bc:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800d7c0:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800d7c4:	298462ec 	st.w	$r12,$r23,280(0x118)
    release(&ecache.lock);
900000000800d7c8:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800d7cc:	02d6e084 	addi.d	$r4,$r4,1464(0x5b8)
900000000800d7d0:	573743ff 	bl	-51392(0xfff3740) # 9000000008000f10 <release>
}
900000000800d7d4:	001502e4 	move	$r4,$r23
900000000800d7d8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800d7dc:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800d7e0:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800d7e4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800d7e8:	4c000020 	jirl	$r0,$r1,0

900000000800d7ec <eupdate>:
  if (!entry->dirty || entry->valid != 1) {
900000000800d7ec:	2a04548c 	ld.bu	$r12,$r4,277(0x115)
900000000800d7f0:	40001180 	beqz	$r12,16(0x10) # 900000000800d800 <eupdate+0x14>
900000000800d7f4:	2844588d 	ld.h	$r13,$r4,278(0x116)
900000000800d7f8:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800d7fc:	580009ac 	beq	$r13,$r12,8(0x8) # 900000000800d804 <eupdate+0x18>
900000000800d800:	4c000020 	jirl	$r0,$r1,0
void eupdate(struct dirent *entry) {
900000000800d804:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800d808:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800d80c:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800d810:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800d814:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800d818:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000800d81c:	00150097 	move	$r23,$r4
  uint entcnt = 0;
900000000800d820:	29bf72c0 	st.w	$r0,$r22,-36(0xfdc)
  uint32 off = reloc_clus(entry->parent, entry->off, 0);
900000000800d824:	00150006 	move	$r6,$r0
900000000800d828:	28847085 	ld.w	$r5,$r4,284(0x11c)
900000000800d82c:	28c48084 	ld.d	$r4,$r4,288(0x120)
900000000800d830:	57ef8bff 	bl	-4216(0xfffef88) # 900000000800c7b8 <reloc_clus>
  rw_clus(entry->parent->cur_clus, 0, 0, (uint64)&entcnt, off, 1);
900000000800d834:	28c482ec 	ld.d	$r12,$r23,288(0x120)
900000000800d838:	02800409 	addi.w	$r9,$r0,1(0x1)
900000000800d83c:	00150088 	move	$r8,$r4
900000000800d840:	02ff72c7 	addi.d	$r7,$r22,-36(0xfdc)
900000000800d844:	00150006 	move	$r6,$r0
900000000800d848:	00150005 	move	$r5,$r0
900000000800d84c:	28843184 	ld.w	$r4,$r12,268(0x10c)
900000000800d850:	57f0b3ff 	bl	-3920(0xffff0b0) # 900000000800c900 <rw_clus>
  entcnt &= ~LAST_LONG_ENTRY;
900000000800d854:	28bf72c5 	ld.w	$r5,$r22,-36(0xfdc)
900000000800d858:	02befc0c 	addi.w	$r12,$r0,-65(0xfbf)
900000000800d85c:	0014b0a5 	and	$r5,$r5,$r12
900000000800d860:	29bf72c5 	st.w	$r5,$r22,-36(0xfdc)
  off = reloc_clus(entry->parent, entry->off + (entcnt << 5), 0);
900000000800d864:	004094a5 	slli.w	$r5,$r5,0x5
900000000800d868:	288472ec 	ld.w	$r12,$r23,284(0x11c)
900000000800d86c:	00150006 	move	$r6,$r0
900000000800d870:	001030a5 	add.w	$r5,$r5,$r12
900000000800d874:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800d878:	57ef43ff 	bl	-4288(0xfffef40) # 900000000800c7b8 <reloc_clus>
900000000800d87c:	00150098 	move	$r24,$r4
  rw_clus(entry->parent->cur_clus, 0, 0, (uint64)&de, off, sizeof(de));
900000000800d880:	28c482ec 	ld.d	$r12,$r23,288(0x120)
900000000800d884:	02808009 	addi.w	$r9,$r0,32(0x20)
900000000800d888:	00150308 	move	$r8,$r24
900000000800d88c:	02fee2c7 	addi.d	$r7,$r22,-72(0xfb8)
900000000800d890:	00150006 	move	$r6,$r0
900000000800d894:	00150005 	move	$r5,$r0
900000000800d898:	28843184 	ld.w	$r4,$r12,268(0x10c)
900000000800d89c:	57f067ff 	bl	-3996(0xffff064) # 900000000800c900 <rw_clus>
  de.sne.fst_clus_hi = (uint16)(entry->first_clus >> 16);
900000000800d8a0:	288412ec 	ld.w	$r12,$r23,260(0x104)
900000000800d8a4:	0044c18d 	srli.w	$r13,$r12,0x10
900000000800d8a8:	297f32cd 	st.h	$r13,$r22,-52(0xfcc)
  de.sne.fst_clus_lo = (uint16)(entry->first_clus & 0xffff);
900000000800d8ac:	297f4acc 	st.h	$r12,$r22,-46(0xfd2)
  de.sne.file_size = entry->file_size;
900000000800d8b0:	288422ec 	ld.w	$r12,$r23,264(0x108)
900000000800d8b4:	29bf52cc 	st.w	$r12,$r22,-44(0xfd4)
  rw_clus(entry->parent->cur_clus, 1, 0, (uint64)&de, off, sizeof(de));
900000000800d8b8:	28c482ec 	ld.d	$r12,$r23,288(0x120)
900000000800d8bc:	02808009 	addi.w	$r9,$r0,32(0x20)
900000000800d8c0:	00150308 	move	$r8,$r24
900000000800d8c4:	02fee2c7 	addi.d	$r7,$r22,-72(0xfb8)
900000000800d8c8:	00150006 	move	$r6,$r0
900000000800d8cc:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800d8d0:	28843184 	ld.w	$r4,$r12,268(0x10c)
900000000800d8d4:	57f02fff 	bl	-4052(0xffff02c) # 900000000800c900 <rw_clus>
  entry->dirty = 0;
900000000800d8d8:	290456e0 	st.b	$r0,$r23,277(0x115)
}
900000000800d8dc:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800d8e0:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800d8e4:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800d8e8:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800d8ec:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800d8f0:	4c000020 	jirl	$r0,$r1,0

900000000800d8f4 <eremove>:
  if (entry->valid != 1) {
900000000800d8f4:	2844588d 	ld.h	$r13,$r4,278(0x116)
900000000800d8f8:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800d8fc:	580009ac 	beq	$r13,$r12,8(0x8) # 900000000800d904 <eremove+0x10>
900000000800d900:	4c000020 	jirl	$r0,$r1,0
void eremove(struct dirent *entry) {
900000000800d904:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800d908:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800d90c:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800d910:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800d914:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800d918:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800d91c:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800d920:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800d924:	00150099 	move	$r25,$r4
  uint entcnt = 0;
900000000800d928:	29bf32c0 	st.w	$r0,$r22,-52(0xfcc)
  uint32 off = entry->off;
900000000800d92c:	2884709a 	ld.w	$r26,$r4,284(0x11c)
  uint32 off2 = reloc_clus(entry->parent, off, 0);
900000000800d930:	00150006 	move	$r6,$r0
900000000800d934:	00150345 	move	$r5,$r26
900000000800d938:	28c48084 	ld.d	$r4,$r4,288(0x120)
900000000800d93c:	57ee7fff 	bl	-4484(0xfffee7c) # 900000000800c7b8 <reloc_clus>
900000000800d940:	00150097 	move	$r23,$r4
  rw_clus(entry->parent->cur_clus, 0, 0, (uint64)&entcnt, off2, 1);
900000000800d944:	28c4832c 	ld.d	$r12,$r25,288(0x120)
900000000800d948:	02800409 	addi.w	$r9,$r0,1(0x1)
900000000800d94c:	001502e8 	move	$r8,$r23
900000000800d950:	02ff32c7 	addi.d	$r7,$r22,-52(0xfcc)
900000000800d954:	00150006 	move	$r6,$r0
900000000800d958:	00150005 	move	$r5,$r0
900000000800d95c:	28843184 	ld.w	$r4,$r12,268(0x10c)
900000000800d960:	57efa3ff 	bl	-4192(0xfffefa0) # 900000000800c900 <rw_clus>
  entcnt &= ~LAST_LONG_ENTRY;
900000000800d964:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000800d968:	02befc0d 	addi.w	$r13,$r0,-65(0xfbf)
900000000800d96c:	0014b58c 	and	$r12,$r12,$r13
900000000800d970:	29bf32cc 	st.w	$r12,$r22,-52(0xfcc)
  uint8 flag = EMPTY_ENTRY;
900000000800d974:	02bf940c 	addi.w	$r12,$r0,-27(0xfe5)
900000000800d978:	293f2ecc 	st.b	$r12,$r22,-53(0xfcb)
  for (int i = 0; i <= entcnt; i++) {
900000000800d97c:	00150018 	move	$r24,$r0
    rw_clus(entry->parent->cur_clus, 1, 0, (uint64)&flag, off2, 1);
900000000800d980:	28c4832c 	ld.d	$r12,$r25,288(0x120)
900000000800d984:	02800409 	addi.w	$r9,$r0,1(0x1)
900000000800d988:	001502e8 	move	$r8,$r23
900000000800d98c:	02ff2ec7 	addi.d	$r7,$r22,-53(0xfcb)
900000000800d990:	00150006 	move	$r6,$r0
900000000800d994:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800d998:	28843184 	ld.w	$r4,$r12,268(0x10c)
900000000800d99c:	57ef67ff 	bl	-4252(0xfffef64) # 900000000800c900 <rw_clus>
    off += 32;
900000000800d9a0:	0280835a 	addi.w	$r26,$r26,32(0x20)
    off2 = reloc_clus(entry->parent, off, 0);
900000000800d9a4:	00150006 	move	$r6,$r0
900000000800d9a8:	00150345 	move	$r5,$r26
900000000800d9ac:	28c48324 	ld.d	$r4,$r25,288(0x120)
900000000800d9b0:	57ee0bff 	bl	-4600(0xfffee08) # 900000000800c7b8 <reloc_clus>
900000000800d9b4:	00150097 	move	$r23,$r4
  for (int i = 0; i <= entcnt; i++) {
900000000800d9b8:	02800718 	addi.w	$r24,$r24,1(0x1)
900000000800d9bc:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000800d9c0:	6fffc198 	bgeu	$r12,$r24,-64(0x3ffc0) # 900000000800d980 <eremove+0x8c>
  entry->valid = -1;
900000000800d9c4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800d9c8:	29445b2c 	st.h	$r12,$r25,278(0x116)
}
900000000800d9cc:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800d9d0:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800d9d4:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800d9d8:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800d9dc:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800d9e0:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800d9e4:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800d9e8:	4c000020 	jirl	$r0,$r1,0

900000000800d9ec <etrunc>:
void etrunc(struct dirent *entry) {
900000000800d9ec:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800d9f0:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800d9f4:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800d9f8:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800d9fc:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800da00:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800da04:	29c0007a 	st.d	$r26,$r3,0
900000000800da08:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800da0c:	0015009a 	move	$r26,$r4
  for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
900000000800da10:	28841098 	ld.w	$r24,$r4,260(0x104)
900000000800da14:	02bffb0d 	addi.w	$r13,$r24,-2(0xffe)
900000000800da18:	141fffec 	lu12i.w	$r12,65535(0xffff)
900000000800da1c:	03bfd58c 	ori	$r12,$r12,0xff5
900000000800da20:	68002d8d 	bltu	$r12,$r13,44(0x2c) # 900000000800da4c <etrunc+0x60>
900000000800da24:	00150199 	move	$r25,$r12
    uint32 next = read_fat(clus);
900000000800da28:	00150304 	move	$r4,$r24
900000000800da2c:	57eaa7ff 	bl	-5468(0xfffeaa4) # 900000000800c4d0 <read_fat>
900000000800da30:	00150097 	move	$r23,$r4
static void free_clus(uint32 cluster) { write_fat(cluster, 0); }
900000000800da34:	00150005 	move	$r5,$r0
900000000800da38:	00150304 	move	$r4,$r24
900000000800da3c:	57ecc7ff 	bl	-4924(0xfffecc4) # 900000000800c700 <write_fat>
    clus = next;
900000000800da40:	001502f8 	move	$r24,$r23
  for (uint32 clus = entry->first_clus; clus >= 2 && clus < FAT32_EOC;) {
900000000800da44:	02bffaf7 	addi.w	$r23,$r23,-2(0xffe)
900000000800da48:	6fffe337 	bgeu	$r25,$r23,-32(0x3ffe0) # 900000000800da28 <etrunc+0x3c>
  entry->file_size = 0;
900000000800da4c:	29842340 	st.w	$r0,$r26,264(0x108)
  entry->first_clus = 0;
900000000800da50:	29841340 	st.w	$r0,$r26,260(0x104)
  entry->dirty = 1;
900000000800da54:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800da58:	2904574c 	st.b	$r12,$r26,277(0x115)
}
900000000800da5c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800da60:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800da64:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800da68:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800da6c:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800da70:	28c0007a 	ld.d	$r26,$r3,0
900000000800da74:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800da78:	4c000020 	jirl	$r0,$r1,0

900000000800da7c <etruncate>:
  if (len > entry->file_size) {
900000000800da7c:	2884208c 	ld.w	$r12,$r4,264(0x108)
900000000800da80:	6800f185 	bltu	$r12,$r5,240(0xf0) # 900000000800db70 <etruncate+0xf4>
int etruncate(struct dirent *entry, int len) {
900000000800da84:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800da88:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800da8c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800da90:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800da94:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800da98:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800da9c:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  entry->file_size = len;
900000000800daa0:	29842085 	st.w	$r5,$r4,264(0x108)
  if (len % fat.byts_per_clus) {
900000000800daa4:	1c0040cc 	pcaddu12i	$r12,518(0x206)
900000000800daa8:	02e5118c 	addi.d	$r12,$r12,-1724(0x944)
900000000800daac:	2880318d 	ld.w	$r13,$r12,12(0xc)
900000000800dab0:	0021b4ac 	mod.wu	$r12,$r5,$r13
900000000800dab4:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800dabc <etruncate+0x40>
900000000800dab8:	002a0007 	break	0x7
900000000800dabc:	40004d80 	beqz	$r12,76(0x4c) # 900000000800db08 <etruncate+0x8c>
    clus_num = len / fat.byts_per_clus + 1;
900000000800dac0:	002134ac 	div.wu	$r12,$r5,$r13
900000000800dac4:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800dacc <etruncate+0x50>
900000000800dac8:	002a0007 	break	0x7
900000000800dacc:	0280058c 	addi.w	$r12,$r12,1(0x1)
  for (clus = entry->first_clus;
900000000800dad0:	28841097 	ld.w	$r23,$r4,260(0x104)
900000000800dad4:	6400440c 	bge	$r0,$r12,68(0x44) # 900000000800db18 <etruncate+0x9c>
       i < clus_num && clus >= 2 && clus < FAT32_EOC;) {
900000000800dad8:	02bffaed 	addi.w	$r13,$r23,-2(0xffe)
900000000800dadc:	141fffec 	lu12i.w	$r12,65535(0xffff)
900000000800dae0:	03bfd58c 	ori	$r12,$r12,0xff5
900000000800dae4:	68001d8d 	bltu	$r12,$r13,28(0x1c) # 900000000800db00 <etruncate+0x84>
900000000800dae8:	00150198 	move	$r24,$r12
    uint32 next = read_fat(clus);
900000000800daec:	001502e4 	move	$r4,$r23
900000000800daf0:	57e9e3ff 	bl	-5664(0xfffe9e0) # 900000000800c4d0 <read_fat>
900000000800daf4:	00150097 	move	$r23,$r4
       i < clus_num && clus >= 2 && clus < FAT32_EOC;) {
900000000800daf8:	02bff88c 	addi.w	$r12,$r4,-2(0xffe)
900000000800dafc:	6ffff30c 	bgeu	$r24,$r12,-16(0x3fff0) # 900000000800daec <etruncate+0x70>
  return 0;
900000000800db00:	00150004 	move	$r4,$r0
900000000800db04:	50005000 	b	80(0x50) # 900000000800db54 <etruncate+0xd8>
    clus_num = len / fat.byts_per_clus;
900000000800db08:	002134ac 	div.wu	$r12,$r5,$r13
900000000800db0c:	5c0009a0 	bne	$r13,$r0,8(0x8) # 900000000800db14 <etruncate+0x98>
900000000800db10:	002a0007 	break	0x7
900000000800db14:	53ffbfff 	b	-68(0xfffffbc) # 900000000800dad0 <etruncate+0x54>
  for (; clus >= 2 && clus < FAT32_EOC;) {
900000000800db18:	02bffaed 	addi.w	$r13,$r23,-2(0xffe)
900000000800db1c:	141fffec 	lu12i.w	$r12,65535(0xffff)
900000000800db20:	03bfd58c 	ori	$r12,$r12,0xff5
900000000800db24:	6800558d 	bltu	$r12,$r13,84(0x54) # 900000000800db78 <etruncate+0xfc>
900000000800db28:	00150199 	move	$r25,$r12
    uint32 next = read_fat(clus);
900000000800db2c:	001502e4 	move	$r4,$r23
900000000800db30:	57e9a3ff 	bl	-5728(0xfffe9a0) # 900000000800c4d0 <read_fat>
900000000800db34:	00150098 	move	$r24,$r4
static void free_clus(uint32 cluster) { write_fat(cluster, 0); }
900000000800db38:	00150005 	move	$r5,$r0
900000000800db3c:	001502e4 	move	$r4,$r23
900000000800db40:	57ebc3ff 	bl	-5184(0xfffebc0) # 900000000800c700 <write_fat>
    clus = next;
900000000800db44:	00150317 	move	$r23,$r24
  for (; clus >= 2 && clus < FAT32_EOC;) {
900000000800db48:	02bffb18 	addi.w	$r24,$r24,-2(0xffe)
900000000800db4c:	6fffe338 	bgeu	$r25,$r24,-32(0x3ffe0) # 900000000800db2c <etruncate+0xb0>
  return 0;
900000000800db50:	00150004 	move	$r4,$r0
}
900000000800db54:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800db58:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800db5c:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800db60:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800db64:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800db68:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800db6c:	4c000020 	jirl	$r0,$r1,0
    return -1;
900000000800db70:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800db74:	4c000020 	jirl	$r0,$r1,0
  return 0;
900000000800db78:	00150004 	move	$r4,$r0
900000000800db7c:	53ffdbff 	b	-40(0xfffffd8) # 900000000800db54 <etruncate+0xd8>

900000000800db80 <elock>:
void elock(struct dirent *entry) {
900000000800db80:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800db84:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800db88:	29c00076 	st.d	$r22,$r3,0
900000000800db8c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  if (entry == 0 || entry->ref < 1)
900000000800db90:	40002480 	beqz	$r4,36(0x24) # 900000000800dbb4 <elock+0x34>
900000000800db94:	2884608c 	ld.w	$r12,$r4,280(0x118)
900000000800db98:	64001c0c 	bge	$r0,$r12,28(0x1c) # 900000000800dbb4 <elock+0x34>
  acquiresleep(&entry->lock);
900000000800db9c:	02c4e084 	addi.d	$r4,$r4,312(0x138)
900000000800dba0:	57e683ff 	bl	-6528(0xfffe680) # 900000000800c220 <acquiresleep>
}
900000000800dba4:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800dba8:	28c00076 	ld.d	$r22,$r3,0
900000000800dbac:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800dbb0:	4c000020 	jirl	$r0,$r1,0
    panic("elock");
900000000800dbb4:	1c0001a4 	pcaddu12i	$r4,13(0xd)
900000000800dbb8:	02f6b084 	addi.d	$r4,$r4,-596(0xdac)
900000000800dbbc:	57264bff 	bl	-55736(0xfff2648) # 9000000008000204 <panic>

900000000800dbc0 <eunlock>:
void eunlock(struct dirent *entry) {
900000000800dbc0:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800dbc4:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800dbc8:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800dbcc:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800dbd0:	29c00078 	st.d	$r24,$r3,0
900000000800dbd4:	02c08076 	addi.d	$r22,$r3,32(0x20)
  if (entry == 0 || !holdingsleep(&entry->lock) || entry->ref < 1)
900000000800dbd8:	40004080 	beqz	$r4,64(0x40) # 900000000800dc18 <eunlock+0x58>
900000000800dbdc:	00150097 	move	$r23,$r4
900000000800dbe0:	02c4e098 	addi.d	$r24,$r4,312(0x138)
900000000800dbe4:	00150304 	move	$r4,$r24
900000000800dbe8:	57e70bff 	bl	-6392(0xfffe708) # 900000000800c2f0 <holdingsleep>
900000000800dbec:	40002c80 	beqz	$r4,44(0x2c) # 900000000800dc18 <eunlock+0x58>
900000000800dbf0:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800dbf4:	6400240c 	bge	$r0,$r12,36(0x24) # 900000000800dc18 <eunlock+0x58>
  releasesleep(&entry->lock);
900000000800dbf8:	00150304 	move	$r4,$r24
900000000800dbfc:	57e69fff 	bl	-6500(0xfffe69c) # 900000000800c298 <releasesleep>
}
900000000800dc00:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800dc04:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800dc08:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800dc0c:	28c00078 	ld.d	$r24,$r3,0
900000000800dc10:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800dc14:	4c000020 	jirl	$r0,$r1,0
    panic("eunlock");
900000000800dc18:	1c0001a4 	pcaddu12i	$r4,13(0xd)
900000000800dc1c:	02f54084 	addi.d	$r4,$r4,-688(0xd50)
900000000800dc20:	5725e7ff 	bl	-55836(0xfff25e4) # 9000000008000204 <panic>

900000000800dc24 <eput>:
void eput(struct dirent *entry) {
900000000800dc24:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800dc28:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800dc2c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800dc30:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800dc34:	29c00078 	st.d	$r24,$r3,0
900000000800dc38:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800dc3c:	00150097 	move	$r23,$r4
  acquire(&ecache.lock);
900000000800dc40:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800dc44:	02c50084 	addi.d	$r4,$r4,320(0x140)
900000000800dc48:	57326bff 	bl	-52632(0xfff3268) # 9000000008000eb0 <acquire>
  if (entry != &root && entry->valid != 0 && entry->ref == 1) {
900000000800dc4c:	1c00402c 	pcaddu12i	$r12,513(0x201)
900000000800dc50:	02ff318c 	addi.d	$r12,$r12,-52(0xfcc)
900000000800dc54:	58001aec 	beq	$r23,$r12,24(0x18) # 900000000800dc6c <eput+0x48>
900000000800dc58:	28445aec 	ld.h	$r12,$r23,278(0x116)
900000000800dc5c:	40001180 	beqz	$r12,16(0x10) # 900000000800dc6c <eput+0x48>
900000000800dc60:	288462ed 	ld.w	$r13,$r23,280(0x118)
900000000800dc64:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800dc68:	580035ac 	beq	$r13,$r12,52(0x34) # 900000000800dc9c <eput+0x78>
  entry->ref--;
900000000800dc6c:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800dc70:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000800dc74:	298462ec 	st.w	$r12,$r23,280(0x118)
  release(&ecache.lock);
900000000800dc78:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800dc7c:	02c42084 	addi.d	$r4,$r4,264(0x108)
900000000800dc80:	573293ff 	bl	-52592(0xfff3290) # 9000000008000f10 <release>
}
900000000800dc84:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800dc88:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800dc8c:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800dc90:	28c00078 	ld.d	$r24,$r3,0
900000000800dc94:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800dc98:	4c000020 	jirl	$r0,$r1,0
    acquiresleep(&entry->lock);
900000000800dc9c:	02c4e2f8 	addi.d	$r24,$r23,312(0x138)
900000000800dca0:	00150304 	move	$r4,$r24
900000000800dca4:	57e57fff 	bl	-6788(0xfffe57c) # 900000000800c220 <acquiresleep>
    entry->next->prev = entry->prev;
900000000800dca8:	28c4a2ed 	ld.d	$r13,$r23,296(0x128)
900000000800dcac:	28c4c2ec 	ld.d	$r12,$r23,304(0x130)
900000000800dcb0:	29c4c1ac 	st.d	$r12,$r13,304(0x130)
    entry->prev->next = entry->next;
900000000800dcb4:	28c4a2ed 	ld.d	$r13,$r23,296(0x128)
900000000800dcb8:	29c4a18d 	st.d	$r13,$r12,296(0x128)
    entry->next = root.next;
900000000800dcbc:	1c00402c 	pcaddu12i	$r12,513(0x201)
900000000800dcc0:	02fd718c 	addi.d	$r12,$r12,-164(0xf5c)
900000000800dcc4:	28c4a18d 	ld.d	$r13,$r12,296(0x128)
900000000800dcc8:	29c4a2ed 	st.d	$r13,$r23,296(0x128)
    entry->prev = &root;
900000000800dccc:	29c4c2ec 	st.d	$r12,$r23,304(0x130)
    root.next->prev = entry;
900000000800dcd0:	29c4c1b7 	st.d	$r23,$r13,304(0x130)
    root.next = entry;
900000000800dcd4:	29c4a197 	st.d	$r23,$r12,296(0x128)
    release(&ecache.lock);
900000000800dcd8:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800dcdc:	02c2a084 	addi.d	$r4,$r4,168(0xa8)
900000000800dce0:	573233ff 	bl	-52688(0xfff3230) # 9000000008000f10 <release>
    if (entry->valid == -1) { // this means some one has called eremove()
900000000800dce4:	28445aed 	ld.h	$r13,$r23,278(0x116)
900000000800dce8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800dcec:	580061ac 	beq	$r13,$r12,96(0x60) # 900000000800dd4c <eput+0x128>
      elock(entry->parent);
900000000800dcf0:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800dcf4:	57fe8fff 	bl	-372(0xffffe8c) # 900000000800db80 <elock>
      eupdate(entry);
900000000800dcf8:	001502e4 	move	$r4,$r23
900000000800dcfc:	57faf3ff 	bl	-1296(0xffffaf0) # 900000000800d7ec <eupdate>
      eunlock(entry->parent);
900000000800dd00:	28c482e4 	ld.d	$r4,$r23,288(0x120)
900000000800dd04:	57febfff 	bl	-324(0xffffebc) # 900000000800dbc0 <eunlock>
    releasesleep(&entry->lock);
900000000800dd08:	00150304 	move	$r4,$r24
900000000800dd0c:	57e58fff 	bl	-6772(0xfffe58c) # 900000000800c298 <releasesleep>
    struct dirent *eparent = entry->parent;
900000000800dd10:	28c482f8 	ld.d	$r24,$r23,288(0x120)
    acquire(&ecache.lock);
900000000800dd14:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800dd18:	02c1b084 	addi.d	$r4,$r4,108(0x6c)
900000000800dd1c:	573197ff 	bl	-52844(0xfff3194) # 9000000008000eb0 <acquire>
    entry->ref--;
900000000800dd20:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800dd24:	02bffd8c 	addi.w	$r12,$r12,-1(0xfff)
900000000800dd28:	298462ec 	st.w	$r12,$r23,280(0x118)
    release(&ecache.lock);
900000000800dd2c:	1c004024 	pcaddu12i	$r4,513(0x201)
900000000800dd30:	02c15084 	addi.d	$r4,$r4,84(0x54)
900000000800dd34:	5731dfff 	bl	-52772(0xfff31dc) # 9000000008000f10 <release>
    if (entry->ref == 0) {
900000000800dd38:	288462ec 	ld.w	$r12,$r23,280(0x118)
900000000800dd3c:	47ff499f 	bnez	$r12,-184(0x7fff48) # 900000000800dc84 <eput+0x60>
      eput(eparent);
900000000800dd40:	00150304 	move	$r4,$r24
900000000800dd44:	57fee3ff 	bl	-288(0xffffee0) # 900000000800dc24 <eput>
900000000800dd48:	53ff3fff 	b	-196(0xfffff3c) # 900000000800dc84 <eput+0x60>
      etrunc(entry);
900000000800dd4c:	001502e4 	move	$r4,$r23
900000000800dd50:	57fc9fff 	bl	-868(0xffffc9c) # 900000000800d9ec <etrunc>
900000000800dd54:	53ffb7ff 	b	-76(0xfffffb4) # 900000000800dd08 <eput+0xe4>

900000000800dd58 <estat>:
void estat(struct dirent *de, struct stat *st) {
900000000800dd58:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800dd5c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800dd60:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800dd64:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800dd68:	29c00078 	st.d	$r24,$r3,0
900000000800dd6c:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800dd70:	00150098 	move	$r24,$r4
900000000800dd74:	001500b7 	move	$r23,$r5
  strncpy(st->name, de->filename, STAT_MAX_NAME);
900000000800dd78:	02808006 	addi.w	$r6,$r0,32(0x20)
900000000800dd7c:	00150085 	move	$r5,$r4
900000000800dd80:	001502e4 	move	$r4,$r23
900000000800dd84:	5733a7ff 	bl	-52316(0xfff33a4) # 9000000008001128 <strncpy>
  st->type = (de->attribute & ATTR_DIRECTORY) ? T_DIR : T_FILE;
900000000800dd88:	2a04030c 	ld.bu	$r12,$r24,256(0x100)
900000000800dd8c:	03c0418c 	xori	$r12,$r12,0x10
900000000800dd90:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800dd94:	02c0058c 	addi.d	$r12,$r12,1(0x1)
900000000800dd98:	2940a2ec 	st.h	$r12,$r23,40(0x28)
  st->dev = de->dev;
900000000800dd9c:	2a04530c 	ld.bu	$r12,$r24,276(0x114)
900000000800dda0:	298092ec 	st.w	$r12,$r23,36(0x24)
  st->size = de->file_size;
900000000800dda4:	2a84230c 	ld.wu	$r12,$r24,264(0x108)
900000000800dda8:	29c0c2ec 	st.d	$r12,$r23,48(0x30)
}
900000000800ddac:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800ddb0:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800ddb4:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800ddb8:	28c00078 	ld.d	$r24,$r3,0
900000000800ddbc:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800ddc0:	4c000020 	jirl	$r0,$r1,0

900000000800ddc4 <kstat>:
void kstat(struct dirent *de, struct kstat *kst) {
900000000800ddc4:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800ddc8:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800ddcc:	02c04076 	addi.d	$r22,$r3,16(0x10)
  kst->st_dev = 1;
900000000800ddd0:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800ddd4:	29c000ac 	st.d	$r12,$r5,0
  kst->st_ino = 0;
900000000800ddd8:	29c020a0 	st.d	$r0,$r5,8(0x8)
  kst->st_mode = 0;
900000000800dddc:	298040a0 	st.w	$r0,$r5,16(0x10)
  kst->st_nlink = 1;
900000000800dde0:	298050ac 	st.w	$r12,$r5,20(0x14)
  kst->st_uid = 0;
900000000800dde4:	298060a0 	st.w	$r0,$r5,24(0x18)
  kst->st_gid = 0;
900000000800dde8:	298070a0 	st.w	$r0,$r5,28(0x1c)
  kst->st_rdev = 0;
900000000800ddec:	29c080a0 	st.d	$r0,$r5,32(0x20)
  kst->__pad = 0;
900000000800ddf0:	29c0a0a0 	st.d	$r0,$r5,40(0x28)
  kst->st_size = de->file_size;
900000000800ddf4:	2a84208c 	ld.wu	$r12,$r4,264(0x108)
900000000800ddf8:	29c0c0ac 	st.d	$r12,$r5,48(0x30)
  kst->st_blksize = 512;
900000000800ddfc:	0288000c 	addi.w	$r12,$r0,512(0x200)
900000000800de00:	2980e0ac 	st.w	$r12,$r5,56(0x38)
  kst->__pad2 = 0;
900000000800de04:	2980f0a0 	st.w	$r0,$r5,60(0x3c)
  kst->st_blocks = 0;
900000000800de08:	29c100a0 	st.d	$r0,$r5,64(0x40)
  kst->st_atime_sec = 0;
900000000800de0c:	29c120a0 	st.d	$r0,$r5,72(0x48)
  kst->st_atime_nsec = 0;
900000000800de10:	29c140a0 	st.d	$r0,$r5,80(0x50)
  kst->st_mtime_sec = 0;
900000000800de14:	29c160a0 	st.d	$r0,$r5,88(0x58)
  kst->st_mtime_nsec = 0;
900000000800de18:	29c180a0 	st.d	$r0,$r5,96(0x60)
  kst->st_ctime_sec = 0;
900000000800de1c:	29c1a0a0 	st.d	$r0,$r5,104(0x68)
  kst->st_ctime_nsec = 0;
900000000800de20:	29c1c0a0 	st.d	$r0,$r5,112(0x70)
}
900000000800de24:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800de28:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800de2c:	4c000020 	jirl	$r0,$r1,0

900000000800de30 <ekstat>:
void ekstat(struct dirent *de, struct kstat *st) {
900000000800de30:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800de34:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800de38:	02c04076 	addi.d	$r22,$r3,16(0x10)
  st->st_dev = 0;
900000000800de3c:	29c000a0 	st.d	$r0,$r5,0
  if (NULL != de)
900000000800de40:	4000e080 	beqz	$r4,224(0xe0) # 900000000800df20 <ekstat+0xf0>
    st->st_size = de->file_size;
900000000800de44:	2a84208c 	ld.wu	$r12,$r4,264(0x108)
900000000800de48:	29c0c0ac 	st.d	$r12,$r5,48(0x30)
  st->st_blksize = 512; // Maybe it's right
900000000800de4c:	0288000d 	addi.w	$r13,$r0,512(0x200)
900000000800de50:	2980e0ad 	st.w	$r13,$r5,56(0x38)
  st->st_blocks = (st->st_size + st->st_blksize - 1) / st->st_blksize;
900000000800de54:	02c7fd8c 	addi.d	$r12,$r12,511(0x1ff)
900000000800de58:	0049258c 	srai.d	$r12,$r12,0x9
900000000800de5c:	29c100ac 	st.d	$r12,$r5,64(0x40)
  st->st_atime_nsec = 0;
900000000800de60:	29c140a0 	st.d	$r0,$r5,80(0x50)
  st->st_atime_sec = 0;
900000000800de64:	29c120a0 	st.d	$r0,$r5,72(0x48)
  st->st_ctime_nsec = 0;
900000000800de68:	29c1c0a0 	st.d	$r0,$r5,112(0x70)
  st->st_ctime_sec = 0;
900000000800de6c:	29c1a0a0 	st.d	$r0,$r5,104(0x68)
  st->st_mtime_nsec = 0;
900000000800de70:	29c180a0 	st.d	$r0,$r5,96(0x60)
  st->st_mtime_sec = 0;
900000000800de74:	29c160a0 	st.d	$r0,$r5,88(0x58)
  st->st_uid = 0;
900000000800de78:	298060a0 	st.w	$r0,$r5,24(0x18)
  st->st_gid = 0;
900000000800de7c:	298070a0 	st.w	$r0,$r5,28(0x1c)
    st->st_rdev = de->dev;
900000000800de80:	2a04508c 	ld.bu	$r12,$r4,276(0x114)
900000000800de84:	29c080ac 	st.d	$r12,$r5,32(0x20)
  st->st_nlink = 1;
900000000800de88:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800de8c:	298050ac 	st.w	$r12,$r5,20(0x14)
  for (int i = 0; name[i]; i++) {
900000000800de90:	28000090 	ld.b	$r16,$r4,0
    hashvalue += name[i];
900000000800de94:	0015020c 	move	$r12,$r16
    if (hashvalue > 1000000) {
900000000800de98:	02c0048d 	addi.d	$r13,$r4,1(0x1)
900000000800de9c:	14001e8f 	lu12i.w	$r15,244(0xf4)
900000000800dea0:	038901ef 	ori	$r15,$r15,0x240
      hashvalue = hashvalue % 1000000;
900000000800dea4:	14001e8e 	lu12i.w	$r14,244(0xf4)
900000000800dea8:	038901ce 	ori	$r14,$r14,0x240
  for (int i = 0; name[i]; i++) {
900000000800deac:	44004e00 	bnez	$r16,76(0x4c) # 900000000800def8 <ekstat+0xc8>
  int hashvalue = 0;
900000000800deb0:	0015000c 	move	$r12,$r0
    st->st_ino = hashpath(de->filename);
900000000800deb4:	29c020ac 	st.d	$r12,$r5,8(0x8)
  st->st_mode = 0;
900000000800deb8:	298040a0 	st.w	$r0,$r5,16(0x10)
    st->st_mode = (de->attribute & ATTR_DIRECTORY) ? S_IFDIR : S_IFREG;
900000000800debc:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800dec0:	0340418c 	andi	$r12,$r12,0x10
900000000800dec4:	1400008d 	lu12i.w	$r13,4(0x4)
900000000800dec8:	001331ad 	maskeqz	$r13,$r13,$r12
900000000800decc:	1400010e 	lu12i.w	$r14,8(0x8)
900000000800ded0:	0013b1cc 	masknez	$r12,$r14,$r12
900000000800ded4:	001531ac 	or	$r12,$r13,$r12
900000000800ded8:	298040ac 	st.w	$r12,$r5,16(0x10)
  st->st_mode |= 0x1ff;
900000000800dedc:	288040ac 	ld.w	$r12,$r5,16(0x10)
900000000800dee0:	0387fd8c 	ori	$r12,$r12,0x1ff
900000000800dee4:	298040ac 	st.w	$r12,$r5,16(0x10)
}
900000000800dee8:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800deec:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800def0:	4c000020 	jirl	$r0,$r1,0
900000000800def4:	02c005ad 	addi.d	$r13,$r13,1(0x1)
  for (int i = 0; name[i]; i++) {
900000000800def8:	280001b0 	ld.b	$r16,$r13,0
900000000800defc:	43ffba1f 	beqz	$r16,-72(0x7fffb8) # 900000000800deb4 <ekstat+0x84>
    hashvalue = hashvalue * 128;
900000000800df00:	00409d8c 	slli.w	$r12,$r12,0x7
    hashvalue += name[i];
900000000800df04:	0010320c 	add.w	$r12,$r16,$r12
    if (hashvalue > 1000000) {
900000000800df08:	67ffedec 	bge	$r15,$r12,-20(0x3ffec) # 900000000800def4 <ekstat+0xc4>
      hashvalue = hashvalue % 1000000;
900000000800df0c:	0020b990 	mod.w	$r16,$r12,$r14
900000000800df10:	5c0009c0 	bne	$r14,$r0,8(0x8) # 900000000800df18 <ekstat+0xe8>
900000000800df14:	002a0007 	break	0x7
900000000800df18:	0015020c 	move	$r12,$r16
900000000800df1c:	53ffdbff 	b	-40(0xfffffd8) # 900000000800def4 <ekstat+0xc4>
900000000800df20:	29c0c0a0 	st.d	$r0,$r5,48(0x30)
  st->st_blksize = 512; // Maybe it's right
900000000800df24:	0288000c 	addi.w	$r12,$r0,512(0x200)
900000000800df28:	2980e0ac 	st.w	$r12,$r5,56(0x38)
  st->st_blocks = (st->st_size + st->st_blksize - 1) / st->st_blksize;
900000000800df2c:	29c100a0 	st.d	$r0,$r5,64(0x40)
  st->st_atime_nsec = 0;
900000000800df30:	29c140a0 	st.d	$r0,$r5,80(0x50)
  st->st_atime_sec = 0;
900000000800df34:	29c120a0 	st.d	$r0,$r5,72(0x48)
  st->st_ctime_nsec = 0;
900000000800df38:	29c1c0a0 	st.d	$r0,$r5,112(0x70)
  st->st_ctime_sec = 0;
900000000800df3c:	29c1a0a0 	st.d	$r0,$r5,104(0x68)
  st->st_mtime_nsec = 0;
900000000800df40:	29c180a0 	st.d	$r0,$r5,96(0x60)
  st->st_mtime_sec = 0;
900000000800df44:	29c160a0 	st.d	$r0,$r5,88(0x58)
  st->st_uid = 0;
900000000800df48:	298060a0 	st.w	$r0,$r5,24(0x18)
  st->st_gid = 0;
900000000800df4c:	298070a0 	st.w	$r0,$r5,28(0x1c)
  if (NULL != de)
900000000800df50:	29c080a0 	st.d	$r0,$r5,32(0x20)
  st->st_nlink = 1;
900000000800df54:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800df58:	298050ac 	st.w	$r12,$r5,20(0x14)
    st->st_ino = 0;
900000000800df5c:	29c020a0 	st.d	$r0,$r5,8(0x8)
    st->st_mode = S_IFCHR;
900000000800df60:	1400004c 	lu12i.w	$r12,2(0x2)
900000000800df64:	298040ac 	st.w	$r12,$r5,16(0x10)
900000000800df68:	53ff77ff 	b	-140(0xfffff74) # 900000000800dedc <ekstat+0xac>

900000000800df6c <enext>:
int enext(struct dirent *dp, struct dirent *ep, uint off, int *count) {
900000000800df6c:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
900000000800df70:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000800df74:	29c20076 	st.d	$r22,$r3,128(0x80)
900000000800df78:	29c1e077 	st.d	$r23,$r3,120(0x78)
900000000800df7c:	29c1c078 	st.d	$r24,$r3,112(0x70)
900000000800df80:	29c1a079 	st.d	$r25,$r3,104(0x68)
900000000800df84:	29c1807a 	st.d	$r26,$r3,96(0x60)
900000000800df88:	29c1607b 	st.d	$r27,$r3,88(0x58)
900000000800df8c:	29c1407c 	st.d	$r28,$r3,80(0x50)
900000000800df90:	29c1207d 	st.d	$r29,$r3,72(0x48)
900000000800df94:	29c1007e 	st.d	$r30,$r3,64(0x40)
900000000800df98:	29c0e07f 	st.d	$r31,$r3,56(0x38)
900000000800df9c:	02c24076 	addi.d	$r22,$r3,144(0x90)
900000000800dfa0:	29fdc2c5 	st.d	$r5,$r22,-144(0xf70)
900000000800dfa4:	29fde2c7 	st.d	$r7,$r22,-136(0xf78)
  if (!(dp->attribute & ATTR_DIRECTORY))
900000000800dfa8:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800dfac:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800dfb0:	40005980 	beqz	$r12,88(0x58) # 900000000800e008 <enext+0x9c>
900000000800dfb4:	00150098 	move	$r24,$r4
900000000800dfb8:	001500d7 	move	$r23,$r6
  if (off % 32)
900000000800dfbc:	03407ccc 	andi	$r12,$r6,0x1f
900000000800dfc0:	44005580 	bnez	$r12,84(0x54) # 900000000800e014 <enext+0xa8>
  if (dp->valid != 1) {
900000000800dfc4:	2844588d 	ld.h	$r13,$r4,278(0x116)
900000000800dfc8:	0280040c 	addi.w	$r12,$r0,1(0x1)
    return -1;
900000000800dfcc:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
  if (dp->valid != 1) {
900000000800dfd0:	580051ac 	beq	$r13,$r12,80(0x50) # 900000000800e020 <enext+0xb4>
}
900000000800dfd4:	28c22061 	ld.d	$r1,$r3,136(0x88)
900000000800dfd8:	28c20076 	ld.d	$r22,$r3,128(0x80)
900000000800dfdc:	28c1e077 	ld.d	$r23,$r3,120(0x78)
900000000800dfe0:	28c1c078 	ld.d	$r24,$r3,112(0x70)
900000000800dfe4:	28c1a079 	ld.d	$r25,$r3,104(0x68)
900000000800dfe8:	28c1807a 	ld.d	$r26,$r3,96(0x60)
900000000800dfec:	28c1607b 	ld.d	$r27,$r3,88(0x58)
900000000800dff0:	28c1407c 	ld.d	$r28,$r3,80(0x50)
900000000800dff4:	28c1207d 	ld.d	$r29,$r3,72(0x48)
900000000800dff8:	28c1007e 	ld.d	$r30,$r3,64(0x40)
900000000800dffc:	28c0e07f 	ld.d	$r31,$r3,56(0x38)
900000000800e000:	02c24063 	addi.d	$r3,$r3,144(0x90)
900000000800e004:	4c000020 	jirl	$r0,$r1,0
    panic("enext not dir");
900000000800e008:	1c0001a4 	pcaddu12i	$r4,13(0xd)
900000000800e00c:	02e5a084 	addi.d	$r4,$r4,-1688(0x968)
900000000800e010:	5721f7ff 	bl	-56844(0xfff21f4) # 9000000008000204 <panic>
    panic("enext not align");
900000000800e014:	1c0001a4 	pcaddu12i	$r4,13(0xd)
900000000800e018:	02e5b084 	addi.d	$r4,$r4,-1684(0x96c)
900000000800e01c:	5721ebff 	bl	-56856(0xfff21e8) # 9000000008000204 <panic>
  memset(ep->filename, 0, FAT32_MAX_FILENAME + 1);
900000000800e020:	28fdc2c4 	ld.d	$r4,$r22,-144(0xf70)
900000000800e024:	0015009b 	move	$r27,$r4
900000000800e028:	02840006 	addi.w	$r6,$r0,256(0x100)
900000000800e02c:	00150005 	move	$r5,$r0
900000000800e030:	572f37ff 	bl	-53452(0xfff2f34) # 9000000008000f64 <memset>
  int cnt = 0;
900000000800e034:	00150019 	move	$r25,$r0
  for (int off2; (off2 = reloc_clus(dp, off, 0)) != -1; off += 32) {
900000000800e038:	02bffc1a 	addi.w	$r26,$r0,-1(0xfff)
    if (de.lne.order == EMPTY_ENTRY) {
900000000800e03c:	0283941c 	addi.w	$r28,$r0,229(0xe5)
    if (de.lne.attr == ATTR_LONG_NAME) {
900000000800e040:	02803c1d 	addi.w	$r29,$r0,15(0xf)
      int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
900000000800e044:	02befc1f 	addi.w	$r31,$r0,-65(0xfbf)
      read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
900000000800e048:	0280341e 	addi.w	$r30,$r0,13(0xd)
  for (int off2; (off2 = reloc_clus(dp, off, 0)) != -1; off += 32) {
900000000800e04c:	50003400 	b	52(0x34) # 900000000800e080 <enext+0x114>
      cnt++;
900000000800e050:	02800739 	addi.w	$r25,$r25,1(0x1)
      continue;
900000000800e054:	50002800 	b	40(0x28) # 900000000800e07c <enext+0x110>
      *count = cnt;
900000000800e058:	28fde2cc 	ld.d	$r12,$r22,-136(0xf78)
900000000800e05c:	29800199 	st.w	$r25,$r12,0
      return 0;
900000000800e060:	00150004 	move	$r4,$r0
900000000800e064:	53ff73ff 	b	-144(0xfffff70) # 900000000800dfd4 <enext+0x68>
      read_entry_name(ep->filename + (lcnt - 1) * CHAR_LONG_NAME, &de);
900000000800e068:	02bffc84 	addi.w	$r4,$r4,-1(0xfff)
900000000800e06c:	001c7884 	mul.w	$r4,$r4,$r30
900000000800e070:	02fe02c5 	addi.d	$r5,$r22,-128(0xf80)
900000000800e074:	00109364 	add.d	$r4,$r27,$r4
900000000800e078:	57eb6fff 	bl	-5268(0xfffeb6c) # 900000000800cbe4 <read_entry_name>
  for (int off2; (off2 = reloc_clus(dp, off, 0)) != -1; off += 32) {
900000000800e07c:	028082f7 	addi.w	$r23,$r23,32(0x20)
900000000800e080:	00150006 	move	$r6,$r0
900000000800e084:	001502e5 	move	$r5,$r23
900000000800e088:	00150304 	move	$r4,$r24
900000000800e08c:	57e72fff 	bl	-6356(0xfffe72c) # 900000000800c7b8 <reloc_clus>
900000000800e090:	5bff449a 	beq	$r4,$r26,-188(0x3ff44) # 900000000800dfd4 <enext+0x68>
    if (rw_clus(dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 ||
900000000800e094:	02808009 	addi.w	$r9,$r0,32(0x20)
900000000800e098:	00150088 	move	$r8,$r4
900000000800e09c:	02fe02c7 	addi.d	$r7,$r22,-128(0xf80)
900000000800e0a0:	00150006 	move	$r6,$r0
900000000800e0a4:	00150005 	move	$r5,$r0
900000000800e0a8:	28843304 	ld.w	$r4,$r24,268(0x10c)
900000000800e0ac:	57e857ff 	bl	-6060(0xfffe854) # 900000000800c900 <rw_clus>
900000000800e0b0:	0280800c 	addi.w	$r12,$r0,32(0x20)
900000000800e0b4:	5c00948c 	bne	$r4,$r12,148(0x94) # 900000000800e148 <enext+0x1dc>
        de.lne.order == END_OF_ENTRY) {
900000000800e0b8:	2a3e02cc 	ld.bu	$r12,$r22,-128(0xf80)
    if (rw_clus(dp->cur_clus, 0, 0, (uint64)&de, off2, 32) != 32 ||
900000000800e0bc:	40009580 	beqz	$r12,148(0x94) # 900000000800e150 <enext+0x1e4>
    if (de.lne.order == EMPTY_ENTRY) {
900000000800e0c0:	0015018d 	move	$r13,$r12
900000000800e0c4:	5bff8dbc 	beq	$r13,$r28,-116(0x3ff8c) # 900000000800e050 <enext+0xe4>
    } else if (cnt) {
900000000800e0c8:	47ff933f 	bnez	$r25,-112(0x7fff90) # 900000000800e058 <enext+0xec>
    if (de.lne.attr == ATTR_LONG_NAME) {
900000000800e0cc:	2a3e2ecd 	ld.bu	$r13,$r22,-117(0xf8b)
900000000800e0d0:	5c0025bd 	bne	$r13,$r29,36(0x24) # 900000000800e0f4 <enext+0x188>
      int lcnt = de.lne.order & ~LAST_LONG_ENTRY;
900000000800e0d4:	0014fd84 	and	$r4,$r12,$r31
      if (de.lne.order & LAST_LONG_ENTRY) {
900000000800e0d8:	00c6198c 	bstrpick.d	$r12,$r12,0x6,0x6
900000000800e0dc:	43ff8d9f 	beqz	$r12,-116(0x7fff8c) # 900000000800e068 <enext+0xfc>
        *count = lcnt + 1; // plus the s-n-e;
900000000800e0e0:	0280048c 	addi.w	$r12,$r4,1(0x1)
900000000800e0e4:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000800e0e8:	298001ac 	st.w	$r12,$r13,0
        count = 0;
900000000800e0ec:	29fde2c0 	st.d	$r0,$r22,-136(0xf78)
900000000800e0f0:	53ff7bff 	b	-136(0xfffff78) # 900000000800e068 <enext+0xfc>
      if (count) {
900000000800e0f4:	28fde2cd 	ld.d	$r13,$r22,-136(0xf78)
900000000800e0f8:	400019a0 	beqz	$r13,24(0x18) # 900000000800e110 <enext+0x1a4>
        *count = 1;
900000000800e0fc:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800e100:	298001ac 	st.w	$r12,$r13,0
        read_entry_name(ep->filename, &de);
900000000800e104:	02fe02c5 	addi.d	$r5,$r22,-128(0xf80)
900000000800e108:	28fdc2c4 	ld.d	$r4,$r22,-144(0xf70)
900000000800e10c:	57eadbff 	bl	-5416(0xfffead8) # 900000000800cbe4 <read_entry_name>
  entry->attribute = d->sne.attr;
900000000800e110:	2a3e2ecc 	ld.bu	$r12,$r22,-117(0xf8b)
900000000800e114:	28fdc2ce 	ld.d	$r14,$r22,-144(0xf70)
900000000800e118:	290401cc 	st.b	$r12,$r14,256(0x100)
  entry->first_clus = ((uint32)d->sne.fst_clus_hi << 16) | d->sne.fst_clus_lo;
900000000800e11c:	2a7e52cc 	ld.hu	$r12,$r22,-108(0xf94)
900000000800e120:	0040c18c 	slli.w	$r12,$r12,0x10
900000000800e124:	2a7e6acd 	ld.hu	$r13,$r22,-102(0xf9a)
900000000800e128:	0015358c 	or	$r12,$r12,$r13
900000000800e12c:	298411cc 	st.w	$r12,$r14,260(0x104)
  entry->file_size = d->sne.file_size;
900000000800e130:	28be72cd 	ld.w	$r13,$r22,-100(0xf9c)
900000000800e134:	298421cd 	st.w	$r13,$r14,264(0x108)
  entry->cur_clus = entry->first_clus;
900000000800e138:	298431cc 	st.w	$r12,$r14,268(0x10c)
  entry->clus_cnt = 0;
900000000800e13c:	298441c0 	st.w	$r0,$r14,272(0x110)
      return 1;
900000000800e140:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800e144:	53fe93ff 	b	-368(0xffffe90) # 900000000800dfd4 <enext+0x68>
      return -1;
900000000800e148:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800e14c:	53fe8bff 	b	-376(0xffffe88) # 900000000800dfd4 <enext+0x68>
900000000800e150:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800e154:	53fe83ff 	b	-384(0xffffe80) # 900000000800dfd4 <enext+0x68>

900000000800e158 <dirlookup>:
struct dirent *dirlookup(struct dirent *dp, char *filename, uint *poff) {
900000000800e158:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800e15c:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800e160:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800e164:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800e168:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800e16c:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800e170:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800e174:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800e178:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800e17c:	02c14076 	addi.d	$r22,$r3,80(0x50)
  if (!(dp->attribute & ATTR_DIRECTORY))
900000000800e180:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800e184:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800e188:	40005d80 	beqz	$r12,92(0x5c) # 900000000800e1e4 <dirlookup+0x8c>
900000000800e18c:	00150098 	move	$r24,$r4
900000000800e190:	001500b9 	move	$r25,$r5
900000000800e194:	001500db 	move	$r27,$r6
  if (strncmp(filename, ".", FAT32_MAX_FILENAME) == 0) {
900000000800e198:	0283fc06 	addi.w	$r6,$r0,255(0xff)
900000000800e19c:	1c0001a5 	pcaddu12i	$r5,13(0xd)
900000000800e1a0:	02e030a5 	addi.d	$r5,$r5,-2036(0x80c)
900000000800e1a4:	00150324 	move	$r4,$r25
900000000800e1a8:	572f0fff 	bl	-53492(0xfff2f0c) # 90000000080010b4 <strncmp>
900000000800e1ac:	40004480 	beqz	$r4,68(0x44) # 900000000800e1f0 <dirlookup+0x98>
  } else if (strncmp(filename, "..", FAT32_MAX_FILENAME) == 0) {
900000000800e1b0:	0283fc06 	addi.w	$r6,$r0,255(0xff)
900000000800e1b4:	1c000185 	pcaddu12i	$r5,12(0xc)
900000000800e1b8:	02dff0a5 	addi.d	$r5,$r5,2044(0x7fc)
900000000800e1bc:	00150324 	move	$r4,$r25
900000000800e1c0:	572ef7ff 	bl	-53516(0xfff2ef4) # 90000000080010b4 <strncmp>
900000000800e1c4:	44007480 	bnez	$r4,116(0x74) # 900000000800e238 <dirlookup+0xe0>
    if (dp == &root) {
900000000800e1c8:	1c00402c 	pcaddu12i	$r12,513(0x201)
900000000800e1cc:	02e9418c 	addi.d	$r12,$r12,-1456(0xa50)
900000000800e1d0:	58005b0c 	beq	$r24,$r12,88(0x58) # 900000000800e228 <dirlookup+0xd0>
    return edup(dp->parent);
900000000800e1d4:	28c48304 	ld.d	$r4,$r24,288(0x120)
900000000800e1d8:	57f5bfff 	bl	-2628(0xffff5bc) # 900000000800d794 <edup>
900000000800e1dc:	00150097 	move	$r23,$r4
900000000800e1e0:	50001c00 	b	28(0x1c) # 900000000800e1fc <dirlookup+0xa4>
    panic("dirlookup not DIR");
900000000800e1e4:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800e1e8:	02deb084 	addi.d	$r4,$r4,1964(0x7ac)
900000000800e1ec:	57201bff 	bl	-57320(0xfff2018) # 9000000008000204 <panic>
    return edup(dp);
900000000800e1f0:	00150304 	move	$r4,$r24
900000000800e1f4:	57f5a3ff 	bl	-2656(0xffff5a0) # 900000000800d794 <edup>
900000000800e1f8:	00150097 	move	$r23,$r4
}
900000000800e1fc:	001502e4 	move	$r4,$r23
900000000800e200:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800e204:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800e208:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800e20c:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800e210:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800e214:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800e218:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800e21c:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800e220:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800e224:	4c000020 	jirl	$r0,$r1,0
      return edup(&root);
900000000800e228:	00150184 	move	$r4,$r12
900000000800e22c:	57f56bff 	bl	-2712(0xffff568) # 900000000800d794 <edup>
900000000800e230:	00150097 	move	$r23,$r4
900000000800e234:	53ffcbff 	b	-56(0xfffffc8) # 900000000800e1fc <dirlookup+0xa4>
  if (dp->valid != 1) {
900000000800e238:	28445b0d 	ld.h	$r13,$r24,278(0x116)
900000000800e23c:	0280040c 	addi.w	$r12,$r0,1(0x1)
    return NULL;
900000000800e240:	00150017 	move	$r23,$r0
  if (dp->valid != 1) {
900000000800e244:	5fffb9ac 	bne	$r13,$r12,-72(0x3ffb8) # 900000000800e1fc <dirlookup+0xa4>
  struct dirent *ep = eget(dp, filename);
900000000800e248:	00150325 	move	$r5,$r25
900000000800e24c:	00150304 	move	$r4,$r24
900000000800e250:	57e857ff 	bl	-6060(0xfffe854) # 900000000800caa4 <eget>
900000000800e254:	00150097 	move	$r23,$r4
  if (ep->valid == 1) {
900000000800e258:	2844588d 	ld.h	$r13,$r4,278(0x116)
900000000800e25c:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800e260:	5bff9dac 	beq	$r13,$r12,-100(0x3ff9c) # 900000000800e1fc <dirlookup+0xa4>
  int len = strlen(filename);
900000000800e264:	00150324 	move	$r4,$r25
900000000800e268:	572f73ff 	bl	-53392(0xfff2f70) # 90000000080011d8 <strlen>
  int count = 0;
900000000800e26c:	29bef2c0 	st.w	$r0,$r22,-68(0xfbc)
  reloc_clus(dp, 0, 0);
900000000800e270:	00150006 	move	$r6,$r0
900000000800e274:	00150005 	move	$r5,$r0
900000000800e278:	00150304 	move	$r4,$r24
900000000800e27c:	57e53fff 	bl	-6852(0xfffe53c) # 900000000800c7b8 <reloc_clus>
  uint off = 0;
900000000800e280:	0015001a 	move	$r26,$r0
  while ((type = enext(dp, ep, off, &count) != -1)) {
900000000800e284:	02bffc1c 	addi.w	$r28,$r0,-1(0xfff)
900000000800e288:	02fef2c7 	addi.d	$r7,$r22,-68(0xfbc)
900000000800e28c:	00150346 	move	$r6,$r26
900000000800e290:	001502e5 	move	$r5,$r23
900000000800e294:	00150304 	move	$r4,$r24
900000000800e298:	57fcd7ff 	bl	-812(0xffffcd4) # 900000000800df6c <enext>
900000000800e29c:	5800449c 	beq	$r4,$r28,68(0x44) # 900000000800e2e0 <dirlookup+0x188>
    } else if (strncmp(filename, ep->filename, FAT32_MAX_FILENAME) == 0) {
900000000800e2a0:	0283fc06 	addi.w	$r6,$r0,255(0xff)
900000000800e2a4:	001502e5 	move	$r5,$r23
900000000800e2a8:	00150324 	move	$r4,$r25
900000000800e2ac:	572e0bff 	bl	-53752(0xfff2e08) # 90000000080010b4 <strncmp>
900000000800e2b0:	40001480 	beqz	$r4,20(0x14) # 900000000800e2c4 <dirlookup+0x16c>
    off += count << 5;
900000000800e2b4:	28bef2cc 	ld.w	$r12,$r22,-68(0xfbc)
900000000800e2b8:	0040958c 	slli.w	$r12,$r12,0x5
900000000800e2bc:	0010699a 	add.w	$r26,$r12,$r26
900000000800e2c0:	53ffcbff 	b	-56(0xfffffc8) # 900000000800e288 <dirlookup+0x130>
      ep->parent = edup(dp);
900000000800e2c4:	00150304 	move	$r4,$r24
900000000800e2c8:	57f4cfff 	bl	-2868(0xffff4cc) # 900000000800d794 <edup>
900000000800e2cc:	29c482e4 	st.d	$r4,$r23,288(0x120)
      ep->off = off;
900000000800e2d0:	298472fa 	st.w	$r26,$r23,284(0x11c)
      ep->valid = 1;
900000000800e2d4:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800e2d8:	29445aec 	st.h	$r12,$r23,278(0x116)
      return ep;
900000000800e2dc:	53ff23ff 	b	-224(0xfffff20) # 900000000800e1fc <dirlookup+0xa4>
  if (poff) {
900000000800e2e0:	40000b60 	beqz	$r27,8(0x8) # 900000000800e2e8 <dirlookup+0x190>
    *poff = off;
900000000800e2e4:	2980037a 	st.w	$r26,$r27,0
  eput(ep);
900000000800e2e8:	001502e4 	move	$r4,$r23
900000000800e2ec:	57f93bff 	bl	-1736(0xffff938) # 900000000800dc24 <eput>
  return NULL;
900000000800e2f0:	00150017 	move	$r23,$r0
900000000800e2f4:	53ff0bff 	b	-248(0xfffff08) # 900000000800e1fc <dirlookup+0xa4>

900000000800e2f8 <ealloc>:
struct dirent *ealloc(struct dirent *dp, char *name, int attr) {
900000000800e2f8:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800e2fc:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800e300:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800e304:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800e308:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800e30c:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800e310:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800e314:	02c10076 	addi.d	$r22,$r3,64(0x40)
  if (!(dp->attribute & ATTR_DIRECTORY)) {
900000000800e318:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800e31c:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800e320:	40007180 	beqz	$r12,112(0x70) # 900000000800e390 <ealloc+0x98>
900000000800e324:	00150098 	move	$r24,$r4
900000000800e328:	001500da 	move	$r26,$r6
  if (dp->valid != 1 ||
900000000800e32c:	2844588d 	ld.h	$r13,$r4,278(0x116)
900000000800e330:	0280040c 	addi.w	$r12,$r0,1(0x1)
    return NULL;
900000000800e334:	00150017 	move	$r23,$r0
  if (dp->valid != 1 ||
900000000800e338:	5c0035ac 	bne	$r13,$r12,52(0x34) # 900000000800e36c <ealloc+0x74>
      !(name = formatname(name))) { // detect illegal character
900000000800e33c:	001500a4 	move	$r4,$r5
900000000800e340:	57eedbff 	bl	-4392(0xfffeed8) # 900000000800d218 <formatname>
900000000800e344:	00150099 	move	$r25,$r4
    return NULL;
900000000800e348:	00150097 	move	$r23,$r4
  if (dp->valid != 1 ||
900000000800e34c:	40002080 	beqz	$r4,32(0x20) # 900000000800e36c <ealloc+0x74>
  uint off = 0;
900000000800e350:	29bf32c0 	st.w	$r0,$r22,-52(0xfcc)
  if ((ep = dirlookup(dp, name, &off)) != 0) { // entry exists
900000000800e354:	02ff32c6 	addi.d	$r6,$r22,-52(0xfcc)
900000000800e358:	00150085 	move	$r5,$r4
900000000800e35c:	00150304 	move	$r4,$r24
900000000800e360:	57fdfbff 	bl	-520(0xffffdf8) # 900000000800e158 <dirlookup>
900000000800e364:	00150097 	move	$r23,$r4
900000000800e368:	40003480 	beqz	$r4,52(0x34) # 900000000800e39c <ealloc+0xa4>
}
900000000800e36c:	001502e4 	move	$r4,$r23
900000000800e370:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800e374:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800e378:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800e37c:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800e380:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800e384:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800e388:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800e38c:	4c000020 	jirl	$r0,$r1,0
    panic("ealloc not dir");
900000000800e390:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800e394:	02d8a084 	addi.d	$r4,$r4,1576(0x628)
900000000800e398:	571e6fff 	bl	-57748(0xfff1e6c) # 9000000008000204 <panic>
  ep = eget(dp, name);
900000000800e39c:	00150325 	move	$r5,$r25
900000000800e3a0:	00150304 	move	$r4,$r24
900000000800e3a4:	57e703ff 	bl	-6400(0xfffe700) # 900000000800caa4 <eget>
900000000800e3a8:	00150097 	move	$r23,$r4
  elock(ep);
900000000800e3ac:	57f7d7ff 	bl	-2092(0xffff7d4) # 900000000800db80 <elock>
  ep->attribute = attr;
900000000800e3b0:	290402fa 	st.b	$r26,$r23,256(0x100)
  ep->file_size = 0;
900000000800e3b4:	298422e0 	st.w	$r0,$r23,264(0x108)
  ep->first_clus = 0;
900000000800e3b8:	298412e0 	st.w	$r0,$r23,260(0x104)
  ep->parent = edup(dp);
900000000800e3bc:	00150304 	move	$r4,$r24
900000000800e3c0:	57f3d7ff 	bl	-3116(0xffff3d4) # 900000000800d794 <edup>
900000000800e3c4:	29c482e4 	st.d	$r4,$r23,288(0x120)
  ep->off = off;
900000000800e3c8:	28bf32cc 	ld.w	$r12,$r22,-52(0xfcc)
900000000800e3cc:	298472ec 	st.w	$r12,$r23,284(0x11c)
  ep->clus_cnt = 0;
900000000800e3d0:	298442e0 	st.w	$r0,$r23,272(0x110)
  ep->cur_clus = 0;
900000000800e3d4:	298432e0 	st.w	$r0,$r23,268(0x10c)
  ep->dirty = 0;
900000000800e3d8:	290456e0 	st.b	$r0,$r23,277(0x115)
  strncpy(ep->filename, name, FAT32_MAX_FILENAME);
900000000800e3dc:	0283fc06 	addi.w	$r6,$r0,255(0xff)
900000000800e3e0:	00150325 	move	$r5,$r25
900000000800e3e4:	001502e4 	move	$r4,$r23
900000000800e3e8:	572d43ff 	bl	-53952(0xfff2d40) # 9000000008001128 <strncpy>
  ep->filename[FAT32_MAX_FILENAME] = '\0';
900000000800e3ec:	2903fee0 	st.b	$r0,$r23,255(0xff)
  if (attr == ATTR_DIRECTORY) { // generate "." and ".." for ep
900000000800e3f0:	0280400c 	addi.w	$r12,$r0,16(0x10)
900000000800e3f4:	5800374c 	beq	$r26,$r12,52(0x34) # 900000000800e428 <ealloc+0x130>
    ep->attribute |= ATTR_ARCHIVE;
900000000800e3f8:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
900000000800e3fc:	0380818c 	ori	$r12,$r12,0x20
900000000800e400:	290402ec 	st.b	$r12,$r23,256(0x100)
  emake(dp, ep, off);
900000000800e404:	28bf32c6 	ld.w	$r6,$r22,-52(0xfcc)
900000000800e408:	001502e5 	move	$r5,$r23
900000000800e40c:	00150304 	move	$r4,$r24
900000000800e410:	57ef33ff 	bl	-4304(0xfffef30) # 900000000800d340 <emake>
  ep->valid = 1;
900000000800e414:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800e418:	29445aec 	st.h	$r12,$r23,278(0x116)
  eunlock(ep);
900000000800e41c:	001502e4 	move	$r4,$r23
900000000800e420:	57f7a3ff 	bl	-2144(0xffff7a0) # 900000000800dbc0 <eunlock>
  return ep;
900000000800e424:	53ff4bff 	b	-184(0xfffff48) # 900000000800e36c <ealloc+0x74>
    ep->attribute |= ATTR_DIRECTORY;
900000000800e428:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
900000000800e42c:	0380418c 	ori	$r12,$r12,0x10
900000000800e430:	290402ec 	st.b	$r12,$r23,256(0x100)
    ep->cur_clus = ep->first_clus = alloc_clus(dp->dev);
900000000800e434:	2a045304 	ld.bu	$r4,$r24,276(0x114)
900000000800e438:	57e143ff 	bl	-7872(0xfffe140) # 900000000800c578 <alloc_clus>
900000000800e43c:	298412e4 	st.w	$r4,$r23,260(0x104)
900000000800e440:	298432e4 	st.w	$r4,$r23,268(0x10c)
    emake(ep, ep, 0);
900000000800e444:	00150006 	move	$r6,$r0
900000000800e448:	001502e5 	move	$r5,$r23
900000000800e44c:	001502e4 	move	$r4,$r23
900000000800e450:	57eef3ff 	bl	-4368(0xfffeef0) # 900000000800d340 <emake>
    emake(ep, dp, 32);
900000000800e454:	02808006 	addi.w	$r6,$r0,32(0x20)
900000000800e458:	00150305 	move	$r5,$r24
900000000800e45c:	001502e4 	move	$r4,$r23
900000000800e460:	57eee3ff 	bl	-4384(0xfffeee0) # 900000000800d340 <emake>
900000000800e464:	53ffa3ff 	b	-96(0xfffffa0) # 900000000800e404 <ealloc+0x10c>

900000000800e468 <new_lookup_path>:

// FAT32 version of namex in xv6's original file system.
struct dirent *new_lookup_path(struct dirent *env, char *path, int parent,
                               char *name) {
900000000800e468:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800e46c:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800e470:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800e474:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800e478:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800e47c:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800e480:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800e484:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800e488:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800e48c:	001500b8 	move	$r24,$r5
900000000800e490:	001500db 	move	$r27,$r6
900000000800e494:	001500fa 	move	$r26,$r7
  struct dirent *entry, *next;
  if (*path == '/') {
900000000800e498:	280000ac 	ld.b	$r12,$r5,0
900000000800e49c:	0015018e 	move	$r14,$r12
900000000800e4a0:	0280bc0d 	addi.w	$r13,$r0,47(0x2f)
900000000800e4a4:	580015cd 	beq	$r14,$r13,20(0x14) # 900000000800e4b8 <new_lookup_path+0x50>
    entry = edup(&root);
  } else if (env) {
900000000800e4a8:	40002480 	beqz	$r4,36(0x24) # 900000000800e4cc <new_lookup_path+0x64>
    entry = edup(env);
900000000800e4ac:	57f2ebff 	bl	-3352(0xffff2e8) # 900000000800d794 <edup>
900000000800e4b0:	00150097 	move	$r23,$r4
900000000800e4b4:	50009c00 	b	156(0x9c) # 900000000800e550 <new_lookup_path+0xe8>
    entry = edup(&root);
900000000800e4b8:	1c004004 	pcaddu12i	$r4,512(0x200)
900000000800e4bc:	02dd8084 	addi.d	$r4,$r4,1888(0x760)
900000000800e4c0:	57f2d7ff 	bl	-3372(0xffff2d4) # 900000000800d794 <edup>
900000000800e4c4:	00150097 	move	$r23,$r4
900000000800e4c8:	50008800 	b	136(0x88) # 900000000800e550 <new_lookup_path+0xe8>
  } else if (*path != '\0') {
    entry = edup(myproc()->cwd);
  } else {
    return NULL;
900000000800e4cc:	00150097 	move	$r23,$r4
  } else if (*path != '\0') {
900000000800e4d0:	40002d80 	beqz	$r12,44(0x2c) # 900000000800e4fc <new_lookup_path+0x94>
    entry = edup(myproc()->cwd);
900000000800e4d4:	573257ff 	bl	-52652(0xfff3254) # 9000000008001728 <myproc>
900000000800e4d8:	28d38084 	ld.d	$r4,$r4,1248(0x4e0)
900000000800e4dc:	57f2bbff 	bl	-3400(0xffff2b8) # 900000000800d794 <edup>
900000000800e4e0:	00150097 	move	$r23,$r4
900000000800e4e4:	50006c00 	b	108(0x6c) # 900000000800e550 <new_lookup_path+0xe8>
  }
  while ((path = skipelem(path, name)) != 0) {
    elock(entry);
    if (!(entry->attribute & ATTR_DIRECTORY)) {
      eunlock(entry);
900000000800e4e8:	001502e4 	move	$r4,$r23
900000000800e4ec:	57f6d7ff 	bl	-2348(0xffff6d4) # 900000000800dbc0 <eunlock>
      eput(entry);
900000000800e4f0:	001502e4 	move	$r4,$r23
900000000800e4f4:	57f733ff 	bl	-2256(0xffff730) # 900000000800dc24 <eput>
      return NULL;
900000000800e4f8:	00150017 	move	$r23,$r0
  if (parent) {
    eput(entry);
    return NULL;
  }
  return entry;
}
900000000800e4fc:	001502e4 	move	$r4,$r23
900000000800e500:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800e504:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800e508:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800e50c:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800e510:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800e514:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800e518:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800e51c:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800e520:	4c000020 	jirl	$r0,$r1,0
    if ((next = dirlookup(entry, name, 0)) == 0) {
900000000800e524:	00150006 	move	$r6,$r0
900000000800e528:	00150345 	move	$r5,$r26
900000000800e52c:	001502e4 	move	$r4,$r23
900000000800e530:	57fc2bff 	bl	-984(0xffffc28) # 900000000800e158 <dirlookup>
900000000800e534:	00150099 	move	$r25,$r4
900000000800e538:	40005880 	beqz	$r4,88(0x58) # 900000000800e590 <new_lookup_path+0x128>
    eunlock(entry);
900000000800e53c:	001502e4 	move	$r4,$r23
900000000800e540:	57f683ff 	bl	-2432(0xffff680) # 900000000800dbc0 <eunlock>
    eput(entry);
900000000800e544:	001502e4 	move	$r4,$r23
900000000800e548:	57f6dfff 	bl	-2340(0xffff6dc) # 900000000800dc24 <eput>
    entry = next;
900000000800e54c:	00150337 	move	$r23,$r25
  while ((path = skipelem(path, name)) != 0) {
900000000800e550:	00150345 	move	$r5,$r26
900000000800e554:	00150304 	move	$r4,$r24
900000000800e558:	57deabff 	bl	-8536(0xfffdea8) # 900000000800c400 <skipelem>
900000000800e55c:	00150098 	move	$r24,$r4
900000000800e560:	40004880 	beqz	$r4,72(0x48) # 900000000800e5a8 <new_lookup_path+0x140>
    elock(entry);
900000000800e564:	001502e4 	move	$r4,$r23
900000000800e568:	57f61bff 	bl	-2536(0xffff618) # 900000000800db80 <elock>
    if (!(entry->attribute & ATTR_DIRECTORY)) {
900000000800e56c:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
900000000800e570:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800e574:	43ff759f 	beqz	$r12,-140(0x7fff74) # 900000000800e4e8 <new_lookup_path+0x80>
    if (parent && *path == '\0') {
900000000800e578:	43ffaf7f 	beqz	$r27,-84(0x7fffac) # 900000000800e524 <new_lookup_path+0xbc>
900000000800e57c:	2800030c 	ld.b	$r12,$r24,0
900000000800e580:	47ffa59f 	bnez	$r12,-92(0x7fffa4) # 900000000800e524 <new_lookup_path+0xbc>
      eunlock(entry);
900000000800e584:	001502e4 	move	$r4,$r23
900000000800e588:	57f63bff 	bl	-2504(0xffff638) # 900000000800dbc0 <eunlock>
      return entry;
900000000800e58c:	53ff73ff 	b	-144(0xfffff70) # 900000000800e4fc <new_lookup_path+0x94>
      eunlock(entry);
900000000800e590:	001502e4 	move	$r4,$r23
900000000800e594:	57f62fff 	bl	-2516(0xffff62c) # 900000000800dbc0 <eunlock>
      eput(entry);
900000000800e598:	001502e4 	move	$r4,$r23
900000000800e59c:	57f68bff 	bl	-2424(0xffff688) # 900000000800dc24 <eput>
      return NULL;
900000000800e5a0:	00150337 	move	$r23,$r25
900000000800e5a4:	53ff5bff 	b	-168(0xfffff58) # 900000000800e4fc <new_lookup_path+0x94>
  if (parent) {
900000000800e5a8:	43ff577f 	beqz	$r27,-172(0x7fff54) # 900000000800e4fc <new_lookup_path+0x94>
    eput(entry);
900000000800e5ac:	001502e4 	move	$r4,$r23
900000000800e5b0:	57f677ff 	bl	-2444(0xffff674) # 900000000800dc24 <eput>
    return NULL;
900000000800e5b4:	00150317 	move	$r23,$r24
900000000800e5b8:	53ff47ff 	b	-188(0xfffff44) # 900000000800e4fc <new_lookup_path+0x94>

900000000800e5bc <lookup_path>:

// FAT32 version of namex in xv6's original file system.
struct dirent *lookup_path(char *path, int parent, char *name) {
900000000800e5bc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800e5c0:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800e5c4:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800e5c8:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800e5cc:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800e5d0:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800e5d4:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800e5d8:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800e5dc:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800e5e0:	00150098 	move	$r24,$r4
900000000800e5e4:	001500bb 	move	$r27,$r5
900000000800e5e8:	001500da 	move	$r26,$r6
  struct dirent *entry, *next;
  if (*path == '/') {
900000000800e5ec:	2800008c 	ld.b	$r12,$r4,0
900000000800e5f0:	0015018e 	move	$r14,$r12
900000000800e5f4:	0280bc0d 	addi.w	$r13,$r0,47(0x2f)
900000000800e5f8:	580021cd 	beq	$r14,$r13,32(0x20) # 900000000800e618 <lookup_path+0x5c>
    entry = edup(&root);
  } else if (*path != '\0') {
    entry = edup(myproc()->cwd);
  } else {
    return NULL;
900000000800e5fc:	00150017 	move	$r23,$r0
  } else if (*path != '\0') {
900000000800e600:	40004180 	beqz	$r12,64(0x40) # 900000000800e640 <lookup_path+0x84>
    entry = edup(myproc()->cwd);
900000000800e604:	573127ff 	bl	-52956(0xfff3124) # 9000000008001728 <myproc>
900000000800e608:	28d38084 	ld.d	$r4,$r4,1248(0x4e0)
900000000800e60c:	57f18bff 	bl	-3704(0xffff188) # 900000000800d794 <edup>
900000000800e610:	00150097 	move	$r23,$r4
900000000800e614:	50008000 	b	128(0x80) # 900000000800e694 <lookup_path+0xd8>
    entry = edup(&root);
900000000800e618:	1c004004 	pcaddu12i	$r4,512(0x200)
900000000800e61c:	02d80084 	addi.d	$r4,$r4,1536(0x600)
900000000800e620:	57f177ff 	bl	-3724(0xffff174) # 900000000800d794 <edup>
900000000800e624:	00150097 	move	$r23,$r4
900000000800e628:	50006c00 	b	108(0x6c) # 900000000800e694 <lookup_path+0xd8>
  }
  while ((path = skipelem(path, name)) != 0) {
    elock(entry);
    if (!(entry->attribute & ATTR_DIRECTORY)) {
      eunlock(entry);
900000000800e62c:	001502e4 	move	$r4,$r23
900000000800e630:	57f593ff 	bl	-2672(0xffff590) # 900000000800dbc0 <eunlock>
      eput(entry);
900000000800e634:	001502e4 	move	$r4,$r23
900000000800e638:	57f5efff 	bl	-2580(0xffff5ec) # 900000000800dc24 <eput>
      return NULL;
900000000800e63c:	00150017 	move	$r23,$r0
  if (parent) {
    eput(entry);
    return NULL;
  }
  return entry;
}
900000000800e640:	001502e4 	move	$r4,$r23
900000000800e644:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800e648:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800e64c:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800e650:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800e654:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800e658:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800e65c:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800e660:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800e664:	4c000020 	jirl	$r0,$r1,0
    if ((next = dirlookup(entry, name, 0)) == 0) {
900000000800e668:	00150006 	move	$r6,$r0
900000000800e66c:	00150345 	move	$r5,$r26
900000000800e670:	001502e4 	move	$r4,$r23
900000000800e674:	57fae7ff 	bl	-1308(0xffffae4) # 900000000800e158 <dirlookup>
900000000800e678:	00150099 	move	$r25,$r4
900000000800e67c:	40005880 	beqz	$r4,88(0x58) # 900000000800e6d4 <lookup_path+0x118>
    eunlock(entry);
900000000800e680:	001502e4 	move	$r4,$r23
900000000800e684:	57f53fff 	bl	-2756(0xffff53c) # 900000000800dbc0 <eunlock>
    eput(entry);
900000000800e688:	001502e4 	move	$r4,$r23
900000000800e68c:	57f59bff 	bl	-2664(0xffff598) # 900000000800dc24 <eput>
    entry = next;
900000000800e690:	00150337 	move	$r23,$r25
  while ((path = skipelem(path, name)) != 0) {
900000000800e694:	00150345 	move	$r5,$r26
900000000800e698:	00150304 	move	$r4,$r24
900000000800e69c:	57dd67ff 	bl	-8860(0xfffdd64) # 900000000800c400 <skipelem>
900000000800e6a0:	00150098 	move	$r24,$r4
900000000800e6a4:	40004880 	beqz	$r4,72(0x48) # 900000000800e6ec <lookup_path+0x130>
    elock(entry);
900000000800e6a8:	001502e4 	move	$r4,$r23
900000000800e6ac:	57f4d7ff 	bl	-2860(0xffff4d4) # 900000000800db80 <elock>
    if (!(entry->attribute & ATTR_DIRECTORY)) {
900000000800e6b0:	2a0402ec 	ld.bu	$r12,$r23,256(0x100)
900000000800e6b4:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800e6b8:	43ff759f 	beqz	$r12,-140(0x7fff74) # 900000000800e62c <lookup_path+0x70>
    if (parent && *path == '\0') {
900000000800e6bc:	43ffaf7f 	beqz	$r27,-84(0x7fffac) # 900000000800e668 <lookup_path+0xac>
900000000800e6c0:	2800030c 	ld.b	$r12,$r24,0
900000000800e6c4:	47ffa59f 	bnez	$r12,-92(0x7fffa4) # 900000000800e668 <lookup_path+0xac>
      eunlock(entry);
900000000800e6c8:	001502e4 	move	$r4,$r23
900000000800e6cc:	57f4f7ff 	bl	-2828(0xffff4f4) # 900000000800dbc0 <eunlock>
      return entry;
900000000800e6d0:	53ff73ff 	b	-144(0xfffff70) # 900000000800e640 <lookup_path+0x84>
      eunlock(entry);
900000000800e6d4:	001502e4 	move	$r4,$r23
900000000800e6d8:	57f4ebff 	bl	-2840(0xffff4e8) # 900000000800dbc0 <eunlock>
      eput(entry);
900000000800e6dc:	001502e4 	move	$r4,$r23
900000000800e6e0:	57f547ff 	bl	-2748(0xffff544) # 900000000800dc24 <eput>
      return NULL;
900000000800e6e4:	00150337 	move	$r23,$r25
900000000800e6e8:	53ff5bff 	b	-168(0xfffff58) # 900000000800e640 <lookup_path+0x84>
  if (parent) {
900000000800e6ec:	43ff577f 	beqz	$r27,-172(0x7fff54) # 900000000800e640 <lookup_path+0x84>
    eput(entry);
900000000800e6f0:	001502e4 	move	$r4,$r23
900000000800e6f4:	57f533ff 	bl	-2768(0xffff530) # 900000000800dc24 <eput>
    return NULL;
900000000800e6f8:	00150317 	move	$r23,$r24
900000000800e6fc:	53ff47ff 	b	-188(0xfffff44) # 900000000800e640 <lookup_path+0x84>

900000000800e700 <new_ename>:

struct dirent *new_ename(struct dirent *env, char *path) {
900000000800e700:	02fbc063 	addi.d	$r3,$r3,-272(0xef0)
900000000800e704:	29c42061 	st.d	$r1,$r3,264(0x108)
900000000800e708:	29c40076 	st.d	$r22,$r3,256(0x100)
900000000800e70c:	02c44076 	addi.d	$r22,$r3,272(0x110)
  char name[FAT32_MAX_FILENAME + 1];
  return new_lookup_path(env, path, 0, name);
900000000800e710:	02fbc2c7 	addi.d	$r7,$r22,-272(0xef0)
900000000800e714:	00150006 	move	$r6,$r0
900000000800e718:	57fd53ff 	bl	-688(0xffffd50) # 900000000800e468 <new_lookup_path>
}
900000000800e71c:	28c42061 	ld.d	$r1,$r3,264(0x108)
900000000800e720:	28c40076 	ld.d	$r22,$r3,256(0x100)
900000000800e724:	02c44063 	addi.d	$r3,$r3,272(0x110)
900000000800e728:	4c000020 	jirl	$r0,$r1,0

900000000800e72c <ename>:

struct dirent *ename(char *path) {
900000000800e72c:	02fbc063 	addi.d	$r3,$r3,-272(0xef0)
900000000800e730:	29c42061 	st.d	$r1,$r3,264(0x108)
900000000800e734:	29c40076 	st.d	$r22,$r3,256(0x100)
900000000800e738:	02c44076 	addi.d	$r22,$r3,272(0x110)
  char name[FAT32_MAX_FILENAME + 1];
  return lookup_path(path, 0, name);
900000000800e73c:	02fbc2c6 	addi.d	$r6,$r22,-272(0xef0)
900000000800e740:	00150005 	move	$r5,$r0
900000000800e744:	57fe7bff 	bl	-392(0xffffe78) # 900000000800e5bc <lookup_path>
}
900000000800e748:	28c42061 	ld.d	$r1,$r3,264(0x108)
900000000800e74c:	28c40076 	ld.d	$r22,$r3,256(0x100)
900000000800e750:	02c44063 	addi.d	$r3,$r3,272(0x110)
900000000800e754:	4c000020 	jirl	$r0,$r1,0

900000000800e758 <enameparent>:

struct dirent *enameparent(char *path, char *name) {
900000000800e758:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800e75c:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800e760:	29c00076 	st.d	$r22,$r3,0
900000000800e764:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return lookup_path(path, 1, name);
900000000800e768:	001500a6 	move	$r6,$r5
900000000800e76c:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800e770:	57fe4fff 	bl	-436(0xffffe4c) # 900000000800e5bc <lookup_path>
}
900000000800e774:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800e778:	28c00076 	ld.d	$r22,$r3,0
900000000800e77c:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800e780:	4c000020 	jirl	$r0,$r1,0

900000000800e784 <new_enameparent>:

struct dirent *new_enameparent(struct dirent *env, char *path, char *name) {
900000000800e784:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800e788:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800e78c:	29c00076 	st.d	$r22,$r3,0
900000000800e790:	02c04076 	addi.d	$r22,$r3,16(0x10)
  return new_lookup_path(env, path, 1, name);
900000000800e794:	001500c7 	move	$r7,$r6
900000000800e798:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800e79c:	57fccfff 	bl	-820(0xffffccc) # 900000000800e468 <new_lookup_path>
}
900000000800e7a0:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800e7a4:	28c00076 	ld.d	$r22,$r3,0
900000000800e7a8:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800e7ac:	4c000020 	jirl	$r0,$r1,0

900000000800e7b0 <new_create>:
  int parent_name_len = strlen(parent_name);
  strncpy(name, path + parent_name_len + 1, len - parent_name_len + 1);
}

struct dirent *new_create(struct dirent *env, char *path, short type,
                          int mode) {
900000000800e7b0:	02f70063 	addi.d	$r3,$r3,-576(0xdc0)
900000000800e7b4:	29c8e061 	st.d	$r1,$r3,568(0x238)
900000000800e7b8:	29c8c076 	st.d	$r22,$r3,560(0x230)
900000000800e7bc:	29c8a077 	st.d	$r23,$r3,552(0x228)
900000000800e7c0:	29c88078 	st.d	$r24,$r3,544(0x220)
900000000800e7c4:	29c86079 	st.d	$r25,$r3,536(0x218)
900000000800e7c8:	29c8407a 	st.d	$r26,$r3,528(0x210)
900000000800e7cc:	29c8207b 	st.d	$r27,$r3,520(0x208)
900000000800e7d0:	02c90076 	addi.d	$r22,$r3,576(0x240)
900000000800e7d4:	0015009b 	move	$r27,$r4
900000000800e7d8:	001500b9 	move	$r25,$r5
900000000800e7dc:	001500da 	move	$r26,$r6
  if (type == T_DIR) {
    mode = ATTR_DIRECTORY;
  } else if (mode & O_RDONLY) {
    mode = ATTR_READ_ONLY;
  } else {
    mode = 0;
900000000800e7e0:	03c004d8 	xori	$r24,$r6,0x1
900000000800e7e4:	02400718 	sltui	$r24,$r24,1(0x1)
900000000800e7e8:	00411318 	slli.d	$r24,$r24,0x4
  }

  if (NULL == (dp = new_enameparent(env, path, name))) {
900000000800e7ec:	02f702c6 	addi.d	$r6,$r22,-576(0xdc0)
900000000800e7f0:	57ff97ff 	bl	-108(0xfffff94) # 900000000800e784 <new_enameparent>
900000000800e7f4:	40008480 	beqz	$r4,132(0x84) # 900000000800e878 <new_create+0xc8>
900000000800e7f8:	00150097 	move	$r23,$r4
    dp = new_create(env, pname, T_DIR, O_RDWR);
    if (NULL == dp) {
      return NULL;
    }
  } else {
    elock(dp);
900000000800e7fc:	57f387ff 	bl	-3196(0xffff384) # 900000000800db80 <elock>
  }
  // 创建当前文件
  if (NULL == (ep = ealloc(dp, name, mode))) {
900000000800e800:	00150306 	move	$r6,$r24
900000000800e804:	02f702c5 	addi.d	$r5,$r22,-576(0xdc0)
900000000800e808:	001502e4 	move	$r4,$r23
900000000800e80c:	57faefff 	bl	-1300(0xffffaec) # 900000000800e2f8 <ealloc>
900000000800e810:	00150099 	move	$r25,$r4
900000000800e814:	40012c80 	beqz	$r4,300(0x12c) # 900000000800e940 <new_create+0x190>
    // 如果创建dirent失败，不仅要解锁，还有减少引用计数
    eunlock(dp);
    eput(dp);
    return NULL;
  }
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
900000000800e818:	0015034c 	move	$r12,$r26
900000000800e81c:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800e820:	5801358d 	beq	$r12,$r13,308(0x134) # 900000000800e954 <new_create+0x1a4>
900000000800e824:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800e828:	5c00134c 	bne	$r26,$r12,16(0x10) # 900000000800e838 <new_create+0x88>
      (type == T_FILE && (ep->attribute & ATTR_DIRECTORY))) {
900000000800e82c:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800e830:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800e834:	44012d80 	bnez	$r12,300(0x12c) # 900000000800e960 <new_create+0x1b0>
    eput(ep);
    eput(dp);
    return NULL;
  }

  eunlock(dp);
900000000800e838:	001502e4 	move	$r4,$r23
900000000800e83c:	57f387ff 	bl	-3196(0xffff384) # 900000000800dbc0 <eunlock>
  eput(dp);
900000000800e840:	001502e4 	move	$r4,$r23
900000000800e844:	57f3e3ff 	bl	-3104(0xffff3e0) # 900000000800dc24 <eput>
  elock(ep);
900000000800e848:	00150324 	move	$r4,$r25
900000000800e84c:	57f337ff 	bl	-3276(0xffff334) # 900000000800db80 <elock>
  // 返回上锁的dirent，因为之前执行了ealloc，所以引用计数不为0

  return ep;
}
900000000800e850:	00150324 	move	$r4,$r25
900000000800e854:	28c8e061 	ld.d	$r1,$r3,568(0x238)
900000000800e858:	28c8c076 	ld.d	$r22,$r3,560(0x230)
900000000800e85c:	28c8a077 	ld.d	$r23,$r3,552(0x228)
900000000800e860:	28c88078 	ld.d	$r24,$r3,544(0x220)
900000000800e864:	28c86079 	ld.d	$r25,$r3,536(0x218)
900000000800e868:	28c8407a 	ld.d	$r26,$r3,528(0x210)
900000000800e86c:	28c8207b 	ld.d	$r27,$r3,520(0x208)
900000000800e870:	02c90063 	addi.d	$r3,$r3,576(0x240)
900000000800e874:	4c000020 	jirl	$r0,$r1,0
  int len = strlen(path);
900000000800e878:	00150324 	move	$r4,$r25
900000000800e87c:	57295fff 	bl	-54948(0xfff295c) # 90000000080011d8 <strlen>
900000000800e880:	00150097 	move	$r23,$r4
  strncpy(parent_name, path, len + 1);
900000000800e884:	02800486 	addi.w	$r6,$r4,1(0x1)
900000000800e888:	00150325 	move	$r5,$r25
900000000800e88c:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
900000000800e890:	57289bff 	bl	-55144(0xfff2898) # 9000000008001128 <strncpy>
  int cur = len - 1;
900000000800e894:	02bffeed 	addi.w	$r13,$r23,-1(0xfff)
  if (parent_name[cur] == '/') {
900000000800e898:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
900000000800e89c:	0010b58c 	add.d	$r12,$r12,$r13
900000000800e8a0:	283c018e 	ld.b	$r14,$r12,-256(0xf00)
900000000800e8a4:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
900000000800e8a8:	580079cc 	beq	$r14,$r12,120(0x78) # 900000000800e920 <new_create+0x170>
  for (; cur >= 0; cur--) {
900000000800e8ac:	600031a0 	blt	$r13,$r0,48(0x30) # 900000000800e8dc <new_create+0x12c>
900000000800e8b0:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
900000000800e8b4:	0010b58c 	add.d	$r12,$r12,$r13
900000000800e8b8:	02fbfd8c 	addi.d	$r12,$r12,-257(0xeff)
    if (parent_name[cur] == '/') {
900000000800e8bc:	0280bc10 	addi.w	$r16,$r0,47(0x2f)
  for (; cur >= 0; cur--) {
900000000800e8c0:	02bffdad 	addi.w	$r13,$r13,-1(0xfff)
900000000800e8c4:	600019a0 	blt	$r13,$r0,24(0x18) # 900000000800e8dc <new_create+0x12c>
    if (parent_name[cur] == '/') {
900000000800e8c8:	0015018f 	move	$r15,$r12
900000000800e8cc:	02fffd8c 	addi.d	$r12,$r12,-1(0xfff)
900000000800e8d0:	2800058e 	ld.b	$r14,$r12,1(0x1)
900000000800e8d4:	5fffedd0 	bne	$r14,$r16,-20(0x3ffec) # 900000000800e8c0 <new_create+0x110>
      parent_name[cur] = 0;
900000000800e8d8:	290001e0 	st.b	$r0,$r15,0
  int parent_name_len = strlen(parent_name);
900000000800e8dc:	02fb02c4 	addi.d	$r4,$r22,-320(0xec0)
900000000800e8e0:	5728fbff 	bl	-55048(0xfff28f8) # 90000000080011d8 <strlen>
  strncpy(name, path + parent_name_len + 1, len - parent_name_len + 1);
900000000800e8e4:	001112e6 	sub.w	$r6,$r23,$r4
900000000800e8e8:	02c00484 	addi.d	$r4,$r4,1(0x1)
900000000800e8ec:	028004c6 	addi.w	$r6,$r6,1(0x1)
900000000800e8f0:	00109325 	add.d	$r5,$r25,$r4
900000000800e8f4:	02f702c4 	addi.d	$r4,$r22,-576(0xdc0)
900000000800e8f8:	572833ff 	bl	-55248(0xfff2830) # 9000000008001128 <strncpy>
    dp = new_create(env, pname, T_DIR, O_RDWR);
900000000800e8fc:	02800807 	addi.w	$r7,$r0,2(0x2)
900000000800e900:	02800406 	addi.w	$r6,$r0,1(0x1)
900000000800e904:	02fb02c5 	addi.d	$r5,$r22,-320(0xec0)
900000000800e908:	00150364 	move	$r4,$r27
900000000800e90c:	57fea7ff 	bl	-348(0xffffea4) # 900000000800e7b0 <new_create>
900000000800e910:	00150097 	move	$r23,$r4
      return NULL;
900000000800e914:	00150099 	move	$r25,$r4
    if (NULL == dp) {
900000000800e918:	47fee89f 	bnez	$r4,-280(0x7ffee8) # 900000000800e800 <new_create+0x50>
900000000800e91c:	53ff37ff 	b	-204(0xfffff34) # 900000000800e850 <new_create+0xa0>
    cur--;
900000000800e920:	02bffaed 	addi.w	$r13,$r23,-2(0xffe)
  for (; cur >= 0; cur--) {
900000000800e924:	63ffb9a0 	blt	$r13,$r0,-72(0x3ffb8) # 900000000800e8dc <new_create+0x12c>
    if (parent_name[cur] == '/') {
900000000800e928:	02fb02cc 	addi.d	$r12,$r22,-320(0xec0)
900000000800e92c:	0010b58f 	add.d	$r15,$r12,$r13
900000000800e930:	280001ee 	ld.b	$r14,$r15,0
900000000800e934:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
900000000800e938:	5fff79cc 	bne	$r14,$r12,-136(0x3ff78) # 900000000800e8b0 <new_create+0x100>
900000000800e93c:	53ff9fff 	b	-100(0xfffff9c) # 900000000800e8d8 <new_create+0x128>
    eunlock(dp);
900000000800e940:	001502e4 	move	$r4,$r23
900000000800e944:	57f27fff 	bl	-3460(0xffff27c) # 900000000800dbc0 <eunlock>
    eput(dp);
900000000800e948:	001502e4 	move	$r4,$r23
900000000800e94c:	57f2dbff 	bl	-3368(0xffff2d8) # 900000000800dc24 <eput>
    return NULL;
900000000800e950:	53ff03ff 	b	-256(0xfffff00) # 900000000800e850 <new_create+0xa0>
  if ((type == T_DIR && !(ep->attribute & ATTR_DIRECTORY)) ||
900000000800e954:	2a04008c 	ld.bu	$r12,$r4,256(0x100)
900000000800e958:	00c4118c 	bstrpick.d	$r12,$r12,0x4,0x4
900000000800e95c:	47fedd9f 	bnez	$r12,-292(0x7ffedc) # 900000000800e838 <new_create+0x88>
    eunlock(dp);
900000000800e960:	001502e4 	move	$r4,$r23
900000000800e964:	57f25fff 	bl	-3492(0xffff25c) # 900000000800dbc0 <eunlock>
    eput(ep);
900000000800e968:	00150324 	move	$r4,$r25
900000000800e96c:	57f2bbff 	bl	-3400(0xffff2b8) # 900000000800dc24 <eput>
    eput(dp);
900000000800e970:	001502e4 	move	$r4,$r23
900000000800e974:	57f2b3ff 	bl	-3408(0xffff2b0) # 900000000800dc24 <eput>
    return NULL;
900000000800e978:	00150019 	move	$r25,$r0
900000000800e97c:	53fed7ff 	b	-300(0xffffed4) # 900000000800e850 <new_create+0xa0>

900000000800e980 <timerinit>:
uint ticks;
// 定时器池
timer timers[NTIMERS];
int hastimer = 0;

void timerinit() {
900000000800e980:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800e984:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800e988:	29c00076 	st.d	$r22,$r3,0
900000000800e98c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&tickslock, "time");
900000000800e990:	1c0000e5 	pcaddu12i	$r5,7(0x7)
900000000800e994:	02f460a5 	addi.d	$r5,$r5,-744(0xd18)
900000000800e998:	1c0040a4 	pcaddu12i	$r4,517(0x205)
900000000800e99c:	02f1a084 	addi.d	$r4,$r4,-920(0xc68)
900000000800e9a0:	5724a7ff 	bl	-56156(0xfff24a4) # 9000000008000e44 <initlock>
  memset(timers, 0, sizeof(timers));
900000000800e9a4:	02878006 	addi.w	$r6,$r0,480(0x1e0)
900000000800e9a8:	00150005 	move	$r5,$r0
900000000800e9ac:	1c0040a4 	pcaddu12i	$r4,517(0x205)
900000000800e9b0:	02e9b084 	addi.d	$r4,$r4,-1428(0xa6c)
900000000800e9b4:	5725b3ff 	bl	-55888(0xfff25b0) # 9000000008000f64 <memset>
  ticks = 0;
900000000800e9b8:	1c0040ac 	pcaddu12i	$r12,517(0x205)
900000000800e9bc:	02f1018c 	addi.d	$r12,$r12,-960(0xc40)
900000000800e9c0:	29800180 	st.w	$r0,$r12,0
  hastimer = 0;
900000000800e9c4:	1c0040ac 	pcaddu12i	$r12,517(0x205)
900000000800e9c8:	02e9318c 	addi.d	$r12,$r12,-1460(0xa4c)
900000000800e9cc:	29800180 	st.w	$r0,$r12,0
#ifdef DEBUG
  printf("timerinit\n");
900000000800e9d0:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800e9d4:	02c00084 	addi.d	$r4,$r4,0
900000000800e9d8:	57189fff 	bl	-59236(0xfff189c) # 9000000008000274 <printf>
#endif
}
900000000800e9dc:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800e9e0:	28c00076 	ld.d	$r22,$r3,0
900000000800e9e4:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800e9e8:	4c000020 	jirl	$r0,$r1,0

900000000800e9ec <sys_times>:
//     }
//   }
// }

// 进程的时间统计信息
uint64 sys_times() {
900000000800e9ec:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800e9f0:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000800e9f4:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000800e9f8:	29c12077 	st.d	$r23,$r3,72(0x48)
900000000800e9fc:	29c10078 	st.d	$r24,$r3,64(0x40)
900000000800ea00:	29c0e079 	st.d	$r25,$r3,56(0x38)
900000000800ea04:	29c0c07a 	st.d	$r26,$r3,48(0x30)
900000000800ea08:	02c18076 	addi.d	$r22,$r3,96(0x60)
  struct tms ptms;
  uint64 utms;
  argaddr(0, &utms);
900000000800ea0c:	02fea2c5 	addi.d	$r5,$r22,-88(0xfa8)
900000000800ea10:	00150004 	move	$r4,$r0
900000000800ea14:	577d0fff 	bl	-33524(0xfff7d0c) # 9000000008006720 <argaddr>
  ptms.tms_utime = myproc()->utime;
900000000800ea18:	572d13ff 	bl	-54000(0xfff2d10) # 9000000008001728 <myproc>
900000000800ea1c:	2894308c 	ld.w	$r12,$r4,1292(0x50c)
900000000800ea20:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
  ptms.tms_stime = myproc()->ktime;
900000000800ea24:	572d07ff 	bl	-54012(0xfff2d04) # 9000000008001728 <myproc>
900000000800ea28:	2894208c 	ld.w	$r12,$r4,1288(0x508)
900000000800ea2c:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
  ptms.tms_cstime = 1;
900000000800ea30:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800ea34:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
  ptms.tms_cutime = 1;
900000000800ea38:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
  struct proc *p;
  for (p = proc; p < proc + NPROC; p++) {
900000000800ea3c:	1c000237 	pcaddu12i	$r23,17(0x11)
900000000800ea40:	28d912f7 	ld.d	$r23,$r23,1604(0x644)
900000000800ea44:	03ad201a 	ori	$r26,$r0,0xb48
900000000800ea48:	1c000199 	pcaddu12i	$r25,12(0xc)
900000000800ea4c:	02fe6339 	addi.d	$r25,$r25,-104(0xf98)
900000000800ea50:	50003800 	b	56(0x38) # 900000000800ea88 <sys_times+0x9c>
    acquire(&p->lock);
    if (p->parent == myproc()) {
      ptms.tms_cutime += p->utime;
900000000800ea54:	289432ed 	ld.w	$r13,$r23,1292(0x50c)
900000000800ea58:	28ff02cc 	ld.d	$r12,$r22,-64(0xfc0)
900000000800ea5c:	0010b58c 	add.d	$r12,$r12,$r13
900000000800ea60:	29ff02cc 	st.d	$r12,$r22,-64(0xfc0)
      ptms.tms_cstime += p->ktime;
900000000800ea64:	289422ed 	ld.w	$r13,$r23,1288(0x508)
900000000800ea68:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
900000000800ea6c:	0010b58c 	add.d	$r12,$r12,$r13
900000000800ea70:	29ff22cc 	st.d	$r12,$r22,-56(0xfc8)
    }
    release(&p->lock);
900000000800ea74:	001502e4 	move	$r4,$r23
900000000800ea78:	57249bff 	bl	-56168(0xfff2498) # 9000000008000f10 <release>
  for (p = proc; p < proc + NPROC; p++) {
900000000800ea7c:	0010eaf7 	add.d	$r23,$r23,$r26
900000000800ea80:	28c0032c 	ld.d	$r12,$r25,0
900000000800ea84:	58001eec 	beq	$r23,$r12,28(0x1c) # 900000000800eaa0 <sys_times+0xb4>
    acquire(&p->lock);
900000000800ea88:	001502e4 	move	$r4,$r23
900000000800ea8c:	572427ff 	bl	-56284(0xfff2424) # 9000000008000eb0 <acquire>
    if (p->parent == myproc()) {
900000000800ea90:	28c082f8 	ld.d	$r24,$r23,32(0x20)
900000000800ea94:	572c97ff 	bl	-54124(0xfff2c94) # 9000000008001728 <myproc>
900000000800ea98:	5fffdf04 	bne	$r24,$r4,-36(0x3ffdc) # 900000000800ea74 <sys_times+0x88>
900000000800ea9c:	53ffbbff 	b	-72(0xfffffb8) # 900000000800ea54 <sys_times+0x68>
  }
  copyout(myproc()->pagetable, utms, (char *)&ptms, sizeof(ptms));
900000000800eaa0:	572c8bff 	bl	-54136(0xfff2c88) # 9000000008001728 <myproc>
900000000800eaa4:	02808007 	addi.w	$r7,$r0,32(0x20)
900000000800eaa8:	02fec2c6 	addi.d	$r6,$r22,-80(0xfb0)
900000000800eaac:	28fea2c5 	ld.d	$r5,$r22,-88(0xfa8)
900000000800eab0:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800eab4:	5753dbff 	bl	-44072(0xfff53d8) # 9000000008003e8c <copyout>
  return 0;
}
900000000800eab8:	00150004 	move	$r4,$r0
900000000800eabc:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000800eac0:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000800eac4:	28c12077 	ld.d	$r23,$r3,72(0x48)
900000000800eac8:	28c10078 	ld.d	$r24,$r3,64(0x40)
900000000800eacc:	28c0e079 	ld.d	$r25,$r3,56(0x38)
900000000800ead0:	28c0c07a 	ld.d	$r26,$r3,48(0x30)
900000000800ead4:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000800ead8:	4c000020 	jirl	$r0,$r1,0

900000000800eadc <setitimer>:

uint64 setitimer(int which, const struct itimerval *value,
                 struct itimerval *ovalue) {
900000000800eadc:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800eae0:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800eae4:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800eae8:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800eaec:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800eaf0:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800eaf4:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800eaf8:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800eafc:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800eb00:	00150099 	move	$r25,$r4
900000000800eb04:	001500b8 	move	$r24,$r5
900000000800eb08:	001500da 	move	$r26,$r6
  int pid = myproc()->pid;
900000000800eb0c:	572c1fff 	bl	-54244(0xfff2c1c) # 9000000008001728 <myproc>
900000000800eb10:	2880e097 	ld.w	$r23,$r4,56(0x38)
  struct timer *timer = NULL;
  for (int i = 0; i < NTIMERS; i++) {
900000000800eb14:	1c0040ac 	pcaddu12i	$r12,517(0x205)
900000000800eb18:	02e4118c 	addi.d	$r12,$r12,-1788(0x904)
900000000800eb1c:	02c0818c 	addi.d	$r12,$r12,32(0x20)
900000000800eb20:	0015000d 	move	$r13,$r0
900000000800eb24:	0280280f 	addi.w	$r15,$r0,10(0xa)
900000000800eb28:	50001000 	b	16(0x10) # 900000000800eb38 <setitimer+0x5c>
900000000800eb2c:	028005ad 	addi.w	$r13,$r13,1(0x1)
900000000800eb30:	02c0c18c 	addi.d	$r12,$r12,48(0x30)
900000000800eb34:	580049af 	beq	$r13,$r15,72(0x48) # 900000000800eb7c <setitimer+0xa0>
    if (timers[i].pid == pid && timers[i].which == which) {
900000000800eb38:	2880118e 	ld.w	$r14,$r12,4(0x4)
900000000800eb3c:	5ffff1d7 	bne	$r14,$r23,-16(0x3fff0) # 900000000800eb2c <setitimer+0x50>
900000000800eb40:	2880018e 	ld.w	$r14,$r12,0
900000000800eb44:	5fffe9d9 	bne	$r14,$r25,-24(0x3ffe8) # 900000000800eb2c <setitimer+0x50>
      timer = &timers[i];
900000000800eb48:	0280c00c 	addi.w	$r12,$r0,48(0x30)
900000000800eb4c:	001db1ad 	mul.d	$r13,$r13,$r12
900000000800eb50:	1c0040bb 	pcaddu12i	$r27,517(0x205)
900000000800eb54:	02e3237b 	addi.d	$r27,$r27,-1848(0x8c8)
900000000800eb58:	0010b77b 	add.d	$r27,$r27,$r13
      break;
    }
  }
  if (ovalue != NULL && timer != NULL) {
900000000800eb5c:	40002740 	beqz	$r26,36(0x24) # 900000000800eb80 <setitimer+0xa4>
    copyout(myproc()->pagetable, (uint64)ovalue, (char *)&((timer->itimer)),
900000000800eb60:	572bcbff 	bl	-54328(0xfff2bc8) # 9000000008001728 <myproc>
900000000800eb64:	02808007 	addi.w	$r7,$r0,32(0x20)
900000000800eb68:	00150366 	move	$r6,$r27
900000000800eb6c:	00150345 	move	$r5,$r26
900000000800eb70:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800eb74:	57531bff 	bl	-44264(0xfff5318) # 9000000008003e8c <copyout>
900000000800eb78:	50000800 	b	8(0x8) # 900000000800eb80 <setitimer+0xa4>
  struct timer *timer = NULL;
900000000800eb7c:	0015001b 	move	$r27,$r0
            sizeof(struct itimerval));
  }

  if (value != NULL) {
900000000800eb80:	40007300 	beqz	$r24,112(0x70) # 900000000800ebf0 <setitimer+0x114>
    if (value->it_value.tv_sec == 0 && value->it_value.tv_usec == 0 &&
900000000800eb84:	28c0430c 	ld.d	$r12,$r24,16(0x10)
900000000800eb88:	44001d80 	bnez	$r12,28(0x1c) # 900000000800eba4 <setitimer+0xc8>
900000000800eb8c:	28c0630c 	ld.d	$r12,$r24,24(0x18)
900000000800eb90:	44001580 	bnez	$r12,20(0x14) # 900000000800eba4 <setitimer+0xc8>
900000000800eb94:	28c0030c 	ld.d	$r12,$r24,0
900000000800eb98:	44000d80 	bnez	$r12,12(0xc) # 900000000800eba4 <setitimer+0xc8>
        value->it_interval.tv_sec == 0 && value->it_interval.tv_usec == 0) {
900000000800eb9c:	28c0230c 	ld.d	$r12,$r24,8(0x8)
900000000800eba0:	40005180 	beqz	$r12,80(0x50) # 900000000800ebf0 <setitimer+0x114>
      return 0;
    }
    if (timer == NULL) {
900000000800eba4:	40007760 	beqz	$r27,116(0x74) # 900000000800ec18 <setitimer+0x13c>
          timer->ticks = ticks;
          break;
        }
      }
    } else {
      timer->itimer = *value;
900000000800eba8:	28c0030f 	ld.d	$r15,$r24,0
900000000800ebac:	28c0230e 	ld.d	$r14,$r24,8(0x8)
900000000800ebb0:	28c0430d 	ld.d	$r13,$r24,16(0x10)
900000000800ebb4:	28c0630c 	ld.d	$r12,$r24,24(0x18)
900000000800ebb8:	29c0036f 	st.d	$r15,$r27,0
900000000800ebbc:	29c0236e 	st.d	$r14,$r27,8(0x8)
900000000800ebc0:	29c0436d 	st.d	$r13,$r27,16(0x10)
900000000800ebc4:	29c0636c 	st.d	$r12,$r27,24(0x18)
      timer->which = which;
900000000800ebc8:	29808379 	st.w	$r25,$r27,32(0x20)
      timer->ticks = ticks;
900000000800ebcc:	1c0040ac 	pcaddu12i	$r12,517(0x205)
900000000800ebd0:	02e8b18c 	addi.d	$r12,$r12,-1492(0xa2c)
900000000800ebd4:	2880018c 	ld.w	$r12,$r12,0
900000000800ebd8:	2980a36c 	st.w	$r12,$r27,40(0x28)
      timer->pid = pid;
900000000800ebdc:	29809377 	st.w	$r23,$r27,36(0x24)
    }
    hastimer = 1;
900000000800ebe0:	1c0040ac 	pcaddu12i	$r12,517(0x205)
900000000800ebe4:	02e0c18c 	addi.d	$r12,$r12,-2000(0x830)
900000000800ebe8:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800ebec:	2980018d 	st.w	$r13,$r12,0
  }
  return 0;
}
900000000800ebf0:	00150004 	move	$r4,$r0
900000000800ebf4:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800ebf8:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800ebfc:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800ec00:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800ec04:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800ec08:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800ec0c:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800ec10:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800ec14:	4c000020 	jirl	$r0,$r1,0
        if (timers[i].pid == 0) {
900000000800ec18:	1c0040ac 	pcaddu12i	$r12,517(0x205)
900000000800ec1c:	02e0018c 	addi.d	$r12,$r12,-2048(0x800)
900000000800ec20:	2880918c 	ld.w	$r12,$r12,36(0x24)
900000000800ec24:	40002d80 	beqz	$r12,44(0x2c) # 900000000800ec50 <setitimer+0x174>
900000000800ec28:	1c00408d 	pcaddu12i	$r13,516(0x204)
900000000800ec2c:	02dfc1ad 	addi.d	$r13,$r13,2032(0x7f0)
      for (int i = 0; i < NTIMERS; i++) {
900000000800ec30:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800ec34:	0280280f 	addi.w	$r15,$r0,10(0xa)
        if (timers[i].pid == 0) {
900000000800ec38:	288151ae 	ld.w	$r14,$r13,84(0x54)
900000000800ec3c:	400015c0 	beqz	$r14,20(0x14) # 900000000800ec50 <setitimer+0x174>
      for (int i = 0; i < NTIMERS; i++) {
900000000800ec40:	0280058c 	addi.w	$r12,$r12,1(0x1)
900000000800ec44:	02c0c1ad 	addi.d	$r13,$r13,48(0x30)
900000000800ec48:	5ffff18f 	bne	$r12,$r15,-16(0x3fff0) # 900000000800ec38 <setitimer+0x15c>
900000000800ec4c:	53ff97ff 	b	-108(0xfffff94) # 900000000800ebe0 <setitimer+0x104>
          timer->pid = pid;
900000000800ec50:	0280c00d 	addi.w	$r13,$r0,48(0x30)
900000000800ec54:	001db58c 	mul.d	$r12,$r12,$r13
900000000800ec58:	1c00408d 	pcaddu12i	$r13,516(0x204)
900000000800ec5c:	02df01ad 	addi.d	$r13,$r13,1984(0x7c0)
900000000800ec60:	0010b1ac 	add.d	$r12,$r13,$r12
900000000800ec64:	29809197 	st.w	$r23,$r12,36(0x24)
          timer->which = which;
900000000800ec68:	29808199 	st.w	$r25,$r12,32(0x20)
          timer->ticks = ticks;
900000000800ec6c:	1c0040ad 	pcaddu12i	$r13,517(0x205)
900000000800ec70:	02e631ad 	addi.d	$r13,$r13,-1652(0x98c)
900000000800ec74:	288001ad 	ld.w	$r13,$r13,0
900000000800ec78:	2980a18d 	st.w	$r13,$r12,40(0x28)
          break;
900000000800ec7c:	53ff67ff 	b	-156(0xfffff64) # 900000000800ebe0 <setitimer+0x104>

900000000800ec80 <get_timeval>:

struct timeval get_timeval() {
900000000800ec80:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800ec84:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800ec88:	02c04076 	addi.d	$r22,$r3,16(0x10)
  asm volatile(
900000000800ec8c:	00006985 	rdtime.d	$r5,$r12
  uint64 time = r_time();
  return (struct timeval){
      .tv_sec = time / (CLK_FREQ),
900000000800ec90:	15af6c64 	lu12i.w	$r4,-165021(0xd7b63)
900000000800ec94:	03936c84 	ori	$r4,$r4,0x4db
900000000800ec98:	177bd044 	lu32i.d	$r4,-270718(0xbde82)
900000000800ec9c:	0310c484 	lu52i.d	$r4,$r4,1073(0x431)
900000000800eca0:	001e90a4 	mulh.du	$r4,$r5,$r4
      .tv_usec = time / (CLK_FREQ / 1000),
900000000800eca4:	004514ac 	srli.d	$r12,$r5,0x5
900000000800eca8:	14bc6a65 	lu12i.w	$r5,385875(0x5e353)
900000000800ecac:	03bdf4a5 	ori	$r5,$r5,0xf7d
900000000800ecb0:	17893745 	lu32i.d	$r5,-243270(0xc49ba)
900000000800ecb4:	030080a5 	lu52i.d	$r5,$r5,32(0x20)
900000000800ecb8:	001e9585 	mulh.du	$r5,$r12,$r5
  };
900000000800ecbc:	00455084 	srli.d	$r4,$r4,0x14
900000000800ecc0:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800ecc4:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800ecc8:	4c000020 	jirl	$r0,$r1,0

900000000800eccc <mmap>:
#include "include/vm.h"
#include "include/vma.h"

// 通过访问内存来读取设备或文件
uint64 mmap(uint64 start, uint64 len, int prot, int flags, int fd,
            long int offset) {
900000000800eccc:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800ecd0:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800ecd4:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800ecd8:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800ecdc:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800ece0:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800ece4:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800ece8:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800ecec:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800ecf0:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800ecf4:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000800ecf8:	0015009b 	move	$r27,$r4
900000000800ecfc:	001500bc 	move	$r28,$r5
900000000800ed00:	001500d7 	move	$r23,$r6
900000000800ed04:	001500f8 	move	$r24,$r7
900000000800ed08:	00150119 	move	$r25,$r8
900000000800ed0c:	0015013a 	move	$r26,$r9
  struct proc *p = myproc();
900000000800ed10:	572a1bff 	bl	-54760(0xfff2a18) # 9000000008001728 <myproc>
  if (offset < 0) {
900000000800ed14:	6000b740 	blt	$r26,$r0,180(0xb4) # 900000000800edc8 <mmap+0xfc>
    perm &= ~PTE_NR;
  if (prot & PROT_WRITE)
    // 1 表示可写
    perm |= PTE_W;
    // 表示可以执行
  if (prot & PROT_EXEC){
900000000800ed18:	034012ec 	andi	$r12,$r23,0x4
    perm |= PTE_MAT | PTE_P;
    perm &= ~PTE_NX;
900000000800ed1c:	02847808 	addi.w	$r8,$r0,286(0x11e)
900000000800ed20:	0013b108 	masknez	$r8,$r8,$r12
900000000800ed24:	0286780d 	addi.w	$r13,$r0,414(0x19e)
900000000800ed28:	001331ac 	maskeqz	$r12,$r13,$r12
900000000800ed2c:	00153108 	or	$r8,$r8,$r12
  }
    
    
  struct file *f = fd == -1 ? NULL : p->ofile[fd];
900000000800ed30:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800ed34:	58007f2c 	beq	$r25,$r12,124(0x7c) # 900000000800edb0 <mmap+0xe4>
900000000800ed38:	002d132c 	alsl.d	$r12,$r25,$r4,0x3
900000000800ed3c:	28c3619d 	ld.d	$r29,$r12,216(0xd8)
  if (fd != -1 && f == NULL)
    return -1;
900000000800ed40:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (fd != -1 && f == NULL)
900000000800ed44:	40003fa0 	beqz	$r29,60(0x3c) # 900000000800ed80 <mmap+0xb4>
  struct vma *vma = alloc_mmap_vma(p, flags, start, len, perm, fd, offset);
900000000800ed48:	0015034a 	move	$r10,$r26
900000000800ed4c:	00150329 	move	$r9,$r25
900000000800ed50:	00150387 	move	$r7,$r28
900000000800ed54:	00150366 	move	$r6,$r27
900000000800ed58:	00150305 	move	$r5,$r24
900000000800ed5c:	54036800 	bl	872(0x368) # 900000000800f0c4 <alloc_mmap_vma>
  if (!(flags & MAP_FIXED))
900000000800ed60:	00c41318 	bstrpick.d	$r24,$r24,0x4,0x4
900000000800ed64:	44005700 	bnez	$r24,84(0x54) # 900000000800edb8 <mmap+0xec>
    start = vma->addr;
900000000800ed68:	28c02097 	ld.d	$r23,$r4,8(0x8)
  if (NULL == vma) {
    return -1;
  }
  uint64 mmap_size = 0;
  if (-1 != fd) {
900000000800ed6c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800ed70:	5800132c 	beq	$r25,$r12,16(0x10) # 900000000800ed80 <mmap+0xb4>
    // fat32: todo
    // mmap_size = f->ep->file_size - offset;
    // if (len < mmap_size)
    //   mmap_size = len;
    f->off = offset;
900000000800ed74:	298083ba 	st.w	$r26,$r29,32(0x20)
      memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    }
    va += PGSIZE;
  }
  //file.h
  filedup(f);
900000000800ed78:	001503a4 	move	$r4,$r29
900000000800ed7c:	575f6bff 	bl	-41112(0xfff5f68) # 9000000008004ce4 <filedup>
  return start;
}
900000000800ed80:	001502e4 	move	$r4,$r23
900000000800ed84:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800ed88:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800ed8c:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800ed90:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800ed94:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800ed98:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800ed9c:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800eda0:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800eda4:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800eda8:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800edac:	4c000020 	jirl	$r0,$r1,0
  struct file *f = fd == -1 ? NULL : p->ofile[fd];
900000000800edb0:	0015001d 	move	$r29,$r0
900000000800edb4:	53ff97ff 	b	-108(0xfffff94) # 900000000800ed48 <mmap+0x7c>
    return -1;
900000000800edb8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (NULL == vma) {
900000000800edbc:	43ffc49f 	beqz	$r4,-60(0x7fffc4) # 900000000800ed80 <mmap+0xb4>
900000000800edc0:	00150377 	move	$r23,$r27
900000000800edc4:	53ffabff 	b	-88(0xfffffa8) # 900000000800ed6c <mmap+0xa0>
    return -1;
900000000800edc8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
900000000800edcc:	53ffb7ff 	b	-76(0xfffffb4) # 900000000800ed80 <mmap+0xb4>

900000000800edd0 <mmap_with_newpt>:

// 按照进程需要的权限（PROC_WRITE）分配权限
// 在exec时调用，需要在新的pagetable上面操作
uint64 mmap_with_newpt(pagetable_t pagetable, uint64 start, uint64 len,
                       int prot, int flags, int fd, long int offset) {
900000000800edd0:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800edd4:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800edd8:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800eddc:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800ede0:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800ede4:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800ede8:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800edec:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800edf0:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800edf4:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800edf8:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000800edfc:	001500bc 	move	$r28,$r5
900000000800ee00:	001500dd 	move	$r29,$r6
900000000800ee04:	0015011b 	move	$r27,$r8
900000000800ee08:	00150137 	move	$r23,$r9
900000000800ee0c:	00150158 	move	$r24,$r10
  struct proc *p = myproc();
900000000800ee10:	57291bff 	bl	-55016(0xfff2918) # 9000000008001728 <myproc>
  if (offset < 0) {
    return -1;
900000000800ee14:	02bffc19 	addi.w	$r25,$r0,-1(0xfff)
  if (offset < 0) {
900000000800ee18:	60004700 	blt	$r24,$r0,68(0x44) # 900000000800ee5c <mmap_with_newpt+0x8c>
  if (prot & PROT_EXEC){
    perm |= PTE_MAT;
    perm &= ~PTE_NX; 
  }
    
  struct file *f = fd == -1 ? NULL : p->ofile[fd];
900000000800ee1c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800ee20:	58006eec 	beq	$r23,$r12,108(0x6c) # 900000000800ee8c <mmap_with_newpt+0xbc>
900000000800ee24:	002d12ec 	alsl.d	$r12,$r23,$r4,0x3
900000000800ee28:	28c3619a 	ld.d	$r26,$r12,216(0xd8)
  if (fd != -1 && f == NULL)
900000000800ee2c:	40003340 	beqz	$r26,48(0x30) # 900000000800ee5c <mmap_with_newpt+0x8c>
    return -1;
  struct vma *vma = alloc_mmap_vma(p, flags, start, len, perm, fd, offset);
900000000800ee30:	0015030a 	move	$r10,$r24
900000000800ee34:	001502e9 	move	$r9,$r23
900000000800ee38:	02847808 	addi.w	$r8,$r0,286(0x11e)
900000000800ee3c:	001503a7 	move	$r7,$r29
900000000800ee40:	00150386 	move	$r6,$r28
900000000800ee44:	00150365 	move	$r5,$r27
900000000800ee48:	54027c00 	bl	636(0x27c) # 900000000800f0c4 <alloc_mmap_vma>
  start = vma->addr;
900000000800ee4c:	28c02099 	ld.d	$r25,$r4,8(0x8)
  uint64 mmap_size = 0;
  if (-1 != fd) {
//     mmap_size = f->ep->file_size - offset;
//     if (len < mmap_size)
//       mmap_size = len;
    f->off = offset;
900000000800ee50:	29808358 	st.w	$r24,$r26,32(0x20)
      memset((void *)(pa + end_pagespace), 0, PGSIZE - end_pagespace);
    }
    va += PGSIZE;
  }

  filedup(f);
900000000800ee54:	00150344 	move	$r4,$r26
900000000800ee58:	575e8fff 	bl	-41332(0xfff5e8c) # 9000000008004ce4 <filedup>
  return start;
900000000800ee5c:	00150324 	move	$r4,$r25
900000000800ee60:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800ee64:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800ee68:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800ee6c:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800ee70:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800ee74:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800ee78:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800ee7c:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800ee80:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800ee84:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800ee88:	4c000020 	jirl	$r0,$r1,0
  struct vma *vma = alloc_mmap_vma(p, flags, start, len, perm, fd, offset);
900000000800ee8c:	0015030a 	move	$r10,$r24
900000000800ee90:	001502e9 	move	$r9,$r23
900000000800ee94:	02847808 	addi.w	$r8,$r0,286(0x11e)
900000000800ee98:	001503a7 	move	$r7,$r29
900000000800ee9c:	00150386 	move	$r6,$r28
900000000800eea0:	00150365 	move	$r5,$r27
900000000800eea4:	54022000 	bl	544(0x220) # 900000000800f0c4 <alloc_mmap_vma>
  start = vma->addr;
900000000800eea8:	28c02099 	ld.d	$r25,$r4,8(0x8)
  if (-1 != fd) {
900000000800eeac:	53ffb3ff 	b	-80(0xfffffb0) # 900000000800ee5c <mmap_with_newpt+0x8c>

900000000800eeb0 <alloc_vma>:

  return vma;
}

struct vma *alloc_vma(struct proc *p, enum segtype type, uint64 addr, uint64 sz,
                      int perm, int alloc, uint64 pa) {
900000000800eeb0:	02fe4063 	addi.d	$r3,$r3,-112(0xf90)
900000000800eeb4:	29c1a061 	st.d	$r1,$r3,104(0x68)
900000000800eeb8:	29c18076 	st.d	$r22,$r3,96(0x60)
900000000800eebc:	29c16077 	st.d	$r23,$r3,88(0x58)
900000000800eec0:	29c14078 	st.d	$r24,$r3,80(0x50)
900000000800eec4:	29c12079 	st.d	$r25,$r3,72(0x48)
900000000800eec8:	29c1007a 	st.d	$r26,$r3,64(0x40)
900000000800eecc:	29c0e07b 	st.d	$r27,$r3,56(0x38)
900000000800eed0:	29c0c07c 	st.d	$r28,$r3,48(0x30)
900000000800eed4:	29c0a07d 	st.d	$r29,$r3,40(0x28)
900000000800eed8:	29c0807e 	st.d	$r30,$r3,32(0x20)
900000000800eedc:	29c0607f 	st.d	$r31,$r3,24(0x18)
900000000800eee0:	02c1c076 	addi.d	$r22,$r3,112(0x70)
900000000800eee4:	0015009c 	move	$r28,$r4
900000000800eee8:	001500be 	move	$r30,$r5
900000000800eeec:	001500fb 	move	$r27,$r7
900000000800eef0:	0015011d 	move	$r29,$r8
900000000800eef4:	0015013f 	move	$r31,$r9
900000000800eef8:	29fe62ca 	st.d	$r10,$r22,-104(0xf98)
  uint64 start = PGROUNDDOWN(addr);
900000000800eefc:	15fffff8 	lu12i.w	$r24,-1(0xfffff)
900000000800ef00:	0014e0d9 	and	$r25,$r6,$r24
  uint64 end = addr + sz;
  end = PGROUNDUP(end);
900000000800ef04:	03bffc0c 	ori	$r12,$r0,0xfff
900000000800ef08:	0010b0ec 	add.d	$r12,$r7,$r12
900000000800ef0c:	0010998c 	add.d	$r12,$r12,$r6
900000000800ef10:	0014e198 	and	$r24,$r12,$r24

  struct vma *find_vma = p->vma->next;
900000000800ef14:	28d4008e 	ld.d	$r14,$r4,1280(0x500)
900000000800ef18:	28c0e1d7 	ld.d	$r23,$r14,56(0x38)
  while (find_vma != p->vma) {
900000000800ef1c:	58004dd7 	beq	$r14,$r23,76(0x4c) # 900000000800ef68 <alloc_vma+0xb8>
    if (end <= find_vma->addr)
900000000800ef20:	28c022ec 	ld.d	$r12,$r23,8(0x8)
900000000800ef24:	6c004598 	bgeu	$r12,$r24,68(0x44) # 900000000800ef68 <alloc_vma+0xb8>
      break;
    else if (start >= find_vma->end)
900000000800ef28:	28c062ed 	ld.d	$r13,$r23,24(0x18)
900000000800ef2c:	68001f2d 	bltu	$r25,$r13,28(0x1c) # 900000000800ef48 <alloc_vma+0x98>
      find_vma = find_vma->next;
900000000800ef30:	28c0e2f7 	ld.d	$r23,$r23,56(0x38)
  while (find_vma != p->vma) {
900000000800ef34:	580035d7 	beq	$r14,$r23,52(0x34) # 900000000800ef68 <alloc_vma+0xb8>
    if (end <= find_vma->addr)
900000000800ef38:	28c022ec 	ld.d	$r12,$r23,8(0x8)
900000000800ef3c:	6c002d98 	bgeu	$r12,$r24,44(0x2c) # 900000000800ef68 <alloc_vma+0xb8>
    else if (start >= find_vma->end)
900000000800ef40:	28c062ed 	ld.d	$r13,$r23,24(0x18)
900000000800ef44:	6fffef2d 	bgeu	$r25,$r13,-20(0x3ffec) # 900000000800ef30 <alloc_vma+0x80>
    else if (start >= find_vma->addr && end <= find_vma->end) {
900000000800ef48:	68000f2c 	bltu	$r25,$r12,12(0xc) # 900000000800ef54 <alloc_vma+0xa4>
900000000800ef4c:	001502fa 	move	$r26,$r23
900000000800ef50:	6c006db8 	bgeu	$r13,$r24,108(0x6c) # 900000000800efbc <alloc_vma+0x10c>
      return find_vma;
    } else {
      printf("vma address overflow\n");
900000000800ef54:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800ef58:	02ea5084 	addi.d	$r4,$r4,-1388(0xa94)
900000000800ef5c:	57131bff 	bl	-60648(0xfff1318) # 9000000008000274 <printf>
      return NULL;
900000000800ef60:	0015001a 	move	$r26,$r0
900000000800ef64:	50005800 	b	88(0x58) # 900000000800efbc <alloc_vma+0x10c>
    }
  }
  struct vma *vma = (struct vma *)kalloc();
900000000800ef68:	573f6bff 	bl	-49304(0xfff3f68) # 9000000008002ed0 <kalloc>
900000000800ef6c:	0015009a 	move	$r26,$r4
  if (NULL == vma) {
900000000800ef70:	40008480 	beqz	$r4,132(0x84) # 900000000800eff4 <alloc_vma+0x144>
    printf("vma kalloc failed\n");
    return NULL;
  }
  if (0 != sz) {
900000000800ef74:	40001360 	beqz	$r27,16(0x10) # 900000000800ef84 <alloc_vma+0xd4>
    if (alloc) {
900000000800ef78:	44008fe0 	bnez	$r31,140(0x8c) # 900000000800f004 <alloc_vma+0x154>
      if (0 != uvmalloc1(p->pagetable, start, end, perm)) {
        printf("uvmalloc failed\n");
        kfree(vma);
        return NULL;
      }
    } else if (pa != 0) {
900000000800ef7c:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
900000000800ef80:	4400b980 	bnez	$r12,184(0xb8) # 900000000800f038 <alloc_vma+0x188>
        kfree(vma);
        return NULL;
      }
    }
  }
  vma->addr = start;
900000000800ef84:	29c02359 	st.d	$r25,$r26,8(0x8)
  vma->sz = sz;
900000000800ef88:	29c0435b 	st.d	$r27,$r26,16(0x10)
  vma->perm = perm;
900000000800ef8c:	2980135d 	st.w	$r29,$r26,4(0x4)
  vma->end = end;
900000000800ef90:	29c06358 	st.d	$r24,$r26,24(0x18)
  vma->fd = -1;
900000000800ef94:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800ef98:	2980934c 	st.w	$r12,$r26,36(0x24)
  vma->f_off = 0;
900000000800ef9c:	29c0a340 	st.d	$r0,$r26,40(0x28)
  vma->type = type;
900000000800efa0:	2980035e 	st.w	$r30,$r26,0
  vma->prev = find_vma->prev;
900000000800efa4:	28c0c2ec 	ld.d	$r12,$r23,48(0x30)
900000000800efa8:	29c0c34c 	st.d	$r12,$r26,48(0x30)
  vma->next = find_vma;
900000000800efac:	29c0e357 	st.d	$r23,$r26,56(0x38)
  find_vma->prev->next = vma;
900000000800efb0:	28c0c2ec 	ld.d	$r12,$r23,48(0x30)
900000000800efb4:	29c0e19a 	st.d	$r26,$r12,56(0x38)
  find_vma->prev = vma;
900000000800efb8:	29c0c2fa 	st.d	$r26,$r23,48(0x30)

  return vma;
}
900000000800efbc:	00150344 	move	$r4,$r26
900000000800efc0:	28c1a061 	ld.d	$r1,$r3,104(0x68)
900000000800efc4:	28c18076 	ld.d	$r22,$r3,96(0x60)
900000000800efc8:	28c16077 	ld.d	$r23,$r3,88(0x58)
900000000800efcc:	28c14078 	ld.d	$r24,$r3,80(0x50)
900000000800efd0:	28c12079 	ld.d	$r25,$r3,72(0x48)
900000000800efd4:	28c1007a 	ld.d	$r26,$r3,64(0x40)
900000000800efd8:	28c0e07b 	ld.d	$r27,$r3,56(0x38)
900000000800efdc:	28c0c07c 	ld.d	$r28,$r3,48(0x30)
900000000800efe0:	28c0a07d 	ld.d	$r29,$r3,40(0x28)
900000000800efe4:	28c0807e 	ld.d	$r30,$r3,32(0x20)
900000000800efe8:	28c0607f 	ld.d	$r31,$r3,24(0x18)
900000000800efec:	02c1c063 	addi.d	$r3,$r3,112(0x70)
900000000800eff0:	4c000020 	jirl	$r0,$r1,0
    printf("vma kalloc failed\n");
900000000800eff4:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800eff8:	02e83084 	addi.d	$r4,$r4,-1524(0xa0c)
900000000800effc:	57127bff 	bl	-60808(0xfff1278) # 9000000008000274 <printf>
    return NULL;
900000000800f000:	53ffbfff 	b	-68(0xfffffbc) # 900000000800efbc <alloc_vma+0x10c>
      if (0 != uvmalloc1(p->pagetable, start, end, perm)) {
900000000800f004:	001503a7 	move	$r7,$r29
900000000800f008:	00150306 	move	$r6,$r24
900000000800f00c:	00150325 	move	$r5,$r25
900000000800f010:	28c18384 	ld.d	$r4,$r28,96(0x60)
900000000800f014:	5747b3ff 	bl	-47184(0xfff47b0) # 90000000080037c4 <uvmalloc1>
900000000800f018:	43ff6c9f 	beqz	$r4,-148(0x7fff6c) # 900000000800ef84 <alloc_vma+0xd4>
        printf("uvmalloc failed\n");
900000000800f01c:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f020:	02d3d084 	addi.d	$r4,$r4,1268(0x4f4)
900000000800f024:	571253ff 	bl	-60848(0xfff1250) # 9000000008000274 <printf>
        kfree(vma);
900000000800f028:	00150344 	move	$r4,$r26
900000000800f02c:	573d17ff 	bl	-49900(0xfff3d14) # 9000000008002d40 <kfree>
        return NULL;
900000000800f030:	0015001a 	move	$r26,$r0
900000000800f034:	53ff8bff 	b	-120(0xfffff88) # 900000000800efbc <alloc_vma+0x10c>
      if (0 != mappages(p->pagetable, start, sz, pa, perm)) {
900000000800f038:	001503a8 	move	$r8,$r29
900000000800f03c:	00150187 	move	$r7,$r12
900000000800f040:	00150366 	move	$r6,$r27
900000000800f044:	00150325 	move	$r5,$r25
900000000800f048:	28c18384 	ld.d	$r4,$r28,96(0x60)
900000000800f04c:	57422fff 	bl	-48596(0xfff422c) # 9000000008003278 <mappages>
900000000800f050:	43ff349f 	beqz	$r4,-204(0x7fff34) # 900000000800ef84 <alloc_vma+0xd4>
        printf("mappages failed\n");
900000000800f054:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800f058:	02e71084 	addi.d	$r4,$r4,-1596(0x9c4)
900000000800f05c:	57121bff 	bl	-60904(0xfff1218) # 9000000008000274 <printf>
        kfree(vma);
900000000800f060:	00150344 	move	$r4,$r26
900000000800f064:	573cdfff 	bl	-49956(0xfff3cdc) # 9000000008002d40 <kfree>
        return NULL;
900000000800f068:	0015001a 	move	$r26,$r0
900000000800f06c:	53ff53ff 	b	-176(0xfffff50) # 900000000800efbc <alloc_vma+0x10c>

900000000800f070 <find_mmap_vma>:

struct vma *find_mmap_vma(struct vma *head) {
900000000800f070:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800f074:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800f078:	02c04076 	addi.d	$r22,$r3,16(0x10)
  // 单项链表？
  struct vma *vma = head->next;
900000000800f07c:	28c0e08c 	ld.d	$r12,$r4,56(0x38)
  while (vma != head) {
900000000800f080:	58003c8c 	beq	$r4,$r12,60(0x3c) # 900000000800f0bc <find_mmap_vma+0x4c>
    // vma 映射类型是： MMAP
    if (MMAP == vma->type)
900000000800f084:	2880018e 	ld.w	$r14,$r12,0
900000000800f088:	0280040d 	addi.w	$r13,$r0,1(0x1)
900000000800f08c:	580021cd 	beq	$r14,$r13,32(0x20) # 900000000800f0ac <find_mmap_vma+0x3c>
900000000800f090:	0280040e 	addi.w	$r14,$r0,1(0x1)
      return vma;
    vma = vma->next;
900000000800f094:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
  while (vma != head) {
900000000800f098:	5800108c 	beq	$r4,$r12,16(0x10) # 900000000800f0a8 <find_mmap_vma+0x38>
    if (MMAP == vma->type)
900000000800f09c:	2880018d 	ld.w	$r13,$r12,0
900000000800f0a0:	5ffff5ae 	bne	$r13,$r14,-12(0x3fff4) # 900000000800f094 <find_mmap_vma+0x24>
900000000800f0a4:	50000800 	b	8(0x8) # 900000000800f0ac <find_mmap_vma+0x3c>
  }
  return NULL;
900000000800f0a8:	0015000c 	move	$r12,$r0
}
900000000800f0ac:	00150184 	move	$r4,$r12
900000000800f0b0:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800f0b4:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800f0b8:	4c000020 	jirl	$r0,$r1,0
  return NULL;
900000000800f0bc:	0015000c 	move	$r12,$r0
900000000800f0c0:	53ffefff 	b	-20(0xfffffec) # 900000000800f0ac <find_mmap_vma+0x3c>

900000000800f0c4 <alloc_mmap_vma>:

struct vma *alloc_mmap_vma(struct proc *p, int flags, uint64 addr, uint64 sz,
                           int perm, int fd, uint64 f_off) {
900000000800f0c4:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800f0c8:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800f0cc:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800f0d0:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800f0d4:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800f0d8:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800f0dc:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800f0e0:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800f0e4:	29c0007c 	st.d	$r28,$r3,0
900000000800f0e8:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800f0ec:	00150098 	move	$r24,$r4
900000000800f0f0:	001500d7 	move	$r23,$r6
900000000800f0f4:	001500f9 	move	$r25,$r7
900000000800f0f8:	0015011c 	move	$r28,$r8
900000000800f0fc:	0015013b 	move	$r27,$r9
900000000800f100:	0015015a 	move	$r26,$r10
  struct vma *vma = NULL;
  struct vma *find_vma = find_mmap_vma(p->vma);
900000000800f104:	28d40084 	ld.d	$r4,$r4,1280(0x500)
900000000800f108:	57ff6bff 	bl	-152(0xfffff68) # 900000000800f070 <find_mmap_vma>
  if (0 == addr && sz < find_vma->addr) {
900000000800f10c:	440026e0 	bnez	$r23,36(0x24) # 900000000800f130 <alloc_mmap_vma+0x6c>
900000000800f110:	28c0208c 	ld.d	$r12,$r4,8(0x8)
    addr = PGROUNDDOWN(find_vma->addr - sz);
900000000800f114:	0011e58d 	sub.d	$r13,$r12,$r25
900000000800f118:	15ffffee 	lu12i.w	$r14,-1(0xfffff)
900000000800f11c:	0014b9ad 	and	$r13,$r13,$r14
900000000800f120:	0012b32c 	sltu	$r12,$r25,$r12
900000000800f124:	001331ad 	maskeqz	$r13,$r13,$r12
900000000800f128:	0013b2f7 	masknez	$r23,$r23,$r12
900000000800f12c:	00155db7 	or	$r23,$r13,$r23
  }
  vma = alloc_vma(p, MMAP, addr, sz, perm, 1, NULL);
900000000800f130:	0015000a 	move	$r10,$r0
900000000800f134:	02800409 	addi.w	$r9,$r0,1(0x1)
900000000800f138:	00150388 	move	$r8,$r28
900000000800f13c:	00150327 	move	$r7,$r25
900000000800f140:	001502e6 	move	$r6,$r23
900000000800f144:	02800405 	addi.w	$r5,$r0,1(0x1)
900000000800f148:	00150304 	move	$r4,$r24
900000000800f14c:	57fd67ff 	bl	-668(0xffffd64) # 900000000800eeb0 <alloc_vma>
900000000800f150:	00150097 	move	$r23,$r4
  if (NULL == vma) {
900000000800f154:	40003880 	beqz	$r4,56(0x38) # 900000000800f18c <alloc_mmap_vma+0xc8>
    printf("alloc_mmap_vma: alloc_vma failed\n");
    return NULL;
  }
  vma->fd = fd;
900000000800f158:	2980909b 	st.w	$r27,$r4,36(0x24)
  vma->f_off = f_off;
900000000800f15c:	29c0a09a 	st.d	$r26,$r4,40(0x28)

  return vma;
}
900000000800f160:	001502e4 	move	$r4,$r23
900000000800f164:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800f168:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800f16c:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800f170:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800f174:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800f178:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800f17c:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800f180:	28c0007c 	ld.d	$r28,$r3,0
900000000800f184:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800f188:	4c000020 	jirl	$r0,$r1,0
    printf("alloc_mmap_vma: alloc_vma failed\n");
900000000800f18c:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800f190:	02e29084 	addi.d	$r4,$r4,-1884(0x8a4)
900000000800f194:	5710e3ff 	bl	-61216(0xfff10e0) # 9000000008000274 <printf>
    return NULL;
900000000800f198:	53ffcbff 	b	-56(0xfffffc8) # 900000000800f160 <alloc_mmap_vma+0x9c>

900000000800f19c <vma_init>:
struct vma *vma_init(struct proc *p) {
900000000800f19c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800f1a0:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800f1a4:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800f1a8:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800f1ac:	29c00078 	st.d	$r24,$r3,0
900000000800f1b0:	02c08076 	addi.d	$r22,$r3,32(0x20)
900000000800f1b4:	00150098 	move	$r24,$r4
  if (NULL == p) {
900000000800f1b8:	40006480 	beqz	$r4,100(0x64) # 900000000800f21c <vma_init+0x80>
  struct vma *vma = (struct vma *)kalloc();
900000000800f1bc:	573d17ff 	bl	-49900(0xfff3d14) # 9000000008002ed0 <kalloc>
900000000800f1c0:	00150097 	move	$r23,$r4
  if (NULL == vma) {
900000000800f1c4:	40006c80 	beqz	$r4,108(0x6c) # 900000000800f230 <vma_init+0x94>
  vma->type = NONE;
900000000800f1c8:	29800080 	st.w	$r0,$r4,0
  vma->prev = vma->next = vma;
900000000800f1cc:	29c0e2e4 	st.d	$r4,$r23,56(0x38)
900000000800f1d0:	29c0c2e4 	st.d	$r4,$r23,48(0x30)
  p->vma = vma;
900000000800f1d4:	29d40304 	st.d	$r4,$r24,1280(0x500)
  if (NULL == alloc_mmap_vma(p, 0, USER_MMAP_START, 0, 0, 0, 0)) {
900000000800f1d8:	0015000a 	move	$r10,$r0
900000000800f1dc:	00150009 	move	$r9,$r0
900000000800f1e0:	00150008 	move	$r8,$r0
900000000800f1e4:	00150007 	move	$r7,$r0
900000000800f1e8:	14dfffc6 	lu12i.w	$r6,458750(0x6fffe)
900000000800f1ec:	00150005 	move	$r5,$r0
900000000800f1f0:	00150304 	move	$r4,$r24
900000000800f1f4:	57fed3ff 	bl	-304(0xffffed0) # 900000000800f0c4 <alloc_mmap_vma>
900000000800f1f8:	00150098 	move	$r24,$r4
900000000800f1fc:	40004480 	beqz	$r4,68(0x44) # 900000000800f240 <vma_init+0xa4>
}
900000000800f200:	001502e4 	move	$r4,$r23
900000000800f204:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800f208:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800f20c:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800f210:	28c00078 	ld.d	$r24,$r3,0
900000000800f214:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800f218:	4c000020 	jirl	$r0,$r1,0
    printf("p is not existing\n");
900000000800f21c:	1c000184 	pcaddu12i	$r4,12(0xc)
900000000800f220:	02e0f084 	addi.d	$r4,$r4,-1988(0x83c)
900000000800f224:	571053ff 	bl	-61360(0xfff1050) # 9000000008000274 <printf>
    return NULL;
900000000800f228:	00150317 	move	$r23,$r24
900000000800f22c:	53ffd7ff 	b	-44(0xfffffd4) # 900000000800f200 <vma_init+0x64>
    printf("vma kalloc failed\n");
900000000800f230:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f234:	02df4084 	addi.d	$r4,$r4,2000(0x7d0)
900000000800f238:	57103fff 	bl	-61380(0xfff103c) # 9000000008000274 <printf>
    return NULL;
900000000800f23c:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800f200 <vma_init+0x64>
    kfree(vma);
900000000800f240:	001502e4 	move	$r4,$r23
900000000800f244:	573affff 	bl	-50436(0xfff3afc) # 9000000008002d40 <kfree>
    return NULL;
900000000800f248:	00150317 	move	$r23,$r24
900000000800f24c:	53ffb7ff 	b	-76(0xfffffb4) # 900000000800f200 <vma_init+0x64>

900000000800f250 <vma_copy>:

struct vma *vma_copy(struct proc *np, struct vma *head) {
900000000800f250:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800f254:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800f258:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800f25c:	29c0a077 	st.d	$r23,$r3,40(0x28)
900000000800f260:	29c08078 	st.d	$r24,$r3,32(0x20)
900000000800f264:	29c06079 	st.d	$r25,$r3,24(0x18)
900000000800f268:	29c0407a 	st.d	$r26,$r3,16(0x10)
900000000800f26c:	29c0207b 	st.d	$r27,$r3,8(0x8)
900000000800f270:	02c10076 	addi.d	$r22,$r3,64(0x40)
900000000800f274:	0015009b 	move	$r27,$r4
900000000800f278:	001500ba 	move	$r26,$r5
  // kalloc -> malloc
  struct vma *new_vma = (struct vma *)kalloc();
900000000800f27c:	573c57ff 	bl	-50092(0xfff3c54) # 9000000008002ed0 <kalloc>
  if (NULL == new_vma) {
900000000800f280:	40006480 	beqz	$r4,100(0x64) # 900000000800f2e4 <vma_copy+0x94>
900000000800f284:	00150098 	move	$r24,$r4
    printf("vma copy failed\n");
    goto failure;
  }
  new_vma->next = new_vma->prev = new_vma;
900000000800f288:	29c0c304 	st.d	$r4,$r24,48(0x30)
900000000800f28c:	29c0e304 	st.d	$r4,$r24,56(0x38)
  new_vma->type = NONE;
900000000800f290:	29800080 	st.w	$r0,$r4,0
  np->vma = new_vma;
900000000800f294:	29d40364 	st.d	$r4,$r27,1280(0x500)

  struct vma *pre_vma = head->next;
900000000800f298:	28c0e359 	ld.d	$r25,$r26,56(0x38)
  struct vma *nvma = NULL;
  while (pre_vma != head) {
900000000800f29c:	58005f59 	beq	$r26,$r25,92(0x5c) # 900000000800f2f8 <vma_copy+0xa8>
    nvma = (struct vma *)kalloc();
900000000800f2a0:	573c33ff 	bl	-50128(0xfff3c30) # 9000000008002ed0 <kalloc>
900000000800f2a4:	00150097 	move	$r23,$r4
    if (NULL == nvma) {
900000000800f2a8:	40004880 	beqz	$r4,72(0x48) # 900000000800f2f0 <vma_copy+0xa0>
      goto failure;
    }
    memmove(nvma, pre_vma, sizeof(struct vma));
900000000800f2ac:	02810006 	addi.w	$r6,$r0,64(0x40)
900000000800f2b0:	00150325 	move	$r5,$r25
900000000800f2b4:	571d5bff 	bl	-58024(0xfff1d58) # 900000000800100c <memmove>
    nvma->next = nvma->prev = NULL;
900000000800f2b8:	29c0c2e0 	st.d	$r0,$r23,48(0x30)
900000000800f2bc:	29c0e2e0 	st.d	$r0,$r23,56(0x38)
    nvma->prev = new_vma->prev;
900000000800f2c0:	28c0c30c 	ld.d	$r12,$r24,48(0x30)
900000000800f2c4:	29c0c2ec 	st.d	$r12,$r23,48(0x30)
    nvma->next = new_vma;
900000000800f2c8:	29c0e2f8 	st.d	$r24,$r23,56(0x38)
    new_vma->prev->next = nvma;
900000000800f2cc:	28c0c30c 	ld.d	$r12,$r24,48(0x30)
900000000800f2d0:	29c0e197 	st.d	$r23,$r12,56(0x38)
    new_vma->prev = nvma;
900000000800f2d4:	29c0c317 	st.d	$r23,$r24,48(0x30)
    pre_vma = pre_vma->next;
900000000800f2d8:	28c0e339 	ld.d	$r25,$r25,56(0x38)
  while (pre_vma != head) {
900000000800f2dc:	5fffc759 	bne	$r26,$r25,-60(0x3ffc4) # 900000000800f2a0 <vma_copy+0x50>
900000000800f2e0:	50001800 	b	24(0x18) # 900000000800f2f8 <vma_copy+0xa8>
    printf("vma copy failed\n");
900000000800f2e4:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f2e8:	02de3084 	addi.d	$r4,$r4,1932(0x78c)
900000000800f2ec:	570f8bff 	bl	-61560(0xfff0f88) # 9000000008000274 <printf>
  }

  return new_vma;

failure:
  np->vma = NULL;
900000000800f2f0:	29d40360 	st.d	$r0,$r27,1280(0x500)
  // TODO free_vma_list
  return NULL;
900000000800f2f4:	00150018 	move	$r24,$r0
}
900000000800f2f8:	00150304 	move	$r4,$r24
900000000800f2fc:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800f300:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800f304:	28c0a077 	ld.d	$r23,$r3,40(0x28)
900000000800f308:	28c08078 	ld.d	$r24,$r3,32(0x20)
900000000800f30c:	28c06079 	ld.d	$r25,$r3,24(0x18)
900000000800f310:	28c0407a 	ld.d	$r26,$r3,16(0x10)
900000000800f314:	28c0207b 	ld.d	$r27,$r3,8(0x8)
900000000800f318:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800f31c:	4c000020 	jirl	$r0,$r1,0

900000000800f320 <vma_map>:

// 拷贝vma实际的内容
int vma_map(pagetable_t old, pagetable_t new, struct vma *vma) {
900000000800f320:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800f324:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800f328:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800f32c:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800f330:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800f334:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800f338:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800f33c:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800f340:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800f344:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800f348:	02c14076 	addi.d	$r22,$r3,80(0x50)
900000000800f34c:	0015009c 	move	$r28,$r4
900000000800f350:	001500bb 	move	$r27,$r5
900000000800f354:	001500da 	move	$r26,$r6
  uint64 start = vma->addr;
900000000800f358:	28c020d9 	ld.d	$r25,$r6,8(0x8)
  pte_t *pte;
  uint64 pa;
  char *mem;
  long flags;

  while (start < vma->end) {
900000000800f35c:	28c060cc 	ld.d	$r12,$r6,24(0x18)
900000000800f360:	6c00832c 	bgeu	$r25,$r12,128(0x80) # 900000000800f3e0 <vma_map+0xc0>
    if ((pte = walk(old, start, 0)) == NULL) {
900000000800f364:	00150006 	move	$r6,$r0
900000000800f368:	00150325 	move	$r5,$r25
900000000800f36c:	00150384 	move	$r4,$r28
900000000800f370:	573cbbff 	bl	-49992(0xfff3cb8) # 9000000008003028 <walk>
900000000800f374:	40008080 	beqz	$r4,128(0x80) # 900000000800f3f4 <vma_map+0xd4>
      panic("uvmcopy: pte should exist");
    }
    if ((*pte & PTE_V) == 0) {
900000000800f378:	28c00088 	ld.d	$r8,$r4,0
900000000800f37c:	0340050c 	andi	$r12,$r8,0x1
900000000800f380:	40008180 	beqz	$r12,128(0x80) # 900000000800f400 <vma_map+0xe0>
      panic("uvmcopy: page not present");
    }
    pa = PTE2PA(*pte);
900000000800f384:	15ffffe5 	lu12i.w	$r5,-1(0xfffff)
900000000800f388:	161fffe5 	lu32i.d	$r5,65535(0xffff)
900000000800f38c:	00149518 	and	$r24,$r8,$r5
    flags = PTE_FLAGS(*pte);
900000000800f390:	0287fc17 	addi.w	$r23,$r0,511(0x1ff)
900000000800f394:	033802f7 	lu52i.d	$r23,$r23,-512(0xe00)
900000000800f398:	0014dd17 	and	$r23,$r8,$r23
    mem = (char *)kalloc();
900000000800f39c:	573b37ff 	bl	-50380(0xfff3b34) # 9000000008002ed0 <kalloc>
900000000800f3a0:	0015009d 	move	$r29,$r4

    if (NULL == mem)
900000000800f3a4:	40007080 	beqz	$r4,112(0x70) # 900000000800f414 <vma_map+0xf4>
      goto failure2;
    memmove(mem, (char *)pa, PGSIZE);
900000000800f3a8:	14000026 	lu12i.w	$r6,1(0x1)
900000000800f3ac:	00150305 	move	$r5,$r24
900000000800f3b0:	571c5fff 	bl	-58276(0xfff1c5c) # 900000000800100c <memmove>

    if (mappages(new, start, PGSIZE, (uint64)mem, flags) != 0) {
900000000800f3b4:	004082e8 	slli.w	$r8,$r23,0x0
900000000800f3b8:	001503a7 	move	$r7,$r29
900000000800f3bc:	14000026 	lu12i.w	$r6,1(0x1)
900000000800f3c0:	00150325 	move	$r5,$r25
900000000800f3c4:	00150364 	move	$r4,$r27
900000000800f3c8:	573eb3ff 	bl	-49488(0xfff3eb0) # 9000000008003278 <mappages>
900000000800f3cc:	44004080 	bnez	$r4,64(0x40) # 900000000800f40c <vma_map+0xec>
      kfree(mem);
      goto failure2;
    }

    start += PGSIZE;
900000000800f3d0:	1400002c 	lu12i.w	$r12,1(0x1)
900000000800f3d4:	0010b339 	add.d	$r25,$r25,$r12
  while (start < vma->end) {
900000000800f3d8:	28c0634c 	ld.d	$r12,$r26,24(0x18)
900000000800f3dc:	6bff8b2c 	bltu	$r25,$r12,-120(0x3ff88) # 900000000800f364 <vma_map+0x44>
  }

  pa = walkaddr(new, vma->addr);
900000000800f3e0:	28c02345 	ld.d	$r5,$r26,8(0x8)
900000000800f3e4:	00150364 	move	$r4,$r27
900000000800f3e8:	573d3bff 	bl	-49864(0xfff3d38) # 9000000008003120 <walkaddr>
  return 0;
900000000800f3ec:	00150004 	move	$r4,$r0
900000000800f3f0:	50004000 	b	64(0x40) # 900000000800f430 <vma_map+0x110>
      panic("uvmcopy: pte should exist");
900000000800f3f4:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000800f3f8:	02c33084 	addi.d	$r4,$r4,204(0xcc)
900000000800f3fc:	570e0bff 	bl	-61944(0xfff0e08) # 9000000008000204 <panic>
      panic("uvmcopy: page not present");
900000000800f400:	1c0000c4 	pcaddu12i	$r4,6(0x6)
900000000800f404:	02c38084 	addi.d	$r4,$r4,224(0xe0)
900000000800f408:	570dffff 	bl	-61956(0xfff0dfc) # 9000000008000204 <panic>
      kfree(mem);
900000000800f40c:	001503a4 	move	$r4,$r29
900000000800f410:	573933ff 	bl	-50896(0xfff3930) # 9000000008002d40 <kfree>

failure2:
  vmunmap(new, vma->addr, (start - vma->addr) / PGSIZE, 1);
900000000800f414:	28c02345 	ld.d	$r5,$r26,8(0x8)
900000000800f418:	00119726 	sub.d	$r6,$r25,$r5
900000000800f41c:	02800407 	addi.w	$r7,$r0,1(0x1)
900000000800f420:	004530c6 	srli.d	$r6,$r6,0xc
900000000800f424:	00150364 	move	$r4,$r27
900000000800f428:	574067ff 	bl	-49052(0xfff4064) # 900000000800348c <vmunmap>
  return -1;
900000000800f42c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800f430:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800f434:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800f438:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800f43c:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800f440:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800f444:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800f448:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800f44c:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800f450:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800f454:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800f458:	4c000020 	jirl	$r0,$r1,0

900000000800f45c <free_vma>:

int free_vma(struct proc *p, struct vma *del) {
900000000800f45c:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800f460:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800f464:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800f468:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800f46c:	02c08076 	addi.d	$r22,$r3,32(0x20)
  if (del == NULL) {
900000000800f470:	40005ca0 	beqz	$r5,92(0x5c) # 900000000800f4cc <free_vma+0x70>
900000000800f474:	001500b7 	move	$r23,$r5
    printf("[free_vma] del is nil\n");
    return 0;
  }
  if (del->prev == NULL || del->next == NULL) {
900000000800f478:	28c0c0ac 	ld.d	$r12,$r5,48(0x30)
900000000800f47c:	40006580 	beqz	$r12,100(0x64) # 900000000800f4e0 <free_vma+0x84>
900000000800f480:	28c0e0ad 	ld.d	$r13,$r5,56(0x38)
900000000800f484:	40005da0 	beqz	$r13,92(0x5c) # 900000000800f4e0 <free_vma+0x84>
    return 0;
  }

  struct vma *prev = del->prev;
  struct vma *next = del->next;
  prev->next = next;
900000000800f488:	29c0e18d 	st.d	$r13,$r12,56(0x38)
  next->prev = prev;
900000000800f48c:	29c0c1ac 	st.d	$r12,$r13,48(0x30)
  del->next = del->prev = NULL;
900000000800f490:	29c0c0a0 	st.d	$r0,$r5,48(0x30)
900000000800f494:	29c0e0a0 	st.d	$r0,$r5,56(0x38)
  if (uvmdealloc1(p->pagetable, del->addr, del->end) != 0) {
900000000800f498:	28c060a6 	ld.d	$r6,$r5,24(0x18)
900000000800f49c:	28c020a5 	ld.d	$r5,$r5,8(0x8)
900000000800f4a0:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800f4a4:	5742b3ff 	bl	-48464(0xfff42b0) # 9000000008003754 <uvmdealloc1>
900000000800f4a8:	44004c80 	bnez	$r4,76(0x4c) # 900000000800f4f4 <free_vma+0x98>
    printf("[free_vma] uvmdealloc fail\n");
    return 0;
  }
  kfree(del);
900000000800f4ac:	001502e4 	move	$r4,$r23
900000000800f4b0:	573893ff 	bl	-51056(0xfff3890) # 9000000008002d40 <kfree>
  del = NULL;
  return 1;
900000000800f4b4:	02800404 	addi.w	$r4,$r0,1(0x1)
}
900000000800f4b8:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800f4bc:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800f4c0:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800f4c4:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800f4c8:	4c000020 	jirl	$r0,$r1,0
    printf("[free_vma] del is nil\n");
900000000800f4cc:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f4d0:	02d6f084 	addi.d	$r4,$r4,1468(0x5bc)
900000000800f4d4:	570da3ff 	bl	-62048(0xfff0da0) # 9000000008000274 <printf>
    return 0;
900000000800f4d8:	00150004 	move	$r4,$r0
900000000800f4dc:	53ffdfff 	b	-36(0xfffffdc) # 900000000800f4b8 <free_vma+0x5c>
    printf("[free_vma] del is illegal\n");
900000000800f4e0:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f4e4:	02d70084 	addi.d	$r4,$r4,1472(0x5c0)
900000000800f4e8:	570d8fff 	bl	-62068(0xfff0d8c) # 9000000008000274 <printf>
    return 0;
900000000800f4ec:	00150004 	move	$r4,$r0
900000000800f4f0:	53ffcbff 	b	-56(0xfffffc8) # 900000000800f4b8 <free_vma+0x5c>
    printf("[free_vma] uvmdealloc fail\n");
900000000800f4f4:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f4f8:	02d73084 	addi.d	$r4,$r4,1484(0x5cc)
900000000800f4fc:	570d7bff 	bl	-62088(0xfff0d78) # 9000000008000274 <printf>
    return 0;
900000000800f500:	00150004 	move	$r4,$r0
900000000800f504:	53ffb7ff 	b	-76(0xfffffb4) # 900000000800f4b8 <free_vma+0x5c>

900000000800f508 <free_vma_list>:

int free_vma_list(struct proc *p) {
900000000800f508:	02fec063 	addi.d	$r3,$r3,-80(0xfb0)
900000000800f50c:	29c12061 	st.d	$r1,$r3,72(0x48)
900000000800f510:	29c10076 	st.d	$r22,$r3,64(0x40)
900000000800f514:	29c0e077 	st.d	$r23,$r3,56(0x38)
900000000800f518:	29c0c078 	st.d	$r24,$r3,48(0x30)
900000000800f51c:	29c0a079 	st.d	$r25,$r3,40(0x28)
900000000800f520:	29c0807a 	st.d	$r26,$r3,32(0x20)
900000000800f524:	29c0607b 	st.d	$r27,$r3,24(0x18)
900000000800f528:	29c0407c 	st.d	$r28,$r3,16(0x10)
900000000800f52c:	29c0207d 	st.d	$r29,$r3,8(0x8)
900000000800f530:	02c14076 	addi.d	$r22,$r3,80(0x50)
  struct vma *vma_head = p->vma;
900000000800f534:	28d4009d 	ld.d	$r29,$r4,1280(0x500)
  if (vma_head == NULL) {
900000000800f538:	4000a3a0 	beqz	$r29,160(0xa0) # 900000000800f5d8 <free_vma_list+0xd0>
900000000800f53c:	0015009a 	move	$r26,$r4
    return 1;
  }
  struct vma *vma = vma_head->next;
900000000800f540:	28c0e3b9 	ld.d	$r25,$r29,56(0x38)

  while (vma != vma_head) {
900000000800f544:	58008bb9 	beq	$r29,$r25,136(0x88) # 900000000800f5cc <free_vma_list+0xc4>
    for (a = vma->addr; a < vma->end; a += PGSIZE) {
      if ((pte = walk(p->pagetable, a, 0)) == 0)
        continue;
      if ((*pte & PTE_V) == 0)
        continue;
      if (PTE_FLAGS(*pte) == PTE_V)
900000000800f548:	0280041c 	addi.w	$r28,$r0,1(0x1)
    for (a = vma->addr; a < vma->end; a += PGSIZE) {
900000000800f54c:	1400003b 	lu12i.w	$r27,1(0x1)
900000000800f550:	50006c00 	b	108(0x6c) # 900000000800f5bc <free_vma_list+0xb4>
        continue;
      uint64 pa = PTE2PA(*pte);
900000000800f554:	15ffffe4 	lu12i.w	$r4,-1(0xfffff)
900000000800f558:	161fffe4 	lu32i.d	$r4,65535(0xffff)
      kfree((void *)pa);
900000000800f55c:	001491a4 	and	$r4,$r13,$r4
900000000800f560:	5737e3ff 	bl	-51232(0xfff37e0) # 9000000008002d40 <kfree>
      *pte = 0;
900000000800f564:	29c00300 	st.d	$r0,$r24,0
    for (a = vma->addr; a < vma->end; a += PGSIZE) {
900000000800f568:	0010eef7 	add.d	$r23,$r23,$r27
900000000800f56c:	28c0632c 	ld.d	$r12,$r25,24(0x18)
900000000800f570:	6c003eec 	bgeu	$r23,$r12,60(0x3c) # 900000000800f5ac <free_vma_list+0xa4>
      if ((pte = walk(p->pagetable, a, 0)) == 0)
900000000800f574:	00150006 	move	$r6,$r0
900000000800f578:	001502e5 	move	$r5,$r23
900000000800f57c:	28c18344 	ld.d	$r4,$r26,96(0x60)
900000000800f580:	573aabff 	bl	-50520(0xfff3aa8) # 9000000008003028 <walk>
900000000800f584:	00150098 	move	$r24,$r4
900000000800f588:	43ffe09f 	beqz	$r4,-32(0x7fffe0) # 900000000800f568 <free_vma_list+0x60>
      if ((*pte & PTE_V) == 0)
900000000800f58c:	28c0008d 	ld.d	$r13,$r4,0
900000000800f590:	034005ac 	andi	$r12,$r13,0x1
900000000800f594:	43ffd59f 	beqz	$r12,-44(0x7fffd4) # 900000000800f568 <free_vma_list+0x60>
      if (PTE_FLAGS(*pte) == PTE_V)
900000000800f598:	0287fc0c 	addi.w	$r12,$r0,511(0x1ff)
900000000800f59c:	0338018c 	lu52i.d	$r12,$r12,-512(0xe00)
900000000800f5a0:	0014b1ac 	and	$r12,$r13,$r12
900000000800f5a4:	5fffb19c 	bne	$r12,$r28,-80(0x3ffb0) # 900000000800f554 <free_vma_list+0x4c>
900000000800f5a8:	53ffc3ff 	b	-64(0xfffffc0) # 900000000800f568 <free_vma_list+0x60>
    }
    vma = vma->next;
900000000800f5ac:	28c0e339 	ld.d	$r25,$r25,56(0x38)
    kfree(vma->prev);
900000000800f5b0:	28c0c324 	ld.d	$r4,$r25,48(0x30)
900000000800f5b4:	57378fff 	bl	-51316(0xfff378c) # 9000000008002d40 <kfree>
  while (vma != vma_head) {
900000000800f5b8:	580017b9 	beq	$r29,$r25,20(0x14) # 900000000800f5cc <free_vma_list+0xc4>
    for (a = vma->addr; a < vma->end; a += PGSIZE) {
900000000800f5bc:	28c02337 	ld.d	$r23,$r25,8(0x8)
900000000800f5c0:	28c0632c 	ld.d	$r12,$r25,24(0x18)
900000000800f5c4:	6bffb2ec 	bltu	$r23,$r12,-80(0x3ffb0) # 900000000800f574 <free_vma_list+0x6c>
900000000800f5c8:	53ffe7ff 	b	-28(0xfffffe4) # 900000000800f5ac <free_vma_list+0xa4>
  }
  kfree(vma);
900000000800f5cc:	00150324 	move	$r4,$r25
900000000800f5d0:	573773ff 	bl	-51344(0xfff3770) # 9000000008002d40 <kfree>
  p->vma = NULL;
900000000800f5d4:	29d40340 	st.d	$r0,$r26,1280(0x500)
  return 1;
}
900000000800f5d8:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800f5dc:	28c12061 	ld.d	$r1,$r3,72(0x48)
900000000800f5e0:	28c10076 	ld.d	$r22,$r3,64(0x40)
900000000800f5e4:	28c0e077 	ld.d	$r23,$r3,56(0x38)
900000000800f5e8:	28c0c078 	ld.d	$r24,$r3,48(0x30)
900000000800f5ec:	28c0a079 	ld.d	$r25,$r3,40(0x28)
900000000800f5f0:	28c0807a 	ld.d	$r26,$r3,32(0x20)
900000000800f5f4:	28c0607b 	ld.d	$r27,$r3,24(0x18)
900000000800f5f8:	28c0407c 	ld.d	$r28,$r3,16(0x10)
900000000800f5fc:	28c0207d 	ld.d	$r29,$r3,8(0x8)
900000000800f600:	02c14063 	addi.d	$r3,$r3,80(0x50)
900000000800f604:	4c000020 	jirl	$r0,$r1,0

900000000800f608 <alloc_vma_stack>:

// stack从maxuva - pgsize 开始向下分配，最多分配到USER_MMAP_START
uint64 alloc_vma_stack(struct proc *p) {
900000000800f608:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800f60c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800f610:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800f614:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800f618:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800f61c:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800f620:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800f624:	00150099 	move	$r25,$r4
  // 起始分配100个page
  uint64 end = USER_STACK_TOP;
  uint64 start = end - INIT_STACK_SIZE;
  struct vma *find_vma = p->vma->next;
900000000800f628:	28d4008d 	ld.d	$r13,$r4,1280(0x500)
900000000800f62c:	28c0e1ac 	ld.d	$r12,$r13,56(0x38)
900000000800f630:	00150197 	move	$r23,$r12
  // stack 放到链表的最后端
  while (find_vma != p->vma && find_vma->next != p->vma) {
900000000800f634:	580021ac 	beq	$r13,$r12,32(0x20) # 900000000800f654 <alloc_vma_stack+0x4c>
900000000800f638:	28c0e197 	ld.d	$r23,$r12,56(0x38)
900000000800f63c:	5c0011b7 	bne	$r13,$r23,16(0x10) # 900000000800f64c <alloc_vma_stack+0x44>
  struct vma *find_vma = p->vma->next;
900000000800f640:	00150197 	move	$r23,$r12
900000000800f644:	50001000 	b	16(0x10) # 900000000800f654 <alloc_vma_stack+0x4c>
  while (find_vma != p->vma && find_vma->next != p->vma) {
900000000800f648:	00150197 	move	$r23,$r12
900000000800f64c:	28c0e2ec 	ld.d	$r12,$r23,56(0x38)
900000000800f650:	5ffff9ac 	bne	$r13,$r12,-8(0x3fff8) # 900000000800f648 <alloc_vma_stack+0x40>
    find_vma = find_vma->next;
  }

  struct vma *vma = (struct vma *)kalloc();
900000000800f654:	57387fff 	bl	-51076(0xfff387c) # 9000000008002ed0 <kalloc>
900000000800f658:	00150098 	move	$r24,$r4
  if (NULL == vma) {
900000000800f65c:	40008880 	beqz	$r4,136(0x88) # 900000000800f6e4 <alloc_vma_stack+0xdc>
    printf("vma kalloc failed\n");
    return -1;
  }

  if (uvmalloc1(p->pagetable, start, end, PTE_P | PTE_W | PTE_PLV) != 0) {
900000000800f660:	02863007 	addi.w	$r7,$r0,396(0x18c)
900000000800f664:	14ffffe6 	lu12i.w	$r6,524287(0x7ffff)
900000000800f668:	14fff365 	lu12i.w	$r5,524187(0x7ff9b)
900000000800f66c:	28c18324 	ld.d	$r4,$r25,96(0x60)
900000000800f670:	574157ff 	bl	-48812(0xfff4154) # 90000000080037c4 <uvmalloc1>
900000000800f674:	44008480 	bnez	$r4,132(0x84) # 900000000800f6f8 <alloc_vma_stack+0xf0>
    // 判断读权限
    printf("user stack vma alloc failed\n");
    kfree(vma);
    return -1;
  }
  vma->type = STACK;
900000000800f678:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800f67c:	2980030c 	st.w	$r12,$r24,0
  vma->perm = PTE_P | PTE_W;
900000000800f680:	0286000c 	addi.w	$r12,$r0,384(0x180)
900000000800f684:	2980130c 	st.w	$r12,$r24,4(0x4)
  vma->addr = start;
900000000800f688:	14fff36c 	lu12i.w	$r12,524187(0x7ff9b)
900000000800f68c:	29c0230c 	st.d	$r12,$r24,8(0x8)
  vma->end = end;
900000000800f690:	14ffffec 	lu12i.w	$r12,524287(0x7ffff)
900000000800f694:	29c0630c 	st.d	$r12,$r24,24(0x18)
  vma->sz = INIT_STACK_SIZE;
900000000800f698:	14000c8c 	lu12i.w	$r12,100(0x64)
900000000800f69c:	29c0430c 	st.d	$r12,$r24,16(0x10)
  vma->flags = 0;
900000000800f6a0:	29808300 	st.w	$r0,$r24,32(0x20)
  vma->fd = -1;
900000000800f6a4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800f6a8:	2980930c 	st.w	$r12,$r24,36(0x24)
  vma->f_off = -1;
900000000800f6ac:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800f6b0:	29c0a30c 	st.d	$r12,$r24,40(0x28)
  vma->prev = find_vma;
900000000800f6b4:	29c0c317 	st.d	$r23,$r24,48(0x30)
  vma->next = find_vma->next;
900000000800f6b8:	28c0e2ec 	ld.d	$r12,$r23,56(0x38)
900000000800f6bc:	29c0e30c 	st.d	$r12,$r24,56(0x38)
  find_vma->next->prev = vma;
900000000800f6c0:	29c0c198 	st.d	$r24,$r12,48(0x30)
  find_vma->next = vma;
900000000800f6c4:	29c0e2f8 	st.d	$r24,$r23,56(0x38)
  return 0;
}
900000000800f6c8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800f6cc:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800f6d0:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800f6d4:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800f6d8:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800f6dc:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800f6e0:	4c000020 	jirl	$r0,$r1,0
    printf("vma kalloc failed\n");
900000000800f6e4:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f6e8:	02cc7084 	addi.d	$r4,$r4,796(0x31c)
900000000800f6ec:	570b8bff 	bl	-62584(0xfff0b88) # 9000000008000274 <printf>
    return -1;
900000000800f6f0:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800f6f4:	53ffd7ff 	b	-44(0xfffffd4) # 900000000800f6c8 <alloc_vma_stack+0xc0>
    printf("user stack vma alloc failed\n");
900000000800f6f8:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f6fc:	02cfa084 	addi.d	$r4,$r4,1000(0x3e8)
900000000800f700:	570b77ff 	bl	-62604(0xfff0b74) # 9000000008000274 <printf>
    kfree(vma);
900000000800f704:	00150304 	move	$r4,$r24
900000000800f708:	57363bff 	bl	-51656(0xfff3638) # 9000000008002d40 <kfree>
    return -1;
900000000800f70c:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800f710:	53ffbbff 	b	-72(0xfffffb8) # 900000000800f6c8 <alloc_vma_stack+0xc0>

900000000800f714 <handle_stack_page_fault>:

// 栈空间不足，需要分配新的栈空间，至多分配到USER_MMAP_START
uint64 handle_stack_page_fault(struct proc *p, uint64 va) {

  if (!(va >= USER_STACK_DOWN && va < USER_STACK_TOP)) {
900000000800f714:	1520002c 	lu12i.w	$r12,-458751(0x90001)
900000000800f718:	0010b0ac 	add.d	$r12,$r5,$r12
900000000800f71c:	1420000d 	lu12i.w	$r13,65536(0x10000)
900000000800f720:	6c01118d 	bgeu	$r12,$r13,272(0x110) # 900000000800f830 <handle_stack_page_fault+0x11c>
uint64 handle_stack_page_fault(struct proc *p, uint64 va) {
900000000800f724:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800f728:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800f72c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800f730:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800f734:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800f738:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800f73c:	29c0007a 	st.d	$r26,$r3,0
900000000800f740:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800f744:	001500ba 	move	$r26,$r5
900000000800f748:	00150099 	move	$r25,$r4
    return -1;
  }
  struct vma *vma = p->vma->next;
900000000800f74c:	28d4008d 	ld.d	$r13,$r4,1280(0x500)
900000000800f750:	28c0e1b7 	ld.d	$r23,$r13,56(0x38)
  while (vma != p->vma) {
900000000800f754:	5800a9b7 	beq	$r13,$r23,168(0xa8) # 900000000800f7fc <handle_stack_page_fault+0xe8>
    if (vma->type == STACK) {
900000000800f758:	288002ee 	ld.w	$r14,$r23,0
900000000800f75c:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800f760:	580019cc 	beq	$r14,$r12,24(0x18) # 900000000800f778 <handle_stack_page_fault+0x64>
900000000800f764:	0280080e 	addi.w	$r14,$r0,2(0x2)
      break;
    }
    vma = vma->next;
900000000800f768:	28c0e2f7 	ld.d	$r23,$r23,56(0x38)
  while (vma != p->vma) {
900000000800f76c:	580091b7 	beq	$r13,$r23,144(0x90) # 900000000800f7fc <handle_stack_page_fault+0xe8>
    if (vma->type == STACK) {
900000000800f770:	288002ec 	ld.w	$r12,$r23,0
900000000800f774:	5ffff58e 	bne	$r12,$r14,-12(0x3fff4) # 900000000800f768 <handle_stack_page_fault+0x54>
  }
  if (vma->type != STACK) {
    printf("handle_stack_page_fault: vma type is not stack\n");
    return -1;
  }
  printf("handle stack page fault now start %p, now end :%p, va:%p\n",
900000000800f778:	00150347 	move	$r7,$r26
900000000800f77c:	28c062e6 	ld.d	$r6,$r23,24(0x18)
900000000800f780:	28c022e5 	ld.d	$r5,$r23,8(0x8)
900000000800f784:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f788:	02ceb084 	addi.d	$r4,$r4,940(0x3ac)
900000000800f78c:	570aebff 	bl	-62744(0xfff0ae8) # 9000000008000274 <printf>
         vma->addr, vma->end, va);
  uint64 start = vma->addr - INCREASE_STACK_SIZE_PER_FAULT;
900000000800f790:	28c022e6 	ld.d	$r6,$r23,8(0x8)
900000000800f794:	15fff385 	lu12i.w	$r5,-100(0xfff9c)
900000000800f798:	001094d8 	add.d	$r24,$r6,$r5
  if (start > va) {
    start = PGROUNDDOWN(va);
900000000800f79c:	15ffffec 	lu12i.w	$r12,-1(0xfffff)
900000000800f7a0:	0014b34c 	and	$r12,$r26,$r12
900000000800f7a4:	0012e345 	sltu	$r5,$r26,$r24
900000000800f7a8:	0013158c 	maskeqz	$r12,$r12,$r5
900000000800f7ac:	00139705 	masknez	$r5,$r24,$r5
900000000800f7b0:	00151598 	or	$r24,$r12,$r5
  }
  uint64 end = vma->addr;

  if (uvmalloc1(p->pagetable, start, end, PTE_P | PTE_W | PTE_PLV) != 0) {
900000000800f7b4:	02863007 	addi.w	$r7,$r0,396(0x18c)
900000000800f7b8:	00150305 	move	$r5,$r24
900000000800f7bc:	28c18324 	ld.d	$r4,$r25,96(0x60)
900000000800f7c0:	574007ff 	bl	-49148(0xfff4004) # 90000000080037c4 <uvmalloc1>
900000000800f7c4:	44005880 	bnez	$r4,88(0x58) # 900000000800f81c <handle_stack_page_fault+0x108>
    printf("user stack vma alloc failed\n");
    return -1;
  }
  vma->addr = start;
900000000800f7c8:	29c022f8 	st.d	$r24,$r23,8(0x8)
  vma->sz = vma->sz + INCREASE_STACK_SIZE_PER_FAULT;
900000000800f7cc:	28c042ec 	ld.d	$r12,$r23,16(0x10)
900000000800f7d0:	14000c8d 	lu12i.w	$r13,100(0x64)
900000000800f7d4:	0010b58c 	add.d	$r12,$r12,$r13
900000000800f7d8:	29c042ec 	st.d	$r12,$r23,16(0x10)

  return 0;
}
900000000800f7dc:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800f7e0:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800f7e4:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800f7e8:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800f7ec:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800f7f0:	28c0007a 	ld.d	$r26,$r3,0
900000000800f7f4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800f7f8:	4c000020 	jirl	$r0,$r1,0
  if (vma->type != STACK) {
900000000800f7fc:	288002ed 	ld.w	$r13,$r23,0
900000000800f800:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800f804:	5bff75ac 	beq	$r13,$r12,-140(0x3ff74) # 900000000800f778 <handle_stack_page_fault+0x64>
    printf("handle_stack_page_fault: vma type is not stack\n");
900000000800f808:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f80c:	02cbe084 	addi.d	$r4,$r4,760(0x2f8)
900000000800f810:	570a67ff 	bl	-62876(0xfff0a64) # 9000000008000274 <printf>
    return -1;
900000000800f814:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800f818:	53ffc7ff 	b	-60(0xfffffc4) # 900000000800f7dc <handle_stack_page_fault+0xc8>
    printf("user stack vma alloc failed\n");
900000000800f81c:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f820:	02cb1084 	addi.d	$r4,$r4,708(0x2c4)
900000000800f824:	570a53ff 	bl	-62896(0xfff0a50) # 9000000008000274 <printf>
    return -1;
900000000800f828:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800f82c:	53ffb3ff 	b	-80(0xfffffb0) # 900000000800f7dc <handle_stack_page_fault+0xc8>
    return -1;
900000000800f830:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
}
900000000800f834:	4c000020 	jirl	$r0,$r1,0

900000000800f838 <get_proc_sp>:

uint64 get_proc_sp(struct proc *p) {
  struct vma *vma = p->vma->next;
900000000800f838:	28d4008e 	ld.d	$r14,$r4,1280(0x500)
900000000800f83c:	28c0e1cc 	ld.d	$r12,$r14,56(0x38)
  while (vma != p->vma) {
900000000800f840:	58002dcc 	beq	$r14,$r12,44(0x2c) # 900000000800f86c <get_proc_sp+0x34>
    if (vma->type == STACK) {
900000000800f844:	2880018f 	ld.w	$r15,$r12,0
900000000800f848:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000800f84c:	580019ed 	beq	$r15,$r13,24(0x18) # 900000000800f864 <get_proc_sp+0x2c>
900000000800f850:	0280080f 	addi.w	$r15,$r0,2(0x2)
      break;
    }
    vma = vma->next;
900000000800f854:	28c0e18c 	ld.d	$r12,$r12,56(0x38)
  while (vma != p->vma) {
900000000800f858:	580015cc 	beq	$r14,$r12,20(0x14) # 900000000800f86c <get_proc_sp+0x34>
    if (vma->type == STACK) {
900000000800f85c:	2880018d 	ld.w	$r13,$r12,0
900000000800f860:	5ffff5af 	bne	$r13,$r15,-12(0x3fff4) # 900000000800f854 <get_proc_sp+0x1c>
  }
  if (vma->type != STACK) {
    printf("get_proc_sp: vma type is not stack\n");
    return -1;
  }
  return vma->end;
900000000800f864:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800f868:	4c000020 	jirl	$r0,$r1,0
  if (vma->type != STACK) {
900000000800f86c:	2880018e 	ld.w	$r14,$r12,0
900000000800f870:	0280080d 	addi.w	$r13,$r0,2(0x2)
900000000800f874:	5bfff1cd 	beq	$r14,$r13,-16(0x3fff0) # 900000000800f864 <get_proc_sp+0x2c>
uint64 get_proc_sp(struct proc *p) {
900000000800f878:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800f87c:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800f880:	29c00076 	st.d	$r22,$r3,0
900000000800f884:	02c04076 	addi.d	$r22,$r3,16(0x10)
    printf("get_proc_sp: vma type is not stack\n");
900000000800f888:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800f88c:	02cba084 	addi.d	$r4,$r4,744(0x2e8)
900000000800f890:	5709e7ff 	bl	-63004(0xfff09e4) # 9000000008000274 <printf>
    return -1;
900000000800f894:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800f898:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800f89c:	28c00076 	ld.d	$r22,$r3,0
900000000800f8a0:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800f8a4:	4c000020 	jirl	$r0,$r1,0

900000000800f8a8 <set_sigaction>:
#include "include/memlayout.h"
#include "include/printf.h"
#include "include/proc.h"
#include "include/types.h"

int set_sigaction(int signum, sigaction const *act, sigaction *oldact) {
900000000800f8a8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800f8ac:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800f8b0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800f8b4:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800f8b8:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800f8bc:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800f8c0:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800f8c4:	00150097 	move	$r23,$r4
900000000800f8c8:	001500b8 	move	$r24,$r5
900000000800f8cc:	001500d9 	move	$r25,$r6

  struct proc *p = myproc();
900000000800f8d0:	571e5bff 	bl	-57768(0xfff1e58) # 9000000008001728 <myproc>
  if (p->sigaction[signum].__sigaction_handler.sa_handler != NULL &&
900000000800f8d4:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000800f8d8:	001db2ec 	mul.d	$r12,$r23,$r12
900000000800f8dc:	0010b08c 	add.d	$r12,$r4,$r12
900000000800f8e0:	28d4618c 	ld.d	$r12,$r12,1304(0x518)
900000000800f8e4:	40002d80 	beqz	$r12,44(0x2c) # 900000000800f910 <set_sigaction+0x68>
900000000800f8e8:	40002b20 	beqz	$r25,40(0x28) # 900000000800f910 <set_sigaction+0x68>
      oldact != NULL) {
    *oldact = p->sigaction[signum];
900000000800f8ec:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000800f8f0:	001db2ec 	mul.d	$r12,$r23,$r12
900000000800f8f4:	0010b08c 	add.d	$r12,$r4,$r12
900000000800f8f8:	28d4618d 	ld.d	$r13,$r12,1304(0x518)
900000000800f8fc:	29c0032d 	st.d	$r13,$r25,0
900000000800f900:	28d4818d 	ld.d	$r13,$r12,1312(0x520)
900000000800f904:	29c0232d 	st.d	$r13,$r25,8(0x8)
900000000800f908:	28d4a18c 	ld.d	$r12,$r12,1320(0x528)
900000000800f90c:	29c0432c 	st.d	$r12,$r25,16(0x10)
  }
  if (act != NULL) {
900000000800f910:	40002b00 	beqz	$r24,40(0x28) # 900000000800f938 <set_sigaction+0x90>
    p->sigaction[signum] = *act;
900000000800f914:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000800f918:	001db2f7 	mul.d	$r23,$r23,$r12
900000000800f91c:	0010dc84 	add.d	$r4,$r4,$r23
900000000800f920:	28c0030c 	ld.d	$r12,$r24,0
900000000800f924:	29d4608c 	st.d	$r12,$r4,1304(0x518)
900000000800f928:	28c0230c 	ld.d	$r12,$r24,8(0x8)
900000000800f92c:	29d4808c 	st.d	$r12,$r4,1312(0x520)
900000000800f930:	28c0430c 	ld.d	$r12,$r24,16(0x10)
900000000800f934:	29d4a08c 	st.d	$r12,$r4,1320(0x528)
  }
  return 0;
}
900000000800f938:	00150004 	move	$r4,$r0
900000000800f93c:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800f940:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800f944:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800f948:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800f94c:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800f950:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800f954:	4c000020 	jirl	$r0,$r1,0

900000000800f958 <sigprocmask>:

int sigprocmask(int how, __sigset_t *set, __sigset_t *oldset) {
900000000800f958:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800f95c:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800f960:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800f964:	29c06077 	st.d	$r23,$r3,24(0x18)
900000000800f968:	29c04078 	st.d	$r24,$r3,16(0x10)
900000000800f96c:	29c02079 	st.d	$r25,$r3,8(0x8)
900000000800f970:	02c0c076 	addi.d	$r22,$r3,48(0x30)
900000000800f974:	00150097 	move	$r23,$r4
900000000800f978:	001500b9 	move	$r25,$r5
900000000800f97c:	001500d8 	move	$r24,$r6
  struct proc *p = myproc();
900000000800f980:	571dabff 	bl	-57944(0xfff1da8) # 9000000008001728 <myproc>

  for (int i = 0; i < SIGSET_LEN; i++) {
    if (oldset != NULL) {
900000000800f984:	40000f00 	beqz	$r24,12(0xc) # 900000000800f990 <sigprocmask+0x38>
      oldset->__val[i] = p->sig_set.__val[i];
900000000800f988:	260b308c 	ldptr.d	$r12,$r4,2864(0xb30)
900000000800f98c:	29c0030c 	st.d	$r12,$r24,0
    }
    if (set == NULL)
900000000800f990:	40001b20 	beqz	$r25,24(0x18) # 900000000800f9a8 <sigprocmask+0x50>
      continue;
    switch (how) {
900000000800f994:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800f998:	58005aec 	beq	$r23,$r12,88(0x58) # 900000000800f9f0 <sigprocmask+0x98>
900000000800f99c:	0280080c 	addi.w	$r12,$r0,2(0x2)
900000000800f9a0:	580066ec 	beq	$r23,$r12,100(0x64) # 900000000800fa04 <sigprocmask+0xac>
900000000800f9a4:	40003ae0 	beqz	$r23,56(0x38) # 900000000800f9dc <sigprocmask+0x84>
      break;
      // panic("invalid how\n");
    }
  }
  // SIGTERM SIGKILL SIGSTOP cannot be masked
  p->sig_set.__val[0] &= 1ul << SIGTERM | 1ul << SIGKILL | 1ul << SIGSTOP;
900000000800f9a8:	260b308c 	ldptr.d	$r12,$r4,2864(0xb30)
900000000800f9ac:	1400110d 	lu12i.w	$r13,136(0x88)
900000000800f9b0:	038801ad 	ori	$r13,$r13,0x200
900000000800f9b4:	0014b58c 	and	$r12,$r12,$r13
900000000800f9b8:	270b308c 	stptr.d	$r12,$r4,2864(0xb30)
  return 0;
}
900000000800f9bc:	00150004 	move	$r4,$r0
900000000800f9c0:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800f9c4:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800f9c8:	28c06077 	ld.d	$r23,$r3,24(0x18)
900000000800f9cc:	28c04078 	ld.d	$r24,$r3,16(0x10)
900000000800f9d0:	28c02079 	ld.d	$r25,$r3,8(0x8)
900000000800f9d4:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800f9d8:	4c000020 	jirl	$r0,$r1,0
      p->sig_set.__val[i] |= set->__val[i];
900000000800f9dc:	260b308c 	ldptr.d	$r12,$r4,2864(0xb30)
900000000800f9e0:	28c0032d 	ld.d	$r13,$r25,0
900000000800f9e4:	0015358c 	or	$r12,$r12,$r13
900000000800f9e8:	270b308c 	stptr.d	$r12,$r4,2864(0xb30)
      break;
900000000800f9ec:	53ffbfff 	b	-68(0xfffffbc) # 900000000800f9a8 <sigprocmask+0x50>
      p->sig_set.__val[i] &= ~(set->__val[i]);
900000000800f9f0:	28c0032c 	ld.d	$r12,$r25,0
900000000800f9f4:	260b308d 	ldptr.d	$r13,$r4,2864(0xb30)
900000000800f9f8:	0016b1ac 	andn	$r12,$r13,$r12
900000000800f9fc:	270b308c 	stptr.d	$r12,$r4,2864(0xb30)
      break;
900000000800fa00:	53ffabff 	b	-88(0xfffffa8) # 900000000800f9a8 <sigprocmask+0x50>
      p->sig_set.__val[i] = set->__val[i];
900000000800fa04:	28c0032c 	ld.d	$r12,$r25,0
900000000800fa08:	270b308c 	stptr.d	$r12,$r4,2864(0xb30)
      break;
900000000800fa0c:	53ff9fff 	b	-100(0xfffff9c) # 900000000800f9a8 <sigprocmask+0x50>

900000000800fa10 <rt_sigreturn>:

uint64 rt_sigreturn(void) {
900000000800fa10:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800fa14:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800fa18:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800fa1c:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800fa20:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct proc *p = myproc();
900000000800fa24:	571d07ff 	bl	-58108(0xfff1d04) # 9000000008001728 <myproc>
900000000800fa28:	00150097 	move	$r23,$r4
  memcpy(p->trapframe, p->sig_tf, sizeof(struct trapframe));
900000000800fa2c:	02848006 	addi.w	$r6,$r0,288(0x120)
900000000800fa30:	260b4085 	ldptr.d	$r5,$r4,2880(0xb40)
900000000800fa34:	28c1c084 	ld.d	$r4,$r4,112(0x70)
900000000800fa38:	57165bff 	bl	-59816(0xfff1658) # 9000000008001090 <memcpy>
  kfree(p->sig_tf);
900000000800fa3c:	260b42e4 	ldptr.d	$r4,$r23,2880(0xb40)
900000000800fa40:	573303ff 	bl	-52480(0xfff3300) # 9000000008002d40 <kfree>
  p->sig_tf = 0;
900000000800fa44:	270b42e0 	stptr.d	$r0,$r23,2880(0xb40)
  return p->trapframe->a0;
900000000800fa48:	28c1c2ec 	ld.d	$r12,$r23,112(0x70)
}
900000000800fa4c:	28c06184 	ld.d	$r4,$r12,24(0x18)
900000000800fa50:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800fa54:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800fa58:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800fa5c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800fa60:	4c000020 	jirl	$r0,$r1,0

900000000800fa64 <sighandle>:

void sighandle(void) {
900000000800fa64:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800fa68:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800fa6c:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800fa70:	29c02077 	st.d	$r23,$r3,8(0x8)
900000000800fa74:	29c00078 	st.d	$r24,$r3,0
900000000800fa78:	02c08076 	addi.d	$r22,$r3,32(0x20)
  struct proc *p = myproc();
900000000800fa7c:	571cafff 	bl	-58196(0xfff1cac) # 9000000008001728 <myproc>
  int signum = p->killed;
900000000800fa80:	2880c098 	ld.w	$r24,$r4,48(0x30)
  // printf("sighandle %p a0:%d a7:%d\n", p->sig_pending.__val[0],
  // p->trapframe->a0, p->trapframe->a7);
  if (p->sigaction[signum].__sigaction_handler.sa_handler != NULL) {
900000000800fa84:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000800fa88:	001db30c 	mul.d	$r12,$r24,$r12
900000000800fa8c:	0010b08c 	add.d	$r12,$r4,$r12
900000000800fa90:	28d4618c 	ld.d	$r12,$r12,1304(0x518)
900000000800fa94:	4000a180 	beqz	$r12,160(0xa0) # 900000000800fb34 <sighandle+0xd0>
900000000800fa98:	00150097 	move	$r23,$r4
    p->sig_tf = kalloc();
900000000800fa9c:	573437ff 	bl	-52172(0xfff3434) # 9000000008002ed0 <kalloc>
900000000800faa0:	270b42e4 	stptr.d	$r4,$r23,2880(0xb40)
    memcpy(p->sig_tf, p->trapframe, sizeof(struct trapframe));
900000000800faa4:	02848006 	addi.w	$r6,$r0,288(0x120)
900000000800faa8:	28c1c2e5 	ld.d	$r5,$r23,112(0x70)
900000000800faac:	5715e7ff 	bl	-59932(0xfff15e4) # 9000000008001090 <memcpy>
    p->trapframe->era =
900000000800fab0:	28c1c2ed 	ld.d	$r13,$r23,112(0x70)
        (uint64)p->sigaction[signum].__sigaction_handler.sa_handler;
900000000800fab4:	0280600c 	addi.w	$r12,$r0,24(0x18)
900000000800fab8:	001db30c 	mul.d	$r12,$r24,$r12
900000000800fabc:	0010b2ec 	add.d	$r12,$r23,$r12
    p->trapframe->era =
900000000800fac0:	28d4618c 	ld.d	$r12,$r12,1304(0x518)
900000000800fac4:	29c421ac 	st.d	$r12,$r13,264(0x108)
    p->trapframe->ra = (uint64)SIGTRAMPOLINE;
900000000800fac8:	28c1c2ec 	ld.d	$r12,$r23,112(0x70)
900000000800facc:	14001fad 	lu12i.w	$r13,253(0xfd)
900000000800fad0:	29c0018d 	st.d	$r13,$r12,0
    p->trapframe->sp = p->trapframe->sp - PGSIZE;
900000000800fad4:	28c1c2ed 	ld.d	$r13,$r23,112(0x70)
900000000800fad8:	28c041ac 	ld.d	$r12,$r13,16(0x10)
900000000800fadc:	15ffffee 	lu12i.w	$r14,-1(0xfffff)
900000000800fae0:	0010b98c 	add.d	$r12,$r12,$r14
900000000800fae4:	29c041ac 	st.d	$r12,$r13,16(0x10)
    printf("sighandle epc:%p ra:%p\n", p->trapframe->era,
900000000800fae8:	28c1c2ec 	ld.d	$r12,$r23,112(0x70)
900000000800faec:	28c00186 	ld.d	$r6,$r12,0
900000000800faf0:	28c42185 	ld.d	$r5,$r12,264(0x108)
900000000800faf4:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800faf8:	02c29084 	addi.d	$r4,$r4,164(0xa4)
900000000800fafc:	57077bff 	bl	-63624(0xfff0778) # 9000000008000274 <printf>
                p->trapframe->ra);
    p->sig_pending.__val[0] &= ~(1ul << signum);
900000000800fb00:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800fb04:	0018e18c 	sll.d	$r12,$r12,$r24
900000000800fb08:	260b3aed 	ldptr.d	$r13,$r23,2872(0xb38)
900000000800fb0c:	0016b1ac 	andn	$r12,$r13,$r12
900000000800fb10:	270b3aec 	stptr.d	$r12,$r23,2872(0xb38)
    if (p->sig_pending.__val[0] == 0) {
900000000800fb14:	44000980 	bnez	$r12,8(0x8) # 900000000800fb1c <sighandle+0xb8>
      p->killed = 0;
900000000800fb18:	2980c2e0 	st.w	$r0,$r23,48(0x30)
    }
  } else {
    exit(-1);
  }
900000000800fb1c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800fb20:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800fb24:	28c02077 	ld.d	$r23,$r3,8(0x8)
900000000800fb28:	28c00078 	ld.d	$r24,$r3,0
900000000800fb2c:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800fb30:	4c000020 	jirl	$r0,$r1,0
    exit(-1);
900000000800fb34:	02bffc04 	addi.w	$r4,$r0,-1(0xfff)
900000000800fb38:	57224fff 	bl	-56756(0xfff224c) # 9000000008001d84 <exit>
900000000800fb3c:	53ffe3ff 	b	-32(0xfffffe0) # 900000000800fb1c <sighandle+0xb8>

900000000800fb40 <sys_rt_sigaction>:
 * @param act 信号处理函数结构体
 * @param oldact 旧的信号处理函数结构体
 * @return 成功返回0，失败返回-1
 */

uint64 sys_rt_sigaction(void) {
900000000800fb40:	02fe8063 	addi.d	$r3,$r3,-96(0xfa0)
900000000800fb44:	29c16061 	st.d	$r1,$r3,88(0x58)
900000000800fb48:	29c14076 	st.d	$r22,$r3,80(0x50)
900000000800fb4c:	02c18076 	addi.d	$r22,$r3,96(0x60)
  int signum;
  sigaction *ptr_act = NULL;    // struct sigaction const *act
900000000800fb50:	29ff82c0 	st.d	$r0,$r22,-32(0xfe0)
  sigaction *ptr_oldact = NULL; // struct sigaction *oldact
900000000800fb54:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)

  argint(0, &signum);
900000000800fb58:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
900000000800fb5c:	00150004 	move	$r4,$r0
900000000800fb60:	576b3fff 	bl	-38084(0xfff6b3c) # 900000000800669c <argint>
  if (signum < 0 || signum > SIGRTMAX) {
900000000800fb64:	28bfb2ce 	ld.w	$r14,$r22,-20(0xfec)
900000000800fb68:	0281000d 	addi.w	$r13,$r0,64(0x40)
    return -1;
900000000800fb6c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (signum < 0 || signum > SIGRTMAX) {
900000000800fb70:	6800c5ae 	bltu	$r13,$r14,196(0xc4) # 900000000800fc34 <sys_rt_sigaction+0xf4>
  }
  argaddr(1, (uint64 *)&ptr_act);
900000000800fb74:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
900000000800fb78:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fb7c:	576ba7ff 	bl	-37980(0xfff6ba4) # 9000000008006720 <argaddr>
  argaddr(2, (uint64 *)&ptr_oldact);
900000000800fb80:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
900000000800fb84:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800fb88:	576b9bff 	bl	-37992(0xfff6b98) # 9000000008006720 <argaddr>

  // copy struct sigaction from user space
  sigaction act = {0};
900000000800fb8c:	29ff02c0 	st.d	$r0,$r22,-64(0xfc0)
900000000800fb90:	29ff22c0 	st.d	$r0,$r22,-56(0xfc8)
900000000800fb94:	29ff42c0 	st.d	$r0,$r22,-48(0xfd0)
  sigaction oldact = {0};
900000000800fb98:	29fea2c0 	st.d	$r0,$r22,-88(0xfa8)
900000000800fb9c:	29fec2c0 	st.d	$r0,$r22,-80(0xfb0)
900000000800fba0:	29fee2c0 	st.d	$r0,$r22,-72(0xfb8)

  if (ptr_act) {
900000000800fba4:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000800fba8:	4000a0a0 	beqz	$r5,160(0xa0) # 900000000800fc48 <sys_rt_sigaction+0x108>
    if (copyin(myproc()->pagetable, (char *)&(act), (uint64)ptr_act,
900000000800fbac:	571b7fff 	bl	-58500(0xfff1b7c) # 9000000008001728 <myproc>
900000000800fbb0:	02806007 	addi.w	$r7,$r0,24(0x18)
900000000800fbb4:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
900000000800fbb8:	02ff02c5 	addi.d	$r5,$r22,-64(0xfc0)
900000000800fbbc:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800fbc0:	57443bff 	bl	-48072(0xfff4438) # 9000000008003ff8 <copyin>
               sizeof(sigaction)) < 0) {
      return -1;
900000000800fbc4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    if (copyin(myproc()->pagetable, (char *)&(act), (uint64)ptr_act,
900000000800fbc8:	60006c80 	blt	$r4,$r0,108(0x6c) # 900000000800fc34 <sys_rt_sigaction+0xf4>
    }
  }

  if (set_sigaction(signum, ptr_act ? &act : NULL,
900000000800fbcc:	28bfb2c4 	ld.w	$r4,$r22,-20(0xfec)
900000000800fbd0:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000800fbd4:	02ff02cc 	addi.d	$r12,$r22,-64(0xfc0)
900000000800fbd8:	00131585 	maskeqz	$r5,$r12,$r5
900000000800fbdc:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
900000000800fbe0:	02fea2cc 	addi.d	$r12,$r22,-88(0xfa8)
900000000800fbe4:	00131986 	maskeqz	$r6,$r12,$r6
900000000800fbe8:	57fcc3ff 	bl	-832(0xffffcc0) # 900000000800f8a8 <set_sigaction>
                    ptr_oldact ? &oldact : NULL) < 0) {
    return -1;
900000000800fbec:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (set_sigaction(signum, ptr_act ? &act : NULL,
900000000800fbf0:	60004480 	blt	$r4,$r0,68(0x44) # 900000000800fc34 <sys_rt_sigaction+0xf4>
  }

  if (ptr_oldact) {
900000000800fbf4:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000800fbf8:	40002580 	beqz	$r12,36(0x24) # 900000000800fc1c <sys_rt_sigaction+0xdc>
    if (copyout(myproc()->pagetable, (uint64)ptr_oldact, (char *)&(oldact),
900000000800fbfc:	571b2fff 	bl	-58580(0xfff1b2c) # 9000000008001728 <myproc>
900000000800fc00:	02806007 	addi.w	$r7,$r0,24(0x18)
900000000800fc04:	02fea2c6 	addi.d	$r6,$r22,-88(0xfa8)
900000000800fc08:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000800fc0c:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800fc10:	57427fff 	bl	-48516(0xfff427c) # 9000000008003e8c <copyout>
                sizeof(sigaction)) < 0) {
      return -1;
900000000800fc14:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
    if (copyout(myproc()->pagetable, (uint64)ptr_oldact, (char *)&(oldact),
900000000800fc18:	60001c80 	blt	$r4,$r0,28(0x1c) # 900000000800fc34 <sys_rt_sigaction+0xf4>
    }
  }
  printf("sys_rt_sigaction: signum = %d, act fp:%p \n", signum,
900000000800fc1c:	28ff02c6 	ld.d	$r6,$r22,-64(0xfc0)
900000000800fc20:	28bfb2c5 	ld.w	$r5,$r22,-20(0xfec)
900000000800fc24:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800fc28:	02fe3084 	addi.d	$r4,$r4,-116(0xf8c)
900000000800fc2c:	57064bff 	bl	-63928(0xfff0648) # 9000000008000274 <printf>
              act.__sigaction_handler.sa_handler);
  return 0;
900000000800fc30:	0015000c 	move	$r12,$r0
}
900000000800fc34:	00150184 	move	$r4,$r12
900000000800fc38:	28c16061 	ld.d	$r1,$r3,88(0x58)
900000000800fc3c:	28c14076 	ld.d	$r22,$r3,80(0x50)
900000000800fc40:	02c18063 	addi.d	$r3,$r3,96(0x60)
900000000800fc44:	4c000020 	jirl	$r0,$r1,0
  if (set_sigaction(signum, ptr_act ? &act : NULL,
900000000800fc48:	28bfb2c4 	ld.w	$r4,$r22,-20(0xfec)
900000000800fc4c:	53ff93ff 	b	-112(0xfffff90) # 900000000800fbdc <sys_rt_sigaction+0x9c>

900000000800fc50 <sys_rt_sigprocmask>:
 * @param how 信号屏蔽字的操作
 * @param set 信号屏蔽字
 * @param oldset 旧的信号屏蔽字
 * @return 成功返回0，失败返回-1
 */
uint64 sys_rt_sigprocmask(void) {
900000000800fc50:	02ff0063 	addi.d	$r3,$r3,-64(0xfc0)
900000000800fc54:	29c0e061 	st.d	$r1,$r3,56(0x38)
900000000800fc58:	29c0c076 	st.d	$r22,$r3,48(0x30)
900000000800fc5c:	02c10076 	addi.d	$r22,$r3,64(0x40)
  int how;
  uint64 uptr_set, uptr_oldset;

  __sigset_t set, oldset;

  argint(0, &how);
900000000800fc60:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
900000000800fc64:	00150004 	move	$r4,$r0
900000000800fc68:	576a37ff 	bl	-38348(0xfff6a34) # 900000000800669c <argint>
  argaddr(1, &uptr_set);
900000000800fc6c:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
900000000800fc70:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fc74:	576aafff 	bl	-38228(0xfff6aac) # 9000000008006720 <argaddr>
  argaddr(2, &uptr_oldset);
900000000800fc78:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
900000000800fc7c:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800fc80:	576aa3ff 	bl	-38240(0xfff6aa0) # 9000000008006720 <argaddr>

  if (uptr_set &&
900000000800fc84:	28ff82cc 	ld.d	$r12,$r22,-32(0xfe0)
900000000800fc88:	44007980 	bnez	$r12,120(0x78) # 900000000800fd00 <sys_rt_sigprocmask+0xb0>
      copyin(myproc()->pagetable, (char *)&set, uptr_set, SIGSET_LEN * 8) < 0) {
    return -1;
  }

  if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
900000000800fc8c:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
900000000800fc90:	02ff22cc 	addi.d	$r12,$r22,-56(0xfc8)
900000000800fc94:	00131986 	maskeqz	$r6,$r12,$r6
900000000800fc98:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
900000000800fc9c:	28bfb2c4 	ld.w	$r4,$r22,-20(0xfec)
900000000800fca0:	57fcbbff 	bl	-840(0xffffcb8) # 900000000800f958 <sigprocmask>
    return -1;
900000000800fca4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (sigprocmask(how, &set, uptr_oldset ? &oldset : NULL)) {
900000000800fca8:	44004480 	bnez	$r4,68(0x44) # 900000000800fcec <sys_rt_sigprocmask+0x9c>
  }

  if (uptr_oldset && copyout(myproc()->pagetable, uptr_oldset, (char *)&oldset,
900000000800fcac:	28ff62cc 	ld.d	$r12,$r22,-40(0xfd8)
900000000800fcb0:	40002580 	beqz	$r12,36(0x24) # 900000000800fcd4 <sys_rt_sigprocmask+0x84>
900000000800fcb4:	571a77ff 	bl	-58764(0xfff1a74) # 9000000008001728 <myproc>
900000000800fcb8:	02802007 	addi.w	$r7,$r0,8(0x8)
900000000800fcbc:	02ff22c6 	addi.d	$r6,$r22,-56(0xfc8)
900000000800fcc0:	28ff62c5 	ld.d	$r5,$r22,-40(0xfd8)
900000000800fcc4:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800fcc8:	5741c7ff 	bl	-48700(0xfff41c4) # 9000000008003e8c <copyout>
                             SIGSET_LEN * 8) < 0) {
    return -1;
900000000800fccc:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (uptr_oldset && copyout(myproc()->pagetable, uptr_oldset, (char *)&oldset,
900000000800fcd0:	60001c80 	blt	$r4,$r0,28(0x1c) # 900000000800fcec <sys_rt_sigprocmask+0x9c>
  }
  printf("sys_rt_sigprocmask: how = %d, set = %p\n", how, set.__val[0]);
900000000800fcd4:	28ff42c6 	ld.d	$r6,$r22,-48(0xfd0)
900000000800fcd8:	28bfb2c5 	ld.w	$r5,$r22,-20(0xfec)
900000000800fcdc:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800fce0:	02fc1084 	addi.d	$r4,$r4,-252(0xf04)
900000000800fce4:	570593ff 	bl	-64112(0xfff0590) # 9000000008000274 <printf>
  return 0;
900000000800fce8:	0015000c 	move	$r12,$r0
}
900000000800fcec:	00150184 	move	$r4,$r12
900000000800fcf0:	28c0e061 	ld.d	$r1,$r3,56(0x38)
900000000800fcf4:	28c0c076 	ld.d	$r22,$r3,48(0x30)
900000000800fcf8:	02c10063 	addi.d	$r3,$r3,64(0x40)
900000000800fcfc:	4c000020 	jirl	$r0,$r1,0
      copyin(myproc()->pagetable, (char *)&set, uptr_set, SIGSET_LEN * 8) < 0) {
900000000800fd00:	571a2bff 	bl	-58840(0xfff1a28) # 9000000008001728 <myproc>
900000000800fd04:	02802007 	addi.w	$r7,$r0,8(0x8)
900000000800fd08:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
900000000800fd0c:	02ff42c5 	addi.d	$r5,$r22,-48(0xfd0)
900000000800fd10:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800fd14:	5742e7ff 	bl	-48412(0xfff42e4) # 9000000008003ff8 <copyin>
    return -1;
900000000800fd18:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (uptr_set &&
900000000800fd1c:	67ff7080 	bge	$r4,$r0,-144(0x3ff70) # 900000000800fc8c <sys_rt_sigprocmask+0x3c>
900000000800fd20:	53ffcfff 	b	-52(0xfffffcc) # 900000000800fcec <sys_rt_sigprocmask+0x9c>

900000000800fd24 <sys_rt_sigreturn>:
/**
 * syscall rt_sigreturn将会调用此函数
 * @param regs 保存的寄存器信息
 * @return 成功返回0，失败返回-1
 */
uint64 sys_rt_sigreturn(void) { return rt_sigreturn(); }
900000000800fd24:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800fd28:	29c02061 	st.d	$r1,$r3,8(0x8)
900000000800fd2c:	29c00076 	st.d	$r22,$r3,0
900000000800fd30:	02c04076 	addi.d	$r22,$r3,16(0x10)
900000000800fd34:	57fcdfff 	bl	-804(0xffffcdc) # 900000000800fa10 <rt_sigreturn>
900000000800fd38:	28c02061 	ld.d	$r1,$r3,8(0x8)
900000000800fd3c:	28c00076 	ld.d	$r22,$r3,0
900000000800fd40:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800fd44:	4c000020 	jirl	$r0,$r1,0

900000000800fd48 <sys_tgkill>:
 * @param pid
 * @param tid
 * @param sig
 * @return tgkill返回值
 */
uint64 sys_tgkill(void) {
900000000800fd48:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
900000000800fd4c:	29c06061 	st.d	$r1,$r3,24(0x18)
900000000800fd50:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000800fd54:	02c08076 	addi.d	$r22,$r3,32(0x20)
  int sig;
  int tid;
  int pid;
  argint(0, &pid);
900000000800fd58:	02ff92c5 	addi.d	$r5,$r22,-28(0xfe4)
900000000800fd5c:	00150004 	move	$r4,$r0
900000000800fd60:	57693fff 	bl	-38596(0xfff693c) # 900000000800669c <argint>
  argint(1, &tid);
900000000800fd64:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
900000000800fd68:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fd6c:	576933ff 	bl	-38608(0xfff6930) # 900000000800669c <argint>
  argint(2, &sig);
900000000800fd70:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
900000000800fd74:	02800804 	addi.w	$r4,$r0,2(0x2)
900000000800fd78:	576927ff 	bl	-38620(0xfff6924) # 900000000800669c <argint>
  return tgkill(tid, pid, sig);
900000000800fd7c:	28bfb2c6 	ld.w	$r6,$r22,-20(0xfec)
900000000800fd80:	28bf92c5 	ld.w	$r5,$r22,-28(0xfe4)
900000000800fd84:	28bfa2c4 	ld.w	$r4,$r22,-24(0xfe8)
900000000800fd88:	5724c7ff 	bl	-56124(0xfff24c4) # 900000000800224c <tgkill>
}
900000000800fd8c:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000800fd90:	28c04076 	ld.d	$r22,$r3,16(0x10)
900000000800fd94:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000800fd98:	4c000020 	jirl	$r0,$r1,0

900000000800fd9c <sys_rt_sigtimedwait>:

900000000800fd9c:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
900000000800fda0:	29c02076 	st.d	$r22,$r3,8(0x8)
900000000800fda4:	02c04076 	addi.d	$r22,$r3,16(0x10)
900000000800fda8:	00150004 	move	$r4,$r0
900000000800fdac:	28c02076 	ld.d	$r22,$r3,8(0x8)
900000000800fdb0:	02c04063 	addi.d	$r3,$r3,16(0x10)
900000000800fdb4:	4c000020 	jirl	$r0,$r1,0

900000000800fdb8 <sys_clock_getres>:
  if (pf)
    *pf = f;
  return 0;
}

uint64 sys_clock_getres(void) {
900000000800fdb8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800fdbc:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800fdc0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800fdc4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  uint64 addr;
  if (argaddr(1, &addr) < 0)
900000000800fdc8:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
900000000800fdcc:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fdd0:	576953ff 	bl	-38576(0xfff6950) # 9000000008006720 <argaddr>
    return -1;
900000000800fdd4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(1, &addr) < 0)
900000000800fdd8:	60003880 	blt	$r4,$r0,56(0x38) # 900000000800fe10 <sys_clock_getres+0x58>
  printf("addr: %p\n", addr);
900000000800fddc:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000800fde0:	1c000164 	pcaddu12i	$r4,11(0xb)
900000000800fde4:	02f8a084 	addi.d	$r4,$r4,-472(0xe28)
900000000800fde8:	57048fff 	bl	-64372(0xfff048c) # 9000000008000274 <printf>
  struct timespec2 t;
  t.tv_sec = 0;
900000000800fdec:	29ff62c0 	st.d	$r0,$r22,-40(0xfd8)
  t.tv_nsec = 1;
900000000800fdf0:	0280040c 	addi.w	$r12,$r0,1(0x1)
900000000800fdf4:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  if (either_copyout(1, addr, (void *)&t, sizeof(struct timespec2)) < 0)
900000000800fdf8:	02804007 	addi.w	$r7,$r0,16(0x10)
900000000800fdfc:	02ff62c6 	addi.d	$r6,$r22,-40(0xfd8)
900000000800fe00:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000800fe04:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fe08:	5724a3ff 	bl	-56160(0xfff24a0) # 90000000080022a8 <either_copyout>
900000000800fe0c:	0049fc8c 	srai.d	$r12,$r4,0x3f
    return -1;

  return 0;
}
900000000800fe10:	00150184 	move	$r4,$r12
900000000800fe14:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800fe18:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800fe1c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800fe20:	4c000020 	jirl	$r0,$r1,0

900000000800fe24 <sys_clock_gettime>:

uint64 sys_clock_gettime(void) {
900000000800fe24:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800fe28:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800fe2c:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800fe30:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  uint64 tid, addr;
  if (argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
900000000800fe34:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
900000000800fe38:	00150004 	move	$r4,$r0
900000000800fe3c:	5768e7ff 	bl	-38684(0xfff68e4) # 9000000008006720 <argaddr>
    return -1;
900000000800fe40:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
900000000800fe44:	60008080 	blt	$r4,$r0,128(0x80) # 900000000800fec4 <sys_clock_gettime+0xa0>
900000000800fe48:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
900000000800fe4c:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fe50:	5768d3ff 	bl	-38704(0xfff68d0) # 9000000008006720 <argaddr>
    return -1;
900000000800fe54:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &tid) < 0 || argaddr(1, &addr) < 0)
900000000800fe58:	60006c80 	blt	$r4,$r0,108(0x6c) # 900000000800fec4 <sys_clock_gettime+0xa0>
900000000800fe5c:	000069ac 	rdtime.d	$r12,$r13

  uint64 ticks = r_time();

  //   printf("ticks: %p\n", ticks);
  struct timespec2 t;
  if (tid == 0) {
900000000800fe60:	28ffa2cd 	ld.d	$r13,$r22,-24(0xfe8)
900000000800fe64:	440049a0 	bnez	$r13,72(0x48) # 900000000800feac <sys_clock_gettime+0x88>
    t.tv_sec = ticks / CLK_FREQ;
900000000800fe68:	15af6c6d 	lu12i.w	$r13,-165021(0xd7b63)
900000000800fe6c:	03936dad 	ori	$r13,$r13,0x4db
900000000800fe70:	177bd04d 	lu32i.d	$r13,-270718(0xbde82)
900000000800fe74:	0310c5ad 	lu52i.d	$r13,$r13,1073(0x431)
900000000800fe78:	001eb58e 	mulh.du	$r14,$r12,$r13
900000000800fe7c:	004551ce 	srli.d	$r14,$r14,0x14
900000000800fe80:	29ff42ce 	st.d	$r14,$r22,-48(0xfd0)
    t.tv_nsec = (ticks % CLK_FREQ) * 1000000000 / CLK_FREQ;
900000000800fe84:	14007a0f 	lu12i.w	$r15,976(0x3d0)
900000000800fe88:	03a401ef 	ori	$r15,$r15,0x900
900000000800fe8c:	001dbdce 	mul.d	$r14,$r14,$r15
900000000800fe90:	0011b98c 	sub.d	$r12,$r12,$r14
900000000800fe94:	1477358e 	lu12i.w	$r14,244140(0x3b9ac)
900000000800fe98:	03a801ce 	ori	$r14,$r14,0xa00
900000000800fe9c:	001db98c 	mul.d	$r12,$r12,$r14
900000000800fea0:	001eb58c 	mulh.du	$r12,$r12,$r13
900000000800fea4:	0045518c 	srli.d	$r12,$r12,0x14
900000000800fea8:	29ff62cc 	st.d	$r12,$r22,-40(0xfd8)
    // printf("t.tv_sec: %p\n", t.tv_sec);
    // printf("t.tv_nsec: %p\n", t.tv_nsec);
  }
  if (either_copyout(1, addr, (char *)&t, sizeof(struct timespec2)) < 0)
900000000800feac:	02804007 	addi.w	$r7,$r0,16(0x10)
900000000800feb0:	02ff42c6 	addi.d	$r6,$r22,-48(0xfd0)
900000000800feb4:	28ff82c5 	ld.d	$r5,$r22,-32(0xfe0)
900000000800feb8:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800febc:	5723efff 	bl	-56340(0xfff23ec) # 90000000080022a8 <either_copyout>
900000000800fec0:	0049fc8c 	srai.d	$r12,$r4,0x3f
    return -1;

  return 0;
}
900000000800fec4:	00150184 	move	$r4,$r12
900000000800fec8:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800fecc:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800fed0:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800fed4:	4c000020 	jirl	$r0,$r1,0

900000000800fed8 <sys_gettimeofday>:

uint64 sys_gettimeofday(void) {
900000000800fed8:	02ff4063 	addi.d	$r3,$r3,-48(0xfd0)
900000000800fedc:	29c0a061 	st.d	$r1,$r3,40(0x28)
900000000800fee0:	29c08076 	st.d	$r22,$r3,32(0x20)
900000000800fee4:	02c0c076 	addi.d	$r22,$r3,48(0x30)
  uint64 tt;
  if (argaddr(0, &tt) < 0)
900000000800fee8:	02ffa2c5 	addi.d	$r5,$r22,-24(0xfe8)
900000000800feec:	00150004 	move	$r4,$r0
900000000800fef0:	576833ff 	bl	-38864(0xfff6830) # 9000000008006720 <argaddr>
    return -1;
900000000800fef4:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(0, &tt) < 0)
900000000800fef8:	60006880 	blt	$r4,$r0,104(0x68) # 900000000800ff60 <sys_gettimeofday+0x88>
900000000800fefc:	000069ac 	rdtime.d	$r12,$r13
  uint64 t = r_time();
  TimeSpec ts;
  ts.second = t / CLK_FREQ;
900000000800ff00:	15af6c6d 	lu12i.w	$r13,-165021(0xd7b63)
900000000800ff04:	03936dad 	ori	$r13,$r13,0x4db
900000000800ff08:	177bd04d 	lu32i.d	$r13,-270718(0xbde82)
900000000800ff0c:	0310c5ad 	lu52i.d	$r13,$r13,1073(0x431)
900000000800ff10:	001eb58e 	mulh.du	$r14,$r12,$r13
900000000800ff14:	004551ce 	srli.d	$r14,$r14,0x14
900000000800ff18:	29ff62ce 	st.d	$r14,$r22,-40(0xfd8)
  ts.microSecond = (t % CLK_FREQ) * 1000000 / CLK_FREQ;
900000000800ff1c:	14007a0f 	lu12i.w	$r15,976(0x3d0)
900000000800ff20:	03a401ef 	ori	$r15,$r15,0x900
900000000800ff24:	001dbdce 	mul.d	$r14,$r14,$r15
900000000800ff28:	0011b98c 	sub.d	$r12,$r12,$r14
900000000800ff2c:	14001e8e 	lu12i.w	$r14,244(0xf4)
900000000800ff30:	038901ce 	ori	$r14,$r14,0x240
900000000800ff34:	001db98c 	mul.d	$r12,$r12,$r14
900000000800ff38:	001eb58c 	mulh.du	$r12,$r12,$r13
900000000800ff3c:	0045518c 	srli.d	$r12,$r12,0x14
900000000800ff40:	29ff82cc 	st.d	$r12,$r22,-32(0xfe0)
  // printf("second: %d, microSecond: %d\n", ts.second, ts.microSecond);
  return copyout(myproc()->pagetable, tt, (char *)&ts, sizeof(TimeSpec));
900000000800ff44:	5717e7ff 	bl	-59420(0xfff17e4) # 9000000008001728 <myproc>
900000000800ff48:	02804007 	addi.w	$r7,$r0,16(0x10)
900000000800ff4c:	02ff62c6 	addi.d	$r6,$r22,-40(0xfd8)
900000000800ff50:	28ffa2c5 	ld.d	$r5,$r22,-24(0xfe8)
900000000800ff54:	28c18084 	ld.d	$r4,$r4,96(0x60)
900000000800ff58:	573f37ff 	bl	-49356(0xfff3f34) # 9000000008003e8c <copyout>
900000000800ff5c:	0015008c 	move	$r12,$r4
}
900000000800ff60:	00150184 	move	$r4,$r12
900000000800ff64:	28c0a061 	ld.d	$r1,$r3,40(0x28)
900000000800ff68:	28c08076 	ld.d	$r22,$r3,32(0x20)
900000000800ff6c:	02c0c063 	addi.d	$r3,$r3,48(0x30)
900000000800ff70:	4c000020 	jirl	$r0,$r1,0

900000000800ff74 <sys_utimensat>:

// todo
//  int utimensat(int dirfd, const char *pathname,
//                      const struct timespec times[_Nullable 2], int flags);
uint64 sys_utimensat(void) {
900000000800ff74:	02fa4063 	addi.d	$r3,$r3,-368(0xe90)
900000000800ff78:	29c5a061 	st.d	$r1,$r3,360(0x168)
900000000800ff7c:	29c58076 	st.d	$r22,$r3,352(0x160)
900000000800ff80:	29c56077 	st.d	$r23,$r3,344(0x158)
900000000800ff84:	29c54078 	st.d	$r24,$r3,336(0x150)
900000000800ff88:	29c52079 	st.d	$r25,$r3,328(0x148)
900000000800ff8c:	29c5007a 	st.d	$r26,$r3,320(0x140)
900000000800ff90:	02c5c076 	addi.d	$r22,$r3,368(0x170)
  int fd;
  struct proc *p = myproc();
900000000800ff94:	571797ff 	bl	-59500(0xfff1794) # 9000000008001728 <myproc>
900000000800ff98:	00150099 	move	$r25,$r4
  int fd = -1;
900000000800ff9c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
900000000800ffa0:	29ba62cc 	st.w	$r12,$r22,-360(0xe98)
  struct proc *p = myproc();
900000000800ffa4:	571787ff 	bl	-59516(0xfff1784) # 9000000008001728 <myproc>
900000000800ffa8:	00150097 	move	$r23,$r4
  if (argint(n, &fd) < 0)
900000000800ffac:	02fa62c5 	addi.d	$r5,$r22,-360(0xe98)
900000000800ffb0:	00150004 	move	$r4,$r0
900000000800ffb4:	5766ebff 	bl	-39192(0xfff66e8) # 900000000800669c <argint>
900000000800ffb8:	60026880 	blt	$r4,$r0,616(0x268) # 9000000008010220 <sys_utimensat+0x2ac>
    *pfd = fd;
900000000800ffbc:	28ba62d8 	ld.w	$r24,$r22,-360(0xe98)
  if (fd < 0 || fd >= NOFILEMAX(p) || (f = p->ofile[fd]) == NULL)
900000000800ffc0:	60021300 	blt	$r24,$r0,528(0x210) # 90000000080101d0 <sys_utimensat+0x25c>
900000000800ffc4:	28c122ec 	ld.d	$r12,$r23,72(0x48)
900000000800ffc8:	0242058d 	sltui	$r13,$r12,129(0x81)
900000000800ffcc:	0013358c 	maskeqz	$r12,$r12,$r13
900000000800ffd0:	0282000e 	addi.w	$r14,$r0,128(0x80)
900000000800ffd4:	0013b5cd 	masknez	$r13,$r14,$r13
900000000800ffd8:	0015358c 	or	$r12,$r12,$r13
900000000800ffdc:	6c023f0c 	bgeu	$r24,$r12,572(0x23c) # 9000000008010218 <sys_utimensat+0x2a4>
900000000800ffe0:	002d5f17 	alsl.d	$r23,$r24,$r23,0x3
900000000800ffe4:	28c362fa 	ld.d	$r26,$r23,216(0xd8)
  TimeSpec t[2];
  char pathName[255];
  struct dirent *dp, *ep;
  int flags;
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD && fd != -1) {
    return -1;
900000000800ffe8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD && fd != -1) {
900000000800ffec:	40020b40 	beqz	$r26,520(0x208) # 90000000080101f4 <sys_utimensat+0x280>
  }
  if (fd == -1) {
    return -9;
  }
  if (argaddr(1, &pathAddr) == 0) {
900000000800fff0:	02ff22c5 	addi.d	$r5,$r22,-56(0xfc8)
900000000800fff4:	02800404 	addi.w	$r4,$r0,1(0x1)
900000000800fff8:	57672bff 	bl	-39128(0xfff6728) # 9000000008006720 <argaddr>
    if (pathAddr && argstr(1, pathName, 256) < 0) {
      return -1;
    }
  } else {
    return -1;
900000000800fffc:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argaddr(1, &pathAddr) == 0) {
9000000008010000:	4401f480 	bnez	$r4,500(0x1f4) # 90000000080101f4 <sys_utimensat+0x280>
    if (pathAddr && argstr(1, pathName, 256) < 0) {
9000000008010004:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000008010008:	40001980 	beqz	$r12,24(0x18) # 9000000008010020 <sys_utimensat+0xac>
900000000801000c:	02840006 	addi.w	$r6,$r0,256(0x100)
9000000008010010:	02fa82c5 	addi.d	$r5,$r22,-352(0xea0)
9000000008010014:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008010018:	576743ff 	bl	-39104(0xfff6740) # 9000000008006758 <argstr>
900000000801001c:	6001d880 	blt	$r4,$r0,472(0x1d8) # 90000000080101f4 <sys_utimensat+0x280>
  }
  if (argaddr(2, &times) < 0) {
9000000008010020:	02ff02c5 	addi.d	$r5,$r22,-64(0xfc0)
9000000008010024:	02800804 	addi.w	$r4,$r0,2(0x2)
9000000008010028:	5766fbff 	bl	-39176(0xfff66f8) # 9000000008006720 <argaddr>
    return -1;
900000000801002c:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
  if (argaddr(2, &times) < 0) {
9000000008010030:	6001c480 	blt	$r4,$r0,452(0x1c4) # 90000000080101f4 <sys_utimensat+0x280>
  }
  if (argint(3, &flags) < 0) {
9000000008010034:	02fa72c5 	addi.d	$r5,$r22,-356(0xe9c)
9000000008010038:	02800c04 	addi.w	$r4,$r0,3(0x3)
900000000801003c:	576663ff 	bl	-39328(0xfff6660) # 900000000800669c <argint>
9000000008010040:	6001b480 	blt	$r4,$r0,436(0x1b4) # 90000000080101f4 <sys_utimensat+0x280>
    return -1;
  }

  if (strncmp(pathName, "/dev/null/invalid", 17) == 0)
9000000008010044:	02804406 	addi.w	$r6,$r0,17(0x11)
9000000008010048:	1c000165 	pcaddu12i	$r5,11(0xb)
900000000801004c:	02ef40a5 	addi.d	$r5,$r5,-1072(0xbd0)
9000000008010050:	02fa82c4 	addi.d	$r4,$r22,-352(0xea0)
9000000008010054:	571063ff 	bl	-61344(0xfff1060) # 90000000080010b4 <strncmp>
    return -20;
9000000008010058:	02bfb017 	addi.w	$r23,$r0,-20(0xfec)
  if (strncmp(pathName, "/dev/null/invalid", 17) == 0)
900000000801005c:	40019880 	beqz	$r4,408(0x198) # 90000000080101f4 <sys_utimensat+0x280>

  if (times) {
9000000008010060:	28ff02c6 	ld.d	$r6,$r22,-64(0xfc0)
9000000008010064:	440080c0 	bnez	$r6,128(0x80) # 90000000080100e4 <sys_utimensat+0x170>
    if (copyin((p->pagetable), (char *)t, times, 2 * sizeof(TimeSpec)) < 0) {
      return -1;
    }
  } else {
    t[0].second = p->utime;
9000000008010068:	2894332c 	ld.w	$r12,$r25,1292(0x50c)
900000000801006c:	29fe82cc 	st.d	$r12,$r22,-96(0xfa0)
    t[0].microSecond = p->utime;
9000000008010070:	29fea2cc 	st.d	$r12,$r22,-88(0xfa8)
    t[1].second = p->utime;
9000000008010074:	29fec2cc 	st.d	$r12,$r22,-80(0xfb0)
    t[1].microSecond = p->utime;
9000000008010078:	29fee2cc 	st.d	$r12,$r22,-72(0xfb8)
  }

  if (pathName[0] == '/') // 指定了绝对路径，忽略fd
900000000801007c:	283a82cd 	ld.b	$r13,$r22,-352(0xea0)
9000000008010080:	0280bc0c 	addi.w	$r12,$r0,47(0x2f)
9000000008010084:	58007dac 	beq	$r13,$r12,124(0x7c) # 9000000008010100 <sys_utimensat+0x18c>
  {
    dp = NULL;
  } else if (fd == AT_FDCWD) {
9000000008010088:	02be700c 	addi.w	$r12,$r0,-100(0xf9c)
900000000801008c:	58019f0c 	beq	$r24,$r12,412(0x19c) # 9000000008010228 <sys_utimensat+0x2b4>
    dp = NULL;
  } else {
    if (fp == NULL) {
      return -EMFILE;
9000000008010090:	02bfa017 	addi.w	$r23,$r0,-24(0xfe8)
    if (fp == NULL) {
9000000008010094:	40016340 	beqz	$r26,352(0x160) # 90000000080101f4 <sys_utimensat+0x280>
    }
    dp = fp->ep;
9000000008010098:	28c06344 	ld.d	$r4,$r26,24(0x18)
  }
  ep = new_ename(dp, pathName);
900000000801009c:	02fa82c5 	addi.d	$r5,$r22,-352(0xea0)
90000000080100a0:	57e663ff 	bl	-6560(0xfffe660) # 900000000800e700 <new_ename>
  if (pathAddr && !ep) {
90000000080100a4:	28ff22d7 	ld.d	$r23,$r22,-56(0xfc8)
90000000080100a8:	400062e0 	beqz	$r23,96(0x60) # 9000000008010108 <sys_utimensat+0x194>
    return -ENOENT;
90000000080100ac:	02bff817 	addi.w	$r23,$r0,-2(0xffe)
  if (pathAddr && !ep) {
90000000080100b0:	40014480 	beqz	$r4,324(0x144) # 90000000080101f4 <sys_utimensat+0x280>
  }

  if (pathAddr) {
    f = findfile(pathName);
90000000080100b4:	02fa82c4 	addi.d	$r4,$r22,-352(0xea0)
90000000080100b8:	575603ff 	bl	-43520(0xfff5600) # 90000000080056b8 <findfile>
    f->t0_sec = t[0].second;
90000000080100bc:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
90000000080100c0:	29c0e08c 	st.d	$r12,$r4,56(0x38)
    f->t0_nsec = t[0].microSecond;
90000000080100c4:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
90000000080100c8:	29c1008c 	st.d	$r12,$r4,64(0x40)
    f->t1_sec = t[1].second;
90000000080100cc:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
90000000080100d0:	29c1208c 	st.d	$r12,$r4,72(0x48)
    f->t1_nsec = t[1].microSecond;
90000000080100d4:	28fee2cc 	ld.d	$r12,$r22,-72(0xfb8)
90000000080100d8:	29c1408c 	st.d	$r12,$r4,80(0x50)
  }

  if (NULL == f)
    return -2;

  return 0;
90000000080100dc:	00150017 	move	$r23,$r0
90000000080100e0:	50011400 	b	276(0x114) # 90000000080101f4 <sys_utimensat+0x280>
    if (copyin((p->pagetable), (char *)t, times, 2 * sizeof(TimeSpec)) < 0) {
90000000080100e4:	02808007 	addi.w	$r7,$r0,32(0x20)
90000000080100e8:	02fe82c5 	addi.d	$r5,$r22,-96(0xfa0)
90000000080100ec:	28c18324 	ld.d	$r4,$r25,96(0x60)
90000000080100f0:	573f0bff 	bl	-49400(0xfff3f08) # 9000000008003ff8 <copyin>
      return -1;
90000000080100f4:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
    if (copyin((p->pagetable), (char *)t, times, 2 * sizeof(TimeSpec)) < 0) {
90000000080100f8:	67ff8480 	bge	$r4,$r0,-124(0x3ff84) # 900000000801007c <sys_utimensat+0x108>
90000000080100fc:	5000f800 	b	248(0xf8) # 90000000080101f4 <sys_utimensat+0x280>
    dp = NULL;
9000000008010100:	00150004 	move	$r4,$r0
9000000008010104:	53ff9bff 	b	-104(0xfffff98) # 900000000801009c <sys_utimensat+0x128>
  } else if (fd >= 0) {
9000000008010108:	6000b300 	blt	$r24,$r0,176(0xb0) # 90000000080101b8 <sys_utimensat+0x244>
  int fd = -1;
900000000801010c:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
9000000008010110:	29ba62cc 	st.w	$r12,$r22,-360(0xe98)
  struct proc *p = myproc();
9000000008010114:	571617ff 	bl	-59884(0xfff1614) # 9000000008001728 <myproc>
9000000008010118:	00150098 	move	$r24,$r4
  if (argint(n, &fd) < 0)
900000000801011c:	02fa62c5 	addi.d	$r5,$r22,-360(0xe98)
9000000008010120:	00150004 	move	$r4,$r0
9000000008010124:	57657bff 	bl	-39560(0xfff6578) # 900000000800669c <argint>
9000000008010128:	6000a080 	blt	$r4,$r0,160(0xa0) # 90000000080101c8 <sys_utimensat+0x254>
    *pfd = fd;
900000000801012c:	28ba62cd 	ld.w	$r13,$r22,-360(0xe98)
  if (fd < 0 || fd >= NOFILEMAX(p) || (f = p->ofile[fd]) == NULL)
9000000008010130:	600099a0 	blt	$r13,$r0,152(0x98) # 90000000080101c8 <sys_utimensat+0x254>
9000000008010134:	28c1230c 	ld.d	$r12,$r24,72(0x48)
9000000008010138:	0242058e 	sltui	$r14,$r12,129(0x81)
900000000801013c:	0013398c 	maskeqz	$r12,$r12,$r14
9000000008010140:	0282000f 	addi.w	$r15,$r0,128(0x80)
9000000008010144:	0013b9ee 	masknez	$r14,$r15,$r14
9000000008010148:	0015398c 	or	$r12,$r12,$r14
900000000801014c:	6c007dac 	bgeu	$r13,$r12,124(0x7c) # 90000000080101c8 <sys_utimensat+0x254>
9000000008010150:	002d61ad 	alsl.d	$r13,$r13,$r24,0x3
9000000008010154:	28c361ac 	ld.d	$r12,$r13,216(0xd8)
    if (argfd(0, &fd, &f) < 0)
9000000008010158:	40006980 	beqz	$r12,104(0x68) # 90000000080101c0 <sys_utimensat+0x24c>
    if (t[0].second != 1) {
900000000801015c:	28fe82cd 	ld.d	$r13,$r22,-96(0xfa0)
9000000008010160:	0280040e 	addi.w	$r14,$r0,1(0x1)
9000000008010164:	580091ae 	beq	$r13,$r14,144(0x90) # 90000000080101f4 <sys_utimensat+0x280>
      if (t[0].second > f->t0_sec || t[0].second == 0)
9000000008010168:	28c0e18e 	ld.d	$r14,$r12,56(0x38)
900000000801016c:	680009cd 	bltu	$r14,$r13,8(0x8) # 9000000008010174 <sys_utimensat+0x200>
9000000008010170:	440009a0 	bnez	$r13,8(0x8) # 9000000008010178 <sys_utimensat+0x204>
        f->t0_sec = t[0].second;
9000000008010174:	29c0e18d 	st.d	$r13,$r12,56(0x38)
      if (t[0].microSecond > f->t0_nsec || t[0].microSecond == 0)
9000000008010178:	28fea2cd 	ld.d	$r13,$r22,-88(0xfa8)
900000000801017c:	28c1018e 	ld.d	$r14,$r12,64(0x40)
9000000008010180:	680009cd 	bltu	$r14,$r13,8(0x8) # 9000000008010188 <sys_utimensat+0x214>
9000000008010184:	440009a0 	bnez	$r13,8(0x8) # 900000000801018c <sys_utimensat+0x218>
        f->t0_nsec = t[0].microSecond;
9000000008010188:	29c1018d 	st.d	$r13,$r12,64(0x40)
      if (t[1].second > f->t1_sec || t[1].second == 0)
900000000801018c:	28fec2cd 	ld.d	$r13,$r22,-80(0xfb0)
9000000008010190:	28c1218e 	ld.d	$r14,$r12,72(0x48)
9000000008010194:	680009cd 	bltu	$r14,$r13,8(0x8) # 900000000801019c <sys_utimensat+0x228>
9000000008010198:	440009a0 	bnez	$r13,8(0x8) # 90000000080101a0 <sys_utimensat+0x22c>
        f->t1_sec = t[1].second;
900000000801019c:	29c1218d 	st.d	$r13,$r12,72(0x48)
      if (t[1].microSecond > f->t1_nsec || t[1].microSecond == 0)
90000000080101a0:	28fee2cd 	ld.d	$r13,$r22,-72(0xfb8)
90000000080101a4:	28c1418e 	ld.d	$r14,$r12,80(0x50)
90000000080101a8:	680009cd 	bltu	$r14,$r13,8(0x8) # 90000000080101b0 <sys_utimensat+0x23c>
90000000080101ac:	47ff31bf 	bnez	$r13,-208(0x7fff30) # 90000000080100dc <sys_utimensat+0x168>
        f->t1_nsec = t[1].microSecond;
90000000080101b0:	29c1418d 	st.d	$r13,$r12,80(0x50)
90000000080101b4:	53ff2bff 	b	-216(0xfffff28) # 90000000080100dc <sys_utimensat+0x168>
    return -2;
90000000080101b8:	02bff817 	addi.w	$r23,$r0,-2(0xffe)
90000000080101bc:	50003800 	b	56(0x38) # 90000000080101f4 <sys_utimensat+0x280>
      return -1;
90000000080101c0:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
90000000080101c4:	50003000 	b	48(0x30) # 90000000080101f4 <sys_utimensat+0x280>
90000000080101c8:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
90000000080101cc:	50002800 	b	40(0x28) # 90000000080101f4 <sys_utimensat+0x280>
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD && fd != -1) {
90000000080101d0:	02be700c 	addi.w	$r12,$r0,-100(0xf9c)
    *pf = NULL;
90000000080101d4:	0015001a 	move	$r26,$r0
  if (argfd(0, &fd, &fp) < 0 && fd != AT_FDCWD && fd != -1) {
90000000080101d8:	5bfe1b0c 	beq	$r24,$r12,-488(0x3fe18) # 900000000800fff0 <sys_utimensat+0x7c>
    return -9;
90000000080101dc:	00146018 	nor	$r24,$r0,$r24
90000000080101e0:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
90000000080101e4:	001362f7 	maskeqz	$r23,$r23,$r24
90000000080101e8:	02bfdc0c 	addi.w	$r12,$r0,-9(0xff7)
90000000080101ec:	0013e198 	masknez	$r24,$r12,$r24
90000000080101f0:	001562f7 	or	$r23,$r23,$r24
}
90000000080101f4:	001502e4 	move	$r4,$r23
90000000080101f8:	28c5a061 	ld.d	$r1,$r3,360(0x168)
90000000080101fc:	28c58076 	ld.d	$r22,$r3,352(0x160)
9000000008010200:	28c56077 	ld.d	$r23,$r3,344(0x158)
9000000008010204:	28c54078 	ld.d	$r24,$r3,336(0x150)
9000000008010208:	28c52079 	ld.d	$r25,$r3,328(0x148)
900000000801020c:	28c5007a 	ld.d	$r26,$r3,320(0x140)
9000000008010210:	02c5c063 	addi.d	$r3,$r3,368(0x170)
9000000008010214:	4c000020 	jirl	$r0,$r1,0
    return -1;
9000000008010218:	02bffc17 	addi.w	$r23,$r0,-1(0xfff)
900000000801021c:	53ffdbff 	b	-40(0xfffffd8) # 90000000080101f4 <sys_utimensat+0x280>
    return -9;
9000000008010220:	02bfdc17 	addi.w	$r23,$r0,-9(0xff7)
9000000008010224:	53ffd3ff 	b	-48(0xfffffd0) # 90000000080101f4 <sys_utimensat+0x280>
  ep = new_ename(dp, pathName);
9000000008010228:	02fa82c5 	addi.d	$r5,$r22,-352(0xea0)
900000000801022c:	00150004 	move	$r4,$r0
9000000008010230:	57e4d3ff 	bl	-6960(0xfffe4d0) # 900000000800e700 <new_ename>
  if (pathAddr && !ep) {
9000000008010234:	28ff22cc 	ld.d	$r12,$r22,-56(0xfc8)
9000000008010238:	47fe759f 	bnez	$r12,-396(0x7ffe74) # 90000000080100ac <sys_utimensat+0x138>
    return -2;
900000000801023c:	02bff817 	addi.w	$r23,$r0,-2(0xffe)
9000000008010240:	53ffb7ff 	b	-76(0xfffffb4) # 90000000080101f4 <sys_utimensat+0x280>

9000000008010244 <sys_setitimer>:

uint64 sys_setitimer() {
9000000008010244:	02fdc063 	addi.d	$r3,$r3,-144(0xf70)
9000000008010248:	29c22061 	st.d	$r1,$r3,136(0x88)
900000000801024c:	29c20076 	st.d	$r22,$r3,128(0x80)
9000000008010250:	02c24076 	addi.d	$r22,$r3,144(0x90)
  int which;
  struct itimerval *pvalue;
  struct itimerval *povalue;
  struct itimerval value;
  struct itimerval ovalue;
  if (argint(0, &which) < 0) {
9000000008010254:	02ffb2c5 	addi.d	$r5,$r22,-20(0xfec)
9000000008010258:	00150004 	move	$r4,$r0
900000000801025c:	576443ff 	bl	-39872(0xfff6440) # 900000000800669c <argint>
    return -1;
9000000008010260:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argint(0, &which) < 0) {
9000000008010264:	6000f080 	blt	$r4,$r0,240(0xf0) # 9000000008010354 <sys_setitimer+0x110>
  }
  if (argaddr(1, (uint64 *)&pvalue) < 0) {
9000000008010268:	02ff82c5 	addi.d	$r5,$r22,-32(0xfe0)
900000000801026c:	02800404 	addi.w	$r4,$r0,1(0x1)
9000000008010270:	5764b3ff 	bl	-39760(0xfff64b0) # 9000000008006720 <argaddr>
    return -1;
9000000008010274:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(1, (uint64 *)&pvalue) < 0) {
9000000008010278:	6000dc80 	blt	$r4,$r0,220(0xdc) # 9000000008010354 <sys_setitimer+0x110>
  }
  if (copyin(myproc()->pagetable, (char *)&value, (uint64)pvalue,
900000000801027c:	5714afff 	bl	-60244(0xfff14ac) # 9000000008001728 <myproc>
9000000008010280:	02808007 	addi.w	$r7,$r0,32(0x20)
9000000008010284:	28ff82c6 	ld.d	$r6,$r22,-32(0xfe0)
9000000008010288:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
900000000801028c:	28c18084 	ld.d	$r4,$r4,96(0x60)
9000000008010290:	573d6bff 	bl	-49816(0xfff3d68) # 9000000008003ff8 <copyin>
             sizeof(struct itimerval)) < 0) {
    return -1;
9000000008010294:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (copyin(myproc()->pagetable, (char *)&value, (uint64)pvalue,
9000000008010298:	6000bc80 	blt	$r4,$r0,188(0xbc) # 9000000008010354 <sys_setitimer+0x110>
  }
  if (argaddr(2, (uint64 *)&povalue) < 0) {
900000000801029c:	02ff62c5 	addi.d	$r5,$r22,-40(0xfd8)
90000000080102a0:	02800804 	addi.w	$r4,$r0,2(0x2)
90000000080102a4:	57647fff 	bl	-39812(0xfff647c) # 9000000008006720 <argaddr>
    return -1;
90000000080102a8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (argaddr(2, (uint64 *)&povalue) < 0) {
90000000080102ac:	6000a880 	blt	$r4,$r0,168(0xa8) # 9000000008010354 <sys_setitimer+0x110>
  }
  if (copyin(myproc()->pagetable, (char *)&ovalue, (uint64)povalue,
90000000080102b0:	57147bff 	bl	-60296(0xfff1478) # 9000000008001728 <myproc>
90000000080102b4:	02808007 	addi.w	$r7,$r0,32(0x20)
90000000080102b8:	28ff62c6 	ld.d	$r6,$r22,-40(0xfd8)
90000000080102bc:	02fe62c5 	addi.d	$r5,$r22,-104(0xf98)
90000000080102c0:	28c18084 	ld.d	$r4,$r4,96(0x60)
90000000080102c4:	573d37ff 	bl	-49868(0xfff3d34) # 9000000008003ff8 <copyin>
             sizeof(struct itimerval)) < 0) {
    return -1;
90000000080102c8:	02bffc0c 	addi.w	$r12,$r0,-1(0xfff)
  if (copyin(myproc()->pagetable, (char *)&ovalue, (uint64)povalue,
90000000080102cc:	60008880 	blt	$r4,$r0,136(0x88) # 9000000008010354 <sys_setitimer+0x110>
  }

  printf("sys_setitimer: %d\n", which);
90000000080102d0:	28bfb2c5 	ld.w	$r5,$r22,-20(0xfec)
90000000080102d4:	1c000164 	pcaddu12i	$r4,11(0xb)
90000000080102d8:	02e57084 	addi.d	$r4,$r4,-1700(0x95c)
90000000080102dc:	56ff9bff 	bl	-65640(0xffeff98) # 9000000008000274 <printf>
  printf("sys_setitimer: %p it value: %p, %p, start:%p %p\n", value,
90000000080102e0:	28fee2c6 	ld.d	$r6,$r22,-72(0xfb8)
90000000080102e4:	28ff02c7 	ld.d	$r7,$r22,-64(0xfc0)
90000000080102e8:	28ff22c8 	ld.d	$r8,$r22,-56(0xfc8)
90000000080102ec:	28ff42c9 	ld.d	$r9,$r22,-48(0xfd0)
90000000080102f0:	29fdc2c6 	st.d	$r6,$r22,-144(0xf70)
90000000080102f4:	29fde2c7 	st.d	$r7,$r22,-136(0xf78)
90000000080102f8:	29fe02c8 	st.d	$r8,$r22,-128(0xf80)
90000000080102fc:	29fe22c9 	st.d	$r9,$r22,-120(0xf88)
9000000008010300:	02fdc2c5 	addi.d	$r5,$r22,-144(0xf70)
9000000008010304:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000008010308:	02e51084 	addi.d	$r4,$r4,-1724(0x944)
900000000801030c:	56ff6bff 	bl	-65688(0xffeff68) # 9000000008000274 <printf>
              value.it_interval.tv_sec, value.it_interval.tv_usec,
              value.it_value.tv_sec, value.it_value.tv_usec);
  printf("sys_setitimer: %p\n", ovalue);
9000000008010310:	28fe62cc 	ld.d	$r12,$r22,-104(0xf98)
9000000008010314:	29fdc2cc 	st.d	$r12,$r22,-144(0xf70)
9000000008010318:	28fe82cc 	ld.d	$r12,$r22,-96(0xfa0)
900000000801031c:	29fde2cc 	st.d	$r12,$r22,-136(0xf78)
9000000008010320:	28fea2cc 	ld.d	$r12,$r22,-88(0xfa8)
9000000008010324:	29fe02cc 	st.d	$r12,$r22,-128(0xf80)
9000000008010328:	28fec2cc 	ld.d	$r12,$r22,-80(0xfb0)
900000000801032c:	29fe22cc 	st.d	$r12,$r22,-120(0xf88)
9000000008010330:	02fdc2c5 	addi.d	$r5,$r22,-144(0xf70)
9000000008010334:	1c000164 	pcaddu12i	$r4,11(0xb)
9000000008010338:	02e53084 	addi.d	$r4,$r4,-1716(0x94c)
900000000801033c:	56ff3bff 	bl	-65736(0xffeff38) # 9000000008000274 <printf>
  setitimer(which, &value, &ovalue);
9000000008010340:	02fe62c6 	addi.d	$r6,$r22,-104(0xf98)
9000000008010344:	02fee2c5 	addi.d	$r5,$r22,-72(0xfb8)
9000000008010348:	28bfb2c4 	ld.w	$r4,$r22,-20(0xfec)
900000000801034c:	57e793ff 	bl	-6256(0xfffe790) # 900000000800eadc <setitimer>
  return 0;
9000000008010350:	0015000c 	move	$r12,$r0
9000000008010354:	00150184 	move	$r4,$r12
9000000008010358:	28c22061 	ld.d	$r1,$r3,136(0x88)
900000000801035c:	28c20076 	ld.d	$r22,$r3,128(0x80)
9000000008010360:	02c24063 	addi.d	$r3,$r3,144(0x90)
9000000008010364:	4c000020 	jirl	$r0,$r1,0
	...

9000000008010370 <ramdisk_init>:
struct spinlock ramdisklock;
extern uchar sddata_start[];
extern uchar sddata_end[];
char *ramdisk;

void ramdisk_init(void) {
9000000008010370:	02ffc063 	addi.d	$r3,$r3,-16(0xff0)
9000000008010374:	29c02061 	st.d	$r1,$r3,8(0x8)
9000000008010378:	29c00076 	st.d	$r22,$r3,0
900000000801037c:	02c04076 	addi.d	$r22,$r3,16(0x10)
  initlock(&ramdisklock, "ramdisk lock");
9000000008010380:	1c000165 	pcaddu12i	$r5,11(0xb)
9000000008010384:	02e460a5 	addi.d	$r5,$r5,-1768(0x918)
9000000008010388:	1c004064 	pcaddu12i	$r4,515(0x203)
900000000801038c:	02ca6084 	addi.d	$r4,$r4,664(0x298)
9000000008010390:	570ab7ff 	bl	-62796(0xfff0ab4) # 9000000008000e44 <initlock>
  ramdisk = (char *)sddata_start;
9000000008010394:	1c000205 	pcaddu12i	$r5,16(0x10)
9000000008010398:	28f490a5 	ld.d	$r5,$r5,-732(0xd24)
900000000801039c:	1c00406c 	pcaddu12i	$r12,515(0x203)
90000000080103a0:	02c9f18c 	addi.d	$r12,$r12,636(0x27c)
90000000080103a4:	29c00185 	st.d	$r5,$r12,0
  printf("ramdiskinit ram start:%p\n", ramdisk);
90000000080103a8:	1c000164 	pcaddu12i	$r4,11(0xb)
90000000080103ac:	02e40084 	addi.d	$r4,$r4,-1792(0x900)
90000000080103b0:	56fec7ff 	bl	-65852(0xffefec4) # 9000000008000274 <printf>
}
90000000080103b4:	28c02061 	ld.d	$r1,$r3,8(0x8)
90000000080103b8:	28c00076 	ld.d	$r22,$r3,0
90000000080103bc:	02c04063 	addi.d	$r3,$r3,16(0x10)
90000000080103c0:	4c000020 	jirl	$r0,$r1,0

90000000080103c4 <ramdisk_read>:

void ramdisk_read(struct buf *b) {
90000000080103c4:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
90000000080103c8:	29c06061 	st.d	$r1,$r3,24(0x18)
90000000080103cc:	29c04076 	st.d	$r22,$r3,16(0x10)
90000000080103d0:	29c02077 	st.d	$r23,$r3,8(0x8)
90000000080103d4:	02c08076 	addi.d	$r22,$r3,32(0x20)
90000000080103d8:	00150097 	move	$r23,$r4
  acquire(&ramdisklock);
90000000080103dc:	1c004064 	pcaddu12i	$r4,515(0x203)
90000000080103e0:	02c91084 	addi.d	$r4,$r4,580(0x244)
90000000080103e4:	570acfff 	bl	-62772(0xfff0acc) # 9000000008000eb0 <acquire>
  uint sectorno = b->sectorno;

  char *addr = ramdisk + sectorno * BSIZE;
90000000080103e8:	288032ec 	ld.w	$r12,$r23,12(0xc)
90000000080103ec:	0040a58c 	slli.w	$r12,$r12,0x9
90000000080103f0:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
90000000080103f4:	1c00406d 	pcaddu12i	$r13,515(0x203)
90000000080103f8:	02c891ad 	addi.d	$r13,$r13,548(0x224)
90000000080103fc:	28c001a5 	ld.d	$r5,$r13,0
  memmove(b->data, (void *)addr, BSIZE);
9000000008010400:	02880006 	addi.w	$r6,$r0,512(0x200)
9000000008010404:	0010b0a5 	add.d	$r5,$r5,$r12
9000000008010408:	02c162e4 	addi.d	$r4,$r23,88(0x58)
900000000801040c:	570c03ff 	bl	-62464(0xfff0c00) # 900000000800100c <memmove>
  release(&ramdisklock);
9000000008010410:	1c004064 	pcaddu12i	$r4,515(0x203)
9000000008010414:	02c84084 	addi.d	$r4,$r4,528(0x210)
9000000008010418:	570afbff 	bl	-62728(0xfff0af8) # 9000000008000f10 <release>
}
900000000801041c:	28c06061 	ld.d	$r1,$r3,24(0x18)
9000000008010420:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008010424:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008010428:	02c08063 	addi.d	$r3,$r3,32(0x20)
900000000801042c:	4c000020 	jirl	$r0,$r1,0

9000000008010430 <ramdisk_write>:

void ramdisk_write(struct buf *b) {
9000000008010430:	02ff8063 	addi.d	$r3,$r3,-32(0xfe0)
9000000008010434:	29c06061 	st.d	$r1,$r3,24(0x18)
9000000008010438:	29c04076 	st.d	$r22,$r3,16(0x10)
900000000801043c:	29c02077 	st.d	$r23,$r3,8(0x8)
9000000008010440:	02c08076 	addi.d	$r22,$r3,32(0x20)
9000000008010444:	00150097 	move	$r23,$r4
  acquire(&ramdisklock);
9000000008010448:	1c004064 	pcaddu12i	$r4,515(0x203)
900000000801044c:	02c76084 	addi.d	$r4,$r4,472(0x1d8)
9000000008010450:	570a63ff 	bl	-62880(0xfff0a60) # 9000000008000eb0 <acquire>
  uint sectorno = b->sectorno;

  char *addr = ramdisk + sectorno * BSIZE;
9000000008010454:	288032ec 	ld.w	$r12,$r23,12(0xc)
9000000008010458:	0040a58c 	slli.w	$r12,$r12,0x9
900000000801045c:	00df018c 	bstrpick.d	$r12,$r12,0x1f,0x0
9000000008010460:	1c00406d 	pcaddu12i	$r13,515(0x203)
9000000008010464:	02c6e1ad 	addi.d	$r13,$r13,440(0x1b8)
9000000008010468:	28c001a4 	ld.d	$r4,$r13,0
  memmove((void *)addr, b->data, BSIZE);
900000000801046c:	02880006 	addi.w	$r6,$r0,512(0x200)
9000000008010470:	02c162e5 	addi.d	$r5,$r23,88(0x58)
9000000008010474:	0010b084 	add.d	$r4,$r4,$r12
9000000008010478:	570b97ff 	bl	-62572(0xfff0b94) # 900000000800100c <memmove>
  release(&ramdisklock);
900000000801047c:	1c004064 	pcaddu12i	$r4,515(0x203)
9000000008010480:	02c69084 	addi.d	$r4,$r4,420(0x1a4)
9000000008010484:	570a8fff 	bl	-62836(0xfff0a8c) # 9000000008000f10 <release>
9000000008010488:	28c06061 	ld.d	$r1,$r3,24(0x18)
900000000801048c:	28c04076 	ld.d	$r22,$r3,16(0x10)
9000000008010490:	28c02077 	ld.d	$r23,$r3,8(0x8)
9000000008010494:	02c08063 	addi.d	$r3,$r3,32(0x20)
9000000008010498:	4c000020 	jirl	$r0,$r1,0
	...

9000000008011000 <_keentry>:
9000000008011000:	02fc0063 	addi.d	$r3,$r3,-256(0xf00)
9000000008011004:	29c00061 	st.d	$r1,$r3,0
9000000008011008:	29c02062 	st.d	$r2,$r3,8(0x8)
900000000801100c:	29c04063 	st.d	$r3,$r3,16(0x10)
9000000008011010:	29c06064 	st.d	$r4,$r3,24(0x18)
9000000008011014:	29c08065 	st.d	$r5,$r3,32(0x20)
9000000008011018:	29c0a066 	st.d	$r6,$r3,40(0x28)
900000000801101c:	29c0c067 	st.d	$r7,$r3,48(0x30)
9000000008011020:	29c0e068 	st.d	$r8,$r3,56(0x38)
9000000008011024:	29c10069 	st.d	$r9,$r3,64(0x40)
9000000008011028:	29c1206a 	st.d	$r10,$r3,72(0x48)
900000000801102c:	29c1406b 	st.d	$r11,$r3,80(0x50)
9000000008011030:	29c1606c 	st.d	$r12,$r3,88(0x58)
9000000008011034:	29c1806d 	st.d	$r13,$r3,96(0x60)
9000000008011038:	29c1a06e 	st.d	$r14,$r3,104(0x68)
900000000801103c:	29c1c06f 	st.d	$r15,$r3,112(0x70)
9000000008011040:	29c1e070 	st.d	$r16,$r3,120(0x78)
9000000008011044:	29c20071 	st.d	$r17,$r3,128(0x80)
9000000008011048:	29c22072 	st.d	$r18,$r3,136(0x88)
900000000801104c:	29c24073 	st.d	$r19,$r3,144(0x90)
9000000008011050:	29c26074 	st.d	$r20,$r3,152(0x98)
9000000008011054:	29c28075 	st.d	$r21,$r3,160(0xa0)
9000000008011058:	29c2a076 	st.d	$r22,$r3,168(0xa8)
900000000801105c:	29c2c077 	st.d	$r23,$r3,176(0xb0)
9000000008011060:	29c2e078 	st.d	$r24,$r3,184(0xb8)
9000000008011064:	29c30079 	st.d	$r25,$r3,192(0xc0)
9000000008011068:	29c3207a 	st.d	$r26,$r3,200(0xc8)
900000000801106c:	29c3407b 	st.d	$r27,$r3,208(0xd0)
9000000008011070:	29c3607c 	st.d	$r28,$r3,216(0xd8)
9000000008011074:	29c3807d 	st.d	$r29,$r3,224(0xe0)
9000000008011078:	29c3a07e 	st.d	$r30,$r3,232(0xe8)
900000000801107c:	29c3c07f 	st.d	$r31,$r3,240(0xf0)
9000000008011080:	574f7bff 	bl	-45192(0xfff4f78) # 9000000008005ff8 <kerneltrap>
9000000008011084:	28c00061 	ld.d	$r1,$r3,0
9000000008011088:	28c04063 	ld.d	$r3,$r3,16(0x10)
900000000801108c:	28c06064 	ld.d	$r4,$r3,24(0x18)
9000000008011090:	28c08065 	ld.d	$r5,$r3,32(0x20)
9000000008011094:	28c0a066 	ld.d	$r6,$r3,40(0x28)
9000000008011098:	28c0c067 	ld.d	$r7,$r3,48(0x30)
900000000801109c:	28c0e068 	ld.d	$r8,$r3,56(0x38)
90000000080110a0:	28c10069 	ld.d	$r9,$r3,64(0x40)
90000000080110a4:	28c1206a 	ld.d	$r10,$r3,72(0x48)
90000000080110a8:	28c1406b 	ld.d	$r11,$r3,80(0x50)
90000000080110ac:	28c1606c 	ld.d	$r12,$r3,88(0x58)
90000000080110b0:	28c1806d 	ld.d	$r13,$r3,96(0x60)
90000000080110b4:	28c1a06e 	ld.d	$r14,$r3,104(0x68)
90000000080110b8:	28c1c06f 	ld.d	$r15,$r3,112(0x70)
90000000080110bc:	28c1e070 	ld.d	$r16,$r3,120(0x78)
90000000080110c0:	28c20071 	ld.d	$r17,$r3,128(0x80)
90000000080110c4:	28c22072 	ld.d	$r18,$r3,136(0x88)
90000000080110c8:	28c24073 	ld.d	$r19,$r3,144(0x90)
90000000080110cc:	28c26074 	ld.d	$r20,$r3,152(0x98)
90000000080110d0:	28c28075 	ld.d	$r21,$r3,160(0xa0)
90000000080110d4:	28c2a076 	ld.d	$r22,$r3,168(0xa8)
90000000080110d8:	28c2c077 	ld.d	$r23,$r3,176(0xb0)
90000000080110dc:	28c2e078 	ld.d	$r24,$r3,184(0xb8)
90000000080110e0:	28c30079 	ld.d	$r25,$r3,192(0xc0)
90000000080110e4:	28c3207a 	ld.d	$r26,$r3,200(0xc8)
90000000080110e8:	28c3407b 	ld.d	$r27,$r3,208(0xd0)
90000000080110ec:	28c3607c 	ld.d	$r28,$r3,216(0xd8)
90000000080110f0:	28c3807d 	ld.d	$r29,$r3,224(0xe0)
90000000080110f4:	28c3a07e 	ld.d	$r30,$r3,232(0xe8)
90000000080110f8:	28c3c07f 	ld.d	$r31,$r3,240(0xf0)
90000000080110fc:	02c40063 	addi.d	$r3,$r3,256(0x100)
9000000008011100:	06483800 	ertn
	...

9000000008012000 <_trampoline>:
9000000008012000:	0400c024 	csrwr	$r4,0x30
9000000008012004:	29c00081 	st.d	$r1,$r4,0
9000000008012008:	29c02082 	st.d	$r2,$r4,8(0x8)
900000000801200c:	29c04083 	st.d	$r3,$r4,16(0x10)
9000000008012010:	29c08085 	st.d	$r5,$r4,32(0x20)
9000000008012014:	29c0a086 	st.d	$r6,$r4,40(0x28)
9000000008012018:	29c0c087 	st.d	$r7,$r4,48(0x30)
900000000801201c:	29c0e088 	st.d	$r8,$r4,56(0x38)
9000000008012020:	29c10089 	st.d	$r9,$r4,64(0x40)
9000000008012024:	29c1208a 	st.d	$r10,$r4,72(0x48)
9000000008012028:	29c1408b 	st.d	$r11,$r4,80(0x50)
900000000801202c:	29c1608c 	st.d	$r12,$r4,88(0x58)
9000000008012030:	29c1808d 	st.d	$r13,$r4,96(0x60)
9000000008012034:	29c1a08e 	st.d	$r14,$r4,104(0x68)
9000000008012038:	29c1c08f 	st.d	$r15,$r4,112(0x70)
900000000801203c:	29c1e090 	st.d	$r16,$r4,120(0x78)
9000000008012040:	29c20091 	st.d	$r17,$r4,128(0x80)
9000000008012044:	29c22092 	st.d	$r18,$r4,136(0x88)
9000000008012048:	29c24093 	st.d	$r19,$r4,144(0x90)
900000000801204c:	29c26094 	st.d	$r20,$r4,152(0x98)
9000000008012050:	29c28095 	st.d	$r21,$r4,160(0xa0)
9000000008012054:	29c2a096 	st.d	$r22,$r4,168(0xa8)
9000000008012058:	29c2c097 	st.d	$r23,$r4,176(0xb0)
900000000801205c:	29c2e098 	st.d	$r24,$r4,184(0xb8)
9000000008012060:	29c30099 	st.d	$r25,$r4,192(0xc0)
9000000008012064:	29c3209a 	st.d	$r26,$r4,200(0xc8)
9000000008012068:	29c3409b 	st.d	$r27,$r4,208(0xd0)
900000000801206c:	29c3609c 	st.d	$r28,$r4,216(0xd8)
9000000008012070:	29c3809d 	st.d	$r29,$r4,224(0xe0)
9000000008012074:	29c3a09e 	st.d	$r30,$r4,232(0xe8)
9000000008012078:	29c3c09f 	st.d	$r31,$r4,240(0xf0)
900000000801207c:	0400c00c 	csrrd	$r12,0x30
9000000008012080:	29c0608c 	st.d	$r12,$r4,24(0x18)
9000000008012084:	28c3e083 	ld.d	$r3,$r4,248(0xf8)
9000000008012088:	28c44082 	ld.d	$r2,$r4,272(0x110)
900000000801208c:	28c4008c 	ld.d	$r12,$r4,256(0x100)
9000000008012090:	28c4608d 	ld.d	$r13,$r4,280(0x118)
9000000008012094:	0400642d 	csrwr	$r13,0x19
9000000008012098:	06498000 	invtlb	0x0,$r0,$r0
900000000801209c:	4c000180 	jirl	$r0,$r12,0

90000000080120a0 <userret>:
90000000080120a0:	04006425 	csrwr	$r5,0x19
90000000080120a4:	06498000 	invtlb	0x0,$r0,$r0
90000000080120a8:	28c0608c 	ld.d	$r12,$r4,24(0x18)
90000000080120ac:	0400c02c 	csrwr	$r12,0x30
90000000080120b0:	28c00081 	ld.d	$r1,$r4,0
90000000080120b4:	28c02082 	ld.d	$r2,$r4,8(0x8)
90000000080120b8:	28c04083 	ld.d	$r3,$r4,16(0x10)
90000000080120bc:	28c08085 	ld.d	$r5,$r4,32(0x20)
90000000080120c0:	28c0a086 	ld.d	$r6,$r4,40(0x28)
90000000080120c4:	28c0c087 	ld.d	$r7,$r4,48(0x30)
90000000080120c8:	28c0e088 	ld.d	$r8,$r4,56(0x38)
90000000080120cc:	28c10089 	ld.d	$r9,$r4,64(0x40)
90000000080120d0:	28c1208a 	ld.d	$r10,$r4,72(0x48)
90000000080120d4:	28c1408b 	ld.d	$r11,$r4,80(0x50)
90000000080120d8:	28c1608c 	ld.d	$r12,$r4,88(0x58)
90000000080120dc:	28c1808d 	ld.d	$r13,$r4,96(0x60)
90000000080120e0:	28c1a08e 	ld.d	$r14,$r4,104(0x68)
90000000080120e4:	28c1c08f 	ld.d	$r15,$r4,112(0x70)
90000000080120e8:	28c1e090 	ld.d	$r16,$r4,120(0x78)
90000000080120ec:	28c20091 	ld.d	$r17,$r4,128(0x80)
90000000080120f0:	28c22092 	ld.d	$r18,$r4,136(0x88)
90000000080120f4:	28c24093 	ld.d	$r19,$r4,144(0x90)
90000000080120f8:	28c26094 	ld.d	$r20,$r4,152(0x98)
90000000080120fc:	28c28095 	ld.d	$r21,$r4,160(0xa0)
9000000008012100:	28c2a096 	ld.d	$r22,$r4,168(0xa8)
9000000008012104:	28c2c097 	ld.d	$r23,$r4,176(0xb0)
9000000008012108:	28c2e098 	ld.d	$r24,$r4,184(0xb8)
900000000801210c:	28c30099 	ld.d	$r25,$r4,192(0xc0)
9000000008012110:	28c3209a 	ld.d	$r26,$r4,200(0xc8)
9000000008012114:	28c3409b 	ld.d	$r27,$r4,208(0xd0)
9000000008012118:	28c3609c 	ld.d	$r28,$r4,216(0xd8)
900000000801211c:	28c3809d 	ld.d	$r29,$r4,224(0xe0)
9000000008012120:	28c3a09e 	ld.d	$r30,$r4,232(0xe8)
9000000008012124:	28c3c09f 	ld.d	$r31,$r4,240(0xf0)
9000000008012128:	0400c024 	csrwr	$r4,0x30
900000000801212c:	06483800 	ertn
	...

9000000008013000 <_tlbrentry>:
9000000008013000:	04022c2c 	csrwr	$r12,0x8b
9000000008013004:	04006c0c 	csrrd	$r12,0x1b
9000000008013008:	0640118c 	lddir	$r12,$r12,0x4
900000000801300c:	06400d8c 	lddir	$r12,$r12,0x3
9000000008013010:	0640098c 	lddir	$r12,$r12,0x2
9000000008013014:	0640058c 	lddir	$r12,$r12,0x1
9000000008013018:	06440180 	ldpte	$r12,0x0
900000000801301c:	06440580 	ldpte	$r12,0x1
9000000008013020:	06483400 	tlbfill
9000000008013024:	04022c0c 	csrrd	$r12,0x8b
9000000008013028:	06483800 	ertn
	...

9000000008014000 <_merrentry>:
9000000008014000:	571ecbff 	bl	-57656(0xfff1ec8) # 9000000008005ec8 <machine_trap>
9000000008014004:	06483800 	ertn
	...
